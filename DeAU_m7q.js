import {
  N as Cr,
  q as Ct,
  u as Ne,
  x as Lr,
  y as di,
  z as Ns,
  A as io,
  B as kt,
  C as Os,
  G as ao,
  H as Ds,
  I as Dt,
  J as oo,
  K as ta,
  L as Rs,
  M as Ps,
  O as Ms,
  P as ks,
  Q as Bs,
  R as dn,
  S as Ls,
  T as pi,
  U as Fs,
  V as Us,
  W as Vs,
  _ as rt,
  E as b,
  c as G,
  a as B,
  w as W,
  r as L,
  o as P,
  k as so,
  b as A,
  d as Ue,
  X as at,
  t as q,
  f as ge,
  g as j,
  D as zt,
  F as Rt,
  h as Sr,
  n as ir,
  e as rn,
  Y as co,
  v as vi,
  Z as Gs,
  $ as ra,
  a0 as Hs,
  s as Pt,
  i as Pe,
  a1 as Xs,
  a2 as zs,
  a3 as js,
  a4 as Ws,
  a5 as $s,
  a6 as Js,
  a7 as qs,
} from '../assets/app-BjImoLrr.js';
import { R as Ys, C as Ks } from './ByjoIpeJ.js';
import lo from './RYtnNTLe.js';
import { d as Zs } from './Nw-Fho2_.js';
import { h as pn } from './CKKuZvVl.js';
import { v as gi } from './A0nBLeas.js';
import { i as Qs } from './BWJp0flw.js';
import { d as ec } from './DF3-5v4V.js';
import { P as tc } from './C5NBkq6J.js';
import { M as rc } from './C_TwHcPq.js';
import { a as nc, p as ic } from './BE-o_Nq3.js';
import { t as ac } from './TBQMNe9g.js';
import { s as oc } from './DzLe_4Zq.js';
import { S as fo } from './WRQmD3F4.js';
import { M as sc } from './CFn9I8-1.js';
import { d as cc } from './BO3nq0Hp.js';
import { m as lc } from './2cVHo3u0.js';
import { M as fc } from './bldII2NI.js';
import uc from './DEdfVzPD.js';
/* empty css                    */
import './D_eyCAsX.js';
import './BKAIn2gq.js';
import './D6qTVqbk.js';
import './_g7TwrEi.js';
import './CuxdB7hV.js';
import './B5OkKPxd.js';
import './zC887B9y.js';
import './CIZo99Uw.js';
import './CstnyyMp.js';
import './DrOYtW4t.js';
import './SUr2wc-1.js';
import './JzGXi_4H.js';
import './DvWiUwH6.js';
import './DZOApFs4.js';
import './CHw12MFN.js';
import './BP7xgnSt.js';
import './sKBcFuym.js';
import './ZS-VIFna.js';
import './BzXjulcJ.js';
import './TDtrdbi3.js';
import './C3YRlhOp.js';
import './CUvLZwvz.js';
/* empty css        */
/* empty css        */
import './B4PstBc0.js';
import './CLQ8a77M.js';
import './DmX3Ojbe.js';
import './Brc4hCJ1.js';
import './DstRLUzo.js';
import './Bkrrmzy7.js';
import './nNzkQ-aO.js';
import './CbXSr5JG.js';
import './xWacEG2R.js';
import './B5KTBX2n.js';
import './CeaU_JMC.js';
import './BCTXnxKj.js';
import './BpLTBrfQ.js';
import './H3zXViHv.js';
import './DaYfaWMA.js';
import './DCpD_GCz.js';
import './n40XSbeV.js';
import './DZVEBx5W.js';
import './D9nDGEOM.js';
import './DA4v7aaJ.js';
import './BMaWf-ez.js';
import './wEjpbi8z.js';
import './D_HAulZl.js';
import './CVJE_o7E.js';
/* empty css        */
import './DW8VaA28.js';
import './Dh-oEpRI.js';
import './CAT-EROW.js';
import './BNlbYZgu.js';
import './CQdHcCda.js';
import './Sxq1Sr0a.js';
import './DvAJeiZU.js';
import './DYOpm8-c.js';
import './PMMXLX9y.js';
import './ByW0q12v.js';
var Wr = { exports: {} };
var kn = { exports: {} };
var Bn = {};
const or = Symbol('');
const ar = Symbol('');
const vn = Symbol('');
const Ar = Symbol('');
const _i = Symbol('');
const Ut = Symbol('');
const mi = Symbol('');
const xi = Symbol('');
const gn = Symbol('');
const _n = Symbol('');
const dr = Symbol('');
const mn = Symbol('');
const yi = Symbol('');
const xn = Symbol('');
const yn = Symbol('');
const wn = Symbol('');
const En = Symbol('');
const Cn = Symbol('');
const Sn = Symbol('');
const wi = Symbol('');
const Ei = Symbol('');
const Dr = Symbol('');
const Ir = Symbol('');
const An = Symbol('');
const In = Symbol('');
const sr = Symbol('');
const pr = Symbol('');
const Tn = Symbol('');
const nn = Symbol('');
const uo = Symbol('');
const an = Symbol('');
const Tr = Symbol('');
const ho = Symbol('');
const po = Symbol('');
const bn = Symbol('');
const vo = Symbol('');
const go = Symbol('');
const Nn = Symbol('');
const Ci = Symbol('');
const qt = {
  [or]: 'Fragment',
  [ar]: 'Teleport',
  [vn]: 'Suspense',
  [Ar]: 'KeepAlive',
  [_i]: 'BaseTransition',
  [Ut]: 'openBlock',
  [mi]: 'createBlock',
  [xi]: 'createElementBlock',
  [gn]: 'createVNode',
  [_n]: 'createElementVNode',
  [dr]: 'createCommentVNode',
  [mn]: 'createTextVNode',
  [yi]: 'createStaticVNode',
  [xn]: 'resolveComponent',
  [yn]: 'resolveDynamicComponent',
  [wn]: 'resolveDirective',
  [En]: 'resolveFilter',
  [Cn]: 'withDirectives',
  [Sn]: 'renderList',
  [wi]: 'renderSlot',
  [Ei]: 'createSlots',
  [Dr]: 'toDisplayString',
  [Ir]: 'mergeProps',
  [An]: 'normalizeClass',
  [In]: 'normalizeStyle',
  [sr]: 'normalizeProps',
  [pr]: 'guardReactiveProps',
  [Tn]: 'toHandlers',
  [nn]: 'camelize',
  [uo]: 'capitalize',
  [an]: 'toHandlerKey',
  [Tr]: 'setBlockTracking',
  [ho]: 'pushScopeId',
  [po]: 'popScopeId',
  [bn]: 'withCtx',
  [vo]: 'unref',
  [go]: 'isRef',
  [Nn]: 'withMemo',
  [Ci]: 'isMemoSame',
};
function _o(t) {
  Object.getOwnPropertySymbols(t).forEach((e) => {
    qt[e] = t[e];
  });
}
const hc = {
  HTML: 0,
  0: 'HTML',
  SVG: 1,
  1: 'SVG',
  MATH_ML: 2,
  2: 'MATH_ML',
};
const dc = {
  ROOT: 0,
  0: 'ROOT',
  ELEMENT: 1,
  1: 'ELEMENT',
  TEXT: 2,
  2: 'TEXT',
  COMMENT: 3,
  3: 'COMMENT',
  SIMPLE_EXPRESSION: 4,
  4: 'SIMPLE_EXPRESSION',
  INTERPOLATION: 5,
  5: 'INTERPOLATION',
  ATTRIBUTE: 6,
  6: 'ATTRIBUTE',
  DIRECTIVE: 7,
  7: 'DIRECTIVE',
  COMPOUND_EXPRESSION: 8,
  8: 'COMPOUND_EXPRESSION',
  IF: 9,
  9: 'IF',
  IF_BRANCH: 10,
  10: 'IF_BRANCH',
  FOR: 11,
  11: 'FOR',
  TEXT_CALL: 12,
  12: 'TEXT_CALL',
  VNODE_CALL: 13,
  13: 'VNODE_CALL',
  JS_CALL_EXPRESSION: 14,
  14: 'JS_CALL_EXPRESSION',
  JS_OBJECT_EXPRESSION: 15,
  15: 'JS_OBJECT_EXPRESSION',
  JS_PROPERTY: 16,
  16: 'JS_PROPERTY',
  JS_ARRAY_EXPRESSION: 17,
  17: 'JS_ARRAY_EXPRESSION',
  JS_FUNCTION_EXPRESSION: 18,
  18: 'JS_FUNCTION_EXPRESSION',
  JS_CONDITIONAL_EXPRESSION: 19,
  19: 'JS_CONDITIONAL_EXPRESSION',
  JS_CACHE_EXPRESSION: 20,
  20: 'JS_CACHE_EXPRESSION',
  JS_BLOCK_STATEMENT: 21,
  21: 'JS_BLOCK_STATEMENT',
  JS_TEMPLATE_LITERAL: 22,
  22: 'JS_TEMPLATE_LITERAL',
  JS_IF_STATEMENT: 23,
  23: 'JS_IF_STATEMENT',
  JS_ASSIGNMENT_EXPRESSION: 24,
  24: 'JS_ASSIGNMENT_EXPRESSION',
  JS_SEQUENCE_EXPRESSION: 25,
  25: 'JS_SEQUENCE_EXPRESSION',
  JS_RETURN_STATEMENT: 26,
  26: 'JS_RETURN_STATEMENT',
};
const pc = {
  ELEMENT: 0,
  0: 'ELEMENT',
  COMPONENT: 1,
  1: 'COMPONENT',
  SLOT: 2,
  2: 'SLOT',
  TEMPLATE: 3,
  3: 'TEMPLATE',
};
const vc = {
  NOT_CONSTANT: 0,
  0: 'NOT_CONSTANT',
  CAN_SKIP_PATCH: 1,
  1: 'CAN_SKIP_PATCH',
  CAN_CACHE: 2,
  2: 'CAN_CACHE',
  CAN_STRINGIFY: 3,
  3: 'CAN_STRINGIFY',
};
const Oe = {
  start: {
    line: 1,
    column: 1,
    offset: 0,
  },
  end: {
    line: 1,
    column: 1,
    offset: 0,
  },
  source: '',
};
function mo(t, e = '') {
  return {
    type: 0,
    source: e,
    children: t,
    helpers: new Set(),
    components: [],
    directives: [],
    hoists: [],
    imports: [],
    cached: [],
    temps: 0,
    codegenNode: void 0,
    loc: Oe,
  };
}
function cr(t, e, r, n, i, a, o, s = false, c = false, l = false, f = Oe) {
  if (t) {
    s ? (t.helper(Ut), t.helper(Zt(t.inSSR, l))) : t.helper(Kt(t.inSSR, l));
    if (o) {
      t.helper(Cn);
    }
  }
  return {
    type: 13,
    tag: e,
    props: r,
    children: n,
    patchFlag: i,
    dynamicProps: a,
    directives: o,
    isBlock: s,
    disableTracking: c,
    isComponent: l,
    loc: f,
  };
}
function Bt(t, e = Oe) {
  return {
    type: 17,
    loc: e,
    elements: t,
  };
}
function ot(t, e = Oe) {
  return {
    type: 15,
    loc: e,
    properties: t,
  };
}
function we(t, e) {
  return {
    type: 16,
    loc: Oe,
    key: Ne(t) ? Y(t, true) : t,
    value: e,
  };
}
function Y(t, e = false, r = Oe, n = 0) {
  return {
    type: 4,
    loc: r,
    content: t,
    isStatic: e,
    constType: e ? 3 : n,
  };
}
function gc(t, e) {
  return {
    type: 5,
    loc: e,
    content: Ne(t) ? Y(t, false, e) : t,
  };
}
function ft(t, e = Oe) {
  return {
    type: 8,
    loc: e,
    children: t,
  };
}
function Ee(t, e = [], r = Oe) {
  return {
    type: 14,
    loc: r,
    callee: t,
    arguments: e,
  };
}
function Yt(t, e = void 0, r = false, n = false, i = Oe) {
  return {
    type: 18,
    params: t,
    returns: e,
    newline: r,
    isSlot: n,
    loc: i,
  };
}
function on(t, e, r, n = true) {
  return {
    type: 19,
    test: t,
    consequent: e,
    alternate: r,
    newline: n,
    loc: Oe,
  };
}
function xo(t, e, r = false, n = false) {
  return {
    type: 20,
    index: t,
    value: e,
    needPauseTracking: r,
    inVOnce: n,
    needArraySpread: false,
    loc: Oe,
  };
}
function yo(t) {
  return {
    type: 21,
    body: t,
    loc: Oe,
  };
}
function _c(t) {
  return {
    type: 22,
    elements: t,
    loc: Oe,
  };
}
function mc(t, e, r) {
  return {
    type: 23,
    test: t,
    consequent: e,
    alternate: r,
    loc: Oe,
  };
}
function xc(t, e) {
  return {
    type: 24,
    left: t,
    right: e,
    loc: Oe,
  };
}
function yc(t) {
  return {
    type: 25,
    expressions: t,
    loc: Oe,
  };
}
function wc(t) {
  return {
    type: 26,
    returns: t,
    loc: Oe,
  };
}
function Kt(t, e) {
  return t || e ? gn : _n;
}
function Zt(t, e) {
  return t || e ? mi : xi;
}
function On(t, { helper: e, removeHelper: r, inSSR: n }) {
  if (!t.isBlock) {
    t.isBlock = true;
    r(Kt(n, t.isComponent));
    e(Ut);
    e(Zt(n, t.isComponent));
  }
}
const na = new Uint8Array([123, 123]);
const ia = new Uint8Array([125, 125]);
function aa(t) {
  return (t >= 97 && t <= 122) || (t >= 65 && t <= 90);
}
function it(t) {
  return t === 32 || t === 10 || t === 9 || t === 12 || t === 13;
}
function It(t) {
  return t === 47 || t === 62 || it(t);
}
function sn(t) {
  const e = new Uint8Array(t.length);
  for (let r = 0; r < t.length; r++) e[r] = t.charCodeAt(r);
  return e;
}
const Ge = {
  Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
  CdataEnd: new Uint8Array([93, 93, 62]),
  CommentEnd: new Uint8Array([45, 45, 62]),
  ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
  StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
  TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101]),
  TextareaEnd: new Uint8Array([60, 47, 116, 101, 120, 116, 97, 114, 101, 97]),
};
class Ec {
  constructor(e, r) {
    this.stack = e;
    this.cbs = r;
    this.state = 1;
    this.buffer = '';
    this.sectionStart = 0;
    this.index = 0;
    this.entityStart = 0;
    this.baseState = 1;
    this.inRCDATA = false;
    this.inXML = false;
    this.inVPre = false;
    this.newlines = [];
    this.mode = 0;
    this.delimiterOpen = na;
    this.delimiterClose = ia;
    this.delimiterIndex = -1;
    this.currentSequence = void 0;
    this.sequenceIndex = 0;
  }
  get inSFCRoot() {
    return this.mode === 2 && this.stack.length === 0;
  }
  reset() {
    this.state = 1;
    this.mode = 0;
    this.buffer = '';
    this.sectionStart = 0;
    this.index = 0;
    this.baseState = 1;
    this.inRCDATA = false;
    this.currentSequence = void 0;
    this.newlines.length = 0;
    this.delimiterOpen = na;
    this.delimiterClose = ia;
  }
  getPos(e) {
    let r = 1;
    let n = e + 1;
    for (let i = this.newlines.length - 1; i >= 0; i--) {
      const a = this.newlines[i];
      if (e > this.newlines[i]) {
        r = i + 2;
        n = e - this.newlines[i];
        break;
      }
    }
    return {
      column: n,
      line: r,
      offset: e,
    };
  }
  peek() {
    return this.buffer.charCodeAt(this.index + 1);
  }
  stateText(e) {
    e === 60
      ? (this.index > this.sectionStart && this.cbs.ontext(this.sectionStart, this.index),
        (this.state = 5),
        (this.sectionStart = this.index))
      : !this.inVPre &&
        e === this.delimiterOpen[0] &&
        ((this.state = 2), (this.delimiterIndex = 0), this.stateInterpolationOpen(e));
  }
  stateInterpolationOpen(e) {
    if (e === this.delimiterOpen[this.delimiterIndex])
      if (this.delimiterIndex === this.delimiterOpen.length - 1) {
        const r = this.index + 1 - this.delimiterOpen.length;
        if (r > this.sectionStart) {
          this.cbs.ontext(this.sectionStart, r);
        }
        this.state = 3;
        this.sectionStart = r;
      } else this.delimiterIndex++;
    else this.inRCDATA ? ((this.state = 32), this.stateInRCDATA(e)) : ((this.state = 1), this.stateText(e));
  }
  stateInterpolation(e) {
    if (e === this.delimiterClose[0]) {
      this.state = 4;
      this.delimiterIndex = 0;
      this.stateInterpolationClose(e);
    }
  }
  stateInterpolationClose(e) {
    e === this.delimiterClose[this.delimiterIndex]
      ? this.delimiterIndex === this.delimiterClose.length - 1
        ? (this.cbs.oninterpolation(this.sectionStart, this.index + 1),
          this.inRCDATA ? (this.state = 32) : (this.state = 1),
          (this.sectionStart = this.index + 1))
        : this.delimiterIndex++
      : ((this.state = 3), this.stateInterpolation(e));
  }
  stateSpecialStartSequence(e) {
    const r = this.sequenceIndex === this.currentSequence.length;
    if (!(r ? It(e) : (e | 32) === this.currentSequence[this.sequenceIndex])) this.inRCDATA = false;
    else if (!r) {
      this.sequenceIndex++;
      return;
    }
    this.sequenceIndex = 0;
    this.state = 6;
    this.stateInTagName(e);
  }
  stateInRCDATA(e) {
    if (this.sequenceIndex === this.currentSequence.length) {
      if (e === 62 || it(e)) {
        const r = this.index - this.currentSequence.length;
        if (this.sectionStart < r) {
          const n = this.index;
          this.index = r;
          this.cbs.ontext(this.sectionStart, r);
          this.index = this.index;
        }
        this.sectionStart = r + 2;
        this.stateInClosingTagName(e);
        this.inRCDATA = false;
        return;
      }
      this.sequenceIndex = 0;
    }
    (e | 32) === this.currentSequence[this.sequenceIndex]
      ? (this.sequenceIndex += 1)
      : this.sequenceIndex === 0
        ? this.currentSequence === Ge.TitleEnd || (this.currentSequence === Ge.TextareaEnd && !this.inSFCRoot)
          ? !this.inVPre &&
            e === this.delimiterOpen[0] &&
            ((this.state = 2), (this.delimiterIndex = 0), this.stateInterpolationOpen(e))
          : this.fastForwardTo(60) && (this.sequenceIndex = 1)
        : (this.sequenceIndex = +(e === 60));
  }
  stateCDATASequence(e) {
    e === Ge.Cdata[this.sequenceIndex]
      ? ++this.sequenceIndex === Ge.Cdata.length &&
        ((this.state = 28),
        (this.currentSequence = Ge.CdataEnd),
        (this.sequenceIndex = 0),
        (this.sectionStart = this.index + 1))
      : ((this.sequenceIndex = 0), (this.state = 23), this.stateInDeclaration(e));
  }
  fastForwardTo(e) {
    for (; ++this.index < this.buffer.length; ) {
      const r = this.buffer.charCodeAt(this.index);
      if (r === 10) {
        this.newlines.push(this.index);
      }
      if (r === e) return true;
    }
    this.index = this.buffer.length - 1;
    return false;
  }
  stateInCommentLike(e) {
    e === this.currentSequence[this.sequenceIndex]
      ? ++this.sequenceIndex === this.currentSequence.length &&
        (this.currentSequence === Ge.CdataEnd
          ? this.cbs.oncdata(this.sectionStart, this.index - 2)
          : this.cbs.oncomment(this.sectionStart, this.index - 2),
        (this.sequenceIndex = 0),
        (this.sectionStart = this.index + 1),
        (this.state = 1))
      : this.sequenceIndex === 0
        ? this.fastForwardTo(this.currentSequence[0]) && (this.sequenceIndex = 1)
        : e !== this.currentSequence[this.sequenceIndex - 1] && (this.sequenceIndex = 0);
  }
  startSpecial(e, r) {
    this.enterRCDATA(e, r);
    this.state = 31;
  }
  enterRCDATA(e, r) {
    this.inRCDATA = true;
    this.currentSequence = e;
    this.sequenceIndex = r;
  }
  stateBeforeTagName(e) {
    e === 33
      ? ((this.state = 22), (this.sectionStart = this.index + 1))
      : e === 63
        ? ((this.state = 24), (this.sectionStart = this.index + 1))
        : aa(e)
          ? ((this.sectionStart = this.index),
            this.mode === 0
              ? (this.state = 6)
              : this.inSFCRoot
                ? (this.state = 34)
                : this.inXML
                  ? (this.state = 6)
                  : e === 116
                    ? (this.state = 30)
                    : (this.state = e === 115 ? 29 : 6))
          : e === 47
            ? (this.state = 8)
            : ((this.state = 1), this.stateText(e));
  }
  stateInTagName(e) {
    if (It(e)) {
      this.handleTagName(e);
    }
  }
  stateInSFCRootTagName(e) {
    if (It(e)) {
      const r = this.buffer.slice(this.sectionStart, this.index);
      if (r !== 'template') {
        this.enterRCDATA(sn('</' + r), 0);
      }
      this.handleTagName(e);
    }
  }
  handleTagName(e) {
    this.cbs.onopentagname(this.sectionStart, this.index);
    this.sectionStart = -1;
    this.state = 11;
    this.stateBeforeAttrName(e);
  }
  stateBeforeClosingTagName(e) {
    if (!it(e)) {
      e === 62
        ? ((this.state = 1), (this.sectionStart = this.index + 1))
        : ((this.state = aa(e) ? 9 : 27), (this.sectionStart = this.index));
    }
  }
  stateInClosingTagName(e) {
    if (e === 62 || it(e)) {
      this.cbs.onclosetag(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.state = 10;
      this.stateAfterClosingTagName(e);
    }
  }
  stateAfterClosingTagName(e) {
    if (e === 62) {
      this.state = 1;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeAttrName(e) {
    e === 62
      ? (this.cbs.onopentagend(this.index),
        this.inRCDATA ? (this.state = 32) : (this.state = 1),
        (this.sectionStart = this.index + 1))
      : e === 47
        ? (this.state = 7)
        : e === 60 && this.peek() === 47
          ? (this.cbs.onopentagend(this.index), (this.state = 5), (this.sectionStart = this.index))
          : it(e) || this.handleAttrStart(e);
  }
  handleAttrStart(e) {
    e === 118 && this.peek() === 45
      ? ((this.state = 13), (this.sectionStart = this.index))
      : e === 46 || e === 58 || e === 64 || e === 35
        ? (this.cbs.ondirname(this.index, this.index + 1), (this.state = 14), (this.sectionStart = this.index + 1))
        : ((this.state = 12), (this.sectionStart = this.index));
  }
  stateInSelfClosingTag(e) {
    e === 62
      ? (this.cbs.onselfclosingtag(this.index),
        (this.state = 1),
        (this.sectionStart = this.index + 1),
        (this.inRCDATA = false))
      : it(e) || ((this.state = 11), this.stateBeforeAttrName(e));
  }
  stateInAttrName(e) {
    if (e === 61 || It(e)) {
      this.cbs.onattribname(this.sectionStart, this.index);
      this.handleAttrNameEnd(e);
    }
  }
  stateInDirName(e) {
    e === 61 || It(e)
      ? (this.cbs.ondirname(this.sectionStart, this.index), this.handleAttrNameEnd(e))
      : e === 58
        ? (this.cbs.ondirname(this.sectionStart, this.index), (this.state = 14), (this.sectionStart = this.index + 1))
        : e === 46 &&
          (this.cbs.ondirname(this.sectionStart, this.index), (this.state = 16), (this.sectionStart = this.index + 1));
  }
  stateInDirArg(e) {
    e === 61 || It(e)
      ? (this.cbs.ondirarg(this.sectionStart, this.index), this.handleAttrNameEnd(e))
      : e === 91
        ? (this.state = 15)
        : e === 46 &&
          (this.cbs.ondirarg(this.sectionStart, this.index), (this.state = 16), (this.sectionStart = this.index + 1));
  }
  stateInDynamicDirArg(e) {
    e === 93
      ? (this.state = 14)
      : (e === 61 || It(e)) && (this.cbs.ondirarg(this.sectionStart, this.index + 1), this.handleAttrNameEnd(e));
  }
  stateInDirModifier(e) {
    e === 61 || It(e)
      ? (this.cbs.ondirmodifier(this.sectionStart, this.index), this.handleAttrNameEnd(e))
      : e === 46 && (this.cbs.ondirmodifier(this.sectionStart, this.index), (this.sectionStart = this.index + 1));
  }
  handleAttrNameEnd(e) {
    this.sectionStart = this.index;
    this.state = 17;
    this.cbs.onattribnameend(this.index);
    this.stateAfterAttrName(e);
  }
  stateAfterAttrName(e) {
    e === 61
      ? (this.state = 18)
      : e === 47 || e === 62
        ? (this.cbs.onattribend(0, this.sectionStart),
          (this.sectionStart = -1),
          (this.state = 11),
          this.stateBeforeAttrName(e))
        : it(e) || (this.cbs.onattribend(0, this.sectionStart), this.handleAttrStart(e));
  }
  stateBeforeAttrValue(e) {
    e === 34
      ? ((this.state = 19), (this.sectionStart = this.index + 1))
      : e === 39
        ? ((this.state = 20), (this.sectionStart = this.index + 1))
        : it(e) || ((this.sectionStart = this.index), (this.state = 21), this.stateInAttrValueNoQuotes(e));
  }
  handleInAttrValue(e, r) {
    if (e === r || this.fastForwardTo(r)) {
      this.cbs.onattribdata(this.sectionStart, this.index);
      this.sectionStart = -1;
      this.cbs.onattribend(r === 34 ? 3 : 2, this.index + 1);
      this.state = 11;
    }
  }
  stateInAttrValueDoubleQuotes(e) {
    this.handleInAttrValue(e, 34);
  }
  stateInAttrValueSingleQuotes(e) {
    this.handleInAttrValue(e, 39);
  }
  stateInAttrValueNoQuotes(e) {
    it(e) || e === 62
      ? (this.cbs.onattribdata(this.sectionStart, this.index),
        (this.sectionStart = -1),
        this.cbs.onattribend(1, this.index),
        (this.state = 11),
        this.stateBeforeAttrName(e))
      : (e === 39 || e === 60 || e === 61 || e === 96) && this.cbs.onerr(18, this.index);
  }
  stateBeforeDeclaration(e) {
    e === 91 ? ((this.state = 26), (this.sequenceIndex = 0)) : (this.state = e === 45 ? 25 : 23);
  }
  stateInDeclaration(e) {
    if (e === 62 || this.fastForwardTo(62)) {
      this.state = 1;
      this.sectionStart = this.index + 1;
    }
  }
  stateInProcessingInstruction(e) {
    if (e === 62 || this.fastForwardTo(62)) {
      this.cbs.onprocessinginstruction(this.sectionStart, this.index);
      this.state = 1;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeComment(e) {
    e === 45
      ? ((this.state = 28),
        (this.currentSequence = Ge.CommentEnd),
        (this.sequenceIndex = 2),
        (this.sectionStart = this.index + 1))
      : (this.state = 23);
  }
  stateInSpecialComment(e) {
    if (e === 62 || this.fastForwardTo(62)) {
      this.cbs.oncomment(this.sectionStart, this.index);
      this.state = 1;
      this.sectionStart = this.index + 1;
    }
  }
  stateBeforeSpecialS(e) {
    e === Ge.ScriptEnd[3]
      ? this.startSpecial(Ge.ScriptEnd, 4)
      : e === Ge.StyleEnd[3]
        ? this.startSpecial(Ge.StyleEnd, 4)
        : ((this.state = 6), this.stateInTagName(e));
  }
  stateBeforeSpecialT(e) {
    e === Ge.TitleEnd[3]
      ? this.startSpecial(Ge.TitleEnd, 4)
      : e === Ge.TextareaEnd[3]
        ? this.startSpecial(Ge.TextareaEnd, 4)
        : ((this.state = 6), this.stateInTagName(e));
  }
  startEntity() {}
  stateInEntity() {}
  parse(e) {
    for (this.buffer = e; this.index < this.buffer.length; ) {
      const r = this.buffer.charCodeAt(this.index);
      switch ((r === 10 && this.state !== 33 && this.newlines.push(this.index), this.state)) {
        case 1: {
          this.stateText(r);
          break;
        }
        case 2: {
          this.stateInterpolationOpen(r);
          break;
        }
        case 3: {
          this.stateInterpolation(r);
          break;
        }
        case 4: {
          this.stateInterpolationClose(r);
          break;
        }
        case 31: {
          this.stateSpecialStartSequence(r);
          break;
        }
        case 32: {
          this.stateInRCDATA(r);
          break;
        }
        case 26: {
          this.stateCDATASequence(r);
          break;
        }
        case 19: {
          this.stateInAttrValueDoubleQuotes(r);
          break;
        }
        case 12: {
          this.stateInAttrName(r);
          break;
        }
        case 13: {
          this.stateInDirName(r);
          break;
        }
        case 14: {
          this.stateInDirArg(r);
          break;
        }
        case 15: {
          this.stateInDynamicDirArg(r);
          break;
        }
        case 16: {
          this.stateInDirModifier(r);
          break;
        }
        case 28: {
          this.stateInCommentLike(r);
          break;
        }
        case 27: {
          this.stateInSpecialComment(r);
          break;
        }
        case 11: {
          this.stateBeforeAttrName(r);
          break;
        }
        case 6: {
          this.stateInTagName(r);
          break;
        }
        case 34: {
          this.stateInSFCRootTagName(r);
          break;
        }
        case 9: {
          this.stateInClosingTagName(r);
          break;
        }
        case 5: {
          this.stateBeforeTagName(r);
          break;
        }
        case 17: {
          this.stateAfterAttrName(r);
          break;
        }
        case 20: {
          this.stateInAttrValueSingleQuotes(r);
          break;
        }
        case 18: {
          this.stateBeforeAttrValue(r);
          break;
        }
        case 8: {
          this.stateBeforeClosingTagName(r);
          break;
        }
        case 10: {
          this.stateAfterClosingTagName(r);
          break;
        }
        case 29: {
          this.stateBeforeSpecialS(r);
          break;
        }
        case 30: {
          this.stateBeforeSpecialT(r);
          break;
        }
        case 21: {
          this.stateInAttrValueNoQuotes(r);
          break;
        }
        case 7: {
          this.stateInSelfClosingTag(r);
          break;
        }
        case 23: {
          this.stateInDeclaration(r);
          break;
        }
        case 22: {
          this.stateBeforeDeclaration(r);
          break;
        }
        case 25: {
          this.stateBeforeComment(r);
          break;
        }
        case 24: {
          this.stateInProcessingInstruction(r);
          break;
        }
        case 33: {
          this.stateInEntity();
          break;
        }
      }
      this.index++;
    }
    this.cleanup();
    this.finish();
  }
  cleanup() {
    if (this.sectionStart !== this.index) {
      this.state === 1 || (this.state === 32 && this.sequenceIndex === 0)
        ? (this.cbs.ontext(this.sectionStart, this.index), (this.sectionStart = this.index))
        : (this.state === 19 || this.state === 20 || this.state === 21) &&
          (this.cbs.onattribdata(this.sectionStart, this.index), (this.sectionStart = this.index));
    }
  }
  finish() {
    this.handleTrailingData();
    this.cbs.onend();
  }
  handleTrailingData() {
    const e = this.buffer.length;
    if (!(this.sectionStart >= this.buffer.length)) {
      this.state === 28
        ? this.currentSequence === Ge.CdataEnd
          ? this.cbs.oncdata(this.sectionStart, this.buffer.length)
          : this.cbs.oncomment(this.sectionStart, this.buffer.length)
        : this.state === 6 ||
          this.state === 11 ||
          this.state === 18 ||
          this.state === 17 ||
          this.state === 12 ||
          this.state === 13 ||
          this.state === 14 ||
          this.state === 15 ||
          this.state === 16 ||
          this.state === 20 ||
          this.state === 19 ||
          this.state === 21 ||
          this.state === 9 ||
          this.cbs.ontext(this.sectionStart, this.buffer.length);
    }
  }
  emitCodePoint(e, r) {}
}
const Cc = {
  COMPILER_IS_ON_ELEMENT: 'COMPILER_IS_ON_ELEMENT',
  COMPILER_V_BIND_SYNC: 'COMPILER_V_BIND_SYNC',
  COMPILER_V_BIND_OBJECT_ORDER: 'COMPILER_V_BIND_OBJECT_ORDER',
  COMPILER_V_ON_NATIVE: 'COMPILER_V_ON_NATIVE',
  COMPILER_V_IF_V_FOR_PRECEDENCE: 'COMPILER_V_IF_V_FOR_PRECEDENCE',
  COMPILER_NATIVE_TEMPLATE: 'COMPILER_NATIVE_TEMPLATE',
  COMPILER_INLINE_TEMPLATE: 'COMPILER_INLINE_TEMPLATE',
  COMPILER_FILTERS: 'COMPILER_FILTERS',
};
const Sc = {
  COMPILER_IS_ON_ELEMENT: {
    message:
      'Platform-native elements with "is" prop will no longer be treated as components in Vue 3 unless the "is" value is explicitly prefixed with "vue:".',
    link: 'https://v3-migration.vuejs.org/breaking-changes/custom-elements-interop.html',
  },
  COMPILER_V_BIND_SYNC: {
    message: (t) =>
      `.sync modifier for v-bind has been removed. Use v-model with argument instead. \`v-bind:${t}.sync\` should be changed to \`v-model:${t}\`.`,
    link: 'https://v3-migration.vuejs.org/breaking-changes/v-model.html',
  },
  COMPILER_V_BIND_OBJECT_ORDER: {
    message:
      'v-bind="obj" usage is now order sensitive and behaves like JavaScript object spread: it will now overwrite an existing non-mergeable attribute that appears before v-bind in the case of conflict. To retain 2.x behavior, move v-bind to make it the first attribute. You can also suppress this warning if the usage is intended.',
    link: 'https://v3-migration.vuejs.org/breaking-changes/v-bind.html',
  },
  COMPILER_V_ON_NATIVE: {
    message: '.native modifier for v-on has been removed as is no longer necessary.',
    link: 'https://v3-migration.vuejs.org/breaking-changes/v-on-native-modifier-removed.html',
  },
  COMPILER_V_IF_V_FOR_PRECEDENCE: {
    message:
      'v-if / v-for precedence when used on the same element has changed in Vue 3: v-if now takes higher precedence and will no longer have access to v-for scope variables. It is best to avoid the ambiguity with <template> tags or use a computed property that filters v-for data source.',
    link: 'https://v3-migration.vuejs.org/breaking-changes/v-if-v-for.html',
  },
  COMPILER_NATIVE_TEMPLATE: {
    message:
      '<template> with no special directives will render as a native template element instead of its inner content in Vue 3.',
  },
  COMPILER_INLINE_TEMPLATE: {
    message: '"inline-template" has been removed in Vue 3.',
    link: 'https://v3-migration.vuejs.org/breaking-changes/inline-template-attribute.html',
  },
  COMPILER_FILTERS: {
    message:
      'filters have been removed in Vue 3. The "|" symbol will be treated as native JavaScript bitwise OR operator. Use method calls or computed properties instead.',
    link: 'https://v3-migration.vuejs.org/breaking-changes/filters.html',
  },
};
function $n(t, { compatConfig: e }) {
  const r = e && e[t];
  return t === 'MODE' ? r || 3 : r;
}
function $t(t, e) {
  const r = $n('MODE', e);
  const n = $n(t, e);
  return r === 3 ? n === true : n !== false;
}
function lr(t, e, r, ...n) {
  return $t(t, e);
}
function Ac(t, e, r, ...n) {
  if ($n(t, e) === 'suppress-warning') return;
  const { message: a, link: o } = Sc[t];
  const s = `(deprecation ${t}) ${typeof a == 'function' ? a(...n) : a}${
    o
      ? `
  Details: ${o}`
      : ''
  }`;
  const c = new SyntaxError(s);
  c.code = t;
  if (r) {
    c.loc = r;
  }
  e.onWarn(c);
}
function Si(t) {
  throw t;
}
function wo(t) {}
function pe(t, e, r, n) {
  const i = `https://vuejs.org/error-reference/#compiler-${t}`;
  const a = new SyntaxError(String(i));
  a.code = t;
  a.loc = e;
  return a;
}
const Ic = {
  ABRUPT_CLOSING_OF_EMPTY_COMMENT: 0,
  0: 'ABRUPT_CLOSING_OF_EMPTY_COMMENT',
  CDATA_IN_HTML_CONTENT: 1,
  1: 'CDATA_IN_HTML_CONTENT',
  DUPLICATE_ATTRIBUTE: 2,
  2: 'DUPLICATE_ATTRIBUTE',
  END_TAG_WITH_ATTRIBUTES: 3,
  3: 'END_TAG_WITH_ATTRIBUTES',
  END_TAG_WITH_TRAILING_SOLIDUS: 4,
  4: 'END_TAG_WITH_TRAILING_SOLIDUS',
  EOF_BEFORE_TAG_NAME: 5,
  5: 'EOF_BEFORE_TAG_NAME',
  EOF_IN_CDATA: 6,
  6: 'EOF_IN_CDATA',
  EOF_IN_COMMENT: 7,
  7: 'EOF_IN_COMMENT',
  EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT: 8,
  8: 'EOF_IN_SCRIPT_HTML_COMMENT_LIKE_TEXT',
  EOF_IN_TAG: 9,
  9: 'EOF_IN_TAG',
  INCORRECTLY_CLOSED_COMMENT: 10,
  10: 'INCORRECTLY_CLOSED_COMMENT',
  INCORRECTLY_OPENED_COMMENT: 11,
  11: 'INCORRECTLY_OPENED_COMMENT',
  INVALID_FIRST_CHARACTER_OF_TAG_NAME: 12,
  12: 'INVALID_FIRST_CHARACTER_OF_TAG_NAME',
  MISSING_ATTRIBUTE_VALUE: 13,
  13: 'MISSING_ATTRIBUTE_VALUE',
  MISSING_END_TAG_NAME: 14,
  14: 'MISSING_END_TAG_NAME',
  MISSING_WHITESPACE_BETWEEN_ATTRIBUTES: 15,
  15: 'MISSING_WHITESPACE_BETWEEN_ATTRIBUTES',
  NESTED_COMMENT: 16,
  16: 'NESTED_COMMENT',
  UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME: 17,
  17: 'UNEXPECTED_CHARACTER_IN_ATTRIBUTE_NAME',
  UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE: 18,
  18: 'UNEXPECTED_CHARACTER_IN_UNQUOTED_ATTRIBUTE_VALUE',
  UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME: 19,
  19: 'UNEXPECTED_EQUALS_SIGN_BEFORE_ATTRIBUTE_NAME',
  UNEXPECTED_NULL_CHARACTER: 20,
  20: 'UNEXPECTED_NULL_CHARACTER',
  UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME: 21,
  21: 'UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME',
  UNEXPECTED_SOLIDUS_IN_TAG: 22,
  22: 'UNEXPECTED_SOLIDUS_IN_TAG',
  X_INVALID_END_TAG: 23,
  23: 'X_INVALID_END_TAG',
  X_MISSING_END_TAG: 24,
  24: 'X_MISSING_END_TAG',
  X_MISSING_INTERPOLATION_END: 25,
  25: 'X_MISSING_INTERPOLATION_END',
  X_MISSING_DIRECTIVE_NAME: 26,
  26: 'X_MISSING_DIRECTIVE_NAME',
  X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END: 27,
  27: 'X_MISSING_DYNAMIC_DIRECTIVE_ARGUMENT_END',
  X_V_IF_NO_EXPRESSION: 28,
  28: 'X_V_IF_NO_EXPRESSION',
  X_V_IF_SAME_KEY: 29,
  29: 'X_V_IF_SAME_KEY',
  X_V_ELSE_NO_ADJACENT_IF: 30,
  30: 'X_V_ELSE_NO_ADJACENT_IF',
  X_V_FOR_NO_EXPRESSION: 31,
  31: 'X_V_FOR_NO_EXPRESSION',
  X_V_FOR_MALFORMED_EXPRESSION: 32,
  32: 'X_V_FOR_MALFORMED_EXPRESSION',
  X_V_FOR_TEMPLATE_KEY_PLACEMENT: 33,
  33: 'X_V_FOR_TEMPLATE_KEY_PLACEMENT',
  X_V_BIND_NO_EXPRESSION: 34,
  34: 'X_V_BIND_NO_EXPRESSION',
  X_V_ON_NO_EXPRESSION: 35,
  35: 'X_V_ON_NO_EXPRESSION',
  X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET: 36,
  36: 'X_V_SLOT_UNEXPECTED_DIRECTIVE_ON_SLOT_OUTLET',
  X_V_SLOT_MIXED_SLOT_USAGE: 37,
  37: 'X_V_SLOT_MIXED_SLOT_USAGE',
  X_V_SLOT_DUPLICATE_SLOT_NAMES: 38,
  38: 'X_V_SLOT_DUPLICATE_SLOT_NAMES',
  X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN: 39,
  39: 'X_V_SLOT_EXTRANEOUS_DEFAULT_SLOT_CHILDREN',
  X_V_SLOT_MISPLACED: 40,
  40: 'X_V_SLOT_MISPLACED',
  X_V_MODEL_NO_EXPRESSION: 41,
  41: 'X_V_MODEL_NO_EXPRESSION',
  X_V_MODEL_MALFORMED_EXPRESSION: 42,
  42: 'X_V_MODEL_MALFORMED_EXPRESSION',
  X_V_MODEL_ON_SCOPE_VARIABLE: 43,
  43: 'X_V_MODEL_ON_SCOPE_VARIABLE',
  X_V_MODEL_ON_PROPS: 44,
  44: 'X_V_MODEL_ON_PROPS',
  X_INVALID_EXPRESSION: 45,
  45: 'X_INVALID_EXPRESSION',
  X_KEEP_ALIVE_INVALID_CHILDREN: 46,
  46: 'X_KEEP_ALIVE_INVALID_CHILDREN',
  X_PREFIX_ID_NOT_SUPPORTED: 47,
  47: 'X_PREFIX_ID_NOT_SUPPORTED',
  X_MODULE_MODE_NOT_SUPPORTED: 48,
  48: 'X_MODULE_MODE_NOT_SUPPORTED',
  X_CACHE_HANDLER_NOT_SUPPORTED: 49,
  49: 'X_CACHE_HANDLER_NOT_SUPPORTED',
  X_SCOPE_ID_NOT_SUPPORTED: 50,
  50: 'X_SCOPE_ID_NOT_SUPPORTED',
  X_VNODE_HOOKS: 51,
  51: 'X_VNODE_HOOKS',
  X_V_BIND_INVALID_SAME_NAME_ARGUMENT: 52,
  52: 'X_V_BIND_INVALID_SAME_NAME_ARGUMENT',
  __EXTEND_POINT__: 53,
  53: '__EXTEND_POINT__',
};
const Tc = {
  0: 'Illegal comment.',
  1: 'CDATA section is allowed only in XML context.',
  2: 'Duplicate attribute.',
  3: 'End tag cannot have attributes.',
  4: "Illegal '/' in tags.",
  5: 'Unexpected EOF in tag.',
  6: 'Unexpected EOF in CDATA section.',
  7: 'Unexpected EOF in comment.',
  8: 'Unexpected EOF in script.',
  9: 'Unexpected EOF in tag.',
  10: 'Incorrectly closed comment.',
  11: 'Incorrectly opened comment.',
  12: "Illegal tag name. Use '&lt;' to print '<'.",
  13: 'Attribute value was expected.',
  14: 'End tag name was expected.',
  15: 'Whitespace was expected.',
  16: "Unexpected '<!--' in comment.",
  17: `Attribute name cannot contain U+0022 ("), U+0027 ('), and U+003C (<).`,
  18: 'Unquoted attribute value cannot contain U+0022 ("), U+0027 (\'), U+003C (<), U+003D (=), and U+0060 (`).',
  19: "Attribute name cannot start with '='.",
  21: "'<?' is allowed only in XML context.",
  20: 'Unexpected null character.',
  22: "Illegal '/' in tags.",
  23: 'Invalid end tag.',
  24: 'Element is missing end tag.',
  25: 'Interpolation end sign was not found.',
  27: 'End bracket for dynamic directive argument was not found. Note that dynamic directive argument cannot contain spaces.',
  26: 'Legal directive name was expected.',
  28: 'v-if/v-else-if is missing expression.',
  29: 'v-if/else branches must use unique keys.',
  30: 'v-else/v-else-if has no adjacent v-if or v-else-if.',
  31: 'v-for is missing expression.',
  32: 'v-for has invalid expression.',
  33: '<template v-for> key should be placed on the <template> tag.',
  34: 'v-bind is missing expression.',
  52: 'v-bind with same-name shorthand only allows static argument.',
  35: 'v-on is missing expression.',
  36: 'Unexpected custom directive on <slot> outlet.',
  37: 'Mixed v-slot usage on both the component and nested <template>. When there are multiple named slots, all slots should use <template> syntax to avoid scope ambiguity.',
  38: 'Duplicate slot names found. ',
  39: 'Extraneous children found when component already has explicitly named default slot. These children will be ignored.',
  40: 'v-slot can only be used on components or <template> tags.',
  41: 'v-model is missing expression.',
  42: 'v-model value must be a valid JavaScript member expression.',
  43: 'v-model cannot be used on v-for or v-slot scope variables because they are not writable.',
  44: `v-model cannot be used on a prop, because local prop bindings are not writable.
Use a v-bind binding combined with a v-on listener that emits update:x event instead.`,
  45: 'Error parsing JavaScript expression: ',
  46: '<KeepAlive> expects exactly one child component.',
  51: '@vnode-* hooks in templates are no longer supported. Use the vue: prefix instead. For example, @vnode-mounted should be changed to @vue:mounted. @vnode-* hooks support has been removed in 3.4.',
  47: '"prefixIdentifiers" option is not supported in this build of compiler.',
  48: 'ES module mode is not supported in this build of compiler.',
  49: '"cacheHandlers" option is only supported when the "prefixIdentifiers" option is enabled.',
  50: '"scopeId" option is only supported in module mode.',
  53: '',
};
function bc(t, e, r = false, n = [], i = Object.create(null)) {}
function Nc(t, e, r) {
  return false;
}
function Oc(t, e) {
  if (t && (t.type === 'ObjectProperty' || t.type === 'ArrayPattern')) {
    let r = e.length;
    for (; r--; ) {
      const n = e[r];
      if (e[r].type === 'AssignmentExpression') return true;
      if (e[r].type !== 'ObjectProperty' && !e[r].type.endsWith('Pattern')) break;
    }
  }
  return false;
}
function Dc(t) {
  let e = t.length;
  for (; e--; ) {
    const r = t[e];
    if (t[e].type === 'NewExpression') return true;
    if (t[e].type !== 'MemberExpression') break;
  }
  return false;
}
function Rc(t, e) {
  for (const r of t.params) for (const n of _t(r)) e(n);
}
function Eo(t, e) {
  const r = t.type === 'SwitchCase' ? t.consequent : t.body;
  for (const n of r)
    if (n.type === 'VariableDeclaration') {
      if (n.declare) continue;
      for (const i of n.declarations) for (const a of _t(i.id)) e(a);
    } else if (n.type === 'FunctionDeclaration' || n.type === 'ClassDeclaration') {
      if (n.declare || !n.id) continue;
      e(n.id);
    } else Pc(n) ? Mc(n, true, e) : n.type === 'SwitchStatement' && kc(n, true, e);
}
function Pc(t) {
  return t.type === 'ForOfStatement' || t.type === 'ForInStatement' || t.type === 'ForStatement';
}
function Mc(t, e, r) {
  const n = t.type === 'ForStatement' ? t.init : t.left;
  if (n && n.type === 'VariableDeclaration' && (n.kind === 'var' ? e : !e))
    for (const i of n.declarations) for (const a of _t(i.id)) r(a);
}
function kc(t, e, r) {
  for (const n of t.cases) {
    for (const i of n.consequent)
      if (i.type === 'VariableDeclaration' && (i.kind === 'var' ? e : !e))
        for (const a of i.declarations) for (const o of _t(a.id)) r(o);
    Eo(n, r);
  }
}
function _t(t, e = []) {
  switch (t.type) {
    case 'Identifier':
      e.push(t);
      break;
    case 'MemberExpression':
      let r = t;
      for (; r.type === 'MemberExpression'; ) r = r.object;
      e.push(r);
      break;
    case 'ObjectPattern':
      for (const n of t.properties) n.type === 'RestElement' ? _t(n.argument, e) : _t(n.value, e);
      break;
    case 'ArrayPattern':
      t.elements.forEach((n) => {
        if (n) {
          _t(n, e);
        }
      });
      break;
    case 'RestElement':
      _t(t.argument, e);
      break;
    case 'AssignmentPattern':
      _t(t.left, e);
      break;
  }
  return e;
}
const Bc = (t) => /Function(?:Expression|Declaration)$|Method$/.test(t.type);
const Co = (t) => t && (t.type === 'ObjectProperty' || t.type === 'ObjectMethod') && !t.computed;
const Lc = (t, e) => Co(e) && e.key === t;
const So = [
  'TSAsExpression',
  'TSTypeAssertion',
  'TSNonNullExpression',
  'TSInstantiationExpression',
  'TSSatisfiesExpression',
];
function Ao(t) {
  return So.includes(t.type) ? Ao(t.expression) : t;
}
const Ye = (t) => t.type === 4 && t.isStatic;
function Ai(t) {
  switch (t) {
    case 'Teleport':
    case 'teleport':
      return ar;
    case 'Suspense':
    case 'suspense':
      return vn;
    case 'KeepAlive':
    case 'keep-alive':
      return Ar;
    case 'BaseTransition':
    case 'base-transition':
      return _i;
  }
}
const Fc = /^$|^\d|[^\$\w\xA0-\uFFFF]/;
const Rr = (t) => !Fc.test(t);
const Ii = /[A-Za-z_$\xA0-\uFFFF]/;
const Uc = /[\.\?\w$\xA0-\uFFFF]/;
const Vc = /\s+[.[]\s*|\s*[.[]\s+/g;
const Io = (t) => (t.type === 4 ? t.content : t.loc.source);
const To = (t) => {
  const e = Io(t)
    .trim()
    .replace(Vc, (s) => s.trim());
  let r = 0;
  let n = [];
  let i = 0;
  let a = 0;
  let o = null;
  for (let s = 0; s < e.length; s++) {
    const c = e.charAt(s);
    if (c === '[') {
      n.push(r);
      r = 1;
      i++;
    } else if (c === '(') {
      n.push(r);
      r = 2;
      a++;
    } else if (!(s === 0 ? Ii : Uc).test(c)) return false;
  }
  return !i && !a;
};
const Gc = Cr;
const Ti = To;
const Hc = /^\s*(?:async\s*)?(?:\([^)]*?\)|[\w$_]+)\s*(?::[^=]+)?=>|^\s*(?:async\s+)?function(?:\s+[\w$]+)?\s*\(/;
const bo = (t) => Hc.test(Io(t));
const Xc = Cr;
const No = bo;
function zc(t, e, r = e.length) {
  return Oo(
    {
      offset: t.offset,
      line: t.line,
      column: t.column,
    },
    e,
    r,
  );
}
function Oo(t, e, r = e.length) {
  let n = 0;
  let i = -1;
  for (let a = 0; a < r; a++)
    if (e.charCodeAt(a) === 10) {
      n++;
      i = a;
    }
  t.offset += r;
  t.line += n;
  t.column = i === -1 ? t.column + r : r - i;
  return t;
}
function jc(t, e) {
  if (!t) throw new Error(e || 'unexpected compiler condition');
}
function qe(t, e, r = false) {
  for (let n = 0; n < t.props.length; n++) {
    const i = t.props[n];
    if (t.props[n].type === 7 && (r || t.props[n].exp) && (Ne(e) ? t.props[n].name === e : e.test(t.props[n].name)))
      return t.props[n];
  }
}
function Pr(t, e, r = false, n = false) {
  for (let i = 0; i < t.props.length; i++) {
    const a = t.props[i];
    if (t.props[i].type === 6) {
      if (r) continue;
      if (t.props[i].name === e && (t.props[i].value || n)) return t.props[i];
    } else if (t.props[i].name === 'bind' && (t.props[i].exp || n) && Mt(t.props[i].arg, e)) return t.props[i];
  }
}
function Mt(t, e) {
  return !!(t && Ye(t) && t.content === e);
}
function Do(t) {
  return t.props.some((e) => e.type === 7 && e.name === 'bind' && (!e.arg || e.arg.type !== 4 || !e.arg.isStatic));
}
function $r(t) {
  return t.type === 5 || t.type === 2;
}
function Jn(t) {
  return t.type === 7 && t.name === 'pre';
}
function bi(t) {
  return t.type === 7 && t.name === 'slot';
}
function fr(t) {
  return t.type === 1 && t.tagType === 3;
}
function br(t) {
  return t.type === 1 && t.tagType === 2;
}
const Wc = new Set([sr, pr]);
function Ro(t, e = []) {
  if (t && !Ne(t) && t.type === 14) {
    const r = t.callee;
    if (!Ne(t.callee) && Wc.has(t.callee)) return Ro(t.arguments[0], e.concat(t));
  }
  return [t, e];
}
function Nr(t, e, r) {
  let n;
  let i = t.type === 13 ? t.props : t.arguments[2];
  let a = [];
  let o;
  if (i && !Ne(i) && i.type === 14) {
    const s = Ro(i);
    i = s[0];
    a = s[1];
    o = a[a.length - 1];
  }
  if (i == null || Ne(i)) n = ot([e]);
  else if (i.type === 14) {
    const s = i.arguments[0];
    !Ne(i.arguments[0]) && i.arguments[0].type === 15
      ? oa(e, i.arguments[0]) || i.arguments[0].properties.unshift(e)
      : i.callee === Tn
        ? (n = Ee(r.helper(Ir), [ot([e]), i]))
        : i.arguments.unshift(ot([e]));
    if (!n) {
      n = i;
    }
  } else
    i.type === 15
      ? (oa(e, i) || i.properties.unshift(e), (n = i))
      : ((n = Ee(r.helper(Ir), [ot([e]), i])), o && o.callee === pr && (o = a[a.length - 2]));
  t.type === 13 ? (o ? (o.arguments[0] = n) : (t.props = n)) : o ? (o.arguments[0] = n) : (t.arguments[2] = n);
}
function oa(t, e) {
  let r = false;
  if (t.key.type === 4) {
    const n = t.key.content;
    r = e.properties.some((i) => i.key.type === 4 && i.key.content === t.key.content);
  }
  return r;
}
function ur(t, e) {
  return `_${e}_${t.replace(/[^\w]/g, (r, n) => (r === '-' ? '_' : t.charCodeAt(n).toString()))}`;
}
function dt(t, e) {
  if (!t || Object.keys(e).length === 0) return false;
  switch (t.type) {
    case 1:
      for (let r = 0; r < t.props.length; r++) {
        const n = t.props[r];
        if (t.props[r].type === 7 && (dt(t.props[r].arg, e) || dt(t.props[r].exp, e))) return true;
      }
      return t.children.some((r) => dt(r, e));
    case 11:
      return dt(t.source, e) ? true : t.children.some((r) => dt(r, e));
    case 9:
      return t.branches.some((r) => dt(r, e));
    case 10:
      return dt(t.condition, e) ? true : t.children.some((r) => dt(r, e));
    case 4:
      return !t.isStatic && Rr(t.content) && !!e[t.content];
    case 8:
      return t.children.some((r) => ao(r) && dt(r, e));
    case 5:
    case 12:
      return dt(t.content, e);
    case 2:
    case 3:
    case 20:
      return false;
    default:
      return false;
  }
}
function Po(t) {
  return t.type === 14 && t.callee === Nn ? t.arguments[1].returns : t;
}
const Mo = /([\s\S]*?)\s+(?:in|of)\s+(\S[\s\S]*)/;
const ko = {
  parseMode: 'base',
  ns: 0,
  delimiters: ['{{', '}}'],
  getNamespace: () => 0,
  isVoidTag: Lr,
  isPreTag: Lr,
  isIgnoreNewlineTag: Lr,
  isCustomElement: Lr,
  onError: Si,
  onWarn: wo,
  comments: false,
  prefixIdentifiers: false,
};
let oe = ko;
let Or = null;
let St = '';
let Xe = null;
let Q = null;
let Qe = '';
let Et = -1;
let Ht = -1;
let Ni = 0;
let Nt = false;
let qn = null;
const ve = [];
const xe = new Ec(ve, {
  onerr: wt,
  ontext(t, e) {
    Fr(Fe(t, e), t, e);
  },
  ontextentity(t, e, r) {
    Fr(t, e, r);
  },
  oninterpolation(t, e) {
    if (Nt) return Fr(Fe(t, e), t, e);
    let r = t + xe.delimiterOpen.length;
    let n = e - xe.delimiterClose.length;
    for (; it(St.charCodeAt(r)); ) r++;
    for (; it(St.charCodeAt(n - 1)); ) n--;
    let i = Fe(r, n);
    if (i.includes('&')) {
      i = oe.decodeEntities(i, false);
    }
    Yn({
      type: 5,
      content: qr(i, false, ye(r, n)),
      loc: ye(t, e),
    });
  },
  onopentagname(t, e) {
    const r = Fe(t, e);
    Xe = {
      type: 1,
      tag: r,
      ns: oe.getNamespace(r, ve[0], oe.ns),
      tagType: 0,
      props: [],
      children: [],
      loc: ye(t - 1, e),
      codegenNode: void 0,
    };
  },
  onopentagend(t) {
    ca(t);
  },
  onclosetag(t, e) {
    const r = Fe(t, e);
    if (!oe.isVoidTag(r)) {
      let n = false;
      for (let i = 0; i < ve.length; i++)
        if (ve[i].tag.toLowerCase() === r.toLowerCase()) {
          n = true;
          if (i > 0) {
            wt(24, ve[0].loc.start.offset);
          }
          for (let o = 0; o <= i; o++) {
            const s = ve.shift();
            Jr(s, e, o < i);
          }
          break;
        }
      if (!n) {
        wt(23, Bo(t, 60));
      }
    }
  },
  onselfclosingtag(t) {
    const e = Xe.tag;
    Xe.isSelfClosing = true;
    ca(t);
    if (ve[0] && ve[0].tag === Xe.tag) {
      Jr(ve.shift(), t);
    }
  },
  onattribname(t, e) {
    Q = {
      type: 6,
      name: Fe(t, e),
      nameLoc: ye(t, e),
      value: void 0,
      loc: ye(t),
    };
  },
  ondirname(t, e) {
    const r = Fe(t, e);
    const n = r === '.' || r === ':' ? 'bind' : r === '@' ? 'on' : r === '#' ? 'slot' : r.slice(2);
    if (!Nt && n === '') {
      wt(26, t);
    }
    if (Nt || n === '')
      Q = {
        type: 6,
        name: r,
        nameLoc: ye(t, e),
        value: void 0,
        loc: ye(t),
      };
    else {
      Q = {
        type: 7,
        name: n,
        rawName: r,
        exp: void 0,
        arg: void 0,
        modifiers: r === '.' ? [Y('prop')] : [],
        loc: ye(t),
      };
      if (n === 'pre') {
        Nt = xe.inVPre = true;
        qn = Xe;
        const i = Xe.props;
        for (let a = 0; a < i.length; a++)
          if (i[a].type === 7) {
            i[a] = nl(i[a]);
          }
      }
    }
  },
  ondirarg(t, e) {
    if (t === e) return;
    const r = Fe(t, e);
    if (Nt && !Jn(Q)) {
      Q.name += r;
      jt(Q.nameLoc, e);
    } else {
      const n = r[0] !== '[';
      Q.arg = qr(n ? r : r.slice(1, -1), n, ye(t, e), n ? 3 : 0);
    }
  },
  ondirmodifier(t, e) {
    const r = Fe(t, e);
    if (Nt && !Jn(Q)) {
      Q.name += '.' + r;
      jt(Q.nameLoc, e);
    } else if (Q.name === 'slot') {
      const n = Q.arg;
      if (n) {
        n.content += '.' + r;
        jt(n.loc, e);
      }
    } else {
      const n = Y(r, true, ye(t, e));
      Q.modifiers.push(n);
    }
  },
  onattribdata(t, e) {
    Qe += Fe(t, e);
    if (Et < 0) {
      Et = t;
    }
    Ht = e;
  },
  onattribentity(t, e, r) {
    Qe += t;
    if (Et < 0) {
      Et = e;
    }
    Ht = r;
  },
  onattribnameend(t) {
    const e = Q.loc.start.offset;
    const r = Fe(Q.loc.start.offset, t);
    if (Q.type === 7) {
      Q.rawName = r;
    }
    if (Xe.props.some((n) => (n.type === 7 ? n.rawName : n.name) === r)) {
      wt(2, Q.loc.start.offset);
    }
  },
  onattribend(t, e) {
    if (Xe && Q) {
      jt(Q.loc, e);
      if (t !== 0) {
        if (Qe.includes('&')) {
          Qe = oe.decodeEntities(Qe, true);
        }
        if (Q.type === 6) {
          if (Q.name === 'class') {
            Qe = Fo(Qe).trim();
          }
          if (t === 1 && !Qe) {
            wt(13, e);
          }
          Q.value = {
            type: 2,
            content: Qe,
            loc: t === 1 ? ye(Et, Ht) : ye(Et - 1, Ht + 1),
          };
          if (xe.inSFCRoot && Xe.tag === 'template' && Q.name === 'lang' && Qe && Qe !== 'html') {
            xe.enterRCDATA(sn('</template'), 0);
          }
        } else {
          let r = 0;
          Q.exp = qr(Qe, false, ye(Et, Ht), 0, 0);
          if (Q.name === 'for') {
            Q.forParseResult = Jc(Q.exp);
          }
          let n = -1;
          if (
            Q.name === 'bind' &&
            (n = Q.modifiers.findIndex((i) => i.content === 'sync')) > -1 &&
            lr('COMPILER_V_BIND_SYNC', oe, Q.loc, Q.arg.loc.source)
          ) {
            Q.name = 'model';
            Q.modifiers.splice(n, 1);
          }
        }
      }
      if (Q.type !== 7 || Q.name !== 'pre') {
        Xe.props.push(Q);
      }
    }
    Qe = '';
    Et = Ht = -1;
  },
  oncomment(t, e) {
    if (oe.comments) {
      Yn({
        type: 3,
        content: Fe(t, e),
        loc: ye(t - 4, e + 3),
      });
    }
  },
  onend() {
    const t = St.length;
    for (let e = 0; e < ve.length; e++) {
      Jr(ve[e], St.length - 1);
      wt(24, ve[e].loc.start.offset);
    }
  },
  oncdata(t, e) {
    ve[0].ns !== 0 ? Fr(Fe(t, e), t, e) : wt(1, t - 9);
  },
  onprocessinginstruction(t) {
    if ((ve[0] ? ve[0].ns : oe.ns) === 0) {
      wt(21, t - 1);
    }
  },
});
const sa = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
const $c = /^\(|\)$/g;
function Jc(t) {
  const e = t.loc;
  const r = t.content;
  const n = t.content.match(Mo);
  if (!n) return;
  const [, i, a] = n;
  const o = (u, h, d = false) => {
    const p = t.loc.start.offset + h;
    const v = p + u.length;
    return qr(u, false, ye(p, v), 0, d ? 1 : 0);
  };
  const s = {
    source: o(a.trim(), t.content.indexOf(a, i.length)),
    value: void 0,
    key: void 0,
    index: void 0,
    finalized: false,
  };
  let c = i.trim().replace($c, '').trim();
  const l = i.indexOf(c);
  const f = c.match(sa);
  if (f) {
    c = c.replace(sa, '').trim();
    const u = f[1].trim();
    let h;
    if (u) {
      h = t.content.indexOf(u, l + c.length);
      s.key = o(u, h, true);
    }
    if (f[2]) {
      const d = f[2].trim();
      if (d) {
        s.index = o(d, t.content.indexOf(d, s.key ? h + u.length : l + c.length), true);
      }
    }
  }
  if (c) {
    s.value = o(c, l, true);
  }
  return s;
}
function Fe(t, e) {
  return St.slice(t, e);
}
function ca(t) {
  if (xe.inSFCRoot) {
    Xe.innerLoc = ye(t + 1, t + 1);
  }
  Yn(Xe);
  const { tag: e, ns: r } = Xe;
  if (r === 0 && oe.isPreTag(e)) {
    Ni++;
  }
  oe.isVoidTag(e) ? Jr(Xe, t) : (ve.unshift(Xe), (r === 1 || r === 2) && (xe.inXML = true));
  Xe = null;
}
function Fr(t, e, r) {
  {
    const a = ve[0] && ve[0].tag;
    if (a !== 'script' && a !== 'style' && t.includes('&')) {
      t = oe.decodeEntities(t, false);
    }
  }
  const n = ve[0] || Or;
  const i = n.children[n.children.length - 1];
  i && i.type === 2
    ? ((i.content += t), jt(i.loc, r))
    : n.children.push({
        type: 2,
        content: t,
        loc: ye(e, r),
      });
}
function Jr(t, e, r = false) {
  r ? jt(t.loc, Bo(e, 60)) : jt(t.loc, qc(e, 62) + 1);
  if (xe.inSFCRoot) {
    t.children.length
      ? (t.innerLoc.end = Ct({}, t.children[t.children.length - 1].loc.end))
      : (t.innerLoc.end = Ct({}, t.innerLoc.start));
    t.innerLoc.source = Fe(t.innerLoc.start.offset, t.innerLoc.end.offset);
  }
  const { tag: n, ns: i, children: a } = t;
  if (!Nt) {
    n === 'slot' ? (t.tagType = 2) : la(t) ? (t.tagType = 3) : Kc(t) && (t.tagType = 1);
  }
  if (!xe.inRCDATA) {
    t.children = Lo(a);
  }
  if (i === 0 && oe.isIgnoreNewlineTag(n)) {
    const o = a[0];
    if (o && o.type === 2) {
      o.content = o.content.replace(/^\r?\n/, '');
    }
  }
  if (i === 0 && oe.isPreTag(n)) {
    Ni--;
  }
  if (qn === t) {
    Nt = xe.inVPre = false;
    qn = null;
  }
  if (xe.inXML && (ve[0] ? ve[0].ns : oe.ns) === 0) {
    xe.inXML = false;
  }
  {
    const o = t.props;
    if (!xe.inSFCRoot && $t('COMPILER_NATIVE_TEMPLATE', oe) && t.tag === 'template' && !la(t)) {
      const c = ve[0] || Or;
      const l = c.children.indexOf(t);
      c.children.splice(l, 1, ...t.children);
    }
    const s = t.props.find((c) => c.type === 6 && c.name === 'inline-template');
    if (s && lr('COMPILER_INLINE_TEMPLATE', oe, s.loc) && t.children.length) {
      s.value = {
        type: 2,
        content: Fe(t.children[0].loc.start.offset, t.children[t.children.length - 1].loc.end.offset),
        loc: s.loc,
      };
    }
  }
}
function qc(t, e) {
  let r = t;
  for (; St.charCodeAt(r) !== e && r < St.length - 1; ) r++;
  return r;
}
function Bo(t, e) {
  let r = t;
  for (; St.charCodeAt(r) !== e && r >= 0; ) r--;
  return r;
}
const Yc = new Set(['if', 'else', 'else-if', 'for', 'slot']);
function la({ tag: t, props: e }) {
  if (t === 'template') {
    for (let r = 0; r < e.length; r++) if (e[r].type === 7 && Yc.has(e[r].name)) return true;
  }
  return false;
}
function Kc({ tag: t, props: e }) {
  if (oe.isCustomElement(t)) return false;
  if (
    t === 'component' ||
    Zc(t.charCodeAt(0)) ||
    Ai(t) ||
    (oe.isBuiltInComponent && oe.isBuiltInComponent(t)) ||
    (oe.isNativeTag && !oe.isNativeTag(t))
  )
    return true;
  for (let r = 0; r < e.length; r++) {
    const n = e[r];
    if (e[r].type === 6) {
      if (e[r].name === 'is' && e[r].value) {
        if (e[r].value.content.startsWith('vue:')) return true;
        if (lr('COMPILER_IS_ON_ELEMENT', oe, e[r].loc)) return true;
      }
    } else if (e[r].name === 'bind' && Mt(e[r].arg, 'is') && lr('COMPILER_IS_ON_ELEMENT', oe, e[r].loc)) return true;
  }
  return false;
}
function Zc(t) {
  return t > 64 && t < 91;
}
const Qc = /\r\n/g;
function Lo(t) {
  const e = oe.whitespace !== 'preserve';
  let r = false;
  for (let n = 0; n < t.length; n++) {
    const i = t[n];
    if (i.type === 2)
      if (Ni)
        i.content = i.content.replace(
          Qc,
          `
`,
        );
      else if (el(i.content)) {
        const a = t[n - 1] && t[n - 1].type;
        const o = t[n + 1] && t[n + 1].type;
        !a || !o || (e && ((a === 3 && (o === 3 || o === 1)) || (a === 1 && (o === 3 || (o === 1 && tl(i.content))))))
          ? ((r = true), (t[n] = null))
          : (i.content = ' ');
      } else if (e) {
        i.content = Fo(i.content);
      }
  }
  return r ? t.filter(Boolean) : t;
}
function el(t) {
  for (let e = 0; e < t.length; e++) if (!it(t.charCodeAt(e))) return false;
  return true;
}
function tl(t) {
  for (let e = 0; e < t.length; e++) {
    const r = t.charCodeAt(e);
    if (r === 10 || r === 13) return true;
  }
  return false;
}
function Fo(t) {
  let e = '';
  let r = false;
  for (let n = 0; n < t.length; n++) it(t.charCodeAt(n)) ? r || ((e += ' '), (r = true)) : ((e += t[n]), (r = false));
  return e;
}
function Yn(t) {
  (ve[0] || Or).children.push(t);
}
function ye(t, e) {
  return {
    start: xe.getPos(t),
    end: e == null ? e : xe.getPos(e),
    source: e == null ? e : Fe(t, e),
  };
}
function rl(t) {
  return ye(t.start.offset, t.end.offset);
}
function jt(t, e) {
  t.end = xe.getPos(e);
  t.source = Fe(t.start.offset, e);
}
function nl(t) {
  const e = {
    type: 6,
    name: t.rawName,
    nameLoc: ye(t.loc.start.offset, t.loc.start.offset + t.rawName.length),
    value: void 0,
    loc: t.loc,
  };
  if (t.exp) {
    const r = t.exp.loc;
    if (t.exp.loc.end.offset < t.loc.end.offset) {
      t.exp.loc.start.offset--;
      t.exp.loc.start.column--;
      t.exp.loc.end.offset++;
      t.exp.loc.end.column++;
    }
    e.value = {
      type: 2,
      content: t.exp.content,
      loc: t.exp.loc,
    };
  }
  return e;
}
function qr(t, e = false, r, n = 0, i = 0) {
  return Y(t, e, r, n);
}
function wt(t, e, r) {
  oe.onError(pe(t, ye(e, e)));
}
function il() {
  xe.reset();
  Xe = null;
  Q = null;
  Qe = '';
  Et = -1;
  Ht = -1;
  ve.length = 0;
}
function Oi(t, e) {
  il();
  St = t;
  oe = Ct({}, ko);
  if (e) {
    let i;
    for (i in e)
      if (e[i] != null) {
        oe[i] = e[i];
      }
  }
  xe.mode = oe.parseMode === 'html' ? 1 : oe.parseMode === 'sfc' ? 2 : 0;
  xe.inXML = oe.ns === 1 || oe.ns === 2;
  const r = e && e.delimiters;
  if (r) {
    xe.delimiterOpen = sn(r[0]);
    xe.delimiterClose = sn(r[1]);
  }
  const n = (Or = mo([], t));
  xe.parse(St);
  n.loc = ye(0, t.length);
  n.children = Lo(n.children);
  Or = null;
  return n;
}
function al(t, e) {
  Yr(t, void 0, e, !!Uo(t));
}
function Uo(t) {
  const e = t.children.filter((r) => r.type !== 3);
  return e.length === 1 && e[0].type === 1 && !br(e[0]) ? e[0] : null;
}
function Yr(t, e, r, n = false, i = false) {
  const { children: a } = t;
  const o = [];
  for (let f = 0; f < a.length; f++) {
    const u = a[f];
    if (a[f].type === 1 && a[f].tagType === 0) {
      const h = n ? 0 : tt(a[f], r);
      if (h > 0) {
        if (h >= 2) {
          a[f].codegenNode.patchFlag = -1;
          o.push(a[f]);
          continue;
        }
      } else {
        const d = a[f].codegenNode;
        if (d.type === 13) {
          const p = d.patchFlag;
          if ((d.patchFlag === void 0 || d.patchFlag === 512 || d.patchFlag === 1) && Go(a[f], r) >= 2) {
            const v = Ho(a[f]);
            if (v) {
              d.props = r.hoist(v);
            }
          }
          if (d.dynamicProps) {
            d.dynamicProps = r.hoist(d.dynamicProps);
          }
        }
      }
    } else if (a[f].type === 12 && (n ? 0 : tt(a[f], r)) >= 2) {
      if (a[f].codegenNode.type === 14 && a[f].codegenNode.arguments.length > 0) {
        a[f].codegenNode.arguments.push('-1');
      }
      o.push(a[f]);
      continue;
    }
    if (a[f].type === 1) {
      const h = a[f].tagType === 1;
      if (h) {
        r.scopes.vSlot++;
      }
      Yr(a[f], t, r, false, i);
      if (h) {
        r.scopes.vSlot--;
      }
    } else if (a[f].type === 11) Yr(a[f], t, r, a[f].children.length === 1, true);
    else if (a[f].type === 9)
      for (let h = 0; h < a[f].branches.length; h++)
        Yr(a[f].branches[h], t, r, a[f].branches[h].children.length === 1, i);
  }
  let s = false;
  if (o.length === a.length && t.type === 1) {
    if (t.tagType === 0 && t.codegenNode && t.codegenNode.type === 13 && Dt(t.codegenNode.children)) {
      t.codegenNode.children = c(Bt(t.codegenNode.children));
      s = true;
    } else if (
      t.tagType === 1 &&
      t.codegenNode &&
      t.codegenNode.type === 13 &&
      t.codegenNode.children &&
      !Dt(t.codegenNode.children) &&
      t.codegenNode.children.type === 15
    ) {
      const f = l(t.codegenNode, 'default');
      if (f) {
        f.returns = c(Bt(f.returns));
        s = true;
      }
    } else if (
      t.tagType === 3 &&
      e &&
      e.type === 1 &&
      e.tagType === 1 &&
      e.codegenNode &&
      e.codegenNode.type === 13 &&
      e.codegenNode.children &&
      !Dt(e.codegenNode.children) &&
      e.codegenNode.children.type === 15
    ) {
      const f = qe(t, 'slot', true);
      const u = f && f.arg && l(e.codegenNode, f.arg);
      if (u) {
        u.returns = c(Bt(u.returns));
        s = true;
      }
    }
  }
  if (!s) for (const f of o) f.codegenNode = r.cache(f.codegenNode);
  function c(f) {
    const u = r.cache(f);
    u.needArraySpread = true;
    return u;
  }
  function l(f, u) {
    if (f.children && !Dt(f.children) && f.children.type === 15) {
      const h = f.children.properties.find((d) => d.key === u || d.key.content === u);
      return h && h.value;
    }
  }
  if (o.length && r.transformHoist) {
    r.transformHoist(a, r, t);
  }
}
function tt(t, e) {
  const { constantCache: r } = e;
  switch (t.type) {
    case 1:
      if (t.tagType !== 0) return 0;
      const n = r.get(t);
      if (n !== void 0) return n;
      const i = t.codegenNode;
      if (i.type !== 13 || (i.isBlock && t.tag !== 'svg' && t.tag !== 'foreignObject' && t.tag !== 'math')) return 0;
      if (i.patchFlag === void 0) {
        let o = 3;
        const s = Go(t, e);
        if (s === 0) {
          r.set(t, 0);
          return 0;
        }
        if (s < o) {
          o = s;
        }
        for (let c = 0; c < t.children.length; c++) {
          const l = tt(t.children[c], e);
          if (l === 0) {
            r.set(t, 0);
            return 0;
          }
          if (l < o) {
            o = l;
          }
        }
        if (o > 1)
          for (let c = 0; c < t.props.length; c++) {
            const l = t.props[c];
            if (t.props[c].type === 7 && t.props[c].name === 'bind' && t.props[c].exp) {
              const f = tt(t.props[c].exp, e);
              if (f === 0) {
                r.set(t, 0);
                return 0;
              }
              if (f < o) {
                o = f;
              }
            }
          }
        if (i.isBlock) {
          for (let c = 0; c < t.props.length; c++)
            if (t.props[c].type === 7) {
              r.set(t, 0);
              return 0;
            }
          e.removeHelper(Ut);
          e.removeHelper(Zt(e.inSSR, i.isComponent));
          i.isBlock = false;
          e.helper(Kt(e.inSSR, i.isComponent));
        }
        r.set(t, o);
        return o;
      } else {
        r.set(t, 0);
        return 0;
      }
    case 2:
    case 3:
      return 3;
    case 9:
    case 11:
    case 10:
      return 0;
    case 5:
    case 12:
      return tt(t.content, e);
    case 4:
      return t.constType;
    case 8:
      let a = 3;
      for (let o = 0; o < t.children.length; o++) {
        const s = t.children[o];
        if (Ne(t.children[o]) || di(t.children[o])) continue;
        const c = tt(t.children[o], e);
        if (c === 0) return 0;
        if (c < a) {
          a = c;
        }
      }
      return a;
    case 20:
      return 2;
    default:
      return 0;
  }
}
const ol = new Set([An, In, sr, pr]);
function Vo(t, e) {
  if (t.type === 14 && !Ne(t.callee) && ol.has(t.callee)) {
    const r = t.arguments[0];
    if (t.arguments[0].type === 4) return tt(t.arguments[0], e);
    if (t.arguments[0].type === 14) return Vo(t.arguments[0], e);
  }
  return 0;
}
function Go(t, e) {
  let r = 3;
  const n = Ho(t);
  if (n && n.type === 15) {
    const { properties: i } = n;
    for (let a = 0; a < i.length; a++) {
      const { key: o, value: s } = i[a];
      const c = tt(o, e);
      if (c === 0) return c;
      if (c < r) {
        r = c;
      }
      let l;
      s.type === 4 ? (l = tt(s, e)) : s.type === 14 ? (l = Vo(s, e)) : (l = 0);
      if (l === 0) return l;
      if (l < r) {
        r = l;
      }
    }
  }
  return r;
}
function Ho(t) {
  const e = t.codegenNode;
  if (t.codegenNode.type === 13) return t.codegenNode.props;
}
function Xo(
  t,
  {
    filename: e = '',
    prefixIdentifiers: r = false,
    hoistStatic: n = false,
    hmr: i = false,
    cacheHandlers: a = false,
    nodeTransforms: o = [],
    directiveTransforms: s = {},
    transformHoist: c = null,
    isBuiltInComponent: l = Cr,
    isCustomElement: f = Cr,
    expressionPlugins: u = [],
    scopeId: h = null,
    slotted: d = true,
    ssr: p = false,
    inSSR: v = false,
    ssrCssVars: g = '',
    bindingMetadata: _ = Os,
    inline: y = false,
    isTS: x = false,
    onError: w = Si,
    onWarn: C = wo,
    compatConfig: S,
  },
) {
  const T = e.replace(/\?.*$/, '').match(/([^/\\]+)\.\w+$/);
  const D = {
    filename: e,
    selfName: T && io(kt(T[1])),
    prefixIdentifiers: r,
    hoistStatic: n,
    hmr: i,
    cacheHandlers: a,
    nodeTransforms: o,
    directiveTransforms: s,
    transformHoist: c,
    isBuiltInComponent: l,
    isCustomElement: f,
    expressionPlugins: u,
    scopeId: h,
    slotted: d,
    ssr: p,
    inSSR: v,
    ssrCssVars: g,
    bindingMetadata: _,
    inline: y,
    isTS: x,
    onError: w,
    onWarn: C,
    compatConfig: S,
    root: t,
    helpers: new Map(),
    components: new Set(),
    directives: new Set(),
    hoists: [],
    imports: [],
    cached: [],
    constantCache: new WeakMap(),
    temps: 0,
    identifiers: Object.create(null),
    scopes: {
      vFor: 0,
      vSlot: 0,
      vPre: 0,
      vOnce: 0,
    },
    parent: null,
    grandParent: null,
    currentNode: t,
    childIndex: 0,
    inVOnce: false,
    helper(O) {
      const R = D.helpers.get(O) || 0;
      D.helpers.set(O, R + 1);
      return O;
    },
    removeHelper(O) {
      const R = D.helpers.get(O);
      if (R) {
        const H = R - 1;
        H ? D.helpers.set(O, H) : D.helpers.delete(O);
      }
    },
    helperString(O) {
      return `_${qt[D.helper(O)]}`;
    },
    replaceNode(O) {
      D.parent.children[D.childIndex] = D.currentNode = O;
    },
    removeNode(O) {
      const R = D.parent.children;
      const H = O ? D.parent.children.indexOf(O) : D.currentNode ? D.childIndex : -1;
      !O || O === D.currentNode
        ? ((D.currentNode = null), D.onNodeRemoved())
        : D.childIndex > H && (D.childIndex--, D.onNodeRemoved());
      D.parent.children.splice(H, 1);
    },
    onNodeRemoved: Cr,
    addIdentifiers(O) {},
    removeIdentifiers(O) {},
    hoist(O) {
      if (Ne(O)) {
        O = Y(O);
      }
      D.hoists.push(O);
      const R = Y(`_hoisted_${D.hoists.length}`, false, O.loc, 2);
      R.hoisted = O;
      return R;
    },
    cache(O, R = false, H = false) {
      const N = xo(D.cached.length, O, R, H);
      D.cached.push(N);
      return N;
    },
  };
  D.filters = new Set();
  return D;
}
function zo(t, e) {
  const r = Xo(t, e);
  Mr(t, r);
  if (e.hoistStatic) {
    al(t, r);
  }
  if (!e.ssr) {
    sl(t, r);
  }
  t.helpers = new Set([...r.helpers.keys()]);
  t.components = [...r.components];
  t.directives = [...r.directives];
  t.imports = r.imports;
  t.hoists = r.hoists;
  t.temps = r.temps;
  t.cached = r.cached;
  t.transformed = true;
  t.filters = [...r.filters];
}
function sl(t, e) {
  const { helper: r } = e;
  const { children: n } = t;
  if (n.length === 1) {
    const i = Uo(t);
    if (i && i.codegenNode) {
      const a = i.codegenNode;
      if (i.codegenNode.type === 13) {
        On(i.codegenNode, e);
      }
      t.codegenNode = i.codegenNode;
    } else t.codegenNode = n[0];
  } else if (n.length > 1) {
    let i = 64;
    t.codegenNode = cr(e, r(or), void 0, t.children, 64, void 0, void 0, true, void 0, false);
  }
}
function cl(t, e) {
  let r = 0;
  const n = () => {
    r--;
  };
  for (; r < t.children.length; r++) {
    const i = t.children[r];
    if (!Ne(t.children[r])) {
      e.grandParent = e.parent;
      e.parent = t;
      e.childIndex = r;
      e.onNodeRemoved = n;
      Mr(t.children[r], e);
    }
  }
}
function Mr(t, e) {
  e.currentNode = t;
  const { nodeTransforms: r } = e;
  const n = [];
  for (let a = 0; a < r.length; a++) {
    const o = r[a](t, e);
    if (o) {
      Dt(o) ? n.push(...o) : n.push(o);
    }
    if (e.currentNode) t = e.currentNode;
    else return;
  }
  switch (t.type) {
    case 3:
      if (!e.ssr) {
        e.helper(dr);
      }
      break;
    case 5:
      if (!e.ssr) {
        e.helper(Dr);
      }
      break;
    case 9:
      for (let a = 0; a < t.branches.length; a++) Mr(t.branches[a], e);
      break;
    case 10:
    case 11:
    case 1:
    case 0:
      cl(t, e);
      break;
  }
  e.currentNode = t;
  let i = n.length;
  for (; i--; ) n[i]();
}
function Di(t, e) {
  const r = Ne(t) ? (n) => n === t : (n) => t.test(n);
  return (n, i) => {
    if (n.type === 1) {
      const { props: a } = n;
      if (n.tagType === 3 && a.some(bi)) return;
      const o = [];
      for (let s = 0; s < a.length; s++) {
        const c = a[s];
        if (a[s].type === 7 && r(a[s].name)) {
          a.splice(s, 1);
          s--;
          const l = e(n, a[s], i);
          if (l) {
            o.push(l);
          }
        }
      }
      return o;
    }
  };
}
const Dn = '/*@__PURE__*/';
const jo = (t) => `${qt[t]}: _${qt[t]}`;
function ll(
  t,
  {
    mode: e = 'function',
    prefixIdentifiers: r = e === 'module',
    sourceMap: n = false,
    filename: i = 'template.vue.html',
    scopeId: a = null,
    optimizeImports: o = false,
    runtimeGlobalName: s = 'Vue',
    runtimeModuleName: c = 'vue',
    ssrRuntimeModuleName: l = 'vue/server-renderer',
    ssr: f = false,
    isTS: u = false,
    inSSR: h = false,
  },
) {
  const d = {
    mode: e,
    prefixIdentifiers: r,
    sourceMap: n,
    filename: i,
    scopeId: a,
    optimizeImports: o,
    runtimeGlobalName: s,
    runtimeModuleName: c,
    ssrRuntimeModuleName: l,
    ssr: f,
    isTS: u,
    inSSR: h,
    source: t.source,
    code: '',
    column: 1,
    line: 1,
    offset: 0,
    indentLevel: 0,
    pure: false,
    map: void 0,
    helper(v) {
      return `_${qt[v]}`;
    },
    push(v, g = -2, _) {
      d.code += v;
    },
    indent() {
      p(++d.indentLevel);
    },
    deindent(v = false) {
      v ? --d.indentLevel : p(--d.indentLevel);
    },
    newline() {
      p(d.indentLevel);
    },
  };
  function p(v) {
    d.push(
      `
` + '  '.repeat(v),
      0,
    );
  }
  return d;
}
function Wo(t, e = {}) {
  const r = ll(t, e);
  if (e.onContextCreated) {
    e.onContextCreated(r);
  }
  const { mode: n, push: i, prefixIdentifiers: a, indent: o, deindent: s, newline: c, scopeId: l, ssr: f } = r;
  const u = Array.from(t.helpers);
  const h = u.length > 0;
  const d = !a && n !== 'module';
  fl(t, r);
  const v = f ? 'ssrRender' : 'render';
  const _ = (f ? ['_ctx', '_push', '_parent', '_attrs'] : ['_ctx', '_cache']).join(', ');
  i(`function ${v}(${_}) {`);
  o();
  if (d) {
    i('with (_ctx) {');
    o();
    if (h) {
      i(
        `const { ${u.map(jo).join(', ')} } = _Vue
`,
        -1,
      );
      c();
    }
  }
  if (t.components.length) {
    Ln(t.components, 'component', r);
    if (t.directives.length || t.temps > 0) {
      c();
    }
  }
  if (t.directives.length) {
    Ln(t.directives, 'directive', r);
    if (t.temps > 0) {
      c();
    }
  }
  if (t.filters && t.filters.length) {
    c();
    Ln(t.filters, 'filter', r);
    c();
  }
  if (t.temps > 0) {
    i('let ');
    for (let y = 0; y < t.temps; y++) i(`${y > 0 ? ', ' : ''}_temp${y}`);
  }
  if (t.components.length || t.directives.length || t.temps) {
    i(
      `
`,
      0,
    );
    c();
  }
  if (!f) {
    i('return ');
  }
  t.codegenNode ? ze(t.codegenNode, r) : i('null');
  if (d) {
    s();
    i('}');
  }
  s();
  i('}');
  return {
    ast: t,
    code: r.code,
    preamble: '',
    map: r.map ? r.map.toJSON() : void 0,
  };
}
function fl(t, e) {
  const {
    ssr: r,
    prefixIdentifiers: n,
    push: i,
    newline: a,
    runtimeModuleName: o,
    runtimeGlobalName: s,
    ssrRuntimeModuleName: c,
  } = e;
  const l = s;
  const f = Array.from(t.helpers);
  if (
    f.length > 0 &&
    (i(
      `const _Vue = ${s}
`,
      -1,
    ),
    t.hoists.length)
  ) {
    const u = [gn, _n, dr, mn, yi]
      .filter((h) => f.includes(h))
      .map(jo)
      .join(', ');
    i(
      `const { ${u} } = _Vue
`,
      -1,
    );
  }
  ul(t.hoists, e);
  a();
  i('return ');
}
function Ln(t, e, { helper: r, push: n, newline: i, isTS: a }) {
  const o = r(e === 'filter' ? En : e === 'component' ? xn : wn);
  for (let s = 0; s < t.length; s++) {
    let c = t[s];
    const l = c.endsWith('__self');
    if (l) {
      c = c.slice(0, -6);
    }
    n(`const ${ur(c, e)} = ${o}(${JSON.stringify(c)}${l ? ', true' : ''})${a ? '!' : ''}`);
    if (s < t.length - 1) {
      i();
    }
  }
}
function ul(t, e) {
  if (!t.length) return;
  e.pure = true;
  const { push: r, newline: n } = e;
  n();
  for (let i = 0; i < t.length; i++) {
    const a = t[i];
    if (t[i]) {
      r(`const _hoisted_${i + 1} = `);
      ze(t[i], e);
      n();
    }
  }
  e.pure = false;
}
function Ri(t, e) {
  const r = t.length > 3 || false;
  e.push('[');
  if (r) {
    e.indent();
  }
  kr(t, e, r);
  if (r) {
    e.deindent();
  }
  e.push(']');
}
function kr(t, e, r = false, n = true) {
  const { push: i, newline: a } = e;
  for (let o = 0; o < t.length; o++) {
    const s = t[o];
    Ne(t[o]) ? i(t[o], -3) : Dt(t[o]) ? Ri(t[o], e) : ze(t[o], e);
    if (o < t.length - 1) {
      r ? (n && i(','), a()) : n && i(', ');
    }
  }
}
function ze(t, e) {
  if (Ne(t)) {
    e.push(t, -3);
    return;
  }
  if (di(t)) {
    e.push(e.helper(t));
    return;
  }
  switch (t.type) {
    case 1:
    case 9:
    case 11:
      ze(t.codegenNode, e);
      break;
    case 2:
      hl(t, e);
      break;
    case 4:
      $o(t, e);
      break;
    case 5:
      dl(t, e);
      break;
    case 12:
      ze(t.codegenNode, e);
      break;
    case 8:
      Jo(t, e);
      break;
    case 3:
      vl(t, e);
      break;
    case 13:
      gl(t, e);
      break;
    case 14:
      ml(t, e);
      break;
    case 15:
      xl(t, e);
      break;
    case 17:
      yl(t, e);
      break;
    case 18:
      wl(t, e);
      break;
    case 19:
      El(t, e);
      break;
    case 20:
      Cl(t, e);
      break;
    case 21:
      kr(t.body, e, true, false);
      break;
  }
}
function hl(t, e) {
  e.push(JSON.stringify(t.content), -3, t);
}
function $o(t, e) {
  const { content: r, isStatic: n } = t;
  e.push(n ? JSON.stringify(r) : r, -3, t);
}
function dl(t, e) {
  const { push: r, helper: n, pure: i } = e;
  if (i) {
    r('/*@__PURE__*/');
  }
  r(`${n(Dr)}(`);
  ze(t.content, e);
  r(')');
}
function Jo(t, e) {
  for (let r = 0; r < t.children.length; r++) {
    const n = t.children[r];
    Ne(t.children[r]) ? e.push(t.children[r], -3) : ze(t.children[r], e);
  }
}
function pl(t, e) {
  const { push: r } = e;
  if (t.type === 8) {
    r('[');
    Jo(t, e);
    r(']');
  } else if (t.isStatic) {
    const n = Rr(t.content) ? t.content : JSON.stringify(t.content);
    r(n, -2, t);
  } else r(`[${t.content}]`, -3, t);
}
function vl(t, e) {
  const { push: r, helper: n, pure: i } = e;
  if (i) {
    r('/*@__PURE__*/');
  }
  r(`${n(dr)}(${JSON.stringify(t.content)})`, -3, t);
}
function gl(t, e) {
  const { push: r, helper: n, pure: i } = e;
  const {
    tag: a,
    props: o,
    children: s,
    patchFlag: c,
    dynamicProps: l,
    directives: f,
    isBlock: u,
    disableTracking: h,
    isComponent: d,
  } = t;
  let p;
  if (c) {
    p = String(c);
  }
  if (f) {
    r(n(Cn) + '(');
  }
  if (u) {
    r(`(${n(Ut)}(${h ? 'true' : ''}), `);
  }
  if (i) {
    r('/*@__PURE__*/');
  }
  const v = u ? Zt(e.inSSR, d) : Kt(e.inSSR, d);
  r(n(v) + '(', -2, t);
  kr(_l([a, o, s, p, l]), e);
  r(')');
  if (u) {
    r(')');
  }
  if (f) {
    r(', ');
    ze(f, e);
    r(')');
  }
}
function _l(t) {
  let e = t.length;
  for (; e-- && t[e] == null; );
  return t.slice(0, e + 1).map((r) => r || 'null');
}
function ml(t, e) {
  const { push: r, helper: n, pure: i } = e;
  const a = Ne(t.callee) ? t.callee : n(t.callee);
  if (i) {
    r('/*@__PURE__*/');
  }
  r(a + '(', -2, t);
  kr(t.arguments, e);
  r(')');
}
function xl(t, e) {
  const { push: r, indent: n, deindent: i, newline: a } = e;
  const { properties: o } = t;
  if (!o.length) {
    r('{}', -2, t);
    return;
  }
  const s = o.length > 1 || false;
  r(s ? '{' : '{ ');
  if (s) {
    n();
  }
  for (let c = 0; c < o.length; c++) {
    const { key: l, value: f } = o[c];
    pl(l, e);
    r(': ');
    ze(f, e);
    if (c < o.length - 1) {
      r(',');
      a();
    }
  }
  if (s) {
    i();
  }
  r(s ? '}' : ' }');
}
function yl(t, e) {
  Ri(t.elements, e);
}
function wl(t, e) {
  const { push: r, indent: n, deindent: i } = e;
  const { params: a, returns: o, body: s, newline: c, isSlot: l } = t;
  if (l) {
    r(`_${qt[bn]}(`);
  }
  r('(', -2, t);
  Dt(a) ? kr(a, e) : a && ze(a, e);
  r(') => ');
  if (c || s) {
    r('{');
    n();
  }
  o ? (c && r('return '), Dt(o) ? Ri(o, e) : ze(o, e)) : s && ze(s, e);
  if (c || s) {
    i();
    r('}');
  }
  if (l) {
    if (t.isNonScopedSlot) {
      r(', undefined, true');
    }
    r(')');
  }
}
function El(t, e) {
  const { test: r, consequent: n, alternate: i, newline: a } = t;
  const { push: o, indent: s, deindent: c, newline: l } = e;
  if (r.type === 4) {
    const u = !Rr(r.content);
    if (u) {
      o('(');
    }
    $o(r, e);
    if (u) {
      o(')');
    }
  } else {
    o('(');
    ze(r, e);
    o(')');
  }
  if (a) {
    s();
  }
  e.indentLevel++;
  if (!a) {
    o(' ');
  }
  o('? ');
  ze(n, e);
  e.indentLevel--;
  if (a) {
    l();
  }
  if (!a) {
    o(' ');
  }
  o(': ');
  const f = i.type === 19;
  if (!f) {
    e.indentLevel++;
  }
  ze(i, e);
  if (!f) {
    e.indentLevel--;
  }
  if (a) {
    c(true);
  }
}
function Cl(t, e) {
  const { push: r, helper: n, indent: i, deindent: a, newline: o } = e;
  const { needPauseTracking: s, needArraySpread: c } = t;
  if (c) {
    r('[...(');
  }
  r(`_cache[${t.index}] || (`);
  if (s) {
    i();
    r(`${n(Tr)}(-1`);
    if (t.inVOnce) {
      r(', true');
    }
    r('),');
    o();
    r('(');
  }
  r(`_cache[${t.index}] = `);
  ze(t.value, e);
  if (s) {
    r(`).cacheIndex = ${t.index},`);
    o();
    r(`${n(Tr)}(1),`);
    o();
    r(`_cache[${t.index}]`);
    a();
  }
  r(')');
  if (c) {
    r(')]');
  }
}
new RegExp(
  '\\b' +
    [
      'arguments',
      'await',
      'break',
      'case',
      'catch',
      'class',
      'const',
      'continue',
      'debugge_',
      'default',
      'delete',
      'do',
      'else',
      'export',
      'extends',
      'finally',
      'for',
      'function',
      'if',
      'import',
      'let',
      'new',
      'return',
      'super',
      'switch',
      'throw',
      'try',
      'var',
      'void',
      'while',
      'with',
      'yield',
    ].join('\\b|\\b') +
    '\\b',
);
const Sl = (t, e) => {
  if (t.type === 5) t.content = t;
  else if (t.type === 1) {
    const r = qe(t, 'memo');
    for (let n = 0; n < t.props.length; n++) {
      const i = t.props[n];
      if (i.type === 7 && i.name !== 'for') {
        const a = i.exp;
        const o = i.arg;
        if (
          i.exp &&
          i.exp.type === 4 &&
          !(i.name === 'on' && i.arg) &&
          !(r && i.arg && i.arg.type === 4 && i.arg.content === 'key')
        ) {
          i.exp = t;
        }
        if (i.arg && i.arg.type === 4 && !i.arg.isStatic) {
          i.arg = t;
        }
      }
    }
  }
};
function Kr(t, e, r = false, n = false, i = Object.create(e.identifiers)) {
  return t;
}
function qo(t) {
  return Ne(t) ? t : t.type === 4 ? t.content : t.children.map(qo).join('');
}
const Al = Di(/^(?:if|else|else-if)$/, (t, e, r) =>
  Yo(t, e, r, (n, i, a) => {
    const o = r.parent.children;
    let s = r.parent.children.indexOf(n);
    let c = 0;
    for (; s-- >= 0; ) {
      const l = r.parent.children[s];
      if (r.parent.children[s] && r.parent.children[s].type === 9) {
        c += r.parent.children[s].branches.length;
      }
    }
    return () => {
      if (a) n.codegenNode = ua(i, c, r);
      else {
        const l = Il(n.codegenNode);
        l.alternate = ua(i, c + n.branches.length - 1, r);
      }
    };
  }),
);
function Yo(t, e, r, n) {
  if (e.name !== 'else' && (!e.exp || !e.exp.content.trim())) {
    const i = e.exp ? e.exp.loc : t.loc;
    r.onError(pe(28, e.loc));
    e.exp = Y('true', false, i);
  }
  if (e.name === 'if') {
    const i = fa(t, e);
    const a = {
      type: 9,
      loc: rl(t.loc),
      branches: [i],
    };
    r.replaceNode(a);
    if (n) return n(a, i, true);
  } else {
    const i = r.parent.children;
    let a = r.parent.children.indexOf(t);
    for (; a-- >= -1; ) {
      const o = r.parent.children[a];
      if (r.parent.children[a] && r.parent.children[a].type === 3) {
        r.removeNode(r.parent.children[a]);
        continue;
      }
      if (r.parent.children[a] && r.parent.children[a].type === 2 && !r.parent.children[a].content.trim().length) {
        r.removeNode(r.parent.children[a]);
        continue;
      }
      if (r.parent.children[a] && r.parent.children[a].type === 9) {
        if (
          (e.name === 'else-if' || e.name === 'else') &&
          r.parent.children[a].branches[r.parent.children[a].branches.length - 1].condition === void 0
        ) {
          r.onError(pe(30, t.loc));
        }
        r.removeNode();
        const s = fa(t, e);
        r.parent.children[a].branches.push(s);
        const c = n && n(r.parent.children[a], s, false);
        Mr(s, r);
        if (c) {
          c();
        }
        r.currentNode = null;
      } else r.onError(pe(30, t.loc));
      break;
    }
  }
}
function fa(t, e) {
  const r = t.tagType === 3;
  return {
    type: 10,
    loc: t.loc,
    condition: e.name === 'else' ? void 0 : e.exp,
    children: r && !qe(t, 'for') ? t.children : [t],
    userKey: Pr(t, 'key'),
    isTemplateIf: r,
  };
}
function ua(t, e, r) {
  return t.condition ? on(t.condition, ha(t, e, r), Ee(r.helper(dr), ['""', 'true'])) : ha(t, e, r);
}
function ha(t, e, r) {
  const { helper: n } = r;
  const i = we('key', Y(`${e}`, false, Oe, 2));
  const { children: a } = t;
  const o = a[0];
  if (a.length !== 1 || a[0].type !== 1)
    if (a.length === 1 && a[0].type === 11) {
      const c = a[0].codegenNode;
      Nr(a[0].codegenNode, i, r);
      return a[0].codegenNode;
    } else return cr(r, n(or), ot([i]), a, 64, void 0, void 0, true, false, false, t.loc);
  else {
    const c = a[0].codegenNode;
    const l = Po(a[0].codegenNode);
    if (l.type === 13) {
      On(l, r);
    }
    Nr(l, i, r);
    return a[0].codegenNode;
  }
}
function Il(t) {
  for (;;)
    if (t.type === 19)
      if (t.alternate.type === 19) t = t.alternate;
      else return t;
    else if (t.type === 20) {
      t = t.value;
    }
}
const Tl = Di('for', (t, e, r) => {
  const { helper: n, removeHelper: i } = r;
  return Ko(t, e, r, (a) => {
    const o = Ee(n(Sn), [a.source]);
    const s = fr(t);
    const c = qe(t, 'memo');
    const l = Pr(t, 'key', false, true);
    if (l) {
      l.type;
    }
    let f = l && (l.type === 6 ? (l.value ? Y(l.value.content, true) : void 0) : l.exp);
    const u = l && f ? we('key', f) : null;
    const h = a.source.type === 4 && a.source.constType > 0;
    const d = h ? 64 : l ? 128 : 256;
    a.codegenNode = cr(r, n(or), void 0, o, d, void 0, void 0, true, !h, false, t.loc);
    return () => {
      let p;
      const { children: v } = a;
      const g = v.length !== 1 || v[0].type !== 1;
      const _ = br(t) ? t : s && t.children.length === 1 && br(t.children[0]) ? t.children[0] : null;
      _
        ? ((p = _.codegenNode), s && u && Nr(p, u, r))
        : g
          ? (p = cr(r, n(or), u ? ot([u]) : void 0, t.children, 64, void 0, void 0, true, void 0, false))
          : ((p = v[0].codegenNode),
            s && u && Nr(p, u, r),
            p.isBlock !== !h && (p.isBlock ? (i(Ut), i(Zt(r.inSSR, p.isComponent))) : i(Kt(r.inSSR, p.isComponent))),
            (p.isBlock = !h),
            p.isBlock ? (n(Ut), n(Zt(r.inSSR, p.isComponent))) : n(Kt(r.inSSR, p.isComponent)));
      if (c) {
        const y = Yt(cn(a.parseResult, [Y('_cached')]));
        y.body = yo([
          ft(['const _memo = (', c.exp, ')']),
          ft([
            'if (_cached',
            ...(f ? [' && _cached.key === ', f] : []),
            ` && ${r.helperString(Ci)}(_cached, _memo)) return _cached`,
          ]),
          ft(['const _item = ', p]),
          Y('_item.memo = _memo'),
          Y('return _item'),
        ]);
        o.arguments.push(y, Y('_cache'), Y(String(r.cached.length)));
        r.cached.push(null);
      } else o.arguments.push(Yt(cn(a.parseResult), p, true));
    };
  });
});
function Ko(t, e, r, n) {
  if (!e.exp) {
    r.onError(pe(31, e.loc));
    return;
  }
  const i = e.forParseResult;
  if (!e.forParseResult) {
    r.onError(pe(32, e.loc));
    return;
  }
  Pi(e.forParseResult);
  const { addIdentifiers: a, removeIdentifiers: o, scopes: s } = r;
  const { source: c, value: l, key: f, index: u } = e.forParseResult;
  const h = {
    type: 11,
    loc: e.loc,
    source: c,
    valueAlias: l,
    keyAlias: f,
    objectIndexAlias: u,
    parseResult: e.forParseResult,
    children: fr(t) ? t.children : [t],
  };
  r.replaceNode(h);
  s.vFor++;
  const d = n && n(h);
  return () => {
    s.vFor--;
    if (d) {
      d();
    }
  };
}
function Pi(t, e) {
  if (!t.finalized) {
    t.finalized = true;
  }
}
function cn({ value: t, key: e, index: r }, n = []) {
  return bl([t, e, r, ...n]);
}
function bl(t) {
  let e = t.length;
  for (; e-- && !t[e]; );
  return t.slice(0, e + 1).map((r, n) => r || Y('_'.repeat(n + 1), false));
}
const da = Y('undefined', false);
const Zo = (t, e) => {
  if (t.type === 1 && (t.tagType === 1 || t.tagType === 3)) {
    const r = qe(t, 'slot');
    if (r) {
      r.exp;
      e.scopes.vSlot++;
      return () => {
        e.scopes.vSlot--;
      };
    }
  }
};
const Nl = (t, e) => {
  let r;
  if (fr(t) && t.props.some(bi) && (r = qe(t, 'for'))) {
    const n = r.forParseResult;
    if (r.forParseResult) {
      Pi(r.forParseResult);
      const { value: i, key: a, index: o } = r.forParseResult;
      const { addIdentifiers: s, removeIdentifiers: c } = e;
      if (i) {
        s(i);
      }
      if (a) {
        s(a);
      }
      if (o) {
        s(o);
      }
      return () => {
        if (i) {
          c(i);
        }
        if (a) {
          c(a);
        }
        if (o) {
          c(o);
        }
      };
    }
  }
};
const Ol = (t, e, r, n) => Yt(t, r, false, true, r.length ? r[0].loc : n);
function Qo(t, e, r = Ol) {
  e.helper(bn);
  const { children: n, loc: i } = t;
  const a = [];
  const o = [];
  let s = e.scopes.vSlot > 0 || e.scopes.vFor > 0;
  const c = qe(t, 'slot', true);
  if (c) {
    const { arg: g, exp: _ } = c;
    if (g && !Ye(g)) {
      s = true;
    }
    a.push(we(g || Y('default', true), r(_, void 0, n, i)));
  }
  let l = false;
  let f = false;
  const u = [];
  const h = new Set();
  let d = 0;
  for (let g = 0; g < n.length; g++) {
    const _ = n[g];
    let y;
    if (!fr(n[g]) || !(y = qe(n[g], 'slot', true))) {
      if (n[g].type !== 3) {
        u.push(n[g]);
      }
      continue;
    }
    if (c) {
      e.onError(pe(37, y.loc));
      break;
    }
    l = true;
    const { children: x, loc: w } = n[g];
    const { arg: C = Y('default', true), exp: S, loc: T } = y;
    let D;
    Ye(C) ? (D = C ? C.content : 'default') : (s = true);
    const O = qe(n[g], 'for');
    const R = r(S, O, x, w);
    let H;
    let N;
    if ((H = qe(n[g], 'if'))) {
      s = true;
      o.push(on(H.exp, Ur(C, R, d++), da));
    } else if ((N = qe(n[g], /^else(?:-if)?$/, true))) {
      let k = g;
      let F;
      for (; k-- && ((F = n[k]), !(F.type !== 3 && Kn(F))); );
      if (F && fr(F) && qe(F, /^(?:else-)?if$/)) {
        let V = o[o.length - 1];
        for (; V.alternate.type === 19; ) V = V.alternate;
        V.alternate = N.exp ? on(N.exp, Ur(C, R, d++), da) : Ur(C, R, d++);
      } else e.onError(pe(30, N.loc));
    } else if (O) {
      s = true;
      const k = O.forParseResult;
      O.forParseResult
        ? (Pi(O.forParseResult),
          o.push(Ee(e.helper(Sn), [O.forParseResult.source, Yt(cn(O.forParseResult), Ur(C, R), true)])))
        : e.onError(pe(32, O.loc));
    } else {
      if (D) {
        if (h.has(D)) {
          e.onError(pe(38, T));
          continue;
        }
        h.add(D);
        if (D === 'default') {
          f = true;
        }
      }
      a.push(we(C, R));
    }
  }
  if (!c) {
    const g = (_, y) => {
      const x = r(_, void 0, y, i);
      if (e.compatConfig) {
        x.isNonScopedSlot = true;
      }
      return we('default', x);
    };
    l
      ? u.length && u.some((_) => Kn(_)) && (f ? e.onError(pe(39, u[0].loc)) : a.push(g(void 0, u)))
      : a.push(g(void 0, n));
  }
  const p = s ? 2 : Zr(t.children) ? 3 : 1;
  let v = ot(a.concat(we('_', Y(p + '', false))), i);
  if (o.length) {
    v = Ee(e.helper(Ei), [v, Bt(o)]);
  }
  return {
    slots: v,
    hasDynamicSlots: s,
  };
}
function Ur(t, e, r) {
  const n = [we('name', t), we('fn', e)];
  if (r != null) {
    n.push(we('key', Y(String(r), true)));
  }
  return ot(n);
}
function Zr(t) {
  for (let e = 0; e < t.length; e++) {
    const r = t[e];
    switch (t[e].type) {
      case 1:
        if (t[e].tagType === 2 || Zr(t[e].children)) return true;
        break;
      case 9:
        if (Zr(t[e].branches)) return true;
        break;
      case 10:
      case 11:
        if (Zr(t[e].children)) return true;
        break;
    }
  }
  return false;
}
function Kn(t) {
  return t.type !== 2 && t.type !== 12 ? true : t.type === 2 ? !!t.content.trim() : Kn(t.content);
}
const es = new WeakMap();
const ts = (t, e) =>
  function () {
    t = e.currentNode;
    if (!(t.type === 1 && (t.tagType === 0 || t.tagType === 1))) return;
    const { tag: n, props: i } = t;
    const a = t.tagType === 1;
    let o = a ? rs(t, e) : `"${n}"`;
    const s = ao(o) && o.callee === yn;
    let c;
    let l;
    let f = 0;
    let u;
    let h;
    let d;
    let p = s || o === ar || o === vn || (!a && (n === 'svg' || n === 'foreignObject' || n === 'math'));
    if (i.length > 0) {
      const v = Mi(t, e, void 0, a, s);
      c = v.props;
      f = v.patchFlag;
      h = v.dynamicPropNames;
      const g = v.directives;
      d = v.directives && v.directives.length ? Bt(v.directives.map((_) => ns(_, e))) : void 0;
      if (v.shouldUseBlock) {
        p = true;
      }
    }
    if (t.children.length > 0) {
      if (o === Ar) {
        p = true;
        f |= 1024;
      }
      if (a && o !== ar && o !== Ar) {
        const { slots: g, hasDynamicSlots: _ } = Qo(t, e);
        l = g;
        if (_) {
          f |= 1024;
        }
      } else if (t.children.length === 1 && o !== ar) {
        const g = t.children[0];
        const _ = t.children[0].type;
        const y = t.children[0].type === 5 || t.children[0].type === 8;
        if (y && tt(t.children[0], e) === 0) {
          f |= 1;
        }
        y || t.children[0].type === 2 ? (l = t.children[0]) : (l = t.children);
      } else l = t.children;
    }
    if (h && h.length) {
      u = Rl(h);
    }
    t.codegenNode = cr(e, o, c, l, f === 0 ? void 0 : f, u, d, !!p, false, a, t.loc);
  };
function rs(t, e, r = false) {
  let { tag: n } = t;
  const i = Zn(n);
  const a = Pr(t, 'is', false, true);
  if (a)
    if (i || $t('COMPILER_IS_ON_ELEMENT', e)) {
      let s;
      a.type === 6 ? (s = a.value && Y(a.value.content, true)) : ((s = a.exp), s || (s = Y('is', false, a.arg.loc)));
      if (s) return Ee(e.helper(yn), [s]);
    } else if (a.type === 6 && a.value.content.startsWith('vue:')) {
      n = a.value.content.slice(4);
    }
  const o = Ai(n) || e.isBuiltInComponent(n);
  return o ? (r || e.helper(o), o) : (e.helper(xn), e.components.add(n), ur(n, 'component'));
}
function Mi(t, e, r = t.props, n, i, a = false) {
  const { tag: o, loc: s, children: c } = t;
  let l = [];
  const f = [];
  const u = [];
  const h = c.length > 0;
  let d = false;
  let p = 0;
  let v = false;
  let g = false;
  let _ = false;
  let y = false;
  let x = false;
  let w = false;
  const C = [];
  const S = (R) => {
    if (l.length) {
      f.push(ot(pa(l), s));
      l = [];
    }
    if (R) {
      f.push(R);
    }
  };
  const T = () => {
    if (e.scopes.vFor > 0) {
      l.push(we(Y('ref_for', true), Y('true')));
    }
  };
  const D = ({ key: R, value: H }) => {
    if (Ye(R)) {
      const N = R.content;
      const k = oo(R.content);
      if (
        k &&
        (!n || i) &&
        R.content.toLowerCase() !== 'onclick' &&
        R.content !== 'onUpdate:modelValue' &&
        !ta(R.content)
      ) {
        y = true;
      }
      if (k && ta(R.content)) {
        w = true;
      }
      if (k && H.type === 14) {
        H = H.arguments[0];
      }
      if (H.type === 20 || ((H.type === 4 || H.type === 8) && tt(H, e) > 0)) return;
      R.content === 'ref'
        ? (v = true)
        : R.content === 'class'
          ? (g = true)
          : R.content === 'style'
            ? (_ = true)
            : R.content !== 'key' && !C.includes(R.content) && C.push(R.content);
      if (n && (R.content === 'class' || R.content === 'style') && !C.includes(R.content)) {
        C.push(R.content);
      }
    } else x = true;
  };
  for (let R = 0; R < r.length; R++) {
    const H = r[R];
    if (r[R].type === 6) {
      const { loc: N, name: k, nameLoc: F, value: V } = r[R];
      let J = true;
      if (k === 'ref') {
        v = true;
        T();
      }
      if (k === 'is' && (Zn(o) || (V && V.content.startsWith('vue:')) || $t('COMPILER_IS_ON_ELEMENT', e))) continue;
      l.push(we(Y(k, true, F), Y(V ? V.content : '', J, V ? V.loc : N)));
    } else {
      const { name: N, arg: k, exp: F, loc: V, modifiers: J } = r[R];
      const ne = N === 'bind';
      const me = N === 'on';
      if (N === 'slot') {
        if (!n) {
          e.onError(pe(40, V));
        }
        continue;
      }
      if (
        N === 'once' ||
        N === 'memo' ||
        N === 'is' ||
        (ne && Mt(k, 'is') && (Zn(o) || $t('COMPILER_IS_ON_ELEMENT', e))) ||
        (me && a)
      )
        continue;
      if ((ne && Mt(k, 'key')) || (me && h && Mt(k, 'vue:before-update'))) {
        d = true;
      }
      if (ne && Mt(k, 'ref')) {
        T();
      }
      if (!k && (ne || me)) {
        x = true;
        if (F)
          if (ne) {
            S();
            if ($t('COMPILER_V_BIND_OBJECT_ORDER', e)) {
              f.unshift(F);
              continue;
            }
            T();
            S();
            f.push(F);
          } else
            S({
              type: 14,
              loc: V,
              callee: e.helper(Tn),
              arguments: n ? [F] : [F, 'true'],
            });
        else e.onError(pe(ne ? 34 : 35, V));
        continue;
      }
      if (ne && J.some((yt) => yt.content === 'prop')) {
        p |= 32;
      }
      const st = e.directiveTransforms[N];
      if (e.directiveTransforms[N]) {
        const { props: yt, needRuntime: nt } = e.directiveTransforms[N](r[R], t, e);
        if (!a) {
          yt.forEach(D);
        }
        me && k && !Ye(k) ? S(ot(yt, s)) : l.push(...yt);
        if (nt) {
          u.push(r[R]);
          if (di(nt)) {
            es.set(r[R], nt);
          }
        }
      } else if (!Ns(N)) {
        u.push(r[R]);
        if (h) {
          d = true;
        }
      }
    }
  }
  let O;
  f.length ? (S(), f.length > 1 ? (O = Ee(e.helper(Ir), f, s)) : (O = f[0])) : l.length && (O = ot(pa(l), s));
  x ? (p |= 16) : (g && !n && (p |= 2), _ && !n && (p |= 4), C.length && (p |= 8), y && (p |= 32));
  if (!d && (p === 0 || p === 32) && (v || w || u.length > 0)) {
    p |= 512;
  }
  if (!e.inSSR && O)
    switch (O.type) {
      case 15:
        {
          let R = -1;
          let H = -1;
          let N = false;
        }
        for (let V = 0; V < O.properties.length; V++) {
          const J = O.properties[V].key;
          Ye(O.properties[V].key)
            ? O.properties[V].key.content === 'class'
              ? (R = V)
              : O.properties[V].key.content === 'style' && (H = V)
            : O.properties[V].key.isHandlerKey || (N = true);
        }
        {
          const k = O.properties[R];
          const F = O.properties[H];
        }
        N
          ? (O = Ee(e.helper(sr), [O]))
          : (k && !Ye(k.value) && (k.value = Ee(e.helper(An), [k.value])),
            F &&
              (_ || (F.value.type === 4 && F.value.content.trim()[0] === '[') || F.value.type === 17) &&
              (F.value = Ee(e.helper(In), [F.value])));
        break;
      case 14:
        break;
      default:
        O = Ee(e.helper(sr), [Ee(e.helper(pr), [O])]);
        break;
    }
  return {
    props: O,
    directives: u,
    patchFlag: p,
    dynamicPropNames: C,
    shouldUseBlock: d,
  };
}
function pa(t) {
  const e = new Map();
  const r = [];
  for (let n = 0; n < t.length; n++) {
    const i = t[n];
    if (t[n].key.type === 8 || !t[n].key.isStatic) {
      r.push(t[n]);
      continue;
    }
    const a = t[n].key.content;
    const o = e.get(t[n].key.content);
    o
      ? (t[n].key.content === 'style' || t[n].key.content === 'class' || oo(t[n].key.content)) && Dl(o, t[n])
      : (e.set(t[n].key.content, t[n]), r.push(t[n]));
  }
  return r;
}
function Dl(t, e) {
  t.value.type === 17 ? t.value.elements.push(e.value) : (t.value = Bt([t.value, e.value], t.loc));
}
function ns(t, e) {
  const r = [];
  const n = es.get(t);
  n ? r.push(e.helperString(n)) : (e.helper(wn), e.directives.add(t.name), r.push(ur(t.name, 'directive')));
  const { loc: i } = t;
  if (t.exp) {
    r.push(t.exp);
  }
  if (t.arg) {
    if (!t.exp) {
      r.push('void 0');
    }
    r.push(t.arg);
  }
  if (Object.keys(t.modifiers).length) {
    if (!t.arg) {
      if (!t.exp) {
        r.push('void 0');
      }
      r.push('void 0');
    }
    const a = Y('true', false, i);
    r.push(
      ot(
        t.modifiers.map((o) => we(o, a)),
        i,
      ),
    );
  }
  return Bt(r, t.loc);
}
function Rl(t) {
  let e = '[';
  for (let r = 0, n = t.length; r < n; r++) {
    e += JSON.stringify(t[r]);
    if (r < n - 1) {
      e += ', ';
    }
  }
  return e + ']';
}
function Zn(t) {
  return t === 'component' || t === 'Component';
}
const Pl = (t, e) => {
  if (br(t)) {
    const { children: r, loc: n } = t;
    const { slotName: i, slotProps: a } = is(t, e);
    const o = [e.prefixIdentifiers ? '_ctx.$slots' : '$slots', i, '{}', 'undefined', 'true'];
    let s = 2;
    if (a) {
      o[2] = a;
      s = 3;
    }
    if (r.length) {
      o[3] = Yt([], r, false, false, n);
      s = 4;
    }
    if (e.scopeId && !e.slotted) {
      s = 5;
    }
    o.splice(s);
    t.codegenNode = Ee(e.helper(wi), o, n);
  }
};
function is(t, e) {
  let r = '"default"';
  let n;
  const i = [];
  for (let a = 0; a < t.props.length; a++) {
    const o = t.props[a];
    if (o.type === 6)
      if (o.value) {
        o.name === 'name' ? (r = JSON.stringify(o.value.content)) : ((o.name = kt(o.name)), i.push(o));
      } else if (o.name === 'bind' && Mt(o.arg, 'name')) {
        if (o.exp) r = o.exp;
        else if (o.arg && o.arg.type === 4) {
          const s = kt(o.arg.content);
          r = o.exp = Y(s, false, o.arg.loc);
        }
      } else {
        if (o.name === 'bind' && o.arg && Ye(o.arg)) {
          o.arg.content = kt(o.arg.content);
        }
        i.push(o);
      }
  }
  if (i.length > 0) {
    const { props: a, directives: o } = Mi(t, e, i, false, false);
    n = a;
    if (o.length) {
      e.onError(pe(36, o[0].loc));
    }
  }
  return {
    slotName: r,
    slotProps: n,
  };
}
const ki = (t, e, r, n) => {
  const { loc: i, modifiers: a, arg: o } = t;
  if (!t.exp && !a.length) {
    r.onError(pe(35, i));
  }
  let s;
  if (o.type === 4)
    if (o.isStatic) {
      let u = o.content;
      if (u.startsWith('vue:')) {
        u = `vnode-${u.slice(4)}`;
      }
      const h = e.tagType !== 0 || u.startsWith('vnode') || !/[A-Z]/.test(u) ? Ds(kt(u)) : `on:${u}`;
      s = Y(h, true, o.loc);
    } else s = ft([`${r.helperString(an)}(`, o, ')']);
  else {
    s = o;
    s.children.unshift(`${r.helperString(an)}(`);
    s.children.push(')');
  }
  let c = t.exp;
  if (c && !c.content.trim()) {
    c = void 0;
  }
  let l = r.cacheHandlers && !c && !r.inVOnce;
  if (c) {
    const u = To(c);
    const h = !(u || bo(c));
    const d = c.content.includes(';');
    if (h || (l && u)) {
      c = ft([`${h ? '$event' : '(...args)'} => ${d ? '{' : '('}`, c, d ? '}' : ')']);
    }
  }
  let f = { props: [we(s, c || Y('() => {}', false, i))] };
  if (n) {
    f = n(f);
  }
  if (l) {
    f.props[0].value = r.cache(f.props[0].value);
  }
  f.props.forEach((u) => (u.key.isHandlerKey = true));
  return f;
};
const as = (t, e, r) => {
  const { modifiers: n, loc: i } = t;
  const a = t.arg;
  let { exp: o } = t;
  if (o && o.type === 4 && !o.content.trim()) {
    o = void 0;
  }
  a.type !== 4
    ? (a.children.unshift('('), a.children.push(') || ""'))
    : a.isStatic || (a.content = a.content ? `${a.content} || ""` : '""');
  if (n.some((s) => s.content === 'camel')) {
    a.type === 4
      ? a.isStatic
        ? (a.content = kt(a.content))
        : (a.content = `${r.helperString(nn)}(${a.content})`)
      : (a.children.unshift(`${r.helperString(nn)}(`), a.children.push(')'));
  }
  if (!r.inSSR) {
    if (n.some((s) => s.content === 'prop')) {
      va(a, '.');
    }
    if (n.some((s) => s.content === 'attr')) {
      va(a, '^');
    }
  }
  return { props: [we(a, o)] };
};
const va = (t, e) => {
  t.type === 4
    ? t.isStatic
      ? (t.content = e + t.content)
      : (t.content = `\`${e}\${${t.content}}\``)
    : (t.children.unshift(`'${e}' + (`), t.children.push(')'));
};
const Ml = (t, e) => {
  if (t.type === 0 || t.type === 1 || t.type === 11 || t.type === 10)
    return () => {
      const r = t.children;
      let n;
      let i = false;
      for (let a = 0; a < r.length; a++) {
        const o = r[a];
        if ($r(r[a])) {
          i = true;
          for (let s = a + 1; s < r.length; s++) {
            const c = r[s];
            if ($r(r[s])) {
              if (!n) {
                n = r[a] = ft([r[a]], r[a].loc);
              }
              n.children.push(' + ', r[s]);
              r.splice(s, 1);
              s--;
            } else {
              n = void 0;
              break;
            }
          }
        }
      }
      if (
        !(
          !i ||
          (r.length === 1 &&
            (t.type === 0 ||
              (t.type === 1 &&
                t.tagType === 0 &&
                !t.props.find((a) => a.type === 7 && !e.directiveTransforms[a.name]) &&
                t.tag !== 'template')))
        )
      )
        for (let a = 0; a < r.length; a++) {
          const o = r[a];
          if ($r(r[a]) || r[a].type === 8) {
            const s = [];
            if (r[a].type !== 2 || r[a].content !== ' ') {
              s.push(r[a]);
            }
            if (!e.ssr && tt(r[a], e) === 0) {
              s.push('1');
            }
            r[a] = {
              type: 12,
              content: r[a],
              loc: r[a].loc,
              codegenNode: Ee(e.helper(mn), s),
            };
          }
        }
    };
};
const ga = new WeakSet();
const kl = (t, e) => {
  if (t.type === 1 && qe(t, 'once', true))
    return ga.has(t) || e.inVOnce || e.inSSR
      ? void 0
      : (ga.add(t),
        (e.inVOnce = true),
        e.helper(Tr),
        () => {
          e.inVOnce = false;
          const r = e.currentNode;
          if (r.codegenNode) {
            r.codegenNode = e.cache(r.codegenNode, true, true);
          }
        });
};
const Bi = (t, e, r) => {
  const { exp: n, arg: i } = t;
  if (!n) {
    r.onError(pe(41, t.loc));
    return Vr();
  }
  const a = n.loc.source.trim();
  const o = n.type === 4 ? n.content : a;
  const s = r.bindingMetadata[a];
  if (r.bindingMetadata[a] === 'props' || r.bindingMetadata[a] === 'props-aliased') {
    r.onError(pe(44, n.loc));
    return Vr();
  }
  if (!o.trim() || !To(n)) {
    r.onError(pe(42, n.loc));
    return Vr();
  }
  const c = i || Y('modelValue', true);
  const l = i ? (Ye(i) ? `onUpdate:${kt(i.content)}` : ft(['"onUpdate:" + ', i])) : 'onUpdate:modelValue';
  let f;
  const u = r.isTS ? '($event: any)' : '$event';
  f = ft([`${u} => ((`, n, ') = $event)']);
  const h = [we(c, t.exp), we(l, f)];
  if (t.modifiers.length && e.tagType === 1) {
    const d = t.modifiers
      .map((v) => v.content)
      .map((v) => (Rr(v) ? v : JSON.stringify(v)) + ': true')
      .join(', ');
    const p = i ? (Ye(i) ? `${i.content}Modifiers` : ft([i, ' + "Modifiers"'])) : 'modelModifiers';
    h.push(we(p, Y(`{ ${d} }`, false, t.loc, 2)));
  }
  return Vr(h);
};
function Vr(t = []) {
  return { props: t };
}
const Bl = /[\w).+\-_$\]]/;
const Ll = (t, e) => {
  if ($t('COMPILER_FILTERS', e)) {
    t.type === 5
      ? ln(t.content, e)
      : t.type === 1 &&
        t.props.forEach((r) => {
          if (r.type === 7 && r.name !== 'for' && r.exp) {
            ln(r.exp, e);
          }
        });
  }
};
function ln(t, e) {
  if (t.type === 4) _a(t, e);
  else
    for (let r = 0; r < t.children.length; r++) {
      const n = t.children[r];
      if (typeof t.children[r] == 'object') {
        t.children[r].type === 4
          ? _a(t.children[r], e)
          : t.children[r].type === 8
            ? ln(t, e)
            : t.children[r].type === 5 && ln(t.children[r].content, e);
      }
    }
}
function _a(t, e) {
  const r = t.content;
  let n = false;
  let i = false;
  let a = false;
  let o = false;
  let s = 0;
  let c = 0;
  let l = 0;
  let f = 0;
  let u;
  let h;
  let d;
  let p;
  let v = [];
  for (d = 0; d < t.content.length; d++) {
    h = u;
    u = t.content.charCodeAt(d);
    if (n)
      if (u === 39 && h !== 92) {
        n = false;
      } else if (i)
        if (u === 34 && h !== 92) {
          i = false;
        } else if (a)
          if (u === 96 && h !== 92) {
            a = false;
          } else if (o)
            if (u === 47 && h !== 92) {
              o = false;
            } else if (
              u === 124 &&
              t.content.charCodeAt(d + 1) !== 124 &&
              t.content.charCodeAt(d - 1) !== 124 &&
              !s &&
              !c &&
              !l
            )
              p === void 0 ? ((f = d + 1), (p = t.content.slice(0, d).trim())) : g();
            else {
              switch (u) {
                case 34:
                  i = true;
                  break;
                case 39:
                  n = true;
                  break;
                case 96:
                  a = true;
                  break;
                case 40:
                  l++;
                  break;
                case 41:
                  l--;
                  break;
                case 91:
                  c++;
                  break;
                case 93:
                  c--;
                  break;
                case 123:
                  s++;
                  break;
                case 125:
                  s--;
                  break;
              }
              if (u === 47) {
                let _ = d - 1;
                let y;
                for (; _ >= 0 && ((y = t.content.charAt(_)), y === ' '); _--);
                if (!y || !Bl.test(y)) {
                  o = true;
                }
              }
            }
  }
  p === void 0 ? (p = t.content.slice(0, d).trim()) : f !== 0 && g();
  function g() {
    v.push(t.content.slice(f, d).trim());
    f = d + 1;
  }
  if (v.length) {
    for (d = 0; d < v.length; d++) p = Fl(p, v[d], e);
    t.content = p;
    t.ast = void 0;
  }
}
function Fl(t, e, r) {
  r.helper(En);
  const n = e.indexOf('(');
  if (n < 0) {
    r.filters.add(e);
    return `${ur(e, 'filter')}(${t})`;
  }
  {
    const i = e.slice(0, n);
    const a = e.slice(n + 1);
    r.filters.add(i);
    return `${ur(i, 'filter')}(${t}${a !== ')' ? ',' + a : a}`;
  }
}
const ma = new WeakSet();
const Ul = (t, e) => {
  if (t.type === 1) {
    const r = qe(t, 'memo');
    return !r || ma.has(t) || e.inSSR
      ? void 0
      : (ma.add(t),
        () => {
          const n = t.codegenNode || e.currentNode.codegenNode;
          if (n && n.type === 13) {
            if (t.tagType !== 1) {
              On(n, e);
            }
            t.codegenNode = Ee(e.helper(Nn), [r.exp, Yt(void 0, n), '_cache', String(e.cached.length)]);
            e.cached.push(null);
          }
        });
  }
};
const os = (t, e) => {
  if (t.type === 1) {
    for (const r of t.props)
      if (r.type === 7 && r.name === 'bind' && !r.exp) {
        const n = r.arg;
        if (r.arg.type !== 4 || !r.arg.isStatic) {
          e.onError(pe(52, r.arg.loc));
          r.exp = Y('', true, r.arg.loc);
        } else {
          const i = kt(r.arg.content);
          if (Ii.test(i[0]) || i[0] === '-') {
            r.exp = Y(i, false, r.arg.loc);
          }
        }
      }
  }
};
function ss(t) {
  return [
    [os, kl, Al, Ul, Tl, Ll, Pl, ts, Zo, Ml],
    {
      on: ki,
      bind: as,
      model: Bi,
    },
  ];
}
function cs(t, e = {}) {
  const r = e.onError || Si;
  const n = e.mode === 'module';
  e.prefixIdentifiers === true ? r(pe(47)) : n && r(pe(48));
  const i = false;
  if (e.cacheHandlers) {
    r(pe(49));
  }
  if (e.scopeId && !n) {
    r(pe(50));
  }
  const a = Ct({}, e, { prefixIdentifiers: i });
  const o = Ne(t) ? Oi(t, a) : t;
  const [s, c] = ss();
  zo(
    o,
    Ct({}, a, {
      nodeTransforms: [...s, ...(e.nodeTransforms || [])],
      directiveTransforms: Ct({}, c, e.directiveTransforms || {}),
    }),
  );
  return Wo(o, a);
}
const Vl = {
  DATA: 'data',
  PROPS: 'props',
  PROPS_ALIASED: 'props-aliased',
  SETUP_LET: 'setup-let',
  SETUP_CONST: 'setup-const',
  SETUP_REACTIVE_CONST: 'setup-reactive-const',
  SETUP_MAYBE_REF: 'setup-maybe-ref',
  SETUP_REF: 'setup-ref',
  OPTIONS: 'options',
  LITERAL_CONST: 'literal-const',
};
const ls = () => ({ props: [] });
const Li = Symbol('');
const Fi = Symbol('');
const Ui = Symbol('');
const Vi = Symbol('');
const fn = Symbol('');
const Gi = Symbol('');
const Hi = Symbol('');
const Xi = Symbol('');
const zi = Symbol('');
const ji = Symbol('');
_o({
  [Li]: 'vModelRadio',
  [Fi]: 'vModelCheckbox',
  [Ui]: 'vModelText',
  [Vi]: 'vModelSelect',
  [fn]: 'vModelDynamic',
  [Gi]: 'withModifiers',
  [Hi]: 'withKeys',
  [Xi]: 'vShow',
  [zi]: 'Transition',
  [ji]: 'TransitionGroup',
});
let er;
function Gl(t, e = false) {
  if (!er) {
    er = document.createElement('div');
  }
  return e
    ? ((er.innerHTML = `<div foo="${t.replace(/"/g, '&quot;')}">`), er.children[0].getAttribute('foo'))
    : ((er.innerHTML = t), er.textContent);
}
const Wi = {
  parseMode: 'html',
  isVoidTag: ks,
  isNativeTag: (t) => Rs(t) || Ps(t) || Ms(t),
  isPreTag: (t) => t === 'pre',
  isIgnoreNewlineTag: (t) => t === 'pre' || t === 'textarea',
  decodeEntities: Gl,
  isBuiltInComponent: (t) => {
    if (t === 'Transition' || t === 'transition') return zi;
    if (t === 'TransitionGroup' || t === 'transition-group') return ji;
  },
  getNamespace(t, e, r) {
    let n = e ? e.ns : r;
    if (e && n === 2)
      if (e.tag === 'annotation-xml') {
        if (t === 'svg') return 1;
        if (
          e.props.some(
            (i) =>
              i.type === 6 &&
              i.name === 'encoding' &&
              i.value != null &&
              (i.value.content === 'text/html' || i.value.content === 'application/xhtml+xml'),
          )
        ) {
          n = 0;
        }
      } else if (/^m(?:[ions]|text)$/.test(e.tag) && t !== 'mglyph' && t !== 'malignmark') {
        n = 0;
      } else if (e && n === 1 && (e.tag === 'foreignObject' || e.tag === 'desc' || e.tag === 'title')) {
        n = 0;
      }
    if (n === 0) {
      if (t === 'svg') return 1;
      if (t === 'math') return 2;
    }
    return n;
  },
};
const fs = (t) => {
  if (t.type === 1) {
    t.props.forEach((e, r) => {
      if (e.type === 6 && e.name === 'style' && e.value) {
        t.props[r] = {
          type: 7,
          name: 'bind',
          arg: Y('style', true, e.loc),
          exp: Hl(e.value.content, e.loc),
          modifiers: [],
          loc: e.loc,
        };
      }
    });
  }
};
const Hl = (t, e) => {
  const r = Bs(t);
  return Y(JSON.stringify(r), false, e, 3);
};
function At(t, e) {
  return pe(t, e);
}
const Xl = {
  X_V_HTML_NO_EXPRESSION: 53,
  53: 'X_V_HTML_NO_EXPRESSION',
  X_V_HTML_WITH_CHILDREN: 54,
  54: 'X_V_HTML_WITH_CHILDREN',
  X_V_TEXT_NO_EXPRESSION: 55,
  55: 'X_V_TEXT_NO_EXPRESSION',
  X_V_TEXT_WITH_CHILDREN: 56,
  56: 'X_V_TEXT_WITH_CHILDREN',
  X_V_MODEL_ON_INVALID_ELEMENT: 57,
  57: 'X_V_MODEL_ON_INVALID_ELEMENT',
  X_V_MODEL_ARG_ON_ELEMENT: 58,
  58: 'X_V_MODEL_ARG_ON_ELEMENT',
  X_V_MODEL_ON_FILE_INPUT_ELEMENT: 59,
  59: 'X_V_MODEL_ON_FILE_INPUT_ELEMENT',
  X_V_MODEL_UNNECESSARY_VALUE: 60,
  60: 'X_V_MODEL_UNNECESSARY_VALUE',
  X_V_SHOW_NO_EXPRESSION: 61,
  61: 'X_V_SHOW_NO_EXPRESSION',
  X_TRANSITION_INVALID_CHILDREN: 62,
  62: 'X_TRANSITION_INVALID_CHILDREN',
  X_IGNORED_SIDE_EFFECT_TAG: 63,
  63: 'X_IGNORED_SIDE_EFFECT_TAG',
  __EXTEND_POINT__: 64,
  64: '__EXTEND_POINT__',
};
const zl = {
  53: 'v-html is missing expression.',
  54: 'v-html will override element children.',
  55: 'v-text is missing expression.',
  56: 'v-text will override element children.',
  57: 'v-model can only be used on <input>, <textarea> and <select> elements.',
  58: 'v-model argument is not supported on plain elements.',
  59: 'v-model cannot be used on file inputs since they are read-only. Use a v-on:change listener instead.',
  60: "Unnecessary value binding used alongside v-model. It will interfere with v-model's behavior.",
  61: 'v-show is missing expression.',
  62: '<Transition> expects exactly one child element or component.',
  63: 'Tags with side effect (<script> and <style>) are ignored in client component templates.',
};
const jl = (t, e, r) => {
  const { exp: n, loc: i } = t;
  if (!n) {
    r.onError(pe(53, i));
  }
  if (e.children.length) {
    r.onError(pe(54, i));
    e.children.length = 0;
  }
  return { props: [we(Y('innerHTML', true, i), n || Y('', true))] };
};
const Wl = (t, e, r) => {
  const { exp: n, loc: i } = t;
  if (!n) {
    r.onError(pe(55, i));
  }
  if (e.children.length) {
    r.onError(pe(56, i));
    e.children.length = 0;
  }
  return { props: [we(Y('textContent', true), n ? (tt(n, r) > 0 ? n : Ee(r.helperString(Dr), [n], i)) : Y('', true))] };
};
const $l = (t, e, r) => {
  const n = Bi(t, e, r);
  if (!n.props.length || e.tagType === 1) return n;
  if (t.arg) {
    r.onError(pe(58, t.arg.loc));
  }
  const { tag: i } = e;
  const a = r.isCustomElement(i);
  if (i === 'input' || i === 'textarea' || i === 'select' || a) {
    let o = Ui;
    let s = false;
    if (i === 'input' || a) {
      const c = Pr(e, 'type');
      if (c) {
        if (c.type === 7) o = fn;
        else if (c.value)
          switch (c.value.content) {
            case 'radio':
              o = Li;
              break;
            case 'checkbox':
              o = Fi;
              break;
            case 'file':
              {
                s = true;
                r.onError(pe(59, t.loc));
              }
              break;
          }
      } else if (Do(e)) {
        o = fn;
      }
    } else if (i === 'select') {
      o = Vi;
    }
    if (!s) {
      n.needRuntime = r.helper(o);
    }
  } else r.onError(pe(57, t.loc));
  n.props = n.props.filter((o) => !(o.key.type === 4 && o.key.content === 'modelValue'));
  return n;
};
const Jl = dn('passive,once,capture');
const ql = dn('stop,prevent,self,ctrl,shift,alt,meta,exact,middle');
const Yl = dn('left,right');
const us = dn('onkeyup,onkeydown,onkeypress');
const Kl = (t, e, r, n) => {
  const i = [];
  const a = [];
  const o = [];
  for (let s = 0; s < e.length; s++) {
    const c = e[s].content;
    (e[s].content === 'native' && lr('COMPILER_V_ON_NATIVE', r)) || Jl(e[s].content)
      ? o.push(e[s].content)
      : Yl(e[s].content)
        ? Ye(t)
          ? us(t.content.toLowerCase())
            ? i.push(e[s].content)
            : a.push(e[s].content)
          : (i.push(e[s].content), a.push(e[s].content))
        : ql(e[s].content)
          ? a.push(e[s].content)
          : i.push(e[s].content);
  }
  return {
    keyModifiers: i,
    nonKeyModifiers: a,
    eventOptionModifiers: o,
  };
};
const xa = (t, e) =>
  Ye(t) && t.content.toLowerCase() === 'onclick'
    ? Y(e, true)
    : t.type !== 4
      ? ft(['(', t, `) === "onClick" ? "${e}" : (`, t, ')'])
      : t;
const Zl = (t, e, r) =>
  ki(t, e, r, (n) => {
    const { modifiers: i } = t;
    if (!i.length) return n;
    let { key: a, value: o } = n.props[0];
    const { keyModifiers: s, nonKeyModifiers: c, eventOptionModifiers: l } = Kl(a, i, r, t.loc);
    if (c.includes('right')) {
      a = xa(a, 'onContextmenu');
    }
    if (c.includes('middle')) {
      a = xa(a, 'onMouseup');
    }
    if (c.length) {
      o = Ee(r.helper(Gi), [o, JSON.stringify(c)]);
    }
    if (s.length && (!Ye(a) || us(a.content.toLowerCase()))) {
      o = Ee(r.helper(Hi), [o, JSON.stringify(s)]);
    }
    if (l.length) {
      const f = l.map(io).join('');
      a = Ye(a) ? Y(`${a.content}${f}`, true) : ft(['(', a, `) + "${f}"`]);
    }
    return { props: [we(a, o)] };
  });
const Ql = (t, e, r) => {
  const { exp: n, loc: i } = t;
  if (!n) {
    r.onError(pe(61, i));
  }
  return {
    props: [],
    needRuntime: r.helper(Xi),
  };
};
const ef = (t, e) => {
  if (t.type === 1 && t.tagType === 0 && (t.tag === 'script' || t.tag === 'style')) {
    e.removeNode();
  }
};
const hs = [fs];
const ds = {
  cloak: ls,
  html: jl,
  text: Wl,
  model: $l,
  on: Zl,
  show: Ql,
};
function tf(t, e = {}) {
  return cs(
    t,
    Ct({}, Wi, e, {
      nodeTransforms: [ef, ...hs, ...(e.nodeTransforms || [])],
      directiveTransforms: Ct({}, ds, e.directiveTransforms || {}),
      transformHoist: null,
    }),
  );
}
function rf(t, e = {}) {
  return Oi(t, Ct({}, Wi, e));
}
const nf = Object.freeze(
  Object.defineProperty(
    {
      __proto__: null,
      BASE_TRANSITION: _i,
      BindingTypes: Vl,
      CAMELIZE: nn,
      CAPITALIZE: uo,
      CREATE_BLOCK: mi,
      CREATE_COMMENT: dr,
      CREATE_ELEMENT_BLOCK: xi,
      CREATE_ELEMENT_VNODE: _n,
      CREATE_SLOTS: Ei,
      CREATE_STATIC: yi,
      CREATE_TEXT: mn,
      CREATE_VNODE: gn,
      CompilerDeprecationTypes: Cc,
      ConstantTypes: vc,
      DOMDirectiveTransforms: ds,
      DOMErrorCodes: Xl,
      DOMErrorMessages: zl,
      DOMNodeTransforms: hs,
      ElementTypes: pc,
      ErrorCodes: Ic,
      FRAGMENT: or,
      GUARD_REACTIVE_PROPS: pr,
      IS_MEMO_SAME: Ci,
      IS_REF: go,
      KEEP_ALIVE: Ar,
      MERGE_PROPS: Ir,
      NORMALIZE_CLASS: An,
      NORMALIZE_PROPS: sr,
      NORMALIZE_STYLE: In,
      Namespaces: hc,
      NodeTypes: dc,
      OPEN_BLOCK: Ut,
      POP_SCOPE_ID: po,
      PUSH_SCOPE_ID: ho,
      RENDER_LIST: Sn,
      RENDER_SLOT: wi,
      RESOLVE_COMPONENT: xn,
      RESOLVE_DIRECTIVE: wn,
      RESOLVE_DYNAMIC_COMPONENT: yn,
      RESOLVE_FILTER: En,
      SET_BLOCK_TRACKING: Tr,
      SUSPENSE: vn,
      TELEPORT: ar,
      TO_DISPLAY_STRING: Dr,
      TO_HANDLERS: Tn,
      TO_HANDLER_KEY: an,
      TRANSITION: zi,
      TRANSITION_GROUP: ji,
      TS_NODE_TYPES: So,
      UNREF: vo,
      V_MODEL_CHECKBOX: Fi,
      V_MODEL_DYNAMIC: fn,
      V_MODEL_RADIO: Li,
      V_MODEL_SELECT: Vi,
      V_MODEL_TEXT: Ui,
      V_ON_WITH_KEYS: Hi,
      V_ON_WITH_MODIFIERS: Gi,
      V_SHOW: Xi,
      WITH_CTX: bn,
      WITH_DIRECTIVES: Cn,
      WITH_MEMO: Nn,
      advancePositionWithClone: zc,
      advancePositionWithMutation: Oo,
      assert: jc,
      baseCompile: cs,
      baseParse: Oi,
      buildDirectiveArgs: ns,
      buildProps: Mi,
      buildSlots: Qo,
      checkCompatEnabled: lr,
      compile: tf,
      convertToBlock: On,
      createArrayExpression: Bt,
      createAssignmentExpression: xc,
      createBlockStatement: yo,
      createCacheExpression: xo,
      createCallExpression: Ee,
      createCompilerError: pe,
      createCompoundExpression: ft,
      createConditionalExpression: on,
      createDOMCompilerError: pe,
      createForLoopParams: cn,
      createFunctionExpression: Yt,
      createIfStatement: mc,
      createInterpolation: gc,
      createObjectExpression: ot,
      createObjectProperty: we,
      createReturnStatement: wc,
      createRoot: mo,
      createSequenceExpression: yc,
      createSimpleExpression: Y,
      createStructuralDirectiveTransform: Di,
      createTemplateLiteral: _c,
      createTransformContext: Xo,
      createVNodeCall: cr,
      errorMessages: Tc,
      extractIdentifiers: _t,
      findDir: qe,
      findProp: Pr,
      forAliasRE: Mo,
      generate: Wo,
      generateCodeFrame: Ls,
      getBaseTransformPreset: ss,
      getConstantType: tt,
      getMemoedVNodeCall: Po,
      getVNodeBlockHelper: Zt,
      getVNodeHelper: Kt,
      hasDynamicKeyVBind: Do,
      hasScopeRef: dt,
      helperNameMap: qt,
      injectProp: Nr,
      isCoreComponent: Ai,
      isFnExpression: bo,
      isFnExpressionBrowser: bo,
      isFnExpressionNode: Cr,
      isFunctionType: Bc,
      isInDestructureAssignment: Oc,
      isInNewExpression: Dc,
      isMemberExpression: To,
      isMemberExpressionBrowser: To,
      isMemberExpressionNode: Cr,
      isReferencedIdentifier: Nc,
      isSimpleIdentifier: Rr,
      isSlotOutlet: br,
      isStaticArgOf: Mt,
      isStaticExp: Ye,
      isStaticProperty: Co,
      isStaticPropertyKey: Lc,
      isTemplateNode: fr,
      isText: $r,
      isVPre: Jn,
      isVSlot: bi,
      locStub: Oe,
      noopDirectiveTransform: ls,
      parse: rf,
      parserOptions: Wi,
      processExpression: Kr,
      processFor: Ko,
      processIf: Yo,
      processSlotOutlet: is,
      registerRuntimeHelpers: _o,
      resolveComponentType: rs,
      stringifyExpression: qo,
      toValidAssetId: ur,
      trackSlotScopes: Zo,
      trackVForSlotScopes: Nl,
      transform: zo,
      transformBind: as,
      transformElement: ts,
      transformExpression: Sl,
      transformModel: Bi,
      transformOn: ki,
      transformStyle: fs,
      transformVBindShorthand: os,
      traverseNode: Mr,
      unwrapTSNode: Ao,
      validFirstIdentCharRE: Ii,
      walkBlockDeclarations: Eo,
      walkFunctionParams: Rc,
      walkIdentifiers: bc,
      warnDeprecation: Ac,
    },
    Symbol.toStringTag,
    { value: 'Module' },
  ),
);
const af = pi(nf);
const of = pi(Fs);
const sf = pi(Us);
/**
 * vue v3.5.22
 * (c) 2018-present Yuxi (Evan) You and Vue contributors
 * @license MIT
 **/
var ya;
function cf() {
  if (false) {
    ya = 1;
    (function (t) {
      Object.defineProperty(t, '__esModule', { value: true });
      var e = af;
      var r = of;
      var n = sf;
      function i(c) {
        var l = Object.create(null);
        if (c) for (var f in c) l[f] = c[f];
        l.default = c;
        return Object.freeze(l);
      }
      var a = i(of);
      const o = Object.create(null);
      function s(c, l) {
        if (!sf.isString(c))
          if (c.nodeType) c = c.innerHTML;
          else return sf.NOOP;
        const f = sf.genCacheKey(c, l);
        const u = o[f];
        if (o[f]) return o[f];
        if (c[0] === '#') {
          const v = document.querySelector(c);
          c = v ? v.innerHTML : '';
        }
        const h = sf.extend(
          {
            hoistStatic: true,
            onError: void 0,
            onWarn: sf.NOOP,
          },
          l,
        );
        if (!h.isCustomElement && typeof customElements < 'u') {
          h.isCustomElement = (v) => !!customElements.get(v);
        }
        const { code: d } = af.compile(c, h);
        const p = new Function('Vue', d)(a);
        p._rc = true;
        return (o[f] = p);
      }
      of.registerRuntimeCompiler(s);
      t.compile = s;
      Object.keys(of).forEach(function (c) {
        if (c !== 'default' && !Object.prototype.hasOwnProperty.call(t, c)) {
          t[c] = of[c];
        }
      });
    })(Bn);
  }
  return Bn;
}
var wa;
function lf() {
  if (false) {
    wa = 1;
    kn.exports = cf();
  }
  return kn.exports;
}
var ff = Wr.exports;
var Ea;
function uf() {
  if (false) {
    Ea = 1;
    (function (t, e) {
      (function (r, n) {
        t.exports = n(lf());
      })(typeof self < 'u' ? self : Wr.exports, function (r) {
        return (function () {
          var n = {
            365: function (s, c, l) {
              l.r(c);
              var f = l(81);
              var u = l.n(f);
              var h = l(645);
              var d = l.n(h);
              var p = d()(u());
              p.push([
                s.id,
                '.resizable-component[data-v-3de5149f]{position:relative}.resizable-component>.resizable-r[data-v-3de5149f]{z-index:90;cursor:e-resize;top:0;height:100%}.resizable-component>.resizable-r[data-v-3de5149f],.resizable-component>.resizable-rb[data-v-3de5149f]{display:block;position:absolute;touch-action:none;user-select:none;-moz-user-select:none;-webkit-user-select:none;width:12px;right:-6px}.resizable-component>.resizable-rb[data-v-3de5149f]{cursor:se-resize;height:12px;bottom:-6px;z-index:91}.resizable-component>.resizable-b[data-v-3de5149f]{z-index:90;cursor:s-resize;width:100%;left:0}.resizable-component>.resizable-b[data-v-3de5149f],.resizable-component>.resizable-lb[data-v-3de5149f]{display:block;position:absolute;touch-action:none;user-select:none;-moz-user-select:none;-webkit-user-select:none;height:12px;bottom:-6px}.resizable-component>.resizable-lb[data-v-3de5149f]{cursor:sw-resize;width:12px;left:-6px;z-index:91}.resizable-component>.resizable-l[data-v-3de5149f]{z-index:90;cursor:w-resize;height:100%;top:0}.resizable-component>.resizable-l[data-v-3de5149f],.resizable-component>.resizable-lt[data-v-3de5149f]{display:block;position:absolute;touch-action:none;user-select:none;-moz-user-select:none;-webkit-user-select:none;width:12px;left:-6px}.resizable-component>.resizable-lt[data-v-3de5149f]{cursor:nw-resize;height:12px;top:-6px;z-index:91}.resizable-component>.resizable-t[data-v-3de5149f]{z-index:90;cursor:n-resize;width:100%;left:0}.resizable-component>.resizable-rt[data-v-3de5149f],.resizable-component>.resizable-t[data-v-3de5149f]{display:block;position:absolute;touch-action:none;user-select:none;-moz-user-select:none;-webkit-user-select:none;height:12px;top:-6px}.resizable-component>.resizable-rt[data-v-3de5149f]{cursor:ne-resize;width:12px;right:-6px;z-index:91}',
                '',
              ]);
              c.default = p;
            },
            645: function (s) {
              s.exports = function (c) {
                var l = [];
                l.toString = function () {
                  return this.map(function (f) {
                    var u = '';
                    var h = typeof f[5] < 'u';
                    if (f[4]) {
                      u += '@supports ('.concat(f[4], ') {');
                    }
                    if (f[2]) {
                      u += '@media '.concat(f[2], ' {');
                    }
                    if (h) {
                      u += '@layer'.concat(f[5].length > 0 ? ' '.concat(f[5]) : '', ' {');
                    }
                    u += c(f);
                    if (h) {
                      u += '}';
                    }
                    if (f[2]) {
                      u += '}';
                    }
                    if (f[4]) {
                      u += '}';
                    }
                    return u;
                  }).join('');
                };
                l.i = function (f, u, h, d, p) {
                  if (typeof f == 'string') {
                    f = [[null, f, void 0]];
                  }
                  var v = {};
                  if (h)
                    for (var g = 0; g < this.length; g++) {
                      var _ = this[g][0];
                      if (_ != null) {
                        v[_] = true;
                      }
                    }
                  for (var y = 0; y < f.length; y++) {
                    var x = [].concat(f[y]);
                    if (!(h && v[x[0]])) {
                      if (typeof p < 'u') {
                        if (!(typeof x[5] > 'u')) {
                          x[1] = '@layer'.concat(x[5].length > 0 ? ' '.concat(x[5]) : '', ' {').concat(x[1], '}');
                        }
                        x[5] = p;
                      }
                      if (u) {
                        if (x[2]) {
                          x[1] = '@media '.concat(x[2], ' {').concat(x[1], '}');
                        }
                        x[2] = u;
                      }
                      if (d) {
                        x[4]
                          ? ((x[1] = '@supports ('.concat(x[4], ') {').concat(x[1], '}')), (x[4] = d))
                          : (x[4] = ''.concat(d));
                      }
                      l.push(x);
                    }
                  }
                };
                return l;
              };
            },
            81: function (s) {
              s.exports = function (c) {
                return c[1];
              };
            },
            82: function (s, c) {
              c.Z = (l, f) => {
                const u = l.__vccOpts || l;
                for (const [h, d] of f) u[h] = d;
                return u;
              };
            },
            733: function (s, c, l) {
              var f = l(365);
              if (f.__esModule) {
                f = f.default;
              }
              if (typeof f == 'string') {
                f = [[s.id, f, '']];
              }
              if (f.locals) {
                s.exports = f.locals;
              }
              var u = l(650).Z;
              l(650).Z('833bf5a8', f, true, {
                sourceMap: false,
                shadowMode: false,
              });
            },
            650: function (s, c, l) {
              function f(N, k) {
                for (var F = [], V = {}, J = 0; J < k.length; J++) {
                  var ne = k[J];
                  var me = k[J][0];
                  var st = k[J][1];
                  var yt = k[J][2];
                  var nt = k[J][3];
                  var Qt = {
                    id: N + ':' + J,
                    css: k[J][1],
                    media: k[J][2],
                    sourceMap: k[J][3],
                  };
                  V[me]
                    ? V[me].parts.push(Qt)
                    : F.push(
                        (V[me] = {
                          id: me,
                          parts: [Qt],
                        }),
                      );
                }
                return F;
              }
              l.d(c, {
                Z: function () {
                  return C;
                },
              });
              var u = typeof document < 'u';
              if (typeof DEBUG < 'u' && DEBUG && !u)
                throw new Error(
                  "vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.",
                );
              var h = {};
              var d = u && (document.head || document.getElementsByTagName('head')[0]);
              var p = null;
              var v = 0;
              var g = false;
              var _ = function () {};
              var y = null;
              var x = 'data-vue-ssr-id';
              var w = typeof navigator < 'u' && /msie [6-9]\b/.test(navigator.userAgent.toLowerCase());
              function C(N, k, F, V) {
                g = F;
                y = V || {};
                var J = f(N, k);
                S(J);
                return function (ne) {
                  for (var me = [], st = 0; st < J.length; st++) {
                    var yt = J[st];
                    var nt = h[J[st].id];
                    h[J[st].id].refs--;
                    me.push(h[J[st].id]);
                  }
                  for (ne ? ((J = f(N, ne)), S(J)) : (J = []), st = 0; st < me.length; st++) {
                    nt = me[st];
                    if (nt.refs === 0) {
                      for (var Qt = 0; Qt < nt.parts.length; Qt++) nt.parts[Qt]();
                      delete h[nt.id];
                    }
                  }
                };
              }
              function S(N) {
                for (var k = 0; k < N.length; k++) {
                  var F = N[k];
                  var V = h[N[k].id];
                  if (h[N[k].id]) {
                    h[N[k].id].refs++;
                    for (var J = 0; J < h[N[k].id].parts.length; J++) h[N[k].id].parts[J](N[k].parts[J]);
                    for (; J < N[k].parts.length; J++) h[N[k].id].parts.push(D(N[k].parts[J]));
                    if (h[N[k].id].parts.length > N[k].parts.length) {
                      h[N[k].id].parts.length = N[k].parts.length;
                    }
                  } else {
                    var ne = [];
                    for (J = 0; J < N[k].parts.length; J++) ne.push(D(N[k].parts[J]));
                    h[N[k].id] = {
                      id: N[k].id,
                      refs: 1,
                      parts: ne,
                    };
                  }
                }
              }
              function T() {
                var N = document.createElement('style');
                N.type = 'text/css';
                d.appendChild(N);
                return N;
              }
              function D(N) {
                var k;
                var F;
                var V = document.querySelector('style[data-vue-ssr-id~="' + N.id + '"]');
                if (V) {
                  if (g) return _;
                  V.parentNode.removeChild(V);
                }
                if (w) {
                  var J = v++;
                  V = p || (p = T());
                  k = R.bind(null, V, J, false);
                  F = R.bind(null, V, J, true);
                } else {
                  V = T();
                  k = H.bind(null, V);
                  F = function () {
                    V.parentNode.removeChild(V);
                  };
                }
                k(N);
                return function (ne) {
                  if (ne) {
                    if (ne.css === N.css && ne.media === N.media && ne.sourceMap === N.sourceMap) return;
                    k((N = ne));
                  } else F();
                };
              }
              var O = (function () {
                var N = [];
                return function (k, F) {
                  N[k] = F;
                  return N.filter(Boolean).join(`
`);
                };
              })();
              function R(N, k, F, V) {
                var J = F ? '' : V.css;
                if (N.styleSheet) N.styleSheet.cssText = O(k, J);
                else {
                  var ne = document.createTextNode(J);
                  var me = N.childNodes;
                  if (N.childNodes[k]) {
                    N.removeChild(N.childNodes[k]);
                  }
                  N.childNodes.length ? N.insertBefore(ne, N.childNodes[k]) : N.appendChild(ne);
                }
              }
              function H(N, k) {
                var F = k.css;
                var V = k.media;
                var J = k.sourceMap;
                if (k.media) {
                  N.setAttribute('media', k.media);
                }
                if (y.ssrId) {
                  N.setAttribute('data-vue-ssr-id', k.id);
                }
                if (k.sourceMap) {
                  F +=
                    `
/*# sourceURL=` +
                    k.sourceMap.sources[0] +
                    ' */';
                  F +=
                    `
/*# sourceMappingURL=data:application/json;base64,` +
                    btoa(unescape(encodeURIComponent(JSON.stringify(k.sourceMap)))) +
                    ' */';
                }
                if (N.styleSheet) N.styleSheet.cssText = F;
                else {
                  for (; N.firstChild; ) N.removeChild(N.firstChild);
                  N.appendChild(document.createTextNode(F));
                }
              }
            },
            203: function (s) {
              s.exports = r;
            },
          };
          var i = {};
          function a(s) {
            var c = i[s];
            if (i[s] !== void 0) return i[s].exports;
            var l = (i[s] = {
              id: s,
              exports: {},
            });
            n[s](l, l.exports, a);
            return l.exports;
          }
          (function () {
            a.n = function (s) {
              var c =
                s && s.__esModule
                  ? function () {
                      return s.default;
                    }
                  : function () {
                      return s;
                    };
              a.d(c, { a: c });
              return c;
            };
          })();
          (function () {
            a.d = function (s, c) {
              for (var l in c)
                if (a.o(c, l) && !a.o(s, l)) {
                  Object.defineProperty(s, l, {
                    enumerable: true,
                    get: c[l],
                  });
                }
            };
          })();
          (function () {
            a.o = function (s, c) {
              return Object.prototype.hasOwnProperty.call(s, c);
            };
          })();
          (function () {
            a.r = function (s) {
              if (typeof Symbol < 'u' && Symbol.toStringTag) {
                Object.defineProperty(s, Symbol.toStringTag, { value: 'Module' });
              }
              Object.defineProperty(s, '__esModule', { value: true });
            };
          })();
          (function () {
            a.p = '';
          })();
          var o = {};
          (function () {
            a.r(o);
            a.d(o, {
              default: function () {
                return g;
              },
            });
            if (typeof window < 'u') {
              var s = window.document.currentScript;
              var c =
                window.document.currentScript && window.document.currentScript.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);
              if (c) {
                a.p = c[1];
              }
            }
            var l = a(203);
            function f(x, w, C, S, T, D) {
              (0, l.openBlock)();
              return (0, l.createElementBlock)(
                'div',
                {
                  ref: 'parent',
                  class: 'resizable-component',
                  style: (0, l.normalizeStyle)(D.style),
                },
                [
                  (0, l.renderSlot)(x.$slots, 'default', {}, void 0, true),
                  ((0, l.openBlock)(true),
                  (0, l.createElementBlock)(
                    l.Fragment,
                    null,
                    (0, l.renderList)(C.active, (O) =>
                      (0, l.withDirectives)(
                        ((0, l.openBlock)(),
                        (0, l.createElementBlock)(
                          'div',
                          {
                            key: O,
                            class: (0, l.normalizeClass)('resizable-' + O),
                          },
                          null,
                          2,
                        )),
                        [[l.vShow, !C.maximize]],
                      ),
                    ),
                    128,
                  )),
                ],
                4,
              );
            }
            const u = {
              'resizable-r': {
                bit: 1,
                cursor: 'e-resize',
              },
              'resizable-rb': {
                bit: 3,
                cursor: 'se-resize',
              },
              'resizable-b': {
                bit: 2,
                cursor: 's-resize',
              },
              'resizable-lb': {
                bit: 6,
                cursor: 'sw-resize',
              },
              'resizable-l': {
                bit: 4,
                cursor: 'w-resize',
              },
              'resizable-lt': {
                bit: 12,
                cursor: 'nw-resize',
              },
              'resizable-t': {
                bit: 8,
                cursor: 'n-resize',
              },
              'resizable-rt': {
                bit: 9,
                cursor: 'ne-resize',
              },
              'drag-el': {
                bit: 15,
                cursor: 'pointer',
              },
            };
            const h = {
              l: 1,
              t: 2,
              w: 4,
              h: 8,
            };
            var d = {
              name: 'VResizable',
              props: {
                width: {
                  default: void 0,
                  type: [Number, String],
                },
                minWidth: {
                  default: 0,
                  type: Number,
                },
                maxWidth: {
                  default: void 0,
                  type: Number,
                },
                height: {
                  default: void 0,
                  type: [Number, String],
                },
                minHeight: {
                  default: 0,
                  type: Number,
                },
                maxHeight: {
                  default: void 0,
                  type: Number,
                },
                left: {
                  default: 0,
                  type: [Number, String],
                },
                top: {
                  default: 0,
                  type: [Number, String],
                },
                active: {
                  default: () => ['r', 'rb', 'b', 'lb', 'l', 'lt', 't', 'rt'],
                  validator: (x) =>
                    ['r', 'rb', 'b', 'lb', 'l', 'lt', 't', 'rt'].filter((w) => x.indexOf(w) !== -1).length === x.length,
                  type: Array,
                },
                fitParent: {
                  default: false,
                  type: Boolean,
                },
                dragSelector: {
                  default: void 0,
                  type: String,
                },
                maximize: {
                  default: false,
                  type: Boolean,
                },
                disableAttributes: {
                  default: () => [],
                  validator: (x) => ['l', 't', 'w', 'h'].filter((w) => x.indexOf(w) !== -1).length === x.length,
                  type: Array,
                },
              },
              emits: [
                'mount',
                'destroy',
                'resize:start',
                'resize:move',
                'resize:end',
                'drag:start',
                'drag:move',
                'drag:end',
                'maximize',
              ],
              data() {
                return {
                  w: this.width,
                  h: this.height,
                  minW: this.minWidth,
                  minH: this.minHeight,
                  maxW: this.maxWidth,
                  maxH: this.maxHeight,
                  l: this.left,
                  t: this.top,
                  mouseX: 0,
                  mouseY: 0,
                  offsetX: 0,
                  offsetY: 0,
                  parent: {
                    width: 0,
                    height: 0,
                  },
                  resizeState: 0,
                  dragElements: [],
                  dragState: false,
                  calcMap: 15,
                };
              },
              computed: {
                style() {
                  return {
                    ...(this.calcMap & 4 && { width: typeof this.w == 'number' ? this.w + 'px' : this.w }),
                    ...(this.calcMap & 8 && { height: typeof this.h == 'number' ? this.h + 'px' : this.h }),
                    ...(this.calcMap & 1 && { left: typeof this.l == 'number' ? this.l + 'px' : this.l }),
                    ...(this.calcMap & 2 && { top: typeof this.t == 'number' ? this.t + 'px' : this.t }),
                  };
                },
              },
              watch: {
                maxWidth(x) {
                  this.maxW = x;
                },
                maxHeight(x) {
                  this.maxH = x;
                },
                minWidth(x) {
                  this.minW = x;
                },
                minHeight(x) {
                  this.minH = x;
                },
                width(x) {
                  if (typeof x == 'number') {
                    this.w = x;
                  }
                },
                height(x) {
                  if (typeof x == 'number') {
                    this.h = x;
                  }
                },
                left(x) {
                  if (typeof x == 'number') {
                    this.l = x;
                  }
                },
                top(x) {
                  if (typeof x == 'number') {
                    this.t = x;
                  }
                },
                dragSelector(x) {
                  this.setupDragElements(x);
                },
                maximize(x) {
                  this.setMaximize(x);
                  this.emitEvent('maximize', { state: x });
                },
              },
              mounted() {
                this.width
                  ? this.width !== 'auto' && typeof this.width != 'number' && (this.w = this.$el.clientWidth)
                  : (this.w = this.$el.parentElement.clientWidth);
                this.height
                  ? this.height !== 'auto' && typeof this.height != 'number' && (this.h = this.$el.clientHeight)
                  : (this.h = this.$el.parentElement.clientHeight);
                if (typeof this.left != 'number') {
                  this.l = this.$el.offsetLeft - this.$el.parentElement.offsetLeft;
                }
                if (typeof this.top != 'number') {
                  this.t = this.$el.offsetTop - this.$el.parentElement.offsetTop;
                }
                if (this.minW && this.w < this.minW) {
                  this.w = this.minW;
                }
                if (this.minH && this.h < this.minH) {
                  this.h = this.minH;
                }
                if (this.maxW && this.w > this.maxW) {
                  this.w = this.maxW;
                }
                if (this.maxH && this.h > this.maxH) {
                  this.h = this.maxH;
                }
                this.setMaximize(this.maximize);
                this.setupDragElements(this.dragSelector);
                this.disableAttributes.forEach((x) => {
                  switch (x) {
                    case 'l':
                      this.calcMap &= -2;
                      break;
                    case 't':
                      this.calcMap &= -3;
                      break;
                    case 'w':
                      this.calcMap &= -5;
                      break;
                    case 'h':
                      this.calcMap &= -9;
                  }
                });
                document.documentElement.addEventListener('mousemove', this.handleMove, true);
                document.documentElement.addEventListener('mousedown', this.handleDown, true);
                document.documentElement.addEventListener('mouseup', this.handleUp, true);
                document.documentElement.addEventListener('touchmove', this.handleMove, true);
                document.documentElement.addEventListener('touchstart', this.handleDown, true);
                document.documentElement.addEventListener('touchend', this.handleUp, true);
                this.emitEvent('mount');
              },
              beforeUnmount() {
                document.documentElement.removeEventListener('mousemove', this.handleMove, true);
                document.documentElement.removeEventListener('mousedown', this.handleDown, true);
                document.documentElement.removeEventListener('mouseup', this.handleUp, true);
                document.documentElement.removeEventListener('touchmove', this.handleMove, true);
                document.documentElement.removeEventListener('touchstart', this.handleDown, true);
                document.documentElement.removeEventListener('touchend', this.handleUp, true);
                this.emitEvent('destroy');
              },
              methods: {
                setMaximize(x) {
                  const w = this.$el.parentElement;
                  x
                    ? ((this.prevState = {
                        w: this.w,
                        h: this.h,
                        l: this.l,
                        t: this.t,
                      }),
                      (this.t = this.l = 0),
                      (this.w = this.$el.parentElement.clientWidth),
                      (this.h = this.$el.parentElement.clientHeight))
                    : this.restoreSize();
                },
                restoreSize() {
                  if (this.prevState) {
                    this.l = this.prevState.l;
                    this.t = this.prevState.t;
                    this.h = this.prevState.h;
                    this.w = this.prevState.w;
                  }
                },
                setupDragElements(x) {
                  this.$el.querySelectorAll('.drag-el').forEach((S) => {
                    S.classList.remove('drag-el');
                  });
                  const C = this.$el.querySelectorAll(x);
                  C.forEach((S) => {
                    S.classList.add('drag-el');
                  });
                  this.dragElements = Array.prototype.slice.call(C);
                },
                emitEvent(x, w) {
                  this.$emit(x, {
                    eventName: x,
                    left: this.l,
                    top: this.t,
                    width: this.w,
                    height: this.h,
                    cmp: this,
                    ...w,
                  });
                },
                handleMove(x) {
                  if (this.resizeState !== 0) {
                    let w;
                    let C;
                    if (!this.dragState) {
                      if (isNaN(this.w)) {
                        this.w = this.$el.clientWidth;
                      }
                      if (isNaN(this.h)) {
                        this.h = this.$el.clientHeight;
                      }
                    }
                    x.touches && x.touches.length >= 0
                      ? ((w = x.touches[0].clientY), (C = x.touches[0].clientX))
                      : ((w = x.clientY), (C = x.clientX));
                    if (this.maximize && this.prevState) {
                      const O = this.parent.width;
                      const R = this.parent.height;
                      this.restoreSize();
                      this.prevState = void 0;
                      this.t = w > this.parent.height / 2 ? this.parent.height - this.h : 0;
                      this.l = C > this.parent.width / 2 ? this.parent.width - this.w : 0;
                      this.emitEvent('maximize', { state: false });
                    }
                    let S = C - this.mouseX + this.offsetX;
                    let T = w - this.mouseY + this.offsetY;
                    if (this.$el.getBoundingClientRect) {
                      const O = this.$el.getBoundingClientRect();
                      const R = O.width / this.$el.offsetWidth || 1;
                      const H = O.height / this.$el.offsetHeight || 1;
                      S /= R;
                      T /= H;
                    }
                    this.offsetX = this.offsetY = 0;
                    if (this.resizeState & 1) {
                      !this.dragState && this.w + S < this.minW
                        ? (this.offsetX = S - (S = this.minW - this.w))
                        : !this.dragState &&
                            this.maxW &&
                            this.w + S > this.maxW &&
                            (!this.fitParent || this.w + this.l < this.parent.width)
                          ? (this.offsetX = S - (S = this.maxW - this.w))
                          : this.fitParent &&
                            this.l + this.w + S > this.parent.width &&
                            (this.offsetX = S - (S = this.parent.width - this.l - this.w));
                      if (this.calcMap & h.w) {
                        this.w += this.dragState ? 0 : S;
                      }
                    }
                    if (this.resizeState & 2) {
                      !this.dragState && this.h + T < this.minH
                        ? (this.offsetY = T - (T = this.minH - this.h))
                        : !this.dragState &&
                            this.maxH &&
                            this.h + T > this.maxH &&
                            (!this.fitParent || this.h + this.t < this.parent.height)
                          ? (this.offsetY = T - (T = this.maxH - this.h))
                          : this.fitParent &&
                            this.t + this.h + T > this.parent.height &&
                            (this.offsetY = T - (T = this.parent.height - this.t - this.h));
                      if (this.calcMap & 8) {
                        this.h += this.dragState ? 0 : T;
                      }
                    }
                    if (this.resizeState & 4) {
                      !this.dragState && this.w - S < this.minW
                        ? (this.offsetX = S - (S = this.w - this.minW))
                        : !this.dragState && this.maxW && this.w - S > this.maxW && this.l >= 0
                          ? (this.offsetX = S - (S = this.w - this.maxW))
                          : this.fitParent && this.l + S < 0 && (this.offsetX = S - (S = -this.l));
                      if (this.calcMap & 1) {
                        this.l += S;
                      }
                      if (this.calcMap & h.w) {
                        this.w -= this.dragState ? 0 : S;
                      }
                    }
                    if (this.resizeState & 8) {
                      !this.dragState && this.h - T < this.minH
                        ? (this.offsetY = T - (T = this.h - this.minH))
                        : !this.dragState && this.maxH && this.h - T > this.maxH && this.t >= 0
                          ? (this.offsetY = T - (T = this.h - this.maxH))
                          : this.fitParent && this.t + T < 0 && (this.offsetY = T - (T = -this.t));
                      if (this.calcMap & 2) {
                        this.t += T;
                      }
                      if (this.calcMap & 8) {
                        this.h -= this.dragState ? 0 : T;
                      }
                    }
                    this.mouseX = C;
                    this.mouseY = w;
                    const D = this.dragState ? 'drag:move' : 'resize:move';
                    this.emitEvent(D);
                  }
                },
                handleDown(x) {
                  if (!x.target.closest || x.target.closest('.resizable-component') === this.$refs.parent) {
                    for (let w in u)
                      if (
                        this.$el.contains(x.target) &&
                        ((x.target.closest && x.target.closest(`.${w}`)) || x.target.classList.contains(w))
                      ) {
                        if (w === 'drag-el') {
                          this.dragState = true;
                        }
                        document.body.style.cursor = u[w].cursor;
                        x.touches && x.touches.length >= 1
                          ? ((this.mouseX = x.touches[0].clientX), (this.mouseY = x.touches[0].clientY))
                          : (x.preventDefault && x.preventDefault(),
                            (this.mouseX = x.clientX),
                            (this.mouseY = x.clientY));
                        this.offsetX = this.offsetY = 0;
                        this.resizeState = u[w].bit;
                        this.parent.height = this.$el.parentElement.clientHeight;
                        this.parent.width = this.$el.parentElement.clientWidth;
                        const C = this.dragState ? 'drag:start' : 'resize:start';
                        this.emitEvent(C);
                        break;
                      }
                  }
                },
                handleUp() {
                  if (this.resizeState !== 0) {
                    this.resizeState = 0;
                    document.body.style.cursor = '';
                    const x = this.dragState ? 'drag:end' : 'resize:end';
                    this.emitEvent(x);
                    this.dragState = false;
                  }
                },
              },
            };
            var p = (a(733), a(82));
            var g = (0, p.Z)(d, [
              ['render', f],
              ['__scopeId', 'data-v-3de5149f'],
            ]);
            var _ = g;
            var y = g;
          })();
          return o;
        })();
      });
    })(Wr);
  }
  return Wr.exports;
}
var hf = uf();
const ps = Vs(hf);
const df = {
  components: {
    rightPanelContent: Ys,
    VueResizable: ps,
  },
  props: {
    typeObject: { required: true },
    refObjet: { required: true },
    allowed: { required: false },
  },
  data() {
    return {
      fit: true,
      left: void 0,
      percentage: 0.65,
      resizePanelDirection: ['l'],
      width: void 0,
    };
  },
  mounted() {
    this.initializePanel();
    window.addEventListener('resize', this.updatePanel);
  },
  methods: {
    initializePanel() {
      this.width = $('#panelResiz').width() * 0.65;
      this.left = $('#maintext').width() - this.width;
      let t = $('.resizable-component>.resizable-l');
      $(t).prepend(`<button
                        tabindex="-1"
                        aria-label="Toggle navigation"
                        type="button"
                        class="buttonArrowLeft"
                    ></button>	<div class="e-resize e-icons" style="width:6px">
                    </div><button
                        tabindex="-1"
                        aria-label="Toggle navigation"
                        type="button"
                class="buttonArrowRight"
                    ></button>`);
      let r = this;
      $(t).on('mouseover', function () {
        $(this).addClass('color', '#0d83c0');
        $('.buttonArrowLeft').addClass('buttonHover sf-icon-arrow-left---01');
        $('.buttonArrowRight').addClass('buttonHover sf-icon-arrow-right---01');
      });
      $(t).on('mouseleave', function () {
        $('.buttonArrowLeft').removeClass('buttonHover sf-icon-arrow-left---01');
        $('.buttonArrowRight').removeClass('buttonHover sf-icon-arrow-right---01');
      });
      $('.buttonArrowLeft').on('click', function () {
        r.centralPanelsStore.addingCentralPanels({
          centralPanelType: 'rightPanelViewer',
          centralPanelData: {
            objectType: r.typeObject,
            objectId: r.refObjet,
          },
        });
        b.$emit('showPanel', { panelDroite: false });
      });
      $('.buttonArrowRight').on('click', function () {
        r.width = $('#panelResiz').width() * 0.45;
        r.left = $('#maintext').width() - r.width;
        r.percentage = $('#panelRight').width() / $('#panelResiz').width();
        r.$nextTick(() => {
          b.$emit('needResizing');
        });
      });
    },
    maxWidth() {
      return $('#panelResiz').width();
    },
    minWidth() {
      return $('#panelResiz').width() * 0.4;
    },
    needResizing() {
      this.percentage = $('#panelRight').width() / $('#panelResiz').width();
      b.$emit('needResizing');
    },
    updatePanel() {
      let t = this.percentage * $('#panelResiz').width();
      switch (true) {
        case t >= this.maxWidth():
          {
            this.width = this.maxWidth();
            this.left = $('#maintext').width() - this.width;
          }
          break;
        case t <= this.minWidth():
          {
            this.width = this.minWidth();
            this.left = $('#maintext').width() - this.width;
          }
          break;
        case this.minWidth() < t && t < this.maxWidth():
          {
            this.width = t;
            this.left = $('#maintext').width() - this.width;
          }
          break;
      }
    },
  },
  beforeUnmount() {
    this.mainStore.updateIsDoingQuickUpload(false);
    window.removeEventListener('resize', this.updatePanel);
  },
};
const pf = { id: 'panelResiz' };
function vf(t, e, r, n, i, a) {
  const o = L('right-panel-content');
  const s = L('vue-resizable');
  P();
  return G('div', pf, [
    B(
      s,
      {
        id: 'panelRight',
        ref: 'resizablePanel',
        maxWidth: a.maxWidth(),
        minWidth: a.minWidth(),
        width: i.width,
        'fit-parent': i.fit,
        left: i.left,
        class: 'hauteurPanelRight',
        active: i.resizePanelDirection,
        'onResize:end': a.needResizing,
      },
      {
        default: W(() => [
          B(
            o,
            {
              'ref-objet': r.refObjet,
              'type-object': r.typeObject,
              allowed: r.allowed,
              isCentralPanel: false,
            },
            null,
            8,
            ['ref-objet', 'type-object', 'allowed'],
          ),
        ]),
        _: 1,
      },
      8,
      ['maxWidth', 'minWidth', 'width', 'fit-parent', 'left', 'active', 'onResize:end'],
    ),
  ]);
}
const gf = rt(df, [['render', vf]]);
function _f(t, e) {
  var r = Object.setPrototypeOf;
  Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : (t.__proto__ = e);
}
function mf(t, e) {
  if (e === void 0) {
    e = t.constructor;
  }
  var r = Error.captureStackTrace;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(t, e);
  }
}
var xf = (function () {
  var t = function (r, n) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (i, a) {
          i.__proto__ = a;
        }) ||
      function (i, a) {
        for (var o in a)
          if (Object.prototype.hasOwnProperty.call(a, o)) {
            i[o] = a[o];
          }
      };
    return t(r, n);
  };
  return function (e, r) {
    if (typeof r != 'function' && r !== null)
      throw new TypeError('Class extends value ' + String(r) + ' is not a constructor or null');
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var yf = (function (t) {
  xf(e, t);
  function e(r, n) {
    var i = this.constructor;
    var a = t(r, n) || this;
    Object.defineProperty(a, 'name', {
      value: this.constructor.name,
      enumerable: false,
      configurable: true,
    });
    _f(a, this.constructor.prototype);
    mf(a);
    return a;
  }
  return e;
})(Error);
var wf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Ke = (function (t) {
  wf(e, t);
  function e(r) {
    if (r === void 0) {
      r = void 0;
    }
    var n = t(r) || this;
    n.message = r;
    return n;
  }
  e.prototype.getKind = function () {
    var r = this.constructor;
    return this.constructor.kind;
  };
  e.kind = 'Exception';
  return e;
})(yf);
var Ef = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var pt = (function (t) {
  Ef(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.kind = 'ArgumentException';
  return e;
})(Ke);
var Cf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var z = (function (t) {
  Cf(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.kind = 'IllegalArgumentException';
  return e;
})(Ke);
var Sf = (function () {
  function t(e) {
    this.binarizer = e;
    if (e === null) throw new z('Binarizer must be non-null.');
  }
  t.prototype.getWidth = function () {
    return this.binarizer.getWidth();
  };
  t.prototype.getHeight = function () {
    return this.binarizer.getHeight();
  };
  t.prototype.getBlackRow = function (e, r) {
    return this.binarizer.getBlackRow(e, r);
  };
  t.prototype.getBlackMatrix = function () {
    if (this.matrix === null || this.matrix === void 0) {
      this.matrix = this.binarizer.getBlackMatrix();
    }
    return this.matrix;
  };
  t.prototype.isCropSupported = function () {
    return this.binarizer.getLuminanceSource().isCropSupported();
  };
  t.prototype.crop = function (e, r, n, i) {
    var a = this.binarizer.getLuminanceSource().crop(e, r, n, i);
    return new t(this.binarizer.createBinarizer(a));
  };
  t.prototype.isRotateSupported = function () {
    return this.binarizer.getLuminanceSource().isRotateSupported();
  };
  t.prototype.rotateCounterClockwise = function () {
    var e = this.binarizer.getLuminanceSource().rotateCounterClockwise();
    return new t(this.binarizer.createBinarizer(e));
  };
  t.prototype.rotateCounterClockwise45 = function () {
    var e = this.binarizer.getLuminanceSource().rotateCounterClockwise45();
    return new t(this.binarizer.createBinarizer(e));
  };
  t.prototype.toString = function () {
    try {
      return this.getBlackMatrix().toString();
    } catch {
      return '';
    }
  };
  return t;
})();
var Af = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Me = (function (t) {
  Af(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.getChecksumInstance = function () {
    return new e();
  };
  e.kind = 'ChecksumException';
  return e;
})(Ke);
var If = (function () {
  function t(e) {
    this.source = e;
  }
  t.prototype.getLuminanceSource = function () {
    return this.source;
  };
  t.prototype.getWidth = function () {
    return this.source.getWidth();
  };
  t.prototype.getHeight = function () {
    return this.source.getHeight();
  };
  return t;
})();
var ue = (function () {
  function t() {}
  t.arraycopy = function (e, r, n, i, a) {
    for (; a--; ) n[i++] = e[r++];
  };
  t.currentTimeMillis = function () {
    return Date.now();
  };
  return t;
})();
var Tf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var $i = (function (t) {
  Tf(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.kind = 'IndexOutOfBoundsException';
  return e;
})(Ke);
var bf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Ca = (function (t) {
  bf(e, t);
  function e(r, n) {
    if (r === void 0) {
      r = void 0;
    }
    if (n === void 0) {
      n = void 0;
    }
    var i = t(n) || this;
    i.index = r;
    i.message = n;
    return i;
  }
  e.kind = 'ArrayIndexOutOfBoundsException';
  return e;
})($i);
var Nf = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Te = (function () {
  function t() {}
  t.fill = function (e, r) {
    for (var n = 0, i = e.length; n < i; n++) e[n] = r;
  };
  t.fillWithin = function (e, r, n, i) {
    t.rangeCheck(e.length, r, n);
    for (var a = r; a < n; a++) e[a] = i;
  };
  t.rangeCheck = function (e, r, n) {
    if (r > n) throw new z('fromIndex(' + r + ') > toIndex(' + n + ')');
    if (r < 0) throw new Ca(r);
    if (n > e) throw new Ca(n);
  };
  t.asList = function () {
    for (var e = [], r = 0; r < arguments.length; r++) e[r] = arguments[r];
    return e;
  };
  t.create = function (e, r, n) {
    var i = Array.from({ length: e });
    return i.map(function (a) {
      return Array.from({ length: r }).fill(n);
    });
  };
  t.createInt32Array = function (e, r, n) {
    var i = Array.from({ length: e });
    return i.map(function (a) {
      return Int32Array.from({ length: r }).fill(n);
    });
  };
  t.equals = function (e, r) {
    if (!e || !r || !e.length || !r.length || e.length !== r.length) return false;
    for (var n = 0, i = e.length; n < i; n++) if (e[n] !== r[n]) return false;
    return true;
  };
  t.hashCode = function (e) {
    var r;
    var n;
    if (e === null) return 0;
    var i = 1;
    try {
      for (var a = Nf(e), o = a.next(); !o.done; o = a.next()) {
        var s = o.value;
        i = 31 * i + o.value;
      }
    } catch (c) {
      r = { error: c };
    } finally {
      try {
        if (o && !o.done && (n = a.return)) {
          n.call(a);
        }
      } finally {
        if (r) throw r.error;
      }
    }
    return i;
  };
  t.fillUint8Array = function (e, r) {
    for (var n = 0; n !== e.length; n++) e[n] = r;
  };
  t.copyOf = function (e, r) {
    return e.slice(0, r);
  };
  t.copyOfUint8Array = function (e, r) {
    if (e.length <= r) {
      var n = new Uint8Array(r);
      n.set(e);
      return n;
    }
    return e.slice(0, r);
  };
  t.copyOfRange = function (e, r, n) {
    var i = n - r;
    var a = new Int32Array(i);
    ue.arraycopy(e, r, a, 0, i);
    return a;
  };
  t.binarySearch = function (e, r, n) {
    if (n === void 0) {
      n = t.numberComparator;
    }
    for (var i = 0, a = e.length - 1; i <= a; ) {
      var o = (a + i) >> 1;
      var s = n(r, e[o]);
      if (s > 0) i = o + 1;
      else if (s < 0) a = o - 1;
      else return o;
    }
    return -i - 1;
  };
  t.numberComparator = function (e, r) {
    return e - r;
  };
  return t;
})();
var Z = (function () {
  function t() {}
  t.numberOfTrailingZeros = function (e) {
    var r;
    if (e === 0) return 32;
    var n = 31;
    r = e << 16;
    if (r !== 0) {
      n -= 16;
      e = r;
    }
    r = e << 8;
    if (r !== 0) {
      n -= 8;
      e = r;
    }
    r = e << 4;
    if (r !== 0) {
      n -= 4;
      e = r;
    }
    r = e << 2;
    if (r !== 0) {
      n -= 2;
      e = r;
    }
    return n - ((e << 1) >>> 31);
  };
  t.numberOfLeadingZeros = function (e) {
    if (e === 0) return 32;
    var r = 1;
    if (!(e >>> 16)) {
      r += 16;
      e <<= 16;
    }
    if (!(e >>> 24)) {
      r += 8;
      e <<= 8;
    }
    if (!(e >>> 28)) {
      r += 4;
      e <<= 4;
    }
    if (!(e >>> 30)) {
      r += 2;
      e <<= 2;
    }
    r -= e >>> 31;
    return r;
  };
  t.toHexString = function (e) {
    return e.toString(16);
  };
  t.toBinaryString = function (e) {
    return String(parseInt(String(e), 2));
  };
  t.bitCount = function (e) {
    e = e - ((e >>> 1) & 1431655765);
    e = (e & 858993459) + ((e >>> 2) & 858993459);
    e = (e + (e >>> 4)) & 252645135;
    e = e + (e >>> 8);
    e = e + (e >>> 16);
    return e & 63;
  };
  t.truncDivision = function (e, r) {
    return Math.trunc(e / r);
  };
  t.parseInt = function (e, r) {
    if (r === void 0) {
      r = void 0;
    }
    return parseInt(e, r);
  };
  t.MIN_VALUE_32_BITS = -2147483648;
  t.MAX_VALUE = Number.MAX_SAFE_INTEGER;
  return t;
})();
var ke = (function () {
  function t(e, r) {
    e === void 0
      ? ((this.size = 0), (this.bits = new Int32Array(1)))
      : ((this.size = e), r == null ? (this.bits = t.makeArray(e)) : (this.bits = r));
  }
  t.prototype.getSize = function () {
    return this.size;
  };
  t.prototype.getSizeInBytes = function () {
    return Math.floor((this.size + 7) / 8);
  };
  t.prototype.ensureCapacity = function (e) {
    if (e > this.bits.length * 32) {
      var r = t.makeArray(e);
      ue.arraycopy(this.bits, 0, r, 0, this.bits.length);
      this.bits = r;
    }
  };
  t.prototype.get = function (e) {
    return (this.bits[Math.floor(e / 32)] & (1 << (e & 31))) !== 0;
  };
  t.prototype.set = function (e) {
    this.bits[Math.floor(e / 32)] |= 1 << (e & 31);
  };
  t.prototype.flip = function (e) {
    this.bits[Math.floor(e / 32)] ^= 1 << (e & 31);
  };
  t.prototype.getNextSet = function (e) {
    var r = this.size;
    if (e >= this.size) return this.size;
    var n = this.bits;
    var i = Math.floor(e / 32);
    var a = this.bits[i];
    a &= ~((1 << (e & 31)) - 1);
    for (var o = this.bits.length; a === 0; ) {
      if (++i === o) return this.size;
      a = this.bits[i];
    }
    var s = i * 32 + Z.numberOfTrailingZeros(a);
    return s > this.size ? this.size : s;
  };
  t.prototype.getNextUnset = function (e) {
    var r = this.size;
    if (e >= this.size) return this.size;
    var n = this.bits;
    var i = Math.floor(e / 32);
    var a = ~this.bits[i];
    a &= ~((1 << (e & 31)) - 1);
    for (var o = this.bits.length; a === 0; ) {
      if (++i === o) return this.size;
      a = ~this.bits[i];
    }
    var s = i * 32 + Z.numberOfTrailingZeros(a);
    return s > this.size ? this.size : s;
  };
  t.prototype.setBulk = function (e, r) {
    this.bits[Math.floor(e / 32)] = r;
  };
  t.prototype.setRange = function (e, r) {
    if (r < e || e < 0 || r > this.size) throw new z();
    if (r !== e) {
      r--;
      for (var n = Math.floor(e / 32), i = Math.floor(r / 32), a = this.bits, o = n; o <= i; o++) {
        var s = o > n ? 0 : e & 31;
        var c = o < i ? 31 : r & 31;
        var l = (2 << c) - (1 << s);
        a[o] |= l;
      }
    }
  };
  t.prototype.clear = function () {
    for (var e = this.bits.length, r = this.bits, n = 0; n < e; n++) r[n] = 0;
  };
  t.prototype.isRange = function (e, r, n) {
    if (r < e || e < 0 || r > this.size) throw new z();
    if (r === e) return true;
    r--;
    for (var i = Math.floor(e / 32), a = Math.floor(r / 32), o = this.bits, s = i; s <= a; s++) {
      var c = s > i ? 0 : e & 31;
      var l = s < a ? 31 : r & 31;
      var f = ((2 << l) - (1 << c)) & 4294967295;
      if ((o[s] & f) !== (n ? f : 0)) return false;
    }
    return true;
  };
  t.prototype.appendBit = function (e) {
    this.ensureCapacity(this.size + 1);
    if (e) {
      this.bits[Math.floor(this.size / 32)] |= 1 << (this.size & 31);
    }
    this.size++;
  };
  t.prototype.appendBits = function (e, r) {
    if (r < 0 || r > 32) throw new z('Num bits must be between 0 and 32');
    this.ensureCapacity(this.size + r);
    for (var n = r; n > 0; n--) this.appendBit(((e >> (n - 1)) & 1) === 1);
  };
  t.prototype.appendBitArray = function (e) {
    var r = e.size;
    this.ensureCapacity(this.size + e.size);
    for (var n = 0; n < e.size; n++) this.appendBit(e.get(n));
  };
  t.prototype.xor = function (e) {
    if (this.size !== e.size) throw new z("Sizes don't match");
    for (var r = this.bits, n = 0, i = r.length; n < i; n++) r[n] ^= e.bits[n];
  };
  t.prototype.toBytes = function (e, r, n, i) {
    for (var a = 0; a < i; a++) {
      for (var o = 0, s = 0; s < 8; s++) {
        if (this.get(e)) {
          o |= 1 << (7 - s);
        }
        e++;
      }
      r[n + a] = o;
    }
  };
  t.prototype.getBitArray = function () {
    return this.bits;
  };
  t.prototype.reverse = function () {
    for (
      var e = new Int32Array(this.bits.length), r = Math.floor((this.size - 1) / 32), n = r + 1, i = this.bits, a = 0;
      a < n;
      a++
    ) {
      var o = i[a];
      o = ((o >> 1) & 1431655765) | ((o & 1431655765) << 1);
      o = ((o >> 2) & 858993459) | ((o & 858993459) << 2);
      o = ((o >> 4) & 252645135) | ((o & 252645135) << 4);
      o = ((o >> 8) & 16711935) | ((o & 16711935) << 8);
      o = ((o >> 16) & 65535) | ((o & 65535) << 16);
      e[r - a] = o;
    }
    if (this.size !== n * 32) {
      for (var s = n * 32 - this.size, c = e[0] >>> s, a = 1; a < n; a++) {
        var l = e[a];
        c |= e[a] << (32 - s);
        e[a - 1] = c;
        c = e[a] >>> s;
      }
      e[n - 1] = c;
    }
    this.bits = e;
  };
  t.makeArray = function (e) {
    return new Int32Array(Math.floor((e + 31) / 32));
  };
  t.prototype.equals = function (e) {
    if (!(e instanceof t)) return false;
    var r = e;
    return this.size === e.size && Te.equals(this.bits, e.bits);
  };
  t.prototype.hashCode = function () {
    return 31 * this.size + Te.hashCode(this.bits);
  };
  t.prototype.toString = function () {
    for (var e = '', r = 0, n = this.size; r < n; r++) {
      if ((r & 7) === 0) {
        e += ' ';
      }
      e += this.get(r) ? 'X' : '.';
    }
    return e;
  };
  t.prototype.clone = function () {
    return new t(this.size, this.bits.slice());
  };
  t.prototype.toArray = function () {
    for (var e = [], r = 0, n = this.size; r < n; r++) e.push(this.get(r));
    return e;
  };
  return t;
})();
var Qn;
(function (t) {
  t[(t.OTHER = 0)] = 'OTHER';
  t[(t.PURE_BARCODE = 1)] = 'PURE_BARCODE';
  t[(t.POSSIBLE_FORMATS = 2)] = 'POSSIBLE_FORMATS';
  t[(t.TRY_HARDER = 3)] = 'TRY_HARDER';
  t[(t.CHARACTER_SET = 4)] = 'CHARACTER_SET';
  t[(t.ALLOWED_LENGTHS = 5)] = 'ALLOWED_LENGTHS';
  t[(t.ASSUME_CODE_39_CHECK_DIGIT = 6)] = 'ASSUME_CODE_39_CHECK_DIGIT';
  t[(t.ENABLE_CODE_39_EXTENDED_MODE = 7)] = 'ENABLE_CODE_39_EXTENDED_MODE';
  t[(t.ASSUME_GS1 = 8)] = 'ASSUME_GS1';
  t[(t.RETURN_CODABAR_START_END = 9)] = 'RETURN_CODABAR_START_END';
  t[(t.NEED_RESULT_POINT_CALLBACK = 10)] = 'NEED_RESULT_POINT_CALLBACK';
  t[(t.ALLOWED_EAN_EXTENSIONS = 11)] = 'ALLOWED_EAN_EXTENSIONS';
})(Qn || (Qn = {}));
const _e = Qn;
var Of = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var M = (function (t) {
  Of(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.getFormatInstance = function () {
    return new e();
  };
  e.kind = 'FormatException';
  return e;
})(Ke);
var Df = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var ce;
(function (t) {
  t[(t.Cp437 = 0)] = 'Cp437';
  t[(t.ISO8859_1 = 1)] = 'ISO8859_1';
  t[(t.ISO8859_2 = 2)] = 'ISO8859_2';
  t[(t.ISO8859_3 = 3)] = 'ISO8859_3';
  t[(t.ISO8859_4 = 4)] = 'ISO8859_4';
  t[(t.ISO8859_5 = 5)] = 'ISO8859_5';
  t[(t.ISO8859_6 = 6)] = 'ISO8859_6';
  t[(t.ISO8859_7 = 7)] = 'ISO8859_7';
  t[(t.ISO8859_8 = 8)] = 'ISO8859_8';
  t[(t.ISO8859_9 = 9)] = 'ISO8859_9';
  t[(t.ISO8859_10 = 10)] = 'ISO8859_10';
  t[(t.ISO8859_11 = 11)] = 'ISO8859_11';
  t[(t.ISO8859_13 = 12)] = 'ISO8859_13';
  t[(t.ISO8859_14 = 13)] = 'ISO8859_14';
  t[(t.ISO8859_15 = 14)] = 'ISO8859_15';
  t[(t.ISO8859_16 = 15)] = 'ISO8859_16';
  t[(t.SJIS = 16)] = 'SJIS';
  t[(t.Cp1250 = 17)] = 'Cp1250';
  t[(t.Cp1251 = 18)] = 'Cp1251';
  t[(t.Cp1252 = 19)] = 'Cp1252';
  t[(t.Cp1256 = 20)] = 'Cp1256';
  t[(t.UnicodeBigUnmarked = 21)] = 'UnicodeBigUnmarked';
  t[(t.UTF8 = 22)] = 'UTF8';
  t[(t.ASCII = 23)] = 'ASCII';
  t[(t.Big5 = 24)] = 'Big5';
  t[(t.GB18030 = 25)] = 'GB18030';
  t[(t.EUC_KR = 26)] = 'EUC_KR';
})(ce || (ce = {}));
var Ie = (function () {
  function t(e, r, n) {
    for (var i, a, o = [], s = 3; s < arguments.length; s++) o[s - 3] = arguments[s];
    this.valueIdentifier = e;
    this.name = n;
    typeof r == 'number' ? (this.values = Int32Array.from([r])) : (this.values = r);
    this.otherEncodingNames = o;
    t.VALUE_IDENTIFIER_TO_ECI.set(e, this);
    t.NAME_TO_ECI.set(n, this);
    for (var c = this.values, l = 0, f = c.length; l !== f; l++) {
      var u = c[l];
      t.VALUES_TO_ECI.set(c[l], this);
    }
    try {
      for (var h = Df(o), d = h.next(); !d.done; d = h.next()) {
        var p = d.value;
        t.NAME_TO_ECI.set(d.value, this);
      }
    } catch (v) {
      i = { error: v };
    } finally {
      try {
        if (d && !d.done && (a = h.return)) {
          a.call(h);
        }
      } finally {
        if (i) throw i.error;
      }
    }
  }
  t.prototype.getValueIdentifier = function () {
    return this.valueIdentifier;
  };
  t.prototype.getName = function () {
    return this.name;
  };
  t.prototype.getValue = function () {
    return this.values[0];
  };
  t.getCharacterSetECIByValue = function (e) {
    if (e < 0 || e >= 900) throw new M('incorect value');
    var r = t.VALUES_TO_ECI.get(e);
    if (r === void 0) throw new M('incorect value');
    return r;
  };
  t.getCharacterSetECIByName = function (e) {
    var r = t.NAME_TO_ECI.get(e);
    if (r === void 0) throw new M('incorect value');
    return r;
  };
  t.prototype.equals = function (e) {
    if (!(e instanceof t)) return false;
    var r = e;
    return this.getName() === e.getName();
  };
  t.VALUE_IDENTIFIER_TO_ECI = new Map();
  t.VALUES_TO_ECI = new Map();
  t.NAME_TO_ECI = new Map();
  t.Cp437 = new t(ce.Cp437, Int32Array.from([0, 2]), 'Cp437');
  t.ISO8859_1 = new t(ce.ISO8859_1, Int32Array.from([1, 3]), 'ISO-8859-1', 'ISO88591', 'ISO8859_1');
  t.ISO8859_2 = new t(ce.ISO8859_2, 4, 'ISO-8859-2', 'ISO88592', 'ISO8859_2');
  t.ISO8859_3 = new t(ce.ISO8859_3, 5, 'ISO-8859-3', 'ISO88593', 'ISO8859_3');
  t.ISO8859_4 = new t(ce.ISO8859_4, 6, 'ISO-8859-4', 'ISO88594', 'ISO8859_4');
  t.ISO8859_5 = new t(ce.ISO8859_5, 7, 'ISO-8859-5', 'ISO88595', 'ISO8859_5');
  t.ISO8859_6 = new t(ce.ISO8859_6, 8, 'ISO-8859-6', 'ISO88596', 'ISO8859_6');
  t.ISO8859_7 = new t(ce.ISO8859_7, 9, 'ISO-8859-7', 'ISO88597', 'ISO8859_7');
  t.ISO8859_8 = new t(ce.ISO8859_8, 10, 'ISO-8859-8', 'ISO88598', 'ISO8859_8');
  t.ISO8859_9 = new t(ce.ISO8859_9, 11, 'ISO-8859-9', 'ISO88599', 'ISO8859_9');
  t.ISO8859_10 = new t(ce.ISO8859_10, 12, 'ISO-8859-10', 'ISO885910', 'ISO8859_10');
  t.ISO8859_11 = new t(ce.ISO8859_11, 13, 'ISO-8859-11', 'ISO885911', 'ISO8859_11');
  t.ISO8859_13 = new t(ce.ISO8859_13, 15, 'ISO-8859-13', 'ISO885913', 'ISO8859_13');
  t.ISO8859_14 = new t(ce.ISO8859_14, 16, 'ISO-8859-14', 'ISO885914', 'ISO8859_14');
  t.ISO8859_15 = new t(ce.ISO8859_15, 17, 'ISO-8859-15', 'ISO885915', 'ISO8859_15');
  t.ISO8859_16 = new t(ce.ISO8859_16, 18, 'ISO-8859-16', 'ISO885916', 'ISO8859_16');
  t.SJIS = new t(ce.SJIS, 20, 'SJIS', 'Shift_JIS');
  t.Cp1250 = new t(ce.Cp1250, 21, 'Cp1250', 'windows-1250');
  t.Cp1251 = new t(ce.Cp1251, 22, 'Cp1251', 'windows-1251');
  t.Cp1252 = new t(ce.Cp1252, 23, 'Cp1252', 'windows-1252');
  t.Cp1256 = new t(ce.Cp1256, 24, 'Cp1256', 'windows-1256');
  t.UnicodeBigUnmarked = new t(ce.UnicodeBigUnmarked, 25, 'UnicodeBigUnmarked', 'UTF-16BE', 'UnicodeBig');
  t.UTF8 = new t(ce.UTF8, 26, 'UTF8', 'UTF-8');
  t.ASCII = new t(ce.ASCII, Int32Array.from([27, 170]), 'ASCII', 'US-ASCII');
  t.Big5 = new t(ce.Big5, 28, 'Big5');
  t.GB18030 = new t(ce.GB18030, 29, 'GB18030', 'GB2312', 'EUC_CN', 'GBK');
  t.EUC_KR = new t(ce.EUC_KR, 30, 'EUC_KR', 'EUC-KR');
  return t;
})();
var Rf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Qr = (function (t) {
  Rf(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.kind = 'UnsupportedOperationException';
  return e;
})(Ke);
var ut = (function () {
  function t() {}
  t.decode = function (e, r) {
    var n = this.encodingName(r);
    return this.customDecoder
      ? this.customDecoder(e, n)
      : typeof TextDecoder > 'u' || this.shouldDecodeOnFallback(n)
        ? this.decodeFallback(e, n)
        : new TextDecoder(n).decode(e);
  };
  t.shouldDecodeOnFallback = function (e) {
    return !t.isBrowser() && e === 'ISO-8859-1';
  };
  t.encode = function (e, r) {
    var n = this.encodingName(r);
    return this.customEncoder
      ? this.customEncoder(e, n)
      : typeof TextEncoder > 'u'
        ? this.encodeFallback(e)
        : new TextEncoder().encode(e);
  };
  t.isBrowser = function () {
    return typeof window < 'u' && {}.toString.call(window) === '[object Window]';
  };
  t.encodingName = function (e) {
    return typeof e == 'string' ? e : e.getName();
  };
  t.encodingCharacterSet = function (e) {
    return e instanceof Ie ? e : Ie.getCharacterSetECIByName(e);
  };
  t.decodeFallback = function (e, r) {
    var n = this.encodingCharacterSet(r);
    if (t.isDecodeFallbackSupported(n)) {
      for (var i = '', a = 0, o = e.length; a < o; a++) {
        var s = e[a].toString(16);
        if (s.length < 2) {
          s = '0' + s;
        }
        i += '%' + s;
      }
      return decodeURIComponent(i);
    }
    if (n.equals(Ie.UnicodeBigUnmarked)) return String.fromCharCode.apply(null, new Uint16Array(e.buffer));
    throw new Qr('Encoding ' + this.encodingName(r) + ' not supported by fallback.');
  };
  t.isDecodeFallbackSupported = function (e) {
    return e.equals(Ie.UTF8) || e.equals(Ie.ISO8859_1) || e.equals(Ie.ASCII);
  };
  t.encodeFallback = function (e) {
    for (var r = btoa(unescape(encodeURIComponent(e))), n = r.split(''), i = [], a = 0; a < n.length; a++)
      i.push(n[a].charCodeAt(0));
    return new Uint8Array(i);
  };
  return t;
})();
var ee = (function () {
  function t() {}
  t.castAsNonUtf8Char = function (e, r) {
    if (r === void 0) {
      r = null;
    }
    var n = r ? r.getName() : this.ISO88591;
    return ut.decode(new Uint8Array([e]), n);
  };
  t.guessEncoding = function (e, r) {
    if (r != null && r.get(Qn.CHARACTER_SET) !== void 0) return r.get(Qn.CHARACTER_SET).toString();
    for (
      var n = e.length,
        i = true,
        a = true,
        o = true,
        s = 0,
        c = 0,
        l = 0,
        f = 0,
        u = 0,
        h = 0,
        d = 0,
        p = 0,
        v = 0,
        g = 0,
        _ = 0,
        y = e.length > 3 && e[0] === 239 && e[1] === 187 && e[2] === 191,
        x = 0;
      x < n && (i || a || o);
      x++
    ) {
      var w = e[x] & 255;
      if (o) {
        s > 0
          ? (w & 128) === 0
            ? (o = false)
            : s--
          : (w & 128) !== 0 &&
            ((w & 64) === 0
              ? (o = false)
              : (s++, (w & 32) === 0 ? c++ : (s++, (w & 16) === 0 ? l++ : (s++, (w & 8) === 0 ? f++ : (o = false)))));
      }
      if (i) {
        w > 127 && w < 160 ? (i = false) : w > 159 && (w < 192 || w === 215 || w === 247) && _++;
      }
      if (a) {
        u > 0
          ? w < 64 || w === 127 || w > 252
            ? (a = false)
            : u--
          : w === 128 || w === 160 || w > 239
            ? (a = false)
            : w > 160 && w < 224
              ? (h++, (p = 0), d++, d > v && (v = d))
              : w > 127
                ? (u++, (d = 0), p++, p > g && (g = p))
                : ((d = 0), (p = 0));
      }
    }
    if (o && s > 0) {
      o = false;
    }
    if (a && u > 0) {
      a = false;
    }
    return o && (y || c + l + f > 0)
      ? t.UTF8
      : a && (t.ASSUME_SHIFT_JIS || v >= 3 || g >= 3)
        ? t.SHIFT_JIS
        : i && a
          ? (v === 2 && h === 2) || _ * 10 >= n
            ? t.SHIFT_JIS
            : t.ISO88591
          : i
            ? t.ISO88591
            : a
              ? t.SHIFT_JIS
              : o
                ? t.UTF8
                : t.PLATFORM_DEFAULT_ENCODING;
  };
  t.format = function (e) {
    for (var r = [], n = 1; n < arguments.length; n++) r[n - 1] = arguments[n];
    var i = -1;
    function a(s, c, l, f, u, h) {
      if (s === '%%') return '%';
      if (r[++i] !== void 0) {
        s = f ? parseInt(f.substr(1)) : void 0;
        var d = u ? parseInt(u.substr(1)) : void 0;
        var p;
        switch (h) {
          case 's':
            p = r[i];
            break;
          case 'c':
            p = r[i][0];
            break;
          case 'f':
            p = parseFloat(r[i]).toFixed(s);
            break;
          case 'p':
            p = parseFloat(r[i]).toPrecision(s);
            break;
          case 'e':
            p = parseFloat(r[i]).toExponential(s);
            break;
          case 'x':
            p = parseInt(r[i]).toString(d || 16);
            break;
          case 'd':
            p = parseFloat(parseInt(r[i], d || 10).toPrecision(s)).toFixed(0);
            break;
        }
        p = typeof p == 'object' ? JSON.stringify(p) : (+p).toString(d);
        for (var v = parseInt(l), g = l && l[0] + '' == '0' ? '0' : ' '; p.length < v; )
          p = c !== void 0 ? p + g : g + p;
        return p;
      }
    }
    var o = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;
    return e.replace(o, a);
  };
  t.getBytes = function (e, r) {
    return ut.encode(e, r);
  };
  t.getCharCode = function (e, r) {
    if (r === void 0) {
      r = 0;
    }
    return e.charCodeAt(r);
  };
  t.getCharAt = function (e) {
    return String.fromCharCode(e);
  };
  t.SHIFT_JIS = Ie.SJIS.getName();
  t.GB2312 = 'GB2312';
  t.ISO88591 = Ie.ISO8859_1.getName();
  t.EUC_JP = 'EUC_JP';
  t.UTF8 = Ie.UTF8.getName();
  t.PLATFORM_DEFAULT_ENCODING = t.UTF8;
  t.ASSUME_SHIFT_JIS = false;
  return t;
})();
var K = (function () {
  function t(e) {
    if (e === void 0) {
      e = '';
    }
    this.value = e;
  }
  t.prototype.enableDecoding = function (e) {
    this.encoding = e;
    return this;
  };
  t.prototype.append = function (e) {
    typeof e == 'string'
      ? (this.value += e.toString())
      : this.encoding
        ? (this.value += ee.castAsNonUtf8Char(e, this.encoding))
        : (this.value += String.fromCharCode(e));
    return this;
  };
  t.prototype.appendChars = function (e, r, n) {
    for (var i = r; r < r + n; i++) this.append(e[i]);
    return this;
  };
  t.prototype.length = function () {
    return this.value.length;
  };
  t.prototype.charAt = function (e) {
    return this.value.charAt(e);
  };
  t.prototype.deleteCharAt = function (e) {
    this.value = this.value.substr(0, e) + this.value.substring(e + 1);
  };
  t.prototype.setCharAt = function (e, r) {
    this.value = this.value.substr(0, e) + r + this.value.substr(e + 1);
  };
  t.prototype.substring = function (e, r) {
    return this.value.substring(e, r);
  };
  t.prototype.setLengthToZero = function () {
    this.value = '';
  };
  t.prototype.toString = function () {
    return this.value;
  };
  t.prototype.insert = function (e, r) {
    this.value = this.value.substring(0, e) + r + this.value.substring(e);
  };
  return t;
})();
var xt = (function () {
  function t(e, r, n, i) {
    this.width = e;
    this.height = r;
    this.rowSize = n;
    this.bits = i;
    if (r == null) {
      r = e;
    }
    this.height = r;
    if (e < 1 || r < 1) throw new z('Both dimensions must be greater than 0');
    if (n == null) {
      n = Math.floor((e + 31) / 32);
    }
    this.rowSize = n;
    if (i == null) {
      this.bits = new Int32Array(this.rowSize * this.height);
    }
  }
  t.parseFromBooleanArray = function (e) {
    for (var r = e.length, n = e[0].length, i = new t(n, r), a = 0; a < r; a++)
      for (var o = e[a], s = 0; s < n; s++)
        if (o[s]) {
          i.set(s, a);
        }
    return i;
  };
  t.parseFromString = function (e, r, n) {
    if (e === null) throw new z('stringRepresentation cannot be null');
    for (var i = new Array(e.length), a = 0, o = 0, s = -1, c = 0, l = 0; l < e.length; )
      if (
        e.charAt(l) ===
          `
` ||
        e.charAt(l) === '\r'
      ) {
        if (a > o) {
          if (s === -1) s = a - o;
          else if (a - o !== s) throw new z('row lengths do not match');
          o = a;
          c++;
        }
        l++;
      } else if (e.substring(l, l + r.length) === r) {
        l += r.length;
        i[a] = true;
        a++;
      } else if (e.substring(l, l + n.length) === n) {
        l += n.length;
        i[a] = false;
        a++;
      } else throw new z('illegal character encountered: ' + e.substring(l));
    if (a > o) {
      if (s === -1) s = a - o;
      else if (a - o !== s) throw new z('row lengths do not match');
      c++;
    }
    for (var f = new t(s, c), u = 0; u < a; u++)
      if (i[u]) {
        f.set(Math.floor(u % s), Math.floor(u / s));
      }
    return f;
  };
  t.prototype.get = function (e, r) {
    var n = r * this.rowSize + Math.floor(e / 32);
    return ((this.bits[n] >>> (e & 31)) & 1) !== 0;
  };
  t.prototype.set = function (e, r) {
    var n = r * this.rowSize + Math.floor(e / 32);
    this.bits[n] |= (1 << (e & 31)) & 4294967295;
  };
  t.prototype.unset = function (e, r) {
    var n = r * this.rowSize + Math.floor(e / 32);
    this.bits[n] &= ~((1 << (e & 31)) & 4294967295);
  };
  t.prototype.flip = function (e, r) {
    var n = r * this.rowSize + Math.floor(e / 32);
    this.bits[n] ^= (1 << (e & 31)) & 4294967295;
  };
  t.prototype.xor = function (e) {
    if (this.width !== e.getWidth() || this.height !== e.getHeight() || this.rowSize !== e.getRowSize())
      throw new z('input matrix dimensions do not match');
    for (
      var r = new ke(Math.floor(this.width / 32) + 1), n = this.rowSize, i = this.bits, a = 0, o = this.height;
      a < o;
      a++
    )
      for (var s = a * n, c = e.getRow(a, r).getBitArray(), l = 0; l < n; l++) i[s + l] ^= c[l];
  };
  t.prototype.clear = function () {
    for (var e = this.bits, r = e.length, n = 0; n < r; n++) e[n] = 0;
  };
  t.prototype.setRegion = function (e, r, n, i) {
    if (r < 0 || e < 0) throw new z('Left and top must be nonnegative');
    if (i < 1 || n < 1) throw new z('Height and width must be at least 1');
    var a = e + n;
    var o = r + i;
    if (o > this.height || a > this.width) throw new z('The region must fit inside the matrix');
    for (var s = this.rowSize, c = this.bits, l = r; l < o; l++)
      for (var f = l * s, u = e; u < a; u++) c[f + Math.floor(u / 32)] |= (1 << (u & 31)) & 4294967295;
  };
  t.prototype.getRow = function (e, r) {
    r == null || r.getSize() < this.width ? (r = new ke(this.width)) : r.clear();
    for (var n = this.rowSize, i = this.bits, a = e * n, o = 0; o < n; o++) r.setBulk(o * 32, i[a + o]);
    return r;
  };
  t.prototype.setRow = function (e, r) {
    ue.arraycopy(r.getBitArray(), 0, this.bits, e * this.rowSize, this.rowSize);
  };
  t.prototype.rotate180 = function () {
    for (
      var e = this.getWidth(), r = this.getHeight(), n = new ke(e), i = new ke(e), a = 0, o = Math.floor((r + 1) / 2);
      a < o;
      a++
    ) {
      n = this.getRow(a, n);
      i = this.getRow(r - 1 - a, i);
      n.reverse();
      i.reverse();
      this.setRow(a, i);
      this.setRow(r - 1 - a, n);
    }
  };
  t.prototype.getEnclosingRectangle = function () {
    for (
      var e = this.width, r = this.height, n = this.rowSize, i = this.bits, a = e, o = r, s = -1, c = -1, l = 0;
      l < r;
      l++
    )
      for (var f = 0; f < n; f++) {
        var u = i[l * n + f];
        if (i[l * n + f] !== 0) {
          if (l < o) {
            o = l;
          }
          if (l > c) {
            c = l;
          }
          if (f * 32 < a) {
            for (var h = 0; ((i[l * n + f] << (31 - h)) & 4294967295) === 0; ) h++;
            if (f * 32 + h < a) {
              a = f * 32 + h;
            }
          }
          if (f * 32 + 31 > s) {
            for (var h = 31; !(i[l * n + f] >>> h); ) h--;
            if (f * 32 + h > s) {
              s = f * 32 + h;
            }
          }
        }
      }
    return s < a || c < o ? null : Int32Array.from([a, o, s - a + 1, c - o + 1]);
  };
  t.prototype.getTopLeftOnBit = function () {
    for (var e = this.rowSize, r = this.bits, n = 0; n < r.length && r[n] === 0; ) n++;
    if (n === r.length) return null;
    for (var i = n / e, a = (n % e) * 32, o = r[n], s = 0; ((o << (31 - s)) & 4294967295) === 0; ) s++;
    a += s;
    return Int32Array.from([a, i]);
  };
  t.prototype.getBottomRightOnBit = function () {
    for (var e = this.rowSize, r = this.bits, n = r.length - 1; n >= 0 && r[n] === 0; ) n--;
    if (n < 0) return null;
    for (var i = Math.floor(n / e), a = Math.floor(n % e) * 32, o = r[n], s = 31; !(o >>> s); ) s--;
    a += s;
    return Int32Array.from([a, i]);
  };
  t.prototype.getWidth = function () {
    return this.width;
  };
  t.prototype.getHeight = function () {
    return this.height;
  };
  t.prototype.getRowSize = function () {
    return this.rowSize;
  };
  t.prototype.equals = function (e) {
    if (!(e instanceof t)) return false;
    var r = e;
    return (
      this.width === e.width && this.height === e.height && this.rowSize === e.rowSize && Te.equals(this.bits, e.bits)
    );
  };
  t.prototype.hashCode = function () {
    var e = this.width;
    e = 31 * e + this.width;
    e = 31 * e + this.height;
    e = 31 * e + this.rowSize;
    e = 31 * e + Te.hashCode(this.bits);
    return e;
  };
  t.prototype.toString = function (e, r, n) {
    if (e === void 0) {
      e = 'X ';
    }
    if (r === void 0) {
      r = '  ';
    }
    if (n === void 0) {
      n = `
`;
    }
    return this.buildToString(e, r, n);
  };
  t.prototype.buildToString = function (e, r, n) {
    for (var i = new K(), a = 0, o = this.height; a < o; a++) {
      for (var s = 0, c = this.width; s < c; s++) i.append(this.get(s, a) ? e : r);
      i.append(n);
    }
    return i.toString();
  };
  t.prototype.clone = function () {
    return new t(this.width, this.height, this.rowSize, this.bits.slice());
  };
  return t;
})();
var Pf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var I = (function (t) {
  Pf(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.getNotFoundInstance = function () {
    return new e();
  };
  e.kind = 'NotFoundException';
  return e;
})(Ke);
var Mf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var kf = (function (t) {
  Mf(e, t);
  function e(r) {
    var n = t(r) || this;
    n.luminances = e.EMPTY;
    n.buckets = new Int32Array(e.LUMINANCE_BUCKETS);
    return n;
  }
  e.prototype.getBlackRow = function (r, n) {
    var i = this.getLuminanceSource();
    var a = i.getWidth();
    n == null || n.getSize() < a ? (n = new ke(a)) : n.clear();
    this.initArrays(a);
    for (var o = i.getRow(r, this.luminances), s = this.buckets, c = 0; c < a; c++)
      s[(o[c] & 255) >> e.LUMINANCE_SHIFT]++;
    var l = e.estimateBlackPoint(s);
    if (a < 3)
      for (var c = 0; c < a; c++)
        if ((o[c] & 255) < l) {
          n.set(c);
        } else
          for (var f = o[0] & 255, u = o[1] & 255, c = 1; c < a - 1; c++) {
            var h = o[c + 1] & 255;
            if ((u * 4 - f - h) / 2 < l) {
              n.set(c);
            }
            f = u;
            u = h;
          }
    return n;
  };
  e.prototype.getBlackMatrix = function () {
    var r = this.getLuminanceSource();
    var n = r.getWidth();
    var i = r.getHeight();
    var a = new xt(n, i);
    this.initArrays(n);
    for (var o = this.buckets, s = 1; s < 5; s++)
      for (
        var c = Math.floor((i * s) / 5),
          l = r.getRow(c, this.luminances),
          f = Math.floor((n * 4) / 5),
          u = Math.floor(n / 5);
        u < f;
        u++
      ) {
        var h = l[u] & 255;
        o[h >> e.LUMINANCE_SHIFT]++;
      }
    for (var d = e.estimateBlackPoint(o), p = r.getMatrix(), s = 0; s < i; s++)
      for (var v = s * n, u = 0; u < n; u++) {
        var h = p[v + u] & 255;
        if (h < d) {
          a.set(u, s);
        }
      }
    return a;
  };
  e.prototype.createBinarizer = function (r) {
    return new e(r);
  };
  e.prototype.initArrays = function (r) {
    if (this.luminances.length < r) {
      this.luminances = new Uint8ClampedArray(r);
    }
    for (var n = this.buckets, i = 0; i < e.LUMINANCE_BUCKETS; i++) n[i] = 0;
  };
  e.estimateBlackPoint = function (r) {
    for (var n = r.length, i = 0, a = 0, o = 0, s = 0; s < n; s++) {
      if (r[s] > o) {
        a = s;
        o = r[s];
      }
      if (r[s] > i) {
        i = r[s];
      }
    }
    for (var c = 0, l = 0, s = 0; s < n; s++) {
      var f = s - a;
      var u = r[s] * f * f;
      if (u > l) {
        c = s;
        l = u;
      }
    }
    if (a > c) {
      var h = a;
      a = c;
      c = a;
    }
    if (c - a <= n / 16) throw new I();
    for (var d = c - 1, p = -1, s = c - 1; s > a; s--) {
      var v = s - a;
      var u = v * v * (c - s) * (i - r[s]);
      if (u > p) {
        d = s;
        p = u;
      }
    }
    return d << e.LUMINANCE_SHIFT;
  };
  e.LUMINANCE_BITS = 5;
  e.LUMINANCE_SHIFT = 8 - e.LUMINANCE_BITS;
  e.LUMINANCE_BUCKETS = 1 << e.LUMINANCE_BITS;
  e.EMPTY = Uint8ClampedArray.from([0]);
  return e;
})(If);
var Bf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Lf = (function (t) {
  Bf(e, t);
  function e(r) {
    var n = t(r) || this;
    n.matrix = null;
    return n;
  }
  e.prototype.getBlackMatrix = function () {
    if (this.matrix !== null) return this.matrix;
    var r = this.getLuminanceSource();
    var n = r.getWidth();
    var i = r.getHeight();
    if (n >= e.MINIMUM_DIMENSION && i >= e.MINIMUM_DIMENSION) {
      var a = r.getMatrix();
      var o = n >> e.BLOCK_SIZE_POWER;
      if ((n & e.BLOCK_SIZE_MASK) !== 0) {
        o++;
      }
      var s = i >> e.BLOCK_SIZE_POWER;
      if ((i & e.BLOCK_SIZE_MASK) !== 0) {
        s++;
      }
      var c = e.calculateBlackPoints(a, o, s, n, i);
      var l = new xt(n, i);
      e.calculateThresholdForBlock(a, o, s, n, i, c, l);
      this.matrix = l;
    } else this.matrix = t.prototype.getBlackMatrix();
    return this.matrix;
  };
  e.prototype.createBinarizer = function (r) {
    return new e(r);
  };
  e.calculateThresholdForBlock = function (r, n, i, a, o, s, c) {
    for (var l = o - e.BLOCK_SIZE, f = a - e.BLOCK_SIZE, u = 0; u < i; u++) {
      var h = u << e.BLOCK_SIZE_POWER;
      if (h > l) {
        h = l;
      }
      for (var d = e.cap(u, 2, i - 3), p = 0; p < n; p++) {
        var v = p << e.BLOCK_SIZE_POWER;
        if (v > f) {
          v = f;
        }
        for (var g = e.cap(p, 2, n - 3), _ = 0, y = -2; y <= 2; y++) {
          var x = s[d + y];
          _ += s[d + y][g - 2] + s[d + y][g - 1] + s[d + y][g] + s[d + y][g + 1] + s[d + y][g + 2];
        }
        var w = _ / 25;
        e.thresholdBlock(r, v, h, w, a, c);
      }
    }
  };
  e.cap = function (r, n, i) {
    return r < n ? n : r > i ? i : r;
  };
  e.thresholdBlock = function (r, n, i, a, o, s) {
    for (var c = 0, l = i * o + n; c < e.BLOCK_SIZE; c++, l += o)
      for (var f = 0; f < e.BLOCK_SIZE; f++)
        if ((r[l + f] & 255) <= a) {
          s.set(n + f, i + c);
        }
  };
  e.calculateBlackPoints = function (r, n, i, a, o) {
    for (var s = o - e.BLOCK_SIZE, c = a - e.BLOCK_SIZE, l = new Array(i), f = 0; f < i; f++) {
      l[f] = new Int32Array(n);
      var u = f << e.BLOCK_SIZE_POWER;
      if (u > s) {
        u = s;
      }
      for (var h = 0; h < n; h++) {
        var d = h << e.BLOCK_SIZE_POWER;
        if (d > c) {
          d = c;
        }
        for (var p = 0, v = 255, g = 0, _ = 0, y = u * a + d; _ < e.BLOCK_SIZE; _++, y += a) {
          for (var x = 0; x < e.BLOCK_SIZE; x++) {
            var w = r[y + x] & 255;
            p += w;
            if (w < v) {
              v = w;
            }
            if (w > g) {
              g = w;
            }
          }
          if (g - v > e.MIN_DYNAMIC_RANGE)
            for (_++, y += a; _ < e.BLOCK_SIZE; _++, y += a) for (var x = 0; x < e.BLOCK_SIZE; x++) p += r[y + x] & 255;
        }
        var C = p >> (e.BLOCK_SIZE_POWER * 2);
        if (g - v <= e.MIN_DYNAMIC_RANGE && ((C = v / 2), f > 0 && h > 0)) {
          var S = (l[f - 1][h] + 2 * l[f][h - 1] + l[f - 1][h - 1]) / 4;
          if (v < S) {
            C = S;
          }
        }
        l[f][h] = C;
      }
    }
    return l;
  };
  e.BLOCK_SIZE_POWER = 3;
  e.BLOCK_SIZE = 1 << e.BLOCK_SIZE_POWER;
  e.BLOCK_SIZE_MASK = e.BLOCK_SIZE - 1;
  e.MINIMUM_DIMENSION = e.BLOCK_SIZE * 5;
  e.MIN_DYNAMIC_RANGE = 24;
  return e;
})(kf);
var Rn = (function () {
  function t(e, r) {
    this.width = e;
    this.height = r;
  }
  t.prototype.getWidth = function () {
    return this.width;
  };
  t.prototype.getHeight = function () {
    return this.height;
  };
  t.prototype.isCropSupported = function () {
    return false;
  };
  t.prototype.crop = function (e, r, n, i) {
    throw new Qr('This luminance source does not support cropping.');
  };
  t.prototype.isRotateSupported = function () {
    return false;
  };
  t.prototype.rotateCounterClockwise = function () {
    throw new Qr('This luminance source does not support rotation by 90 degrees.');
  };
  t.prototype.rotateCounterClockwise45 = function () {
    throw new Qr('This luminance source does not support rotation by 45 degrees.');
  };
  t.prototype.toString = function () {
    for (var e = new Uint8ClampedArray(this.width), r = new K(), n = 0; n < this.height; n++) {
      for (var i = this.getRow(n, e), a = 0; a < this.width; a++) {
        var o = i[a] & 255;
        var s = void 0;
        o < 64 ? (s = '#') : o < 128 ? (s = '+') : o < 192 ? (s = '.') : (s = ' ');
        r.append(s);
      }
      r.append(`
`);
    }
    return r.toString();
  };
  return t;
})();
var Ff = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Ji = (function (t) {
  Ff(e, t);
  function e(r) {
    var n = t(r.getWidth(), r.getHeight()) || this;
    n.delegate = r;
    return n;
  }
  e.prototype.getRow = function (r, n) {
    for (var i = this.delegate.getRow(r, n), a = this.getWidth(), o = 0; o < a; o++) i[o] = 255 - (i[o] & 255);
    return i;
  };
  e.prototype.getMatrix = function () {
    for (
      var r = this.delegate.getMatrix(), n = this.getWidth() * this.getHeight(), i = new Uint8ClampedArray(n), a = 0;
      a < n;
      a++
    )
      i[a] = 255 - (r[a] & 255);
    return i;
  };
  e.prototype.isCropSupported = function () {
    return this.delegate.isCropSupported();
  };
  e.prototype.crop = function (r, n, i, a) {
    return new e(this.delegate.crop(r, n, i, a));
  };
  e.prototype.isRotateSupported = function () {
    return this.delegate.isRotateSupported();
  };
  e.prototype.invert = function () {
    return this.delegate;
  };
  e.prototype.rotateCounterClockwise = function () {
    return new e(this.delegate.rotateCounterClockwise());
  };
  e.prototype.rotateCounterClockwise45 = function () {
    return new e(this.delegate.rotateCounterClockwise45());
  };
  return e;
})(Rn);
var Uf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Vf = (function (t) {
  Uf(e, t);
  function e(r, n) {
    if (n === void 0) {
      n = false;
    }
    var i = t(r.width, r.height) || this;
    i.canvas = r;
    i.tempCanvasElement = null;
    i.buffer = e.makeBufferFromCanvasImageData(r, n);
    return i;
  }
  e.makeBufferFromCanvasImageData = function (r, n) {
    if (n === void 0) {
      n = false;
    }
    var i = r.getContext('2d').getImageData(0, 0, r.width, r.height);
    return e.toGrayscaleBuffer(i.data, r.width, r.height, n);
  };
  e.toGrayscaleBuffer = function (r, n, i, a) {
    if (a === void 0) {
      a = false;
    }
    var o = new Uint8ClampedArray(n * i);
    e.FRAME_INDEX = !e.FRAME_INDEX;
    if (e.FRAME_INDEX || !a)
      for (var s = 0, c = 0, l = r.length; s < l; s += 4, c++) {
        var f = void 0;
        var u = r[s + 3];
        if (r[s + 3] === 0) f = 255;
        else {
          var h = r[s];
          var d = r[s + 1];
          var p = r[s + 2];
          f = (306 * r[s] + 601 * r[s + 1] + 117 * r[s + 2] + 512) >> 10;
        }
        o[c] = f;
      }
    else
      for (var s = 0, c = 0, v = r.length; s < v; s += 4, c++) {
        var f = void 0;
        var u = r[s + 3];
        if (r[s + 3] === 0) f = 255;
        else {
          var h = r[s];
          var d = r[s + 1];
          var p = r[s + 2];
          f = (306 * r[s] + 601 * r[s + 1] + 117 * r[s + 2] + 512) >> 10;
        }
        o[c] = 255 - f;
      }
    return o;
  };
  e.prototype.getRow = function (r, n) {
    if (r < 0 || r >= this.getHeight()) throw new z('Requested row is outside the image: ' + r);
    var i = this.getWidth();
    var a = r * i;
    n === null
      ? (n = this.buffer.slice(a, a + i))
      : (n.length < i && (n = new Uint8ClampedArray(i)), n.set(this.buffer.slice(a, a + i)));
    return n;
  };
  e.prototype.getMatrix = function () {
    return this.buffer;
  };
  e.prototype.isCropSupported = function () {
    return true;
  };
  e.prototype.crop = function (r, n, i, a) {
    t.prototype.crop(r, n, i, a);
    return this;
  };
  e.prototype.isRotateSupported = function () {
    return true;
  };
  e.prototype.rotateCounterClockwise = function () {
    this.rotate(-90);
    return this;
  };
  e.prototype.rotateCounterClockwise45 = function () {
    this.rotate(-45);
    return this;
  };
  e.prototype.getTempCanvasElement = function () {
    if (this.tempCanvasElement === null) {
      var r = this.canvas.ownerDocument.createElement('canvas');
      r.width = this.canvas.width;
      r.height = this.canvas.height;
      this.tempCanvasElement = r;
    }
    return this.tempCanvasElement;
  };
  e.prototype.rotate = function (r) {
    var n = this.getTempCanvasElement();
    var i = n.getContext('2d');
    var a = r * e.DEGREE_TO_RADIANS;
    var o = this.canvas.width;
    var s = this.canvas.height;
    var c = Math.ceil(Math.abs(Math.cos(a)) * this.canvas.width + Math.abs(Math.sin(a)) * this.canvas.height);
    var l = Math.ceil(Math.abs(Math.sin(a)) * this.canvas.width + Math.abs(Math.cos(a)) * this.canvas.height);
    n.width = c;
    n.height = l;
    i.translate(c / 2, l / 2);
    i.rotate(a);
    i.drawImage(this.canvas, this.canvas.width / -2, this.canvas.height / -2);
    this.buffer = e.makeBufferFromCanvasImageData(n);
    return this;
  };
  e.prototype.invert = function () {
    return new Ji(this);
  };
  e.DEGREE_TO_RADIANS = Math.PI / 180;
  e.FRAME_INDEX = true;
  return e;
})(Rn);
var Gf = (function () {
  function t(e, r, n) {
    this.deviceId = e;
    this.label = r;
    this.kind = 'videoinput';
    this.groupId = n || void 0;
  }
  t.prototype.toJSON = function () {
    return {
      kind: this.kind,
      groupId: this.groupId,
      deviceId: this.deviceId,
      label: this.label,
    };
  };
  return t;
})();
var We = function (t, e, r, n) {
  function i(a) {
    return a instanceof r
      ? a
      : new r(function (o) {
          o(a);
        });
  }
  return new (r || (r = Promise))(function (a, o) {
    function s(f) {
      try {
        l(n.next(f));
      } catch (u) {
        o(u);
      }
    }
    function c(f) {
      try {
        l(n.throw(f));
      } catch (u) {
        o(u);
      }
    }
    function l(f) {
      f.done ? a(f.value) : i(f.value).then(s, c);
    }
    l((n = n.apply(t, e || [])).next());
  });
};
var $e = function (t, e) {
  var r = {
    label: 0,
    sent: function () {
      if (a[0] & 1) throw a[1];
      return a[1];
    },
    trys: [],
    ops: [],
  };
  var n;
  var i;
  var a;
  var o;
  o = {
    next: s(0),
    throw: s(1),
    return: s(2),
  };
  if (typeof Symbol == 'function') {
    o[Symbol.iterator] = function () {
      return this;
    };
  }
  return o;
  function s(l) {
    return function (f) {
      return c([l, f]);
    };
  }
  function c(l) {
    if (n) throw new TypeError('Generator is already executing.');
    for (; r; )
      try {
        n = 1;
        if (
          i &&
          (a = l[0] & 2 ? i.return : l[0] ? i.throw || ((a = i.return) && a.call(i), 0) : i.next) &&
          !(a = a.call(i, l[1])).done
        )
          return a;
        switch (((i = 0), a && (l = [l[0] & 2, a.value]), l[0])) {
          case 0:
          case 1:
            a = l;
            break;
          case 4: {
            r.label++;
            return {
              value: l[1],
              done: false,
            };
          }
          case 5:
            {
              r.label++;
              i = l[1];
              l = [0];
            }
            continue;
          case 7:
            {
              l = r.ops.pop();
              r.trys.pop();
            }
            continue;
          default:
            {
              a = r.trys;
              if (!(a = a.length > 0 && a[a.length - 1]) && (l[0] === 6 || l[0] === 2)) {
                r = 0;
                continue;
              }
            }
            if (l[0] === 3 && (!a || (l[1] > a[0] && l[1] < a[3]))) {
              r.label = l[1];
              break;
            }
            if (l[0] === 6 && r.label < a[1]) {
              r.label = a[1];
              a = l;
              break;
            }
            if (a && r.label < a[2]) {
              r.label = a[2];
              r.ops.push(l);
              break;
            }
            {
              if (a[2]) {
                r.ops.pop();
              }
              r.trys.pop();
            }
            continue;
        }
        l = e.call(t, r);
      } catch (f) {
        l = [6, f];
        i = 0;
      } finally {
        n = a = 0;
      }
    if (l[0] & 5) throw l[1];
    return {
      value: l[0] ? l[1] : void 0,
      done: true,
    };
  }
};
var Hf = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var vr = (function () {
  function t(e, r, n) {
    if (r === void 0) {
      r = 500;
    }
    this.reader = e;
    this.timeBetweenScansMillis = r;
    this._hints = n;
    this._stopContinuousDecode = false;
    this._stopAsyncDecode = false;
    this._timeBetweenDecodingAttempts = 0;
  }
  Object.defineProperty(t.prototype, 'hasNavigator', {
    get: function () {
      return typeof navigator < 'u';
    },
    enumerable: false,
    configurable: true,
  });
  Object.defineProperty(t.prototype, 'isMediaDevicesSuported', {
    get: function () {
      return this.hasNavigator && !!navigator.mediaDevices;
    },
    enumerable: false,
    configurable: true,
  });
  Object.defineProperty(t.prototype, 'canEnumerateDevices', {
    get: function () {
      return false;
    },
    enumerable: false,
    configurable: true,
  });
  Object.defineProperty(t.prototype, 'timeBetweenDecodingAttempts', {
    get: function () {
      return this._timeBetweenDecodingAttempts;
    },
    set: function (e) {
      this._timeBetweenDecodingAttempts = e < 0 ? 0 : e;
    },
    enumerable: false,
    configurable: true,
  });
  Object.defineProperty(t.prototype, 'hints', {
    get: function () {
      return this._hints;
    },
    set: function (e) {
      this._hints = e || null;
    },
    enumerable: false,
    configurable: true,
  });
  t.prototype.listVideoInputDevices = function () {
    return We(this, void 0, void 0, function () {
      var e;
      var r;
      var n;
      var i;
      var a;
      var o;
      var s;
      var c;
      var l;
      var f;
      var u;
      var h;
      return $e(this, function (d) {
        switch (d.label) {
          case 0:
            if (!this.hasNavigator) throw new Error("Can't enumerate devices, navigator is not present.");
            if (!this.canEnumerateDevices) throw new Error("Can't enumerate devices, method not supported.");
            return [4, navigator.mediaDevices.enumerateDevices()];
          case 1:
            {
              e = d.sent();
              r = [];
            }
            try {
              for (n = Hf(e), i = n.next(); !i.done; i = n.next()) {
                a = i.value;
                o = a.kind === 'video' ? 'videoinput' : a.kind;
                if (o === 'videoinput') {
                  s = a.deviceId || a.id;
                  c = a.label || 'Video device ' + (r.length + 1);
                  l = a.groupId;
                  f = {
                    deviceId: s,
                    label: c,
                    kind: o,
                    groupId: l,
                  };
                  r.push(f);
                }
              }
            } catch (p) {
              u = { error: p };
            } finally {
              try {
                if (i && !i.done && (h = n.return)) {
                  h.call(n);
                }
              } finally {
                if (u) throw u.error;
              }
            }
            return [2, r];
        }
      });
    });
  };
  t.prototype.getVideoInputDevices = function () {
    return We(this, void 0, void 0, function () {
      var e;
      return $e(this, function (r) {
        switch (r.label) {
          case 0:
            return [4, this.listVideoInputDevices()];
          case 1: {
            e = r.sent();
            return [
              2,
              e.map(function (n) {
                return new Gf(n.deviceId, n.label);
              }),
            ];
          }
        }
      });
    });
  };
  t.prototype.findDeviceById = function (e) {
    return We(this, void 0, void 0, function () {
      var r;
      return $e(this, function (n) {
        switch (n.label) {
          case 0:
            return [4, this.listVideoInputDevices()];
          case 1: {
            r = n.sent();
            return r
              ? [
                  2,
                  r.find(function (i) {
                    return i.deviceId === e;
                  }),
                ]
              : [2, null];
          }
        }
      });
    });
  };
  t.prototype.decodeFromInputVideoDevice = function (e, r) {
    return We(this, void 0, void 0, function () {
      return $e(this, function (n) {
        switch (n.label) {
          case 0:
            return [4, this.decodeOnceFromVideoDevice(e, r)];
          case 1:
            return [2, n.sent()];
        }
      });
    });
  };
  t.prototype.decodeOnceFromVideoDevice = function (e, r) {
    return We(this, void 0, void 0, function () {
      var n;
      var i;
      return $e(this, function (a) {
        switch (a.label) {
          case 0: {
            this.reset();
            e ? (n = { deviceId: { exact: e } }) : (n = { facingMode: 'environment' });
            i = { video: n };
            return [4, this.decodeOnceFromConstraints(i, r)];
          }
          case 1:
            return [2, a.sent()];
        }
      });
    });
  };
  t.prototype.decodeOnceFromConstraints = function (e, r) {
    return We(this, void 0, void 0, function () {
      var n;
      return $e(this, function (i) {
        switch (i.label) {
          case 0:
            return [4, navigator.mediaDevices.getUserMedia(e)];
          case 1: {
            n = i.sent();
            return [4, this.decodeOnceFromStream(n, r)];
          }
          case 2:
            return [2, i.sent()];
        }
      });
    });
  };
  t.prototype.decodeOnceFromStream = function (e, r) {
    return We(this, void 0, void 0, function () {
      var n;
      var i;
      return $e(this, function (a) {
        switch (a.label) {
          case 0: {
            this.reset();
            return [4, this.attachStreamToVideo(e, r)];
          }
          case 1: {
            n = a.sent();
            return [4, this.decodeOnce(n)];
          }
          case 2: {
            i = a.sent();
            return [2, i];
          }
        }
      });
    });
  };
  t.prototype.decodeFromInputVideoDeviceContinuously = function (e, r, n) {
    return We(this, void 0, void 0, function () {
      return $e(this, function (i) {
        switch (i.label) {
          case 0:
            return [4, this.decodeFromVideoDevice(e, r, n)];
          case 1:
            return [2, i.sent()];
        }
      });
    });
  };
  t.prototype.decodeFromVideoDevice = function (e, r, n) {
    return We(this, void 0, void 0, function () {
      var i;
      var a;
      return $e(this, function (o) {
        switch (o.label) {
          case 0: {
            e ? (i = { deviceId: { exact: e } }) : (i = { facingMode: 'environment' });
            a = { video: i };
            return [4, this.decodeFromConstraints(a, r, n)];
          }
          case 1:
            return [2, o.sent()];
        }
      });
    });
  };
  t.prototype.decodeFromConstraints = function (e, r, n) {
    return We(this, void 0, void 0, function () {
      var i;
      return $e(this, function (a) {
        switch (a.label) {
          case 0:
            return [4, navigator.mediaDevices.getUserMedia(e)];
          case 1: {
            i = a.sent();
            return [4, this.decodeFromStream(i, r, n)];
          }
          case 2:
            return [2, a.sent()];
        }
      });
    });
  };
  t.prototype.decodeFromStream = function (e, r, n) {
    return We(this, void 0, void 0, function () {
      var i;
      return $e(this, function (a) {
        switch (a.label) {
          case 0: {
            this.reset();
            return [4, this.attachStreamToVideo(e, r)];
          }
          case 1: {
            i = a.sent();
            return [4, this.decodeContinuously(i, n)];
          }
          case 2:
            return [2, a.sent()];
        }
      });
    });
  };
  t.prototype.stopAsyncDecode = function () {
    this._stopAsyncDecode = true;
  };
  t.prototype.stopContinuousDecode = function () {
    this._stopContinuousDecode = true;
  };
  t.prototype.attachStreamToVideo = function (e, r) {
    return We(this, void 0, void 0, function () {
      var n;
      return $e(this, function (i) {
        switch (i.label) {
          case 0: {
            n = this.prepareVideoElement(r);
            this.addVideoSource(n, e);
            this.videoElement = n;
            this.stream = e;
            return [4, this.playVideoOnLoadAsync(n)];
          }
          case 1: {
            i.sent();
            return [2, n];
          }
        }
      });
    });
  };
  t.prototype.playVideoOnLoadAsync = function (e) {
    var r = this;
    return new Promise(function (n, i) {
      return r.playVideoOnLoad(e, function () {
        return n();
      });
    });
  };
  t.prototype.playVideoOnLoad = function (e, r) {
    var n = this;
    this.videoEndedListener = function () {
      return n.stopStreams();
    };
    this.videoCanPlayListener = function () {
      return n.tryPlayVideo(e);
    };
    e.addEventListener('ended', this.videoEndedListener);
    e.addEventListener('canplay', this.videoCanPlayListener);
    e.addEventListener('playing', r);
    this.tryPlayVideo(e);
  };
  t.prototype.isVideoPlaying = function (e) {
    return e.currentTime > 0 && !e.paused && !e.ended && e.readyState > 2;
  };
  t.prototype.tryPlayVideo = function (e) {
    return We(this, void 0, void 0, function () {
      return $e(this, function (r) {
        switch (r.label) {
          case 0:
            if (this.isVideoPlaying(e)) {
              console.warn('Trying to play video that is already playing.');
              return [2];
            }
            r.label = 1;
          case 1: {
            r.trys.push([1, 3, , 4]);
            return [4, e.play()];
          }
          case 2: {
            r.sent();
            return [3, 4];
          }
          case 3: {
            r.sent();
            console.warn('It was not possible to play the video.');
            return [3, 4];
          }
          case 4:
            return [2];
        }
      });
    });
  };
  t.prototype.getMediaElement = function (e, r) {
    var n = document.getElementById(e);
    if (!n) throw new pt("element with id '" + e + "' not found");
    if (n.nodeName.toLowerCase() !== r.toLowerCase())
      throw new pt("element with id '" + e + "' must be an " + r + ' element');
    return n;
  };
  t.prototype.decodeFromImage = function (e, r) {
    if (!e && !r) throw new pt('either imageElement with a src set or an url must be provided');
    return r && !e ? this.decodeFromImageUrl(r) : this.decodeFromImageElement(e);
  };
  t.prototype.decodeFromVideo = function (e, r) {
    if (!e && !r) throw new pt('Either an element with a src set or an URL must be provided');
    return r && !e ? this.decodeFromVideoUrl(r) : this.decodeFromVideoElement(e);
  };
  t.prototype.decodeFromVideoContinuously = function (e, r, n) {
    if (e === void 0 && r === void 0) throw new pt('Either an element with a src set or an URL must be provided');
    return r && !e ? this.decodeFromVideoUrlContinuously(r, n) : this.decodeFromVideoElementContinuously(e, n);
  };
  t.prototype.decodeFromImageElement = function (e) {
    if (!e) throw new pt('An image element must be provided.');
    this.reset();
    var r = this.prepareImageElement(e);
    this.imageElement = r;
    var n;
    this.isImageLoaded(r) ? (n = this.decodeOnce(r, false, true)) : (n = this._decodeOnLoadImage(r));
    return n;
  };
  t.prototype.decodeFromVideoElement = function (e) {
    var r = this._decodeFromVideoElementSetup(e);
    return this._decodeOnLoadVideo(r);
  };
  t.prototype.decodeFromVideoElementContinuously = function (e, r) {
    var n = this._decodeFromVideoElementSetup(e);
    return this._decodeOnLoadVideoContinuously(n, r);
  };
  t.prototype._decodeFromVideoElementSetup = function (e) {
    if (!e) throw new pt('A video element must be provided.');
    this.reset();
    var r = this.prepareVideoElement(e);
    this.videoElement = r;
    return r;
  };
  t.prototype.decodeFromImageUrl = function (e) {
    if (!e) throw new pt('An URL must be provided.');
    this.reset();
    var r = this.prepareImageElement();
    this.imageElement = r;
    var n = this._decodeOnLoadImage(r);
    r.src = e;
    return n;
  };
  t.prototype.decodeFromVideoUrl = function (e) {
    if (!e) throw new pt('An URL must be provided.');
    this.reset();
    var r = this.prepareVideoElement();
    var n = this.decodeFromVideoElement(r);
    r.src = e;
    return n;
  };
  t.prototype.decodeFromVideoUrlContinuously = function (e, r) {
    if (!e) throw new pt('An URL must be provided.');
    this.reset();
    var n = this.prepareVideoElement();
    var i = this.decodeFromVideoElementContinuously(n, r);
    n.src = e;
    return i;
  };
  t.prototype._decodeOnLoadImage = function (e) {
    var r = this;
    return new Promise(function (n, i) {
      r.imageLoadedListener = function () {
        return r.decodeOnce(e, false, true).then(n, i);
      };
      e.addEventListener('load', r.imageLoadedListener);
    });
  };
  t.prototype._decodeOnLoadVideo = function (e) {
    return We(this, void 0, void 0, function () {
      return $e(this, function (r) {
        switch (r.label) {
          case 0:
            return [4, this.playVideoOnLoadAsync(e)];
          case 1: {
            r.sent();
            return [4, this.decodeOnce(e)];
          }
          case 2:
            return [2, r.sent()];
        }
      });
    });
  };
  t.prototype._decodeOnLoadVideoContinuously = function (e, r) {
    return We(this, void 0, void 0, function () {
      return $e(this, function (n) {
        switch (n.label) {
          case 0:
            return [4, this.playVideoOnLoadAsync(e)];
          case 1: {
            n.sent();
            this.decodeContinuously(e, r);
            return [2];
          }
        }
      });
    });
  };
  t.prototype.isImageLoaded = function (e) {
    return !(!e.complete || e.naturalWidth === 0);
  };
  t.prototype.prepareImageElement = function (e) {
    var r;
    if (typeof e > 'u') {
      r = document.createElement('img');
      r.width = 200;
      r.height = 200;
    }
    if (typeof e == 'string') {
      r = this.getMediaElement(e, 'img');
    }
    if (e instanceof HTMLImageElement) {
      r = e;
    }
    return r;
  };
  t.prototype.prepareVideoElement = function (e) {
    var r;
    if (!e && typeof document < 'u') {
      r = document.createElement('video');
      r.width = 200;
      r.height = 200;
    }
    if (typeof e == 'string') {
      r = this.getMediaElement(e, 'video');
    }
    if (e instanceof HTMLVideoElement) {
      r = e;
    }
    r.setAttribute('autoplay', 'true');
    r.setAttribute('muted', 'true');
    r.setAttribute('playsinline', 'true');
    return r;
  };
  t.prototype.decodeOnce = function (e, r, n) {
    var i = this;
    if (r === void 0) {
      r = true;
    }
    if (n === void 0) {
      n = true;
    }
    this._stopAsyncDecode = false;
    var a = function (o, s) {
      if (i._stopAsyncDecode) {
        s(new I('Video stream has ended before any code could be detected.'));
        i._stopAsyncDecode = void 0;
        return;
      }
      try {
        var c = i.decode(e);
        o(c);
      } catch (h) {
        var l = r && h instanceof I;
        var f = h instanceof Me || h instanceof M;
        var u = f && n;
        if (l || u) return setTimeout(a, i._timeBetweenDecodingAttempts, o, s);
        s(h);
      }
    };
    return new Promise(function (o, s) {
      return a(o, s);
    });
  };
  t.prototype.decodeContinuously = function (e, r) {
    var n = this;
    this._stopContinuousDecode = false;
    var i = function () {
      if (n._stopContinuousDecode) {
        n._stopContinuousDecode = void 0;
        return;
      }
      try {
        var a = n.decode(e);
        r(a, null);
        setTimeout(i, n.timeBetweenScansMillis);
      } catch (c) {
        r(null, c);
        var o = c instanceof Me || c instanceof M;
        var s = c instanceof I;
        if (o || s) {
          setTimeout(i, n._timeBetweenDecodingAttempts);
        }
      }
    };
    i();
  };
  t.prototype.decode = function (e) {
    var r = this.createBinaryBitmap(e);
    return this.decodeBitmap(r);
  };
  t.prototype.createBinaryBitmap = function (e) {
    this.getCaptureCanvasContext(e);
    var r = false;
    e instanceof HTMLVideoElement ? (this.drawFrameOnCanvas(e), (r = true)) : this.drawImageOnCanvas(e);
    var n = this.getCaptureCanvas(e);
    var i = new Vf(n, r);
    var a = new Lf(i);
    return new Sf(a);
  };
  t.prototype.getCaptureCanvasContext = function (e) {
    if (!this.captureCanvasContext) {
      var r = this.getCaptureCanvas(e);
      var n = void 0;
      try {
        n = r.getContext('2d', { willReadFrequently: true });
      } catch {
        n = r.getContext('2d');
      }
      this.captureCanvasContext = n;
    }
    return this.captureCanvasContext;
  };
  t.prototype.getCaptureCanvas = function (e) {
    if (!this.captureCanvas) {
      var r = this.createCaptureCanvas(e);
      this.captureCanvas = r;
    }
    return this.captureCanvas;
  };
  t.prototype.drawFrameOnCanvas = function (e, r, n) {
    if (r === void 0) {
      r = {
        sx: 0,
        sy: 0,
        sWidth: e.videoWidth,
        sHeight: e.videoHeight,
        dx: 0,
        dy: 0,
        dWidth: e.videoWidth,
        dHeight: e.videoHeight,
      };
    }
    if (n === void 0) {
      n = this.captureCanvasContext;
    }
    n.drawImage(e, r.sx, r.sy, r.sWidth, r.sHeight, r.dx, r.dy, r.dWidth, r.dHeight);
  };
  t.prototype.drawImageOnCanvas = function (e, r, n) {
    if (r === void 0) {
      r = {
        sx: 0,
        sy: 0,
        sWidth: e.naturalWidth,
        sHeight: e.naturalHeight,
        dx: 0,
        dy: 0,
        dWidth: e.naturalWidth,
        dHeight: e.naturalHeight,
      };
    }
    if (n === void 0) {
      n = this.captureCanvasContext;
    }
    n.drawImage(e, r.sx, r.sy, r.sWidth, r.sHeight, r.dx, r.dy, r.dWidth, r.dHeight);
  };
  t.prototype.decodeBitmap = function (e) {
    return this.reader.decode(e, this._hints);
  };
  t.prototype.createCaptureCanvas = function (e) {
    if (typeof document > 'u') {
      this._destroyCaptureCanvas();
      return null;
    }
    var r = document.createElement('canvas');
    var n;
    var i;
    if (typeof e < 'u') {
      e instanceof HTMLVideoElement
        ? ((n = e.videoWidth), (i = e.videoHeight))
        : e instanceof HTMLImageElement && ((n = e.naturalWidth || e.width), (i = e.naturalHeight || e.height));
    }
    r.style.width = n + 'px';
    r.style.height = i + 'px';
    r.width = n;
    r.height = i;
    return r;
  };
  t.prototype.stopStreams = function () {
    if (this.stream) {
      this.stream.getVideoTracks().forEach(function (e) {
        return e.stop();
      });
      this.stream = void 0;
    }
    if (this._stopAsyncDecode === false) {
      this.stopAsyncDecode();
    }
    if (this._stopContinuousDecode === false) {
      this.stopContinuousDecode();
    }
  };
  t.prototype.reset = function () {
    this.stopStreams();
    this._destroyVideoElement();
    this._destroyImageElement();
    this._destroyCaptureCanvas();
  };
  t.prototype._destroyVideoElement = function () {
    if (this.videoElement) {
      if (typeof this.videoEndedListener < 'u') {
        this.videoElement.removeEventListener('ended', this.videoEndedListener);
      }
      if (typeof this.videoPlayingEventListener < 'u') {
        this.videoElement.removeEventListener('playing', this.videoPlayingEventListener);
      }
      if (typeof this.videoCanPlayListener < 'u') {
        this.videoElement.removeEventListener('loadedmetadata', this.videoCanPlayListener);
      }
      this.cleanVideoSource(this.videoElement);
      this.videoElement = void 0;
    }
  };
  t.prototype._destroyImageElement = function () {
    if (this.imageElement) {
      if (this.imageLoadedListener !== void 0) {
        this.imageElement.removeEventListener('load', this.imageLoadedListener);
      }
      this.imageElement.src = void 0;
      this.imageElement.removeAttribute('src');
      this.imageElement = void 0;
    }
  };
  t.prototype._destroyCaptureCanvas = function () {
    this.captureCanvasContext = void 0;
    this.captureCanvas = void 0;
  };
  t.prototype.addVideoSource = function (e, r) {
    try {
      e.srcObject = r;
    } catch {
      e.src = URL.createObjectURL(r);
    }
  };
  t.prototype.cleanVideoSource = function (e) {
    try {
      e.srcObject = null;
    } catch {
      e.src = '';
    }
    this.videoElement.removeAttribute('src');
  };
  return t;
})();
var je = (function () {
  function t(e, r, n, i, a, o) {
    if (n === void 0) {
      n = r == null ? 0 : 8 * r.length;
    }
    if (o === void 0) {
      o = ue.currentTimeMillis();
    }
    this.text = e;
    this.rawBytes = r;
    this.numBits = n;
    this.resultPoints = i;
    this.format = a;
    this.timestamp = o;
    this.text = e;
    this.rawBytes = r;
    n == null ? (this.numBits = r == null ? 0 : 8 * r.length) : (this.numBits = n);
    this.resultPoints = i;
    this.format = a;
    this.resultMetadata = null;
    o == null ? (this.timestamp = ue.currentTimeMillis()) : (this.timestamp = o);
  }
  t.prototype.getText = function () {
    return this.text;
  };
  t.prototype.getRawBytes = function () {
    return this.rawBytes;
  };
  t.prototype.getNumBits = function () {
    return this.numBits;
  };
  t.prototype.getResultPoints = function () {
    return this.resultPoints;
  };
  t.prototype.getBarcodeFormat = function () {
    return this.format;
  };
  t.prototype.getResultMetadata = function () {
    return this.resultMetadata;
  };
  t.prototype.putMetadata = function (e, r) {
    if (this.resultMetadata === null) {
      this.resultMetadata = new Map();
    }
    this.resultMetadata.set(e, r);
  };
  t.prototype.putAllMetadata = function (e) {
    if (e !== null) {
      this.resultMetadata === null ? (this.resultMetadata = e) : (this.resultMetadata = new Map(e));
    }
  };
  t.prototype.addResultPoints = function (e) {
    var r = this.resultPoints;
    if (this.resultPoints === null) this.resultPoints = e;
    else if (e !== null && e.length > 0) {
      var n = new Array(this.resultPoints.length + e.length);
      ue.arraycopy(this.resultPoints, 0, n, 0, this.resultPoints.length);
      ue.arraycopy(e, 0, n, this.resultPoints.length, e.length);
      this.resultPoints = n;
    }
  };
  t.prototype.getTimestamp = function () {
    return this.timestamp;
  };
  t.prototype.toString = function () {
    return this.text;
  };
  return t;
})();
var ei;
(function (t) {
  t[(t.AZTEC = 0)] = 'AZTEC';
  t[(t.CODABAR = 1)] = 'CODABAR';
  t[(t.CODE_39 = 2)] = 'CODE_39';
  t[(t.CODE_93 = 3)] = 'CODE_93';
  t[(t.CODE_128 = 4)] = 'CODE_128';
  t[(t.DATA_MATRIX = 5)] = 'DATA_MATRIX';
  t[(t.EAN_8 = 6)] = 'EAN_8';
  t[(t.EAN_13 = 7)] = 'EAN_13';
  t[(t.ITF = 8)] = 'ITF';
  t[(t.MAXICODE = 9)] = 'MAXICODE';
  t[(t.PDF_417 = 10)] = 'PDF_417';
  t[(t.QR_CODE = 11)] = 'QR_CODE';
  t[(t.RSS_14 = 12)] = 'RSS_14';
  t[(t.RSS_EXPANDED = 13)] = 'RSS_EXPANDED';
  t[(t.UPC_A = 14)] = 'UPC_A';
  t[(t.UPC_E = 15)] = 'UPC_E';
  t[(t.UPC_EAN_EXTENSION = 16)] = 'UPC_EAN_EXTENSION';
})(ei || (ei = {}));
const X = ei;
var ti;
(function (t) {
  t[(t.OTHER = 0)] = 'OTHER';
  t[(t.ORIENTATION = 1)] = 'ORIENTATION';
  t[(t.BYTE_SEGMENTS = 2)] = 'BYTE_SEGMENTS';
  t[(t.ERROR_CORRECTION_LEVEL = 3)] = 'ERROR_CORRECTION_LEVEL';
  t[(t.ISSUE_NUMBER = 4)] = 'ISSUE_NUMBER';
  t[(t.SUGGESTED_PRICE = 5)] = 'SUGGESTED_PRICE';
  t[(t.POSSIBLE_COUNTRY = 6)] = 'POSSIBLE_COUNTRY';
  t[(t.UPC_EAN_EXTENSION = 7)] = 'UPC_EAN_EXTENSION';
  t[(t.PDF417_EXTRA_METADATA = 8)] = 'PDF417_EXTRA_METADATA';
  t[(t.STRUCTURED_APPEND_SEQUENCE = 9)] = 'STRUCTURED_APPEND_SEQUENCE';
  t[(t.STRUCTURED_APPEND_PARITY = 10)] = 'STRUCTURED_APPEND_PARITY';
})(ti || (ti = {}));
const Ve = ti;
var Pn = (function () {
  function t(e, r, n, i, a, o) {
    if (a === void 0) {
      a = -1;
    }
    if (o === void 0) {
      o = -1;
    }
    this.rawBytes = e;
    this.text = r;
    this.byteSegments = n;
    this.ecLevel = i;
    this.structuredAppendSequenceNumber = a;
    this.structuredAppendParity = o;
    this.numBits = e == null ? 0 : 8 * e.length;
  }
  t.prototype.getRawBytes = function () {
    return this.rawBytes;
  };
  t.prototype.getNumBits = function () {
    return this.numBits;
  };
  t.prototype.setNumBits = function (e) {
    this.numBits = e;
  };
  t.prototype.getText = function () {
    return this.text;
  };
  t.prototype.getByteSegments = function () {
    return this.byteSegments;
  };
  t.prototype.getECLevel = function () {
    return this.ecLevel;
  };
  t.prototype.getErrorsCorrected = function () {
    return this.errorsCorrected;
  };
  t.prototype.setErrorsCorrected = function (e) {
    this.errorsCorrected = e;
  };
  t.prototype.getErasures = function () {
    return this.erasures;
  };
  t.prototype.setErasures = function (e) {
    this.erasures = e;
  };
  t.prototype.getOther = function () {
    return this.other;
  };
  t.prototype.setOther = function (e) {
    this.other = e;
  };
  t.prototype.hasStructuredAppend = function () {
    return this.structuredAppendParity >= 0 && this.structuredAppendSequenceNumber >= 0;
  };
  t.prototype.getStructuredAppendParity = function () {
    return this.structuredAppendParity;
  };
  t.prototype.getStructuredAppendSequenceNumber = function () {
    return this.structuredAppendSequenceNumber;
  };
  return t;
})();
var xr = (function () {
  function t() {}
  t.prototype.exp = function (e) {
    return this.expTable[e];
  };
  t.prototype.log = function (e) {
    if (e === 0) throw new z();
    return this.logTable[e];
  };
  t.addOrSubtract = function (e, r) {
    return e ^ r;
  };
  return t;
})();
var Lt = (function () {
  function t(e, r) {
    if (r.length === 0) throw new z();
    this.field = e;
    var n = r.length;
    if (r.length > 1 && r[0] === 0) {
      for (var i = 1; i < r.length && r[i] === 0; ) i++;
      i === r.length
        ? (this.coefficients = Int32Array.from([0]))
        : ((this.coefficients = new Int32Array(r.length - i)),
          ue.arraycopy(r, i, this.coefficients, 0, this.coefficients.length));
    } else this.coefficients = r;
  }
  t.prototype.getCoefficients = function () {
    return this.coefficients;
  };
  t.prototype.getDegree = function () {
    return this.coefficients.length - 1;
  };
  t.prototype.isZero = function () {
    return this.coefficients[0] === 0;
  };
  t.prototype.getCoefficient = function (e) {
    return this.coefficients[this.coefficients.length - 1 - e];
  };
  t.prototype.evaluateAt = function (e) {
    if (e === 0) return this.getCoefficient(0);
    var r = this.coefficients;
    var n;
    if (e === 1) {
      n = 0;
      for (var i = 0, a = this.coefficients.length; i !== a; i++) {
        var o = this.coefficients[i];
        n = xr.addOrSubtract(n, this.coefficients[i]);
      }
      return n;
    }
    n = this.coefficients[0];
    for (var s = this.coefficients.length, c = this.field, i = 1; i < s; i++)
      n = xr.addOrSubtract(c.multiply(e, n), this.coefficients[i]);
    return n;
  };
  t.prototype.addOrSubtract = function (e) {
    if (!this.field.equals(e.field)) throw new z('GenericGFPolys do not have same GenericGF field');
    if (this.isZero()) return e;
    if (e.isZero()) return this;
    var r = this.coefficients;
    var n = e.coefficients;
    if (r.length > n.length) {
      var i = r;
      r = n;
      n = r;
    }
    var a = new Int32Array(n.length);
    var o = n.length - r.length;
    ue.arraycopy(n, 0, a, 0, o);
    for (var s = o; s < n.length; s++) a[s] = xr.addOrSubtract(r[s - o], n[s]);
    return new t(this.field, a);
  };
  t.prototype.multiply = function (e) {
    if (!this.field.equals(e.field)) throw new z('GenericGFPolys do not have same GenericGF field');
    if (this.isZero() || e.isZero()) return this.field.getZero();
    for (
      var r = this.coefficients,
        n = r.length,
        i = e.coefficients,
        a = i.length,
        o = new Int32Array(n + a - 1),
        s = this.field,
        c = 0;
      c < n;
      c++
    )
      for (var l = r[c], f = 0; f < a; f++) o[c + f] = xr.addOrSubtract(o[c + f], s.multiply(l, i[f]));
    return new t(s, o);
  };
  t.prototype.multiplyScalar = function (e) {
    if (e === 0) return this.field.getZero();
    if (e === 1) return this;
    for (
      var r = this.coefficients.length, n = this.field, i = new Int32Array(r), a = this.coefficients, o = 0;
      o < r;
      o++
    )
      i[o] = n.multiply(a[o], e);
    return new t(n, i);
  };
  t.prototype.multiplyByMonomial = function (e, r) {
    if (e < 0) throw new z();
    if (r === 0) return this.field.getZero();
    for (var n = this.coefficients, i = n.length, a = new Int32Array(i + e), o = this.field, s = 0; s < i; s++)
      a[s] = o.multiply(n[s], r);
    return new t(o, a);
  };
  t.prototype.divide = function (e) {
    if (!this.field.equals(e.field)) throw new z('GenericGFPolys do not have same GenericGF field');
    if (e.isZero()) throw new z('Divide by 0');
    for (
      var r = this.field, n = r.getZero(), i = this, a = e.getCoefficient(e.getDegree()), o = r.inverse(a);
      i.getDegree() >= e.getDegree() && !i.isZero();

    ) {
      var s = i.getDegree() - e.getDegree();
      var c = r.multiply(i.getCoefficient(i.getDegree()), o);
      var l = e.multiplyByMonomial(s, c);
      var f = r.buildMonomial(s, c);
      n = n.addOrSubtract(f);
      i = i.addOrSubtract(l);
    }
    return [n, i];
  };
  t.prototype.toString = function () {
    for (var e = '', r = this.getDegree(); r >= 0; r--) {
      var n = this.getCoefficient(r);
      if (n !== 0) {
        n < 0 ? ((e += ' - '), (n = -n)) : e.length > 0 && (e += ' + ');
        if (r === 0 || n !== 1) {
          var i = this.field.log(n);
          i === 0 ? (e += '1') : i === 1 ? (e += 'a') : ((e += 'a^'), (e += i));
        }
        if (r !== 0) {
          r === 1 ? (e += 'x') : ((e += 'x^'), (e += r));
        }
      }
    }
    return e;
  };
  return t;
})();
var Xf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var vs = (function (t) {
  Xf(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.kind = 'ArithmeticException';
  return e;
})(Ke);
var zf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var et = (function (t) {
  zf(e, t);
  function e(r, n, i) {
    var a = t() || this;
    a.primitive = r;
    a.size = n;
    a.generatorBase = i;
    for (var o = new Int32Array(n), s = 1, c = 0; c < n; c++) {
      o[c] = s;
      s *= 2;
      if (s >= n) {
        s ^= r;
        s &= n - 1;
      }
    }
    a.expTable = o;
    for (var l = new Int32Array(n), c = 0; c < n - 1; c++) l[o[c]] = c;
    a.logTable = l;
    a.zero = new Lt(a, Int32Array.from([0]));
    a.one = new Lt(a, Int32Array.from([1]));
    return a;
  }
  e.prototype.getZero = function () {
    return this.zero;
  };
  e.prototype.getOne = function () {
    return this.one;
  };
  e.prototype.buildMonomial = function (r, n) {
    if (r < 0) throw new z();
    if (n === 0) return this.zero;
    var i = new Int32Array(r + 1);
    i[0] = n;
    return new Lt(this, i);
  };
  e.prototype.inverse = function (r) {
    if (r === 0) throw new vs();
    return this.expTable[this.size - this.logTable[r] - 1];
  };
  e.prototype.multiply = function (r, n) {
    return r === 0 || n === 0 ? 0 : this.expTable[(this.logTable[r] + this.logTable[n]) % (this.size - 1)];
  };
  e.prototype.getSize = function () {
    return this.size;
  };
  e.prototype.getGeneratorBase = function () {
    return this.generatorBase;
  };
  e.prototype.toString = function () {
    return 'GF(0x' + Z.toHexString(this.primitive) + ',' + this.size + ')';
  };
  e.prototype.equals = function (r) {
    return r === this;
  };
  e.AZTEC_DATA_12 = new e(4201, 4096, 1);
  e.AZTEC_DATA_10 = new e(1033, 1024, 1);
  e.AZTEC_DATA_6 = new e(67, 64, 1);
  e.AZTEC_PARAM = new e(19, 16, 1);
  e.QR_CODE_FIELD_256 = new e(285, 256, 0);
  e.DATA_MATRIX_FIELD_256 = new e(301, 256, 1);
  e.AZTEC_DATA_8 = e.DATA_MATRIX_FIELD_256;
  e.MAXICODE_FIELD_64 = e.AZTEC_DATA_6;
  return e;
})(xr);
var jf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Gr = (function (t) {
  jf(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.kind = 'ReedSolomonException';
  return e;
})(Ke);
var Wf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Br = (function (t) {
  Wf(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.kind = 'IllegalStateException';
  return e;
})(Ke);
var Mn = (function () {
  function t(e) {
    this.field = e;
  }
  t.prototype.decode = function (e, r) {
    for (var n = this.field, i = new Lt(n, e), a = new Int32Array(r), o = true, s = 0; s < r; s++) {
      var c = i.evaluateAt(n.exp(s + n.getGeneratorBase()));
      a[a.length - 1 - s] = c;
      if (c !== 0) {
        o = false;
      }
    }
    if (!o)
      for (
        var l = new Lt(n, a),
          f = this.runEuclideanAlgorithm(n.buildMonomial(r, 1), l, r),
          u = f[0],
          h = f[1],
          d = this.findErrorLocations(u),
          p = this.findErrorMagnitudes(h, d),
          s = 0;
        s < d.length;
        s++
      ) {
        var v = e.length - 1 - n.log(d[s]);
        if (v < 0) throw new Gr('Bad error location');
        e[v] = et.addOrSubtract(e[v], p[s]);
      }
  };
  t.prototype.runEuclideanAlgorithm = function (e, r, n) {
    if (e.getDegree() < r.getDegree()) {
      var i = e;
      e = r;
      r = e;
    }
    for (var a = this.field, o = e, s = r, c = a.getZero(), l = a.getOne(); s.getDegree() >= ((n / 2) | 0); ) {
      var f = o;
      var u = c;
      o = s;
      c = l;
      if (o.isZero()) throw new Gr('r_{i-1} was zero');
      s = o;
      for (
        var h = a.getZero(), d = o.getCoefficient(o.getDegree()), p = a.inverse(d);
        s.getDegree() >= o.getDegree() && !s.isZero();

      ) {
        var v = s.getDegree() - o.getDegree();
        var g = a.multiply(s.getCoefficient(s.getDegree()), p);
        h = h.addOrSubtract(a.buildMonomial(v, g));
        s = s.addOrSubtract(o.multiplyByMonomial(v, g));
      }
      l = h.multiply(c).addOrSubtract(c);
      if (s.getDegree() >= o.getDegree()) throw new Br('Division algorithm failed to reduce polynomial?');
    }
    var _ = l.getCoefficient(0);
    if (_ === 0) throw new Gr('sigmaTilde(0) was zero');
    var y = a.inverse(_);
    var x = l.multiplyScalar(y);
    var w = s.multiplyScalar(y);
    return [x, w];
  };
  t.prototype.findErrorLocations = function (e) {
    var r = e.getDegree();
    if (r === 1) return Int32Array.from([e.getCoefficient(1)]);
    for (var n = new Int32Array(r), i = 0, a = this.field, o = 1; o < a.getSize() && i < r; o++)
      if (e.evaluateAt(o) === 0) {
        n[i] = a.inverse(o);
        i++;
      }
    if (i !== r) throw new Gr('Error locator degree does not match number of roots');
    return n;
  };
  t.prototype.findErrorMagnitudes = function (e, r) {
    for (var n = r.length, i = new Int32Array(n), a = this.field, o = 0; o < n; o++) {
      for (var s = a.inverse(r[o]), c = 1, l = 0; l < n; l++)
        if (o !== l) {
          var f = a.multiply(r[l], s);
          var u = (f & 1) === 0 ? f | 1 : f & -2;
          c = a.multiply(c, u);
        }
      i[o] = a.multiply(e.evaluateAt(s), a.inverse(c));
      if (a.getGeneratorBase() !== 0) {
        i[o] = a.multiply(i[o], s);
      }
    }
    return i;
  };
  return t;
})();
var Be;
(function (t) {
  t[(t.UPPER = 0)] = 'UPPER';
  t[(t.LOWER = 1)] = 'LOWER';
  t[(t.MIXED = 2)] = 'MIXED';
  t[(t.DIGIT = 3)] = 'DIGIT';
  t[(t.PUNCT = 4)] = 'PUNCT';
  t[(t.BINARY = 5)] = 'BINARY';
})(Be || (Be = {}));
var Sa = (function () {
  function t() {}
  t.prototype.decode = function (e) {
    this.ddata = e;
    var r = e.getBits();
    var n = this.extractBits(r);
    var i = this.correctBits(n);
    var a = t.convertBoolArrayToByteArray(i);
    var o = t.getEncodedData(i);
    var s = new Pn(a, o, null, null);
    s.setNumBits(i.length);
    return s;
  };
  t.highLevelDecode = function (e) {
    return this.getEncodedData(e);
  };
  t.getEncodedData = function (e) {
    for (var r = e.length, n = Be.UPPER, i = Be.UPPER, a = '', o = 0; o < r; )
      if (i === Be.BINARY) {
        if (r - o < 5) break;
        var s = t.readCode(e, o, 5);
        o += 5;
        if (s === 0) {
          if (r - o < 11) break;
          s = t.readCode(e, o, 11) + 31;
          o += 11;
        }
        for (var c = 0; c < s; c++) {
          if (r - o < 8) {
            o = r;
            break;
          }
          var l = t.readCode(e, o, 8);
          a += ee.castAsNonUtf8Char(l);
          o += 8;
        }
        i = n;
      } else {
        var f = i === Be.DIGIT ? 4 : 5;
        if (r - o < f) break;
        var l = t.readCode(e, o, f);
        o += f;
        var u = t.getCharacter(i, l);
        u.startsWith('CTRL_')
          ? ((n = i), (i = t.getTable(u.charAt(5))), u.charAt(6) === 'L' && (n = i))
          : ((a += u), (i = n));
      }
    return a;
  };
  t.getTable = function (e) {
    switch (e) {
      case 'L':
        return Be.LOWER;
      case 'P':
        return Be.PUNCT;
      case 'M':
        return Be.MIXED;
      case 'D':
        return Be.DIGIT;
      case 'B':
        return Be.BINARY;
      case 'U':
      default:
        return Be.UPPER;
    }
  };
  t.getCharacter = function (e, r) {
    switch (e) {
      case Be.UPPER:
        return t.UPPER_TABLE[r];
      case Be.LOWER:
        return t.LOWER_TABLE[r];
      case Be.MIXED:
        return t.MIXED_TABLE[r];
      case Be.PUNCT:
        return t.PUNCT_TABLE[r];
      case Be.DIGIT:
        return t.DIGIT_TABLE[r];
      default:
        throw new Br('Bad table');
    }
  };
  t.prototype.correctBits = function (e) {
    var r;
    var n;
    this.ddata.getNbLayers() <= 2
      ? ((n = 6), (r = et.AZTEC_DATA_6))
      : this.ddata.getNbLayers() <= 8
        ? ((n = 8), (r = et.AZTEC_DATA_8))
        : this.ddata.getNbLayers() <= 22
          ? ((n = 10), (r = et.AZTEC_DATA_10))
          : ((n = 12), (r = et.AZTEC_DATA_12));
    var i = this.ddata.getNbDatablocks();
    var a = e.length / n;
    if (a < i) throw new M();
    for (var o = e.length % n, s = new Int32Array(a), c = 0; c < a; c++, o += n) s[c] = t.readCode(e, o, n);
    try {
      var l = new Mn(r);
      l.decode(s, a - i);
    } catch (g) {
      throw new M(g);
    }
    for (var f = (1 << n) - 1, u = 0, c = 0; c < i; c++) {
      var h = s[c];
      if (s[c] === 0 || s[c] === f) throw new M();
      if (s[c] === 1 || s[c] === f - 1) {
        u++;
      }
    }
    for (var d = new Array(i * n - u), p = 0, c = 0; c < i; c++) {
      var h = s[c];
      if (s[c] === 1 || s[c] === f - 1) {
        d.fill(s[c] > 1, p, p + n - 1);
        p += n - 1;
      } else for (var v = n - 1; v >= 0; --v) d[p++] = (s[c] & (1 << v)) !== 0;
    }
    return d;
  };
  t.prototype.extractBits = function (e) {
    var r = this.ddata.isCompact();
    var n = this.ddata.getNbLayers();
    var i = (r ? 11 : 14) + n * 4;
    var a = new Int32Array(i);
    var o = new Array(this.totalBitsInLayer(n, r));
    if (r) for (var s = 0; s < a.length; s++) a[s] = s;
    else
      for (
        var c = i + 1 + 2 * Z.truncDivision(Z.truncDivision(i, 2) - 1, 15), l = i / 2, f = Z.truncDivision(c, 2), s = 0;
        s < l;
        s++
      ) {
        var u = s + Z.truncDivision(s, 15);
        a[l - s - 1] = f - u - 1;
        a[l + s] = f + u + 1;
      }
    for (var s = 0, h = 0; s < n; s++) {
      for (var d = (n - s) * 4 + (r ? 9 : 12), p = s * 2, v = i - 1 - p, g = 0; g < d; g++)
        for (var _ = g * 2, y = 0; y < 2; y++) {
          o[h + _ + y] = e.get(a[p + y], a[p + g]);
          o[h + 2 * d + _ + y] = e.get(a[p + g], a[v - y]);
          o[h + 4 * d + _ + y] = e.get(a[v - y], a[v - g]);
          o[h + 6 * d + _ + y] = e.get(a[v - g], a[p + y]);
        }
      h += d * 8;
    }
    return o;
  };
  t.readCode = function (e, r, n) {
    for (var i = 0, a = r; a < r + n; a++) {
      i <<= 1;
      if (e[a]) {
        i |= 1;
      }
    }
    return i;
  };
  t.readByte = function (e, r) {
    var n = e.length - r;
    return n >= 8 ? t.readCode(e, r, 8) : t.readCode(e, r, n) << (8 - n);
  };
  t.convertBoolArrayToByteArray = function (e) {
    for (var r = new Uint8Array((e.length + 7) / 8), n = 0; n < r.length; n++) r[n] = t.readByte(e, 8 * n);
    return r;
  };
  t.prototype.totalBitsInLayer = function (e, r) {
    return ((r ? 88 : 112) + 16 * e) * e;
  };
  t.UPPER_TABLE = [
    'CTRL_PS',
    ' ',
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
    'R',
    'S',
    'T',
    'U',
    'V',
    'W',
    'X',
    'Y',
    'Z',
    'CTRL_LL',
    'CTRL_ML',
    'CTRL_DL',
    'CTRL_BS',
  ];
  t.LOWER_TABLE = [
    'CTRL_PS',
    ' ',
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    't',
    'u',
    'v',
    'w',
    'x',
    'y',
    'z',
    'CTRL_US',
    'CTRL_ML',
    'CTRL_DL',
    'CTRL_BS',
  ];
  t.MIXED_TABLE = [
    'CTRL_PS',
    ' ',
    '\x01',
    '\x02',
    '\x03',
    '\x04',
    '\x05',
    '\x06',
    '\x07',
    '\b',
    '\t',
    `
`,
    '\x0B',
    '\f',
    '\r',
    '\x1B',
    '\x1C',
    '\x1D',
    '\x1E',
    '\x1F',
    '@',
    '\\',
    '^',
    '_',
    '`',
    '|',
    '~',
    '\x7F',
    'CTRL_LL',
    'CTRL_UL',
    'CTRL_PL',
    'CTRL_BS',
  ];
  t.PUNCT_TABLE = [
    '',
    '\r',
    `\r
`,
    '. ',
    ', ',
    ': ',
    '!',
    '"',
    '#',
    '$',
    '%',
    '&',
    "'",
    '(',
    ')',
    '*',
    '+',
    ',',
    '-',
    '.',
    '/',
    ':',
    ';',
    '<',
    '=',
    '>',
    '?',
    '[',
    ']',
    '{',
    '}',
    'CTRL_UL',
  ];
  t.DIGIT_TABLE = ['CTRL_PS', ' ', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ',', '.', 'CTRL_UL', 'CTRL_US'];
  return t;
})();
var re = (function () {
  function t() {}
  t.round = function (e) {
    return isNaN(e)
      ? 0
      : e <= Number.MIN_SAFE_INTEGER
        ? Number.MIN_SAFE_INTEGER
        : e >= Number.MAX_SAFE_INTEGER
          ? Number.MAX_SAFE_INTEGER
          : (e + (e < 0 ? -0.5 : 0.5)) | 0;
  };
  t.distance = function (e, r, n, i) {
    var a = e - n;
    var o = r - i;
    return Math.sqrt(a * a + o * o);
  };
  t.sum = function (e) {
    for (var r = 0, n = 0, i = e.length; n !== i; n++) {
      var a = e[n];
      r += e[n];
    }
    return r;
  };
  return t;
})();
var ri = (function () {
  function t() {}
  t.floatToIntBits = function (e) {
    return e;
  };
  t.MAX_VALUE = Number.MAX_SAFE_INTEGER;
  return t;
})();
var U = (function () {
  function t(e, r) {
    this.x = e;
    this.y = r;
  }
  t.prototype.getX = function () {
    return this.x;
  };
  t.prototype.getY = function () {
    return this.y;
  };
  t.prototype.equals = function (e) {
    if (e instanceof t) {
      var r = e;
      return this.x === e.x && this.y === e.y;
    }
    return false;
  };
  t.prototype.hashCode = function () {
    return 31 * ri.floatToIntBits(this.x) + ri.floatToIntBits(this.y);
  };
  t.prototype.toString = function () {
    return '(' + this.x + ',' + this.y + ')';
  };
  t.orderBestPatterns = function (e) {
    var r = this.distance(e[0], e[1]);
    var n = this.distance(e[1], e[2]);
    var i = this.distance(e[0], e[2]);
    var a;
    var o;
    var s;
    n >= r && n >= i
      ? ((o = e[0]), (a = e[1]), (s = e[2]))
      : i >= n && i >= r
        ? ((o = e[1]), (a = e[0]), (s = e[2]))
        : ((o = e[2]), (a = e[0]), (s = e[1]));
    if (this.crossProductZ(a, o, s) < 0) {
      var c = a;
      a = s;
      s = a;
    }
    e[0] = a;
    e[1] = o;
    e[2] = s;
  };
  t.distance = function (e, r) {
    return re.distance(e.x, e.y, r.x, r.y);
  };
  t.crossProductZ = function (e, r, n) {
    var i = r.x;
    var a = r.y;
    return (n.x - r.x) * (e.y - r.y) - (n.y - r.y) * (e.x - r.x);
  };
  return t;
})();
var qi = (function () {
  function t(e, r) {
    this.bits = e;
    this.points = r;
  }
  t.prototype.getBits = function () {
    return this.bits;
  };
  t.prototype.getPoints = function () {
    return this.points;
  };
  return t;
})();
var $f = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Jf = (function (t) {
  $f(e, t);
  function e(r, n, i, a, o) {
    var s = t(r, n) || this;
    s.compact = i;
    s.nbDatablocks = a;
    s.nbLayers = o;
    return s;
  }
  e.prototype.getNbLayers = function () {
    return this.nbLayers;
  };
  e.prototype.getNbDatablocks = function () {
    return this.nbDatablocks;
  };
  e.prototype.isCompact = function () {
    return this.compact;
  };
  return e;
})(qi);
var ni = (function () {
  function t(e, r, n, i) {
    this.image = e;
    this.height = e.getHeight();
    this.width = e.getWidth();
    if (r == null) {
      r = t.INIT_SIZE;
    }
    if (n == null) {
      n = (e.getWidth() / 2) | 0;
    }
    if (i == null) {
      i = (e.getHeight() / 2) | 0;
    }
    var a = (r / 2) | 0;
    this.leftInit = n - a;
    this.rightInit = n + a;
    this.upInit = i - a;
    this.downInit = i + a;
    if (this.upInit < 0 || this.leftInit < 0 || this.downInit >= this.height || this.rightInit >= this.width)
      throw new I();
  }
  t.prototype.detect = function () {
    for (
      var e = this.leftInit,
        r = this.rightInit,
        n = this.upInit,
        i = this.downInit,
        a = false,
        o = true,
        s = false,
        c = false,
        l = false,
        f = false,
        u = false,
        h = this.width,
        d = this.height;
      o;

    ) {
      o = false;
      for (var p = true; (p || !c) && r < h; ) {
        p = this.containsBlackPoint(n, i, r, false);
        p ? (r++, (o = true), (c = true)) : c || r++;
      }
      if (r >= h) {
        a = true;
        break;
      }
      for (var v = true; (v || !l) && i < d; ) {
        v = this.containsBlackPoint(e, r, i, true);
        v ? (i++, (o = true), (l = true)) : l || i++;
      }
      if (i >= d) {
        a = true;
        break;
      }
      for (var g = true; (g || !f) && e >= 0; ) {
        g = this.containsBlackPoint(n, i, e, false);
        g ? (e--, (o = true), (f = true)) : f || e--;
      }
      if (e < 0) {
        a = true;
        break;
      }
      for (var _ = true; (_ || !u) && n >= 0; ) {
        _ = this.containsBlackPoint(e, r, n, true);
        _ ? (n--, (o = true), (u = true)) : u || n--;
      }
      if (n < 0) {
        a = true;
        break;
      }
      if (o) {
        s = true;
      }
    }
    if (!a && s) {
      for (var y = r - e, x = null, w = 1; x === null && w < y; w++)
        x = this.getBlackPointOnSegment(e, i - w, e + w, i);
      if (x == null) throw new I();
      for (var C = null, w = 1; C === null && w < y; w++) C = this.getBlackPointOnSegment(e, n + w, e + w, n);
      if (C == null) throw new I();
      for (var S = null, w = 1; S === null && w < y; w++) S = this.getBlackPointOnSegment(r, n + w, r - w, n);
      if (S == null) throw new I();
      for (var T = null, w = 1; T === null && w < y; w++) T = this.getBlackPointOnSegment(r, i - w, r - w, i);
      if (T == null) throw new I();
      return this.centerEdges(T, x, S, C);
    } else throw new I();
  };
  t.prototype.getBlackPointOnSegment = function (e, r, n, i) {
    for (
      var a = re.round(re.distance(e, r, n, i)), o = (n - e) / a, s = (i - r) / a, c = this.image, l = 0;
      l < a;
      l++
    ) {
      var f = re.round(e + l * o);
      var u = re.round(r + l * s);
      if (c.get(f, u)) return new U(f, u);
    }
    return null;
  };
  t.prototype.centerEdges = function (e, r, n, i) {
    var a = e.getX();
    var o = e.getY();
    var s = r.getX();
    var c = r.getY();
    var l = n.getX();
    var f = n.getY();
    var u = i.getX();
    var h = i.getY();
    var d = t.CORR;
    return a < this.width / 2
      ? [
          new U(u - t.CORR, h + t.CORR),
          new U(s + t.CORR, c + t.CORR),
          new U(l - t.CORR, f - t.CORR),
          new U(a + t.CORR, o - t.CORR),
        ]
      : [
          new U(u + t.CORR, h + t.CORR),
          new U(s + t.CORR, c - t.CORR),
          new U(l - t.CORR, f + t.CORR),
          new U(a - t.CORR, o - t.CORR),
        ];
  };
  t.prototype.containsBlackPoint = function (e, r, n, i) {
    var a = this.image;
    if (i) {
      for (var o = e; o <= r; o++) if (this.image.get(o, n)) return true;
    } else for (var s = e; s <= r; s++) if (this.image.get(n, s)) return true;
    return false;
  };
  t.INIT_SIZE = 10;
  t.CORR = 1;
  return t;
})();
var Aa = (function () {
  function t() {}
  t.checkAndNudgePoints = function (e, r) {
    for (var n = e.getWidth(), i = e.getHeight(), a = true, o = 0; o < r.length && a; o += 2) {
      var s = Math.floor(r[o]);
      var c = Math.floor(r[o + 1]);
      if (s < -1 || s > n || c < -1 || c > i) throw new I();
      a = false;
      s === -1 ? ((r[o] = 0), (a = true)) : s === n && ((r[o] = n - 1), (a = true));
      c === -1 ? ((r[o + 1] = 0), (a = true)) : c === i && ((r[o + 1] = i - 1), (a = true));
    }
    a = true;
    for (var o = r.length - 2; o >= 0 && a; o -= 2) {
      var s = Math.floor(r[o]);
      var c = Math.floor(r[o + 1]);
      if (s < -1 || s > n || c < -1 || c > i) throw new I();
      a = false;
      s === -1 ? ((r[o] = 0), (a = true)) : s === n && ((r[o] = n - 1), (a = true));
      c === -1 ? ((r[o + 1] = 0), (a = true)) : c === i && ((r[o + 1] = i - 1), (a = true));
    }
  };
  return t;
})();
var gs = (function () {
  function t(e, r, n, i, a, o, s, c, l) {
    this.a11 = e;
    this.a21 = r;
    this.a31 = n;
    this.a12 = i;
    this.a22 = a;
    this.a32 = o;
    this.a13 = s;
    this.a23 = c;
    this.a33 = l;
  }
  t.quadrilateralToQuadrilateral = function (e, r, n, i, a, o, s, c, l, f, u, h, d, p, v, g) {
    var _ = t.quadrilateralToSquare(e, r, n, i, a, o, s, c);
    var y = t.squareToQuadrilateral(l, f, u, h, d, p, v, g);
    return y.times(_);
  };
  t.prototype.transformPoints = function (e) {
    for (
      var r = e.length,
        n = this.a11,
        i = this.a12,
        a = this.a13,
        o = this.a21,
        s = this.a22,
        c = this.a23,
        l = this.a31,
        f = this.a32,
        u = this.a33,
        h = 0;
      h < r;
      h += 2
    ) {
      var d = e[h];
      var p = e[h + 1];
      var v = a * e[h] + c * e[h + 1] + u;
      e[h] = (n * e[h] + o * e[h + 1] + l) / v;
      e[h + 1] = (i * e[h] + s * e[h + 1] + f) / v;
    }
  };
  t.prototype.transformPointsWithValues = function (e, r) {
    for (
      var n = this.a11,
        i = this.a12,
        a = this.a13,
        o = this.a21,
        s = this.a22,
        c = this.a23,
        l = this.a31,
        f = this.a32,
        u = this.a33,
        h = e.length,
        d = 0;
      d < h;
      d++
    ) {
      var p = e[d];
      var v = r[d];
      var g = a * e[d] + c * r[d] + u;
      e[d] = (n * e[d] + o * r[d] + l) / g;
      r[d] = (i * e[d] + s * r[d] + f) / g;
    }
  };
  t.squareToQuadrilateral = function (e, r, n, i, a, o, s, c) {
    var l = e - n + a - s;
    var f = r - i + o - c;
    if (l === 0 && f === 0) return new t(n - e, a - n, e, i - r, o - i, r, 0, 0, 1);
    var u = n - a;
    var h = s - a;
    var d = i - o;
    var p = c - o;
    var v = u * p - h * d;
    var g = (l * p - h * f) / v;
    var _ = (u * f - l * d) / v;
    return new t(n - e + g * n, s - e + _ * s, e, i - r + g * i, c - r + _ * c, r, g, _, 1);
  };
  t.quadrilateralToSquare = function (e, r, n, i, a, o, s, c) {
    return t.squareToQuadrilateral(e, r, n, i, a, o, s, c).buildAdjoint();
  };
  t.prototype.buildAdjoint = function () {
    return new t(
      this.a22 * this.a33 - this.a23 * this.a32,
      this.a23 * this.a31 - this.a21 * this.a33,
      this.a21 * this.a32 - this.a22 * this.a31,
      this.a13 * this.a32 - this.a12 * this.a33,
      this.a11 * this.a33 - this.a13 * this.a31,
      this.a12 * this.a31 - this.a11 * this.a32,
      this.a12 * this.a23 - this.a13 * this.a22,
      this.a13 * this.a21 - this.a11 * this.a23,
      this.a11 * this.a22 - this.a12 * this.a21,
    );
  };
  t.prototype.times = function (e) {
    return new t(
      this.a11 * e.a11 + this.a21 * e.a12 + this.a31 * e.a13,
      this.a11 * e.a21 + this.a21 * e.a22 + this.a31 * e.a23,
      this.a11 * e.a31 + this.a21 * e.a32 + this.a31 * e.a33,
      this.a12 * e.a11 + this.a22 * e.a12 + this.a32 * e.a13,
      this.a12 * e.a21 + this.a22 * e.a22 + this.a32 * e.a23,
      this.a12 * e.a31 + this.a22 * e.a32 + this.a32 * e.a33,
      this.a13 * e.a11 + this.a23 * e.a12 + this.a33 * e.a13,
      this.a13 * e.a21 + this.a23 * e.a22 + this.a33 * e.a23,
      this.a13 * e.a31 + this.a23 * e.a32 + this.a33 * e.a33,
    );
  };
  return t;
})();
var qf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Yf = (function (t) {
  qf(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.prototype.sampleGrid = function (r, n, i, a, o, s, c, l, f, u, h, d, p, v, g, _, y, x, w) {
    var C = gs.quadrilateralToQuadrilateral(a, o, s, c, l, f, u, h, d, p, v, g, _, y, x, w);
    return this.sampleGridWithTransform(r, n, i, C);
  };
  e.prototype.sampleGridWithTransform = function (r, n, i, a) {
    if (n <= 0 || i <= 0) throw new I();
    for (var o = new xt(n, i), s = new Float32Array(2 * n), c = 0; c < i; c++) {
      for (var l = s.length, f = c + 0.5, u = 0; u < l; u += 2) {
        s[u] = u / 2 + 0.5;
        s[u + 1] = f;
      }
      a.transformPoints(s);
      Aa.checkAndNudgePoints(r, s);
      try {
        for (var u = 0; u < l; u += 2)
          if (r.get(Math.floor(s[u]), Math.floor(s[u + 1]))) {
            o.set(u / 2, c);
          }
      } catch {
        throw new I();
      }
    }
    return o;
  };
  return e;
})(Aa);
var Yi = (function () {
  function t() {}
  t.setGridSampler = function (e) {
    t.gridSampler = e;
  };
  t.getInstance = function () {
    return t.gridSampler;
  };
  t.gridSampler = new Yf();
  return t;
})();
var Ze = (function () {
  function t(e, r) {
    this.x = e;
    this.y = r;
  }
  t.prototype.toResultPoint = function () {
    return new U(this.getX(), this.getY());
  };
  t.prototype.getX = function () {
    return this.x;
  };
  t.prototype.getY = function () {
    return this.y;
  };
  return t;
})();
var Kf = (function () {
  function t(e) {
    this.EXPECTED_CORNER_BITS = new Int32Array([3808, 476, 2107, 1799]);
    this.image = e;
  }
  t.prototype.detect = function () {
    return this.detectMirror(false);
  };
  t.prototype.detectMirror = function (e) {
    var r = this.getMatrixCenter();
    var n = this.getBullsEyeCorners(r);
    if (e) {
      var i = n[0];
      n[0] = n[2];
      n[2] = n[0];
    }
    this.extractParameters(n);
    var a = this.sampleGrid(
      this.image,
      n[this.shift % 4],
      n[(this.shift + 1) % 4],
      n[(this.shift + 2) % 4],
      n[(this.shift + 3) % 4],
    );
    var o = this.getMatrixCornerPoints(n);
    return new Jf(a, o, this.compact, this.nbDataBlocks, this.nbLayers);
  };
  t.prototype.extractParameters = function (e) {
    if (!this.isValidPoint(e[0]) || !this.isValidPoint(e[1]) || !this.isValidPoint(e[2]) || !this.isValidPoint(e[3]))
      throw new I();
    var r = 2 * this.nbCenterLayers;
    var n = new Int32Array([
      this.sampleLine(e[0], e[1], r),
      this.sampleLine(e[1], e[2], r),
      this.sampleLine(e[2], e[3], r),
      this.sampleLine(e[3], e[0], r),
    ]);
    this.shift = this.getRotation(n, r);
    for (var i = 0, a = 0; a < 4; a++) {
      var o = n[(this.shift + a) % 4];
      this.compact
        ? ((i <<= 7), (i += (n[(this.shift + a) % 4] >> 1) & 127))
        : ((i <<= 10), (i += ((n[(this.shift + a) % 4] >> 2) & 992) + ((n[(this.shift + a) % 4] >> 1) & 31)));
    }
    var s = this.getCorrectedParameterData(i, this.compact);
    this.compact
      ? ((this.nbLayers = (s >> 6) + 1), (this.nbDataBlocks = (s & 63) + 1))
      : ((this.nbLayers = (s >> 11) + 1), (this.nbDataBlocks = (s & 2047) + 1));
  };
  t.prototype.getRotation = function (e, r) {
    var n = 0;
    e.forEach(function (a, o, s) {
      var c = ((a >> (r - 2)) << 1) + (a & 1);
      n = (n << 3) + c;
    });
    n = ((n & 1) << 11) + (n >> 1);
    for (var i = 0; i < 4; i++) if (Z.bitCount(n ^ this.EXPECTED_CORNER_BITS[i]) <= 2) return i;
    throw new I();
  };
  t.prototype.getCorrectedParameterData = function (e, r) {
    var n;
    var i;
    r ? ((n = 7), (i = 2)) : ((n = 10), (i = 4));
    for (var a = n - i, o = new Int32Array(n), s = n - 1; s >= 0; --s) {
      o[s] = e & 15;
      e >>= 4;
    }
    try {
      var c = new Mn(et.AZTEC_PARAM);
      c.decode(o, a);
    } catch {
      throw new I();
    }
    for (var l = 0, s = 0; s < i; s++) l = (l << 4) + o[s];
    return l;
  };
  t.prototype.getBullsEyeCorners = function (e) {
    var r = e;
    var n = e;
    var i = e;
    var a = e;
    var o = true;
    for (this.nbCenterLayers = 1; this.nbCenterLayers < 9; this.nbCenterLayers++) {
      var s = this.getFirstDifferent(r, o, 1, -1);
      var c = this.getFirstDifferent(n, o, 1, 1);
      var l = this.getFirstDifferent(i, o, -1, 1);
      var f = this.getFirstDifferent(a, o, -1, -1);
      if (this.nbCenterLayers > 2) {
        var u =
          (this.distancePoint(f, s) * this.nbCenterLayers) / (this.distancePoint(a, r) * (this.nbCenterLayers + 2));
        if (u < 0.75 || u > 1.25 || !this.isWhiteOrBlackRectangle(s, c, l, f)) break;
      }
      r = s;
      n = c;
      i = l;
      a = f;
      o = !o;
    }
    if (this.nbCenterLayers !== 5 && this.nbCenterLayers !== 7) throw new I();
    this.compact = this.nbCenterLayers === 5;
    var h = new U(r.getX() + 0.5, r.getY() - 0.5);
    var d = new U(n.getX() + 0.5, n.getY() + 0.5);
    var p = new U(i.getX() - 0.5, i.getY() + 0.5);
    var v = new U(a.getX() - 0.5, a.getY() - 0.5);
    return this.expandSquare([h, d, p, v], 2 * this.nbCenterLayers - 3, 2 * this.nbCenterLayers);
  };
  t.prototype.getMatrixCenter = function () {
    var e;
    var r;
    var n;
    var i;
    try {
      var a = new ni(this.image).detect();
      e = a[0];
      r = a[1];
      n = a[2];
      i = a[3];
    } catch {
      var o = this.image.getWidth() / 2;
      var s = this.image.getHeight() / 2;
      e = this.getFirstDifferent(new Ze(o + 7, s - 7), false, 1, -1).toResultPoint();
      r = this.getFirstDifferent(new Ze(o + 7, s + 7), false, 1, 1).toResultPoint();
      n = this.getFirstDifferent(new Ze(o - 7, s + 7), false, -1, 1).toResultPoint();
      i = this.getFirstDifferent(new Ze(o - 7, s - 7), false, -1, -1).toResultPoint();
    }
    var c = re.round((e.getX() + i.getX() + r.getX() + n.getX()) / 4);
    var l = re.round((e.getY() + i.getY() + r.getY() + n.getY()) / 4);
    try {
      var a = new ni(this.image, 15, c, l).detect();
      e = a[0];
      r = a[1];
      n = a[2];
      i = a[3];
    } catch {
      e = this.getFirstDifferent(new Ze(c + 7, l - 7), false, 1, -1).toResultPoint();
      r = this.getFirstDifferent(new Ze(c + 7, l + 7), false, 1, 1).toResultPoint();
      n = this.getFirstDifferent(new Ze(c - 7, l + 7), false, -1, 1).toResultPoint();
      i = this.getFirstDifferent(new Ze(c - 7, l - 7), false, -1, -1).toResultPoint();
    }
    c = re.round((e.getX() + i.getX() + r.getX() + n.getX()) / 4);
    l = re.round((e.getY() + i.getY() + r.getY() + n.getY()) / 4);
    return new Ze(c, l);
  };
  t.prototype.getMatrixCornerPoints = function (e) {
    return this.expandSquare(e, 2 * this.nbCenterLayers, this.getDimension());
  };
  t.prototype.sampleGrid = function (e, r, n, i, a) {
    var o = Yi.getInstance();
    var s = this.getDimension();
    var c = s / 2 - this.nbCenterLayers;
    var l = s / 2 + this.nbCenterLayers;
    return o.sampleGrid(
      e,
      s,
      s,
      c,
      c,
      l,
      c,
      l,
      l,
      c,
      l,
      r.getX(),
      r.getY(),
      n.getX(),
      n.getY(),
      i.getX(),
      i.getY(),
      a.getX(),
      a.getY(),
    );
  };
  t.prototype.sampleLine = function (e, r, n) {
    for (
      var i = 0,
        a = this.distanceResultPoint(e, r),
        o = a / n,
        s = e.getX(),
        c = e.getY(),
        l = (o * (r.getX() - e.getX())) / a,
        f = (o * (r.getY() - e.getY())) / a,
        u = 0;
      u < n;
      u++
    )
      if (this.image.get(re.round(s + u * l), re.round(c + u * f))) {
        i |= 1 << (n - u - 1);
      }
    return i;
  };
  t.prototype.isWhiteOrBlackRectangle = function (e, r, n, i) {
    var a = 3;
    e = new Ze(e.getX() - 3, e.getY() + 3);
    r = new Ze(r.getX() - 3, r.getY() - 3);
    n = new Ze(n.getX() + 3, n.getY() - 3);
    i = new Ze(i.getX() + 3, i.getY() + 3);
    var o = this.getColor(i, e);
    if (o === 0) return false;
    var s = this.getColor(e, r);
    return s !== o || ((s = this.getColor(r, n)), s !== o) ? false : ((s = this.getColor(n, i)), s === o);
  };
  t.prototype.getColor = function (e, r) {
    for (
      var n = this.distancePoint(e, r),
        i = (r.getX() - e.getX()) / n,
        a = (r.getY() - e.getY()) / n,
        o = 0,
        s = e.getX(),
        c = e.getY(),
        l = this.image.get(e.getX(), e.getY()),
        f = Math.ceil(n),
        u = 0;
      u < f;
      u++
    ) {
      s += i;
      c += a;
      if (this.image.get(re.round(s), re.round(c)) !== l) {
        o++;
      }
    }
    var h = o / n;
    return h > 0.1 && h < 0.9 ? 0 : h <= 0.1 === l ? 1 : -1;
  };
  t.prototype.getFirstDifferent = function (e, r, n, i) {
    for (var a = e.getX() + n, o = e.getY() + i; this.isValid(a, o) && this.image.get(a, o) === r; ) {
      a += n;
      o += i;
    }
    for (a -= n, o -= i; this.isValid(a, o) && this.image.get(a, o) === r; ) a += n;
    for (a -= n; this.isValid(a, o) && this.image.get(a, o) === r; ) o += i;
    o -= i;
    return new Ze(a, o);
  };
  t.prototype.expandSquare = function (e, r, n) {
    var i = n / (2 * r);
    var a = e[0].getX() - e[2].getX();
    var o = e[0].getY() - e[2].getY();
    var s = (e[0].getX() + e[2].getX()) / 2;
    var c = (e[0].getY() + e[2].getY()) / 2;
    var l = new U(s + i * a, c + i * o);
    var f = new U(s - i * a, c - i * o);
    a = e[1].getX() - e[3].getX();
    o = e[1].getY() - e[3].getY();
    s = (e[1].getX() + e[3].getX()) / 2;
    c = (e[1].getY() + e[3].getY()) / 2;
    var u = new U(s + i * a, c + i * o);
    var h = new U(s - i * a, c - i * o);
    var d = [l, u, f, h];
    return d;
  };
  t.prototype.isValid = function (e, r) {
    return e >= 0 && e < this.image.getWidth() && r > 0 && r < this.image.getHeight();
  };
  t.prototype.isValidPoint = function (e) {
    var r = re.round(e.getX());
    var n = re.round(e.getY());
    return this.isValid(r, n);
  };
  t.prototype.distancePoint = function (e, r) {
    return re.distance(e.getX(), e.getY(), r.getX(), r.getY());
  };
  t.prototype.distanceResultPoint = function (e, r) {
    return re.distance(e.getX(), e.getY(), r.getX(), r.getY());
  };
  t.prototype.getDimension = function () {
    return this.compact
      ? 4 * this.nbLayers + 11
      : this.nbLayers <= 4
        ? 4 * this.nbLayers + 15
        : 4 * this.nbLayers + 2 * (Z.truncDivision(this.nbLayers - 4, 8) + 1) + 15;
  };
  return t;
})();
var ii = (function () {
  function t() {}
  t.prototype.decode = function (e, r) {
    if (r === void 0) {
      r = null;
    }
    var n = null;
    var i = new Kf(e.getBlackMatrix());
    var a = null;
    var o = null;
    try {
      var s = i.detectMirror(false);
      a = s.getPoints();
      this.reportFoundResultPoints(r, a);
      o = new Sa().decode(s);
    } catch (u) {
      n = u;
    }
    if (o == null)
      try {
        var s = i.detectMirror(true);
        a = s.getPoints();
        this.reportFoundResultPoints(r, a);
        o = new Sa().decode(s);
      } catch (u) {
        throw n ?? u;
      }
    var c = new je(o.getText(), o.getRawBytes(), o.getNumBits(), a, ei.AZTEC, ue.currentTimeMillis());
    var l = o.getByteSegments();
    if (l != null) {
      c.putMetadata(ti.BYTE_SEGMENTS, l);
    }
    var f = o.getECLevel();
    if (f != null) {
      c.putMetadata(ti.ERROR_CORRECTION_LEVEL, f);
    }
    return c;
  };
  t.prototype.reportFoundResultPoints = function (e, r) {
    if (e != null) {
      var n = e.get(Qn.NEED_RESULT_POINT_CALLBACK);
      if (n != null) {
        r.forEach(function (i, a, o) {
          n.foundPossibleResultPoint(i);
        });
      }
    }
  };
  t.prototype.reset = function () {};
  return t;
})();
var Zf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
(function (t) {
  Zf(e, t);
  function e(r) {
    if (r === void 0) {
      r = 500;
    }
    return t(new ii(), r) || this;
  }
  return e;
})(vr);
var be = (function () {
  function t() {}
  t.prototype.decode = function (e, r) {
    try {
      return this.doDecode(e, r);
    } catch {
      var n = r && r.get(Qn.TRY_HARDER) === true;
      if (n && e.isRotateSupported()) {
        var i = e.rotateCounterClockwise();
        var a = this.doDecode(i, r);
        var o = a.getResultMetadata();
        var s = 270;
        if (o !== null && o.get(ti.ORIENTATION) === true) {
          s = s + (o.get(ti.ORIENTATION) % 360);
        }
        a.putMetadata(ti.ORIENTATION, s);
        var c = a.getResultPoints();
        if (c !== null)
          for (var l = i.getHeight(), f = 0; f < c.length; f++) c[f] = new U(l - c[f].getY() - 1, c[f].getX());
        return a;
      } else throw new I();
    }
  };
  t.prototype.reset = function () {};
  t.prototype.doDecode = function (e, r) {
    var n = e.getWidth();
    var i = e.getHeight();
    var a = new ke(n);
    var o = r && r.get(Qn.TRY_HARDER) === true;
    var s = Math.max(1, i >> (o ? 8 : 5));
    var c;
    o ? (c = i) : (c = 15);
    for (var l = Math.trunc(i / 2), f = 0; f < c; f++) {
      var u = Math.trunc((f + 1) / 2);
      var h = (f & 1) === 0;
      var d = l + s * (h ? u : -u);
      if (d < 0 || d >= i) break;
      try {
        a = e.getBlackRow(d, a);
      } catch {
        continue;
      }
      for (
        var p = function (y) {
            if (y === 1 && (a.reverse(), r && r.get(Qn.NEED_RESULT_POINT_CALLBACK) === true)) {
              var x = new Map();
              r.forEach(function (S, T) {
                return x.set(T, S);
              });
              x.delete(Qn.NEED_RESULT_POINT_CALLBACK);
              r = x;
            }
            try {
              var w = v.decodeRow(d, a, r);
              if (y === 1) {
                w.putMetadata(ti.ORIENTATION, 180);
                var C = w.getResultPoints();
                if (C !== null) {
                  C[0] = new U(n - C[0].getX() - 1, C[0].getY());
                  C[1] = new U(n - C[1].getX() - 1, C[1].getY());
                }
              }
              return { value: w };
            } catch {}
          },
          v = this,
          g = 0;
        g < 2;
        g++
      ) {
        var _ = p(g);
        if (typeof _ == 'object') return _.value;
      }
    }
    throw new I();
  };
  t.recordPattern = function (e, r, n) {
    for (var i = n.length, a = 0; a < i; a++) n[a] = 0;
    var o = e.getSize();
    if (r >= o) throw new I();
    for (var s = !e.get(r), c = 0, l = r; l < o; ) {
      if (e.get(l) !== s) n[c]++;
      else {
        if (++c === i) break;
        n[c] = 1;
        s = !s;
      }
      l++;
    }
    if (!(c === i || (c === i - 1 && l === o))) throw new I();
  };
  t.recordPatternInReverse = function (e, r, n) {
    for (var i = n.length, a = e.get(r); r > 0 && i >= 0; )
      if (e.get(--r) !== a) {
        i--;
        a = !a;
      }
    if (i >= 0) throw new I();
    t.recordPattern(e, r + 1, n);
  };
  t.patternMatchVariance = function (e, r, n) {
    for (var i = e.length, a = 0, o = 0, s = 0; s < i; s++) {
      a += e[s];
      o += r[s];
    }
    if (a < o) return Number.POSITIVE_INFINITY;
    var c = a / o;
    n *= c;
    for (var l = 0, f = 0; f < i; f++) {
      var u = e[f];
      var h = r[f] * c;
      var d = e[f] > h ? e[f] - h : h - e[f];
      if (d > n) return Number.POSITIVE_INFINITY;
      l += d;
    }
    return l / a;
  };
  return t;
})();
var Qf = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Ia = (function (t) {
  Qf(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.findStartPattern = function (r) {
    for (
      var n = r.getSize(),
        i = r.getNextSet(0),
        a = 0,
        o = Int32Array.from([0, 0, 0, 0, 0, 0]),
        s = i,
        c = false,
        l = 6,
        f = i;
      f < n;
      f++
    )
      if (r.get(f) !== c) o[a]++;
      else {
        if (a === l - 1) {
          for (var u = e.MAX_AVG_VARIANCE, h = -1, d = e.CODE_START_A; d <= e.CODE_START_C; d++) {
            var p = be.patternMatchVariance(o, e.CODE_PATTERNS[d], e.MAX_INDIVIDUAL_VARIANCE);
            if (p < u) {
              u = p;
              h = d;
            }
          }
          if (h >= 0 && r.isRange(Math.max(0, s - (f - s) / 2), s, false)) return Int32Array.from([s, f, h]);
          s += o[0] + o[1];
          o = o.slice(2, o.length);
          o[a - 1] = 0;
          o[a] = 0;
          a--;
        } else a++;
        o[a] = 1;
        c = !c;
      }
    throw new I();
  };
  e.decodeCode = function (r, n, i) {
    be.recordPattern(r, i, n);
    for (var a = e.MAX_AVG_VARIANCE, o = -1, s = 0; s < e.CODE_PATTERNS.length; s++) {
      var c = e.CODE_PATTERNS[s];
      var l = this.patternMatchVariance(n, e.CODE_PATTERNS[s], e.MAX_INDIVIDUAL_VARIANCE);
      if (l < a) {
        a = l;
        o = s;
      }
    }
    if (o >= 0) return o;
    throw new I();
  };
  e.prototype.decodeRow = function (r, n, i) {
    var a = i && i.get(Qn.ASSUME_GS1) === true;
    var o = e.findStartPattern(n);
    var s = o[2];
    var c = 0;
    var l = new Uint8Array(20);
    l[c++] = o[2];
    var f;
    switch (o[2]) {
      case e.CODE_START_A:
        f = e.CODE_CODE_A;
        break;
      case e.CODE_START_B:
        f = e.CODE_CODE_B;
        break;
      case e.CODE_START_C:
        f = e.CODE_CODE_C;
        break;
      default:
        throw new M();
    }
    for (
      var u = false,
        h = false,
        d = '',
        p = o[0],
        v = o[1],
        g = Int32Array.from([0, 0, 0, 0, 0, 0]),
        _ = 0,
        y = 0,
        x = o[2],
        w = 0,
        C = true,
        S = false,
        T = false;
      !u;

    ) {
      var D = h;
      switch (
        ((h = false),
        (_ = y),
        (y = e.decodeCode(n, g, v)),
        (l[c++] = y),
        y !== e.CODE_STOP && (C = true),
        y !== e.CODE_STOP && (w++, (x += w * y)),
        (p = v),
        (v += g.reduce(function (ne, me) {
          return ne + me;
        }, 0)),
        y)
      ) {
        case e.CODE_START_A:
        case e.CODE_START_B:
        case e.CODE_START_C:
          throw new M();
      }
      switch (f) {
        case e.CODE_CODE_A:
          if (y < 64) {
            T === S ? (d += String.fromCharCode(32 + y)) : (d += String.fromCharCode(32 + y + 128));
            T = false;
          } else if (y < 96) {
            T === S ? (d += String.fromCharCode(y - 64)) : (d += String.fromCharCode(y + 64));
            T = false;
          } else
            switch ((y !== e.CODE_STOP && (C = false), y)) {
              case e.CODE_FNC_1:
                if (a) {
                  d.length === 0 ? (d += ']C1') : (d += '\x1D');
                }
                break;
              case e.CODE_FNC_2:
              case e.CODE_FNC_3:
                break;
              case e.CODE_FNC_4_A:
                !S && T ? ((S = true), (T = false)) : S && T ? ((S = false), (T = false)) : (T = true);
                break;
              case e.CODE_SHIFT:
                {
                  h = true;
                  f = e.CODE_CODE_B;
                }
                break;
              case e.CODE_CODE_B:
                f = e.CODE_CODE_B;
                break;
              case e.CODE_CODE_C:
                f = e.CODE_CODE_C;
                break;
              case e.CODE_STOP:
                u = true;
                break;
            }
          break;
        case e.CODE_CODE_B:
          if (y < 96) {
            T === S ? (d += String.fromCharCode(32 + y)) : (d += String.fromCharCode(32 + y + 128));
            T = false;
          } else
            switch ((y !== e.CODE_STOP && (C = false), y)) {
              case e.CODE_FNC_1:
                if (a) {
                  d.length === 0 ? (d += ']C1') : (d += '\x1D');
                }
                break;
              case e.CODE_FNC_2:
              case e.CODE_FNC_3:
                break;
              case e.CODE_FNC_4_B:
                !S && T ? ((S = true), (T = false)) : S && T ? ((S = false), (T = false)) : (T = true);
                break;
              case e.CODE_SHIFT:
                {
                  h = true;
                  f = e.CODE_CODE_A;
                }
                break;
              case e.CODE_CODE_A:
                f = e.CODE_CODE_A;
                break;
              case e.CODE_CODE_C:
                f = e.CODE_CODE_C;
                break;
              case e.CODE_STOP:
                u = true;
                break;
            }
          break;
        case e.CODE_CODE_C:
          if (y < 100) {
            if (y < 10) {
              d += '0';
            }
            d += y;
          } else
            switch ((y !== e.CODE_STOP && (C = false), y)) {
              case e.CODE_FNC_1:
                if (a) {
                  d.length === 0 ? (d += ']C1') : (d += '\x1D');
                }
                break;
              case e.CODE_CODE_A:
                f = e.CODE_CODE_A;
                break;
              case e.CODE_CODE_B:
                f = e.CODE_CODE_B;
                break;
              case e.CODE_STOP:
                u = true;
                break;
            }
          break;
      }
      if (h) {
        f = f === e.CODE_CODE_A ? e.CODE_CODE_B : e.CODE_CODE_A;
      }
    }
    var O = v - p;
    v = n.getNextUnset(v);
    if (!n.isRange(v, Math.min(n.getSize(), v + (v - p) / 2), false)) throw new I();
    x -= w * _;
    if (x % 103 !== _) throw new Me();
    var R = d.length;
    if (d.length === 0) throw new I();
    if (d.length > 0 && C) {
      f === e.CODE_CODE_C ? (d = d.substring(0, d.length - 2)) : (d = d.substring(0, d.length - 1));
    }
    for (var H = (o[1] + o[0]) / 2, N = p + O / 2, k = l.length, F = new Uint8Array(k), V = 0; V < k; V++) F[V] = l[V];
    var J = [new U(H, r), new U(N, r)];
    return new je(d, F, 0, J, ei.CODE_128, new Date().getTime());
  };
  e.CODE_PATTERNS = [
    Int32Array.from([2, 1, 2, 2, 2, 2]),
    Int32Array.from([2, 2, 2, 1, 2, 2]),
    Int32Array.from([2, 2, 2, 2, 2, 1]),
    Int32Array.from([1, 2, 1, 2, 2, 3]),
    Int32Array.from([1, 2, 1, 3, 2, 2]),
    Int32Array.from([1, 3, 1, 2, 2, 2]),
    Int32Array.from([1, 2, 2, 2, 1, 3]),
    Int32Array.from([1, 2, 2, 3, 1, 2]),
    Int32Array.from([1, 3, 2, 2, 1, 2]),
    Int32Array.from([2, 2, 1, 2, 1, 3]),
    Int32Array.from([2, 2, 1, 3, 1, 2]),
    Int32Array.from([2, 3, 1, 2, 1, 2]),
    Int32Array.from([1, 1, 2, 2, 3, 2]),
    Int32Array.from([1, 2, 2, 1, 3, 2]),
    Int32Array.from([1, 2, 2, 2, 3, 1]),
    Int32Array.from([1, 1, 3, 2, 2, 2]),
    Int32Array.from([1, 2, 3, 1, 2, 2]),
    Int32Array.from([1, 2, 3, 2, 2, 1]),
    Int32Array.from([2, 2, 3, 2, 1, 1]),
    Int32Array.from([2, 2, 1, 1, 3, 2]),
    Int32Array.from([2, 2, 1, 2, 3, 1]),
    Int32Array.from([2, 1, 3, 2, 1, 2]),
    Int32Array.from([2, 2, 3, 1, 1, 2]),
    Int32Array.from([3, 1, 2, 1, 3, 1]),
    Int32Array.from([3, 1, 1, 2, 2, 2]),
    Int32Array.from([3, 2, 1, 1, 2, 2]),
    Int32Array.from([3, 2, 1, 2, 2, 1]),
    Int32Array.from([3, 1, 2, 2, 1, 2]),
    Int32Array.from([3, 2, 2, 1, 1, 2]),
    Int32Array.from([3, 2, 2, 2, 1, 1]),
    Int32Array.from([2, 1, 2, 1, 2, 3]),
    Int32Array.from([2, 1, 2, 3, 2, 1]),
    Int32Array.from([2, 3, 2, 1, 2, 1]),
    Int32Array.from([1, 1, 1, 3, 2, 3]),
    Int32Array.from([1, 3, 1, 1, 2, 3]),
    Int32Array.from([1, 3, 1, 3, 2, 1]),
    Int32Array.from([1, 1, 2, 3, 1, 3]),
    Int32Array.from([1, 3, 2, 1, 1, 3]),
    Int32Array.from([1, 3, 2, 3, 1, 1]),
    Int32Array.from([2, 1, 1, 3, 1, 3]),
    Int32Array.from([2, 3, 1, 1, 1, 3]),
    Int32Array.from([2, 3, 1, 3, 1, 1]),
    Int32Array.from([1, 1, 2, 1, 3, 3]),
    Int32Array.from([1, 1, 2, 3, 3, 1]),
    Int32Array.from([1, 3, 2, 1, 3, 1]),
    Int32Array.from([1, 1, 3, 1, 2, 3]),
    Int32Array.from([1, 1, 3, 3, 2, 1]),
    Int32Array.from([1, 3, 3, 1, 2, 1]),
    Int32Array.from([3, 1, 3, 1, 2, 1]),
    Int32Array.from([2, 1, 1, 3, 3, 1]),
    Int32Array.from([2, 3, 1, 1, 3, 1]),
    Int32Array.from([2, 1, 3, 1, 1, 3]),
    Int32Array.from([2, 1, 3, 3, 1, 1]),
    Int32Array.from([2, 1, 3, 1, 3, 1]),
    Int32Array.from([3, 1, 1, 1, 2, 3]),
    Int32Array.from([3, 1, 1, 3, 2, 1]),
    Int32Array.from([3, 3, 1, 1, 2, 1]),
    Int32Array.from([3, 1, 2, 1, 1, 3]),
    Int32Array.from([3, 1, 2, 3, 1, 1]),
    Int32Array.from([3, 3, 2, 1, 1, 1]),
    Int32Array.from([3, 1, 4, 1, 1, 1]),
    Int32Array.from([2, 2, 1, 4, 1, 1]),
    Int32Array.from([4, 3, 1, 1, 1, 1]),
    Int32Array.from([1, 1, 1, 2, 2, 4]),
    Int32Array.from([1, 1, 1, 4, 2, 2]),
    Int32Array.from([1, 2, 1, 1, 2, 4]),
    Int32Array.from([1, 2, 1, 4, 2, 1]),
    Int32Array.from([1, 4, 1, 1, 2, 2]),
    Int32Array.from([1, 4, 1, 2, 2, 1]),
    Int32Array.from([1, 1, 2, 2, 1, 4]),
    Int32Array.from([1, 1, 2, 4, 1, 2]),
    Int32Array.from([1, 2, 2, 1, 1, 4]),
    Int32Array.from([1, 2, 2, 4, 1, 1]),
    Int32Array.from([1, 4, 2, 1, 1, 2]),
    Int32Array.from([1, 4, 2, 2, 1, 1]),
    Int32Array.from([2, 4, 1, 2, 1, 1]),
    Int32Array.from([2, 2, 1, 1, 1, 4]),
    Int32Array.from([4, 1, 3, 1, 1, 1]),
    Int32Array.from([2, 4, 1, 1, 1, 2]),
    Int32Array.from([1, 3, 4, 1, 1, 1]),
    Int32Array.from([1, 1, 1, 2, 4, 2]),
    Int32Array.from([1, 2, 1, 1, 4, 2]),
    Int32Array.from([1, 2, 1, 2, 4, 1]),
    Int32Array.from([1, 1, 4, 2, 1, 2]),
    Int32Array.from([1, 2, 4, 1, 1, 2]),
    Int32Array.from([1, 2, 4, 2, 1, 1]),
    Int32Array.from([4, 1, 1, 2, 1, 2]),
    Int32Array.from([4, 2, 1, 1, 1, 2]),
    Int32Array.from([4, 2, 1, 2, 1, 1]),
    Int32Array.from([2, 1, 2, 1, 4, 1]),
    Int32Array.from([2, 1, 4, 1, 2, 1]),
    Int32Array.from([4, 1, 2, 1, 2, 1]),
    Int32Array.from([1, 1, 1, 1, 4, 3]),
    Int32Array.from([1, 1, 1, 3, 4, 1]),
    Int32Array.from([1, 3, 1, 1, 4, 1]),
    Int32Array.from([1, 1, 4, 1, 1, 3]),
    Int32Array.from([1, 1, 4, 3, 1, 1]),
    Int32Array.from([4, 1, 1, 1, 1, 3]),
    Int32Array.from([4, 1, 1, 3, 1, 1]),
    Int32Array.from([1, 1, 3, 1, 4, 1]),
    Int32Array.from([1, 1, 4, 1, 3, 1]),
    Int32Array.from([3, 1, 1, 1, 4, 1]),
    Int32Array.from([4, 1, 1, 1, 3, 1]),
    Int32Array.from([2, 1, 1, 4, 1, 2]),
    Int32Array.from([2, 1, 1, 2, 1, 4]),
    Int32Array.from([2, 1, 1, 2, 3, 2]),
    Int32Array.from([2, 3, 3, 1, 1, 1, 2]),
  ];
  e.MAX_AVG_VARIANCE = 0.25;
  e.MAX_INDIVIDUAL_VARIANCE = 0.7;
  e.CODE_SHIFT = 98;
  e.CODE_CODE_C = 99;
  e.CODE_CODE_B = 100;
  e.CODE_CODE_A = 101;
  e.CODE_FNC_1 = 102;
  e.CODE_FNC_2 = 97;
  e.CODE_FNC_3 = 96;
  e.CODE_FNC_4_A = 101;
  e.CODE_FNC_4_B = 100;
  e.CODE_START_A = 103;
  e.CODE_START_B = 104;
  e.CODE_START_C = 105;
  e.CODE_STOP = 106;
  return e;
})(be);
var eu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Fn = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Ta = (function (t) {
  eu(e, t);
  function e(r, n) {
    if (r === void 0) {
      r = false;
    }
    if (n === void 0) {
      n = false;
    }
    var i = t() || this;
    i.usingCheckDigit = r;
    i.extendedMode = n;
    i.decodeRowResult = '';
    i.counters = new Int32Array(9);
    return i;
  }
  e.prototype.decodeRow = function (r, n, i) {
    var a;
    var o;
    var s;
    var c;
    var l = this.counters;
    this.counters.fill(0);
    this.decodeRowResult = '';
    var f = e.findAsteriskPattern(n, this.counters);
    var u = n.getNextSet(f[1]);
    var h = n.getSize();
    var d;
    var p;
    do {
      e.recordPattern(n, u, this.counters);
      var v = e.toNarrowWidePattern(this.counters);
      if (v < 0) throw new I();
      d = e.patternToChar(v);
      this.decodeRowResult += d;
      p = u;
      try {
        for (var g = ((a = void 0), Fn(this.counters)), _ = g.next(); !_.done; _ = g.next()) {
          var y = _.value;
          u += _.value;
        }
      } catch (k) {
        a = { error: k };
      } finally {
        try {
          if (_ && !_.done && (o = g.return)) {
            o.call(g);
          }
        } finally {
          if (a) throw a.error;
        }
      }
      u = n.getNextSet(u);
    } while (d !== '*');
    this.decodeRowResult = this.decodeRowResult.substring(0, this.decodeRowResult.length - 1);
    var x = 0;
    try {
      for (var w = Fn(this.counters), C = w.next(); !C.done; C = w.next()) {
        var y = C.value;
        x += C.value;
      }
    } catch (k) {
      s = { error: k };
    } finally {
      try {
        if (C && !C.done && (c = w.return)) {
          c.call(w);
        }
      } finally {
        if (s) throw s.error;
      }
    }
    var S = u - p - x;
    if (u !== h && S * 2 < x) throw new I();
    if (this.usingCheckDigit) {
      for (var T = this.decodeRowResult.length - 1, D = 0, O = 0; O < T; O++)
        D += e.ALPHABET_STRING.indexOf(this.decodeRowResult.charAt(O));
      if (this.decodeRowResult.charAt(T) !== e.ALPHABET_STRING.charAt(D % 43)) throw new Me();
      this.decodeRowResult = this.decodeRowResult.substring(0, T);
    }
    if (this.decodeRowResult.length === 0) throw new I();
    var R;
    this.extendedMode ? (R = e.decodeExtended(this.decodeRowResult)) : (R = this.decodeRowResult);
    var H = (f[1] + f[0]) / 2;
    var N = p + x / 2;
    return new je(R, null, 0, [new U(H, r), new U(N, r)], ei.CODE_39, new Date().getTime());
  };
  e.findAsteriskPattern = function (r, n) {
    for (var i = r.getSize(), a = r.getNextSet(0), o = 0, s = a, c = false, l = n.length, f = a; f < i; f++)
      if (r.get(f) !== c) n[o]++;
      else {
        if (o === l - 1) {
          if (
            this.toNarrowWidePattern(n) === e.ASTERISK_ENCODING &&
            r.isRange(Math.max(0, s - Math.floor((f - s) / 2)), s, false)
          )
            return [s, f];
          s += n[0] + n[1];
          n.copyWithin(0, 2, 2 + o - 1);
          n[o - 1] = 0;
          n[o] = 0;
          o--;
        } else o++;
        n[o] = 1;
        c = !c;
      }
    throw new I();
  };
  e.toNarrowWidePattern = function (r) {
    var n;
    var i;
    var a = r.length;
    var o = 0;
    var s;
    do {
      var c = 2147483647;
      try {
        for (var l = ((n = void 0), Fn(r)), f = l.next(); !f.done; f = l.next()) {
          var u = f.value;
          if (f.value < c && f.value > o) {
            c = f.value;
          }
        }
      } catch (v) {
        n = { error: v };
      } finally {
        try {
          if (f && !f.done && (i = l.return)) {
            i.call(l);
          }
        } finally {
          if (n) throw n.error;
        }
      }
      o = c;
      s = 0;
      for (var h = 0, d = 0, p = 0; p < r.length; p++) {
        var u = r[p];
        if (r[p] > o) {
          d |= 1 << (r.length - 1 - p);
          s++;
          h += r[p];
        }
      }
      if (s === 3) {
        for (var p = 0; p < r.length && s > 0; p++) {
          var u = r[p];
          if (r[p] > o && (s--, r[p] * 2 >= h)) return -1;
        }
        return d;
      }
    } while (s > 3);
    return -1;
  };
  e.patternToChar = function (r) {
    for (var n = 0; n < e.CHARACTER_ENCODINGS.length; n++)
      if (e.CHARACTER_ENCODINGS[n] === r) return e.ALPHABET_STRING.charAt(n);
    if (r === e.ASTERISK_ENCODING) return '*';
    throw new I();
  };
  e.decodeExtended = function (r) {
    for (var n = r.length, i = '', a = 0; a < n; a++) {
      var o = r.charAt(a);
      if (o === '+' || o === '$' || o === '%' || o === '/') {
        var s = r.charAt(a + 1);
        var c = '\0';
        switch (o) {
          case '+':
            if (s >= 'A' && s <= 'Z') c = String.fromCharCode(s.charCodeAt(0) + 32);
            else throw new M();
            break;
          case '$':
            if (s >= 'A' && s <= 'Z') c = String.fromCharCode(s.charCodeAt(0) - 64);
            else throw new M();
            break;
          case '%':
            if (s >= 'A' && s <= 'E') c = String.fromCharCode(s.charCodeAt(0) - 38);
            else if (s >= 'F' && s <= 'J') c = String.fromCharCode(s.charCodeAt(0) - 11);
            else if (s >= 'K' && s <= 'O') c = String.fromCharCode(s.charCodeAt(0) + 16);
            else if (s >= 'P' && s <= 'T') c = String.fromCharCode(s.charCodeAt(0) + 43);
            else if (s === 'U') c = '\0';
            else if (s === 'V') c = '@';
            else if (s === 'W') c = '`';
            else if (s === 'X' || s === 'Y' || s === 'Z') c = '\x7F';
            else throw new M();
            break;
          case '/':
            if (s >= 'A' && s <= 'O') c = String.fromCharCode(s.charCodeAt(0) - 32);
            else if (s === 'Z') c = ':';
            else throw new M();
            break;
        }
        i += c;
        a++;
      } else i += o;
    }
    return i;
  };
  e.ALPHABET_STRING = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%';
  e.CHARACTER_ENCODINGS = [
    52, 289, 97, 352, 49, 304, 112, 37, 292, 100, 265, 73, 328, 25, 280, 88, 13, 268, 76, 28, 259, 67, 322, 19, 274, 82,
    7, 262, 70, 22, 385, 193, 448, 145, 400, 208, 133, 388, 196, 168, 162, 138, 42,
  ];
  e.ASTERISK_ENCODING = 148;
  return e;
})(be);
var tu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Un = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var ba = (function (t) {
  tu(e, t);
  function e() {
    var r = t() || this;
    r.decodeRowResult = '';
    r.counters = new Int32Array(6);
    return r;
  }
  e.prototype.decodeRow = function (r, n, i) {
    var a;
    var o;
    var s;
    var c;
    var l = this.findAsteriskPattern(n);
    var f = n.getNextSet(l[1]);
    var u = n.getSize();
    var h = this.counters;
    this.counters.fill(0);
    this.decodeRowResult = '';
    var d;
    var p;
    do {
      e.recordPattern(n, f, this.counters);
      var v = this.toPattern(this.counters);
      if (v < 0) throw new I();
      d = this.patternToChar(v);
      this.decodeRowResult += d;
      p = f;
      try {
        for (var g = ((a = void 0), Un(this.counters)), _ = g.next(); !_.done; _ = g.next()) {
          var y = _.value;
          f += _.value;
        }
      } catch (O) {
        a = { error: O };
      } finally {
        try {
          if (_ && !_.done && (o = g.return)) {
            o.call(g);
          }
        } finally {
          if (a) throw a.error;
        }
      }
      f = n.getNextSet(f);
    } while (d !== '*');
    this.decodeRowResult = this.decodeRowResult.substring(0, this.decodeRowResult.length - 1);
    var x = 0;
    try {
      for (var w = Un(this.counters), C = w.next(); !C.done; C = w.next()) {
        var y = C.value;
        x += C.value;
      }
    } catch (O) {
      s = { error: O };
    } finally {
      try {
        if (C && !C.done && (c = w.return)) {
          c.call(w);
        }
      } finally {
        if (s) throw s.error;
      }
    }
    if (f === u || !n.get(f)) throw new I();
    if (this.decodeRowResult.length < 2) throw new I();
    this.checkChecksums(this.decodeRowResult);
    this.decodeRowResult = this.decodeRowResult.substring(0, this.decodeRowResult.length - 2);
    var S = this.decodeExtended(this.decodeRowResult);
    var T = (l[1] + l[0]) / 2;
    var D = p + x / 2;
    return new je(S, null, 0, [new U(T, r), new U(D, r)], ei.CODE_93, new Date().getTime());
  };
  e.prototype.findAsteriskPattern = function (r) {
    var n = r.getSize();
    var i = r.getNextSet(0);
    this.counters.fill(0);
    for (var a = this.counters, o = i, s = false, c = a.length, l = 0, f = i; f < n; f++)
      if (r.get(f) !== s) a[l]++;
      else {
        if (l === c - 1) {
          if (this.toPattern(a) === e.ASTERISK_ENCODING) return new Int32Array([o, f]);
          o += a[0] + a[1];
          a.copyWithin(0, 2, 2 + l - 1);
          a[l - 1] = 0;
          a[l] = 0;
          l--;
        } else l++;
        a[l] = 1;
        s = !s;
      }
    throw new I();
  };
  e.prototype.toPattern = function (r) {
    var n;
    var i;
    var a = 0;
    try {
      for (var o = Un(r), s = o.next(); !s.done; s = o.next()) {
        var c = s.value;
        a += s.value;
      }
    } catch (p) {
      n = { error: p };
    } finally {
      try {
        if (s && !s.done && (i = o.return)) {
          i.call(o);
        }
      } finally {
        if (n) throw n.error;
      }
    }
    for (var l = 0, f = r.length, u = 0; u < f; u++) {
      var h = Math.round((r[u] * 9) / a);
      if (h < 1 || h > 4) return -1;
      if ((u & 1) === 0) for (var d = 0; d < h; d++) l = (l << 1) | 1;
      else l <<= h;
    }
    return l;
  };
  e.prototype.patternToChar = function (r) {
    for (var n = 0; n < e.CHARACTER_ENCODINGS.length; n++)
      if (e.CHARACTER_ENCODINGS[n] === r) return e.ALPHABET_STRING.charAt(n);
    throw new I();
  };
  e.prototype.decodeExtended = function (r) {
    for (var n = r.length, i = '', a = 0; a < n; a++) {
      var o = r.charAt(a);
      if (o >= 'a' && o <= 'd') {
        if (a >= n - 1) throw new M();
        var s = r.charAt(a + 1);
        var c = '\0';
        switch (o) {
          case 'd':
            if (s >= 'A' && s <= 'Z') c = String.fromCharCode(s.charCodeAt(0) + 32);
            else throw new M();
            break;
          case 'a':
            if (s >= 'A' && s <= 'Z') c = String.fromCharCode(s.charCodeAt(0) - 64);
            else throw new M();
            break;
          case 'b':
            if (s >= 'A' && s <= 'E') c = String.fromCharCode(s.charCodeAt(0) - 38);
            else if (s >= 'F' && s <= 'J') c = String.fromCharCode(s.charCodeAt(0) - 11);
            else if (s >= 'K' && s <= 'O') c = String.fromCharCode(s.charCodeAt(0) + 16);
            else if (s >= 'P' && s <= 'T') c = String.fromCharCode(s.charCodeAt(0) + 43);
            else if (s === 'U') c = '\0';
            else if (s === 'V') c = '@';
            else if (s === 'W') c = '`';
            else if (s >= 'X' && s <= 'Z') c = '\x7F';
            else throw new M();
            break;
          case 'c':
            if (s >= 'A' && s <= 'O') c = String.fromCharCode(s.charCodeAt(0) - 32);
            else if (s === 'Z') c = ':';
            else throw new M();
            break;
        }
        i += c;
        a++;
      } else i += o;
    }
    return i;
  };
  e.prototype.checkChecksums = function (r) {
    var n = r.length;
    this.checkOneChecksum(r, r.length - 2, 20);
    this.checkOneChecksum(r, r.length - 1, 15);
  };
  e.prototype.checkOneChecksum = function (r, n, i) {
    for (var a = 1, o = 0, s = n - 1; s >= 0; s--) {
      o += a * e.ALPHABET_STRING.indexOf(r.charAt(s));
      if (++a > i) {
        a = 1;
      }
    }
    if (r.charAt(n) !== e.ALPHABET_STRING[o % 47]) throw new Me();
  };
  e.ALPHABET_STRING = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%abcd*';
  e.CHARACTER_ENCODINGS = [
    276, 328, 324, 322, 296, 292, 290, 336, 274, 266, 424, 420, 418, 404, 402, 394, 360, 356, 354, 308, 282, 344, 332,
    326, 300, 278, 436, 434, 428, 422, 406, 410, 364, 358, 310, 314, 302, 468, 466, 458, 366, 374, 430, 294, 474, 470,
    306, 350,
  ];
  e.ASTERISK_ENCODING = e.CHARACTER_ENCODINGS[47];
  return e;
})(be);
var ru = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var nu = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Na = (function (t) {
  ru(e, t);
  function e() {
    var r = (t !== null && t()) || this;
    r.narrowLineWidth = -1;
    return r;
  }
  e.prototype.decodeRow = function (r, n, i) {
    var a;
    var o;
    var s = this.decodeStart(n);
    var c = this.decodeEnd(n);
    var l = new K();
    e.decodeMiddle(n, s[1], c[0], l);
    var f = l.toString();
    var u = null;
    if (i != null) {
      u = i.get(Qn.ALLOWED_LENGTHS);
    }
    if (u == null) {
      u = e.DEFAULT_ALLOWED_LENGTHS;
    }
    var h = f.length;
    var d = false;
    var p = 0;
    try {
      for (var v = nu(u), g = v.next(); !g.done; g = v.next()) {
        var _ = g.value;
        if (f.length === g.value) {
          d = true;
          break;
        }
        if (g.value > p) {
          p = g.value;
        }
      }
    } catch (w) {
      a = { error: w };
    } finally {
      try {
        if (g && !g.done && (o = v.return)) {
          o.call(v);
        }
      } finally {
        if (a) throw a.error;
      }
    }
    if (!d && f.length > p) {
      d = true;
    }
    if (!d) throw new M();
    var y = [new U(s[1], r), new U(c[0], r)];
    var x = new je(f, null, 0, y, ei.ITF, new Date().getTime());
    return x;
  };
  e.decodeMiddle = function (r, n, i, a) {
    var o = new Int32Array(10);
    var s = new Int32Array(5);
    var c = new Int32Array(5);
    for (o.fill(0), s.fill(0), c.fill(0); n < i; ) {
      be.recordPattern(r, n, o);
      for (var l = 0; l < 5; l++) {
        var f = 2 * l;
        s[l] = o[f];
        c[l] = o[f + 1];
      }
      var u = e.decodeDigit(s);
      a.append(u.toString());
      u = this.decodeDigit(c);
      a.append(u.toString());
      o.forEach(function (h) {
        n += h;
      });
    }
  };
  e.prototype.decodeStart = function (r) {
    var n = e.skipWhiteSpace(r);
    var i = e.findGuardPattern(r, n, e.START_PATTERN);
    this.narrowLineWidth = (i[1] - i[0]) / 4;
    this.validateQuietZone(r, i[0]);
    return i;
  };
  e.prototype.validateQuietZone = function (r, n) {
    var i = this.narrowLineWidth * 10;
    i = i < n ? i : n;
    for (var a = n - 1; i > 0 && a >= 0 && !r.get(a); a--) i--;
    if (i !== 0) throw new I();
  };
  e.skipWhiteSpace = function (r) {
    var n = r.getSize();
    var i = r.getNextSet(0);
    if (i === n) throw new I();
    return i;
  };
  e.prototype.decodeEnd = function (r) {
    r.reverse();
    try {
      var n = e.skipWhiteSpace(r);
      var i = void 0;
      try {
        i = e.findGuardPattern(r, n, e.END_PATTERN_REVERSED[0]);
      } catch (o) {
        if (o instanceof I) {
          i = e.findGuardPattern(r, n, e.END_PATTERN_REVERSED[1]);
        }
      }
      this.validateQuietZone(r, i[0]);
      var a = i[0];
      i[0] = r.getSize() - i[1];
      i[1] = r.getSize() - i[0];
      return i;
    } finally {
      r.reverse();
    }
  };
  e.findGuardPattern = function (r, n, i) {
    var a = i.length;
    var o = new Int32Array(i.length);
    var s = r.getSize();
    var c = false;
    var l = 0;
    var f = n;
    o.fill(0);
    for (var u = n; u < s; u++)
      if (r.get(u) !== c) o[l]++;
      else {
        if (l === i.length - 1) {
          if (be.patternMatchVariance(o, i, e.MAX_INDIVIDUAL_VARIANCE) < e.MAX_AVG_VARIANCE) return [f, u];
          f += o[0] + o[1];
          ue.arraycopy(o, 2, o, 0, l - 1);
          o[l - 1] = 0;
          o[l] = 0;
          l--;
        } else l++;
        o[l] = 1;
        c = !c;
      }
    throw new I();
  };
  e.decodeDigit = function (r) {
    for (var n = e.MAX_AVG_VARIANCE, i = -1, a = e.PATTERNS.length, o = 0; o < a; o++) {
      var s = e.PATTERNS[o];
      var c = be.patternMatchVariance(r, e.PATTERNS[o], e.MAX_INDIVIDUAL_VARIANCE);
      c < n ? ((n = c), (i = o)) : c === n && (i = -1);
    }
    if (i >= 0) return i % 10;
    throw new I();
  };
  e.PATTERNS = [
    Int32Array.from([1, 1, 2, 2, 1]),
    Int32Array.from([2, 1, 1, 1, 2]),
    Int32Array.from([1, 2, 1, 1, 2]),
    Int32Array.from([2, 2, 1, 1, 1]),
    Int32Array.from([1, 1, 2, 1, 2]),
    Int32Array.from([2, 1, 2, 1, 1]),
    Int32Array.from([1, 2, 2, 1, 1]),
    Int32Array.from([1, 1, 1, 2, 2]),
    Int32Array.from([2, 1, 1, 2, 1]),
    Int32Array.from([1, 2, 1, 2, 1]),
    Int32Array.from([1, 1, 3, 3, 1]),
    Int32Array.from([3, 1, 1, 1, 3]),
    Int32Array.from([1, 3, 1, 1, 3]),
    Int32Array.from([3, 3, 1, 1, 1]),
    Int32Array.from([1, 1, 3, 1, 3]),
    Int32Array.from([3, 1, 3, 1, 1]),
    Int32Array.from([1, 3, 3, 1, 1]),
    Int32Array.from([1, 1, 1, 3, 3]),
    Int32Array.from([3, 1, 1, 3, 1]),
    Int32Array.from([1, 3, 1, 3, 1]),
  ];
  e.MAX_AVG_VARIANCE = 0.38;
  e.MAX_INDIVIDUAL_VARIANCE = 0.5;
  e.DEFAULT_ALLOWED_LENGTHS = [6, 8, 10, 12, 14];
  e.START_PATTERN = Int32Array.from([1, 1, 1, 1]);
  e.END_PATTERN_REVERSED = [Int32Array.from([1, 1, 2]), Int32Array.from([1, 1, 3])];
  return e;
})(be);
var iu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var hr = (function (t) {
  iu(e, t);
  function e() {
    var r = (t !== null && t()) || this;
    r.decodeRowStringBuffer = '';
    return r;
  }
  e.findStartGuardPattern = function (r) {
    for (var n = false, i, a = 0, o = Int32Array.from([0, 0, 0]); !n; ) {
      o = Int32Array.from([0, 0, 0]);
      i = e.findGuardPattern(r, a, false, this.START_END_PATTERN, o);
      var s = i[0];
      a = i[1];
      var c = i[0] - (a - i[0]);
      if (c >= 0) {
        n = r.isRange(c, i[0], false);
      }
    }
    return i;
  };
  e.checkChecksum = function (r) {
    return e.checkStandardUPCEANChecksum(r);
  };
  e.checkStandardUPCEANChecksum = function (r) {
    var n = r.length;
    if (r.length === 0) return false;
    var i = parseInt(r.charAt(r.length - 1), 10);
    return e.getStandardUPCEANChecksum(r.substring(0, r.length - 1)) === i;
  };
  e.getStandardUPCEANChecksum = function (r) {
    for (var n = r.length, i = 0, a = n - 1; a >= 0; a -= 2) {
      var o = r.charAt(a).charCodeAt(0) - 48;
      if (o < 0 || o > 9) throw new M();
      i += o;
    }
    i *= 3;
    for (var a = n - 2; a >= 0; a -= 2) {
      var o = r.charAt(a).charCodeAt(0) - 48;
      if (o < 0 || o > 9) throw new M();
      i += o;
    }
    return (1000 - i) % 10;
  };
  e.decodeEnd = function (r, n) {
    return e.findGuardPattern(r, n, false, e.START_END_PATTERN, new Int32Array(e.START_END_PATTERN.length).fill(0));
  };
  e.findGuardPatternWithoutCounters = function (r, n, i, a) {
    return this.findGuardPattern(r, n, i, a, new Int32Array(a.length));
  };
  e.findGuardPattern = function (r, n, i, a, o) {
    var s = r.getSize();
    n = i ? r.getNextUnset(n) : r.getNextSet(n);
    for (var c = 0, l = n, f = a.length, u = i, h = n; h < s; h++)
      if (r.get(h) !== u) o[c]++;
      else {
        if (c === f - 1) {
          if (be.patternMatchVariance(o, a, e.MAX_INDIVIDUAL_VARIANCE) < e.MAX_AVG_VARIANCE)
            return Int32Array.from([l, h]);
          l += o[0] + o[1];
          for (var d = o.slice(2, o.length), p = 0; p < c - 1; p++) o[p] = d[p];
          o[c - 1] = 0;
          o[c] = 0;
          c--;
        } else c++;
        o[c] = 1;
        u = !u;
      }
    throw new I();
  };
  e.decodeDigit = function (r, n, i, a) {
    this.recordPattern(r, i, n);
    for (var o = this.MAX_AVG_VARIANCE, s = -1, c = a.length, l = 0; l < c; l++) {
      var f = a[l];
      var u = be.patternMatchVariance(n, a[l], e.MAX_INDIVIDUAL_VARIANCE);
      if (u < o) {
        o = u;
        s = l;
      }
    }
    if (s >= 0) return s;
    throw new I();
  };
  e.MAX_AVG_VARIANCE = 0.48;
  e.MAX_INDIVIDUAL_VARIANCE = 0.7;
  e.START_END_PATTERN = Int32Array.from([1, 1, 1]);
  e.MIDDLE_PATTERN = Int32Array.from([1, 1, 1, 1, 1]);
  e.END_PATTERN = Int32Array.from([1, 1, 1, 1, 1, 1]);
  e.L_PATTERNS = [
    Int32Array.from([3, 2, 1, 1]),
    Int32Array.from([2, 2, 2, 1]),
    Int32Array.from([2, 1, 2, 2]),
    Int32Array.from([1, 4, 1, 1]),
    Int32Array.from([1, 1, 3, 2]),
    Int32Array.from([1, 2, 3, 1]),
    Int32Array.from([1, 1, 1, 4]),
    Int32Array.from([1, 3, 1, 2]),
    Int32Array.from([1, 2, 1, 3]),
    Int32Array.from([3, 1, 1, 2]),
  ];
  return e;
})(be);
var au = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var ou = (function () {
  function t() {
    this.CHECK_DIGIT_ENCODINGS = [24, 20, 18, 17, 12, 6, 3, 10, 9, 5];
    this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);
    this.decodeRowStringBuffer = '';
  }
  t.prototype.decodeRow = function (e, r, n) {
    var i = this.decodeRowStringBuffer;
    var a = this.decodeMiddle(r, n, this.decodeRowStringBuffer);
    var o = this.decodeRowStringBuffer.toString();
    var s = t.parseExtensionString(o);
    var c = [new U((n[0] + n[1]) / 2, e), new U(a, e)];
    var l = new je(o, null, 0, c, ei.UPC_EAN_EXTENSION, new Date().getTime());
    if (s != null) {
      l.putAllMetadata(s);
    }
    return l;
  };
  t.prototype.decodeMiddle = function (e, r, n) {
    var i;
    var a;
    var o = this.decodeMiddleCounters;
    o[0] = 0;
    o[1] = 0;
    o[2] = 0;
    o[3] = 0;
    for (var s = e.getSize(), c = r[1], l = 0, f = 0; f < 5 && c < s; f++) {
      var u = hr.decodeDigit(e, o, c, hr.L_AND_G_PATTERNS);
      n += String.fromCharCode(48 + (u % 10));
      try {
        for (var h = ((i = void 0), au(o)), d = h.next(); !d.done; d = h.next()) {
          var p = d.value;
          c += d.value;
        }
      } catch (g) {
        i = { error: g };
      } finally {
        try {
          if (d && !d.done && (a = h.return)) {
            a.call(h);
          }
        } finally {
          if (i) throw i.error;
        }
      }
      if (u >= 10) {
        l |= 1 << (4 - f);
      }
      if (f !== 4) {
        c = e.getNextSet(c);
        c = e.getNextUnset(c);
      }
    }
    if (n.length !== 5) throw new I();
    var v = this.determineCheckDigit(l);
    if (t.extensionChecksum(n.toString()) !== v) throw new I();
    return c;
  };
  t.extensionChecksum = function (e) {
    for (var r = e.length, n = 0, i = r - 2; i >= 0; i -= 2) n += e.charAt(i).charCodeAt(0) - 48;
    n *= 3;
    for (var i = r - 1; i >= 0; i -= 2) n += e.charAt(i).charCodeAt(0) - 48;
    n *= 3;
    return n % 10;
  };
  t.prototype.determineCheckDigit = function (e) {
    for (var r = 0; r < 10; r++) if (e === this.CHECK_DIGIT_ENCODINGS[r]) return r;
    throw new I();
  };
  t.parseExtensionString = function (e) {
    if (e.length !== 5) return null;
    var r = t.parseExtension5String(e);
    return r == null ? null : new Map([[ti.SUGGESTED_PRICE, r]]);
  };
  t.parseExtension5String = function (e) {
    var r;
    switch (e.charAt(0)) {
      case '0':
        r = '\xA3';
        break;
      case '5':
        r = '$';
        break;
      case '9':
        switch (e) {
          case '90000':
            return null;
          case '99991':
            return '0.00';
          case '99990':
            return 'Used';
        }
        r = '';
        break;
      default:
        r = '';
        break;
    }
    var n = parseInt(e.substring(1));
    var i = (n / 100).toString();
    var a = n % 100;
    var o = a < 10 ? '0' + a : a.toString();
    return r + i + '.' + o;
  };
  return t;
})();
var su = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var cu = (function () {
  function t() {
    this.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);
    this.decodeRowStringBuffer = '';
  }
  t.prototype.decodeRow = function (e, r, n) {
    var i = this.decodeRowStringBuffer;
    var a = this.decodeMiddle(r, n, this.decodeRowStringBuffer);
    var o = this.decodeRowStringBuffer.toString();
    var s = t.parseExtensionString(o);
    var c = [new U((n[0] + n[1]) / 2, e), new U(a, e)];
    var l = new je(o, null, 0, c, ei.UPC_EAN_EXTENSION, new Date().getTime());
    if (s != null) {
      l.putAllMetadata(s);
    }
    return l;
  };
  t.prototype.decodeMiddle = function (e, r, n) {
    var i;
    var a;
    var o = this.decodeMiddleCounters;
    o[0] = 0;
    o[1] = 0;
    o[2] = 0;
    o[3] = 0;
    for (var s = e.getSize(), c = r[1], l = 0, f = 0; f < 2 && c < s; f++) {
      var u = hr.decodeDigit(e, o, c, hr.L_AND_G_PATTERNS);
      n += String.fromCharCode(48 + (u % 10));
      try {
        for (var h = ((i = void 0), su(o)), d = h.next(); !d.done; d = h.next()) {
          var p = d.value;
          c += d.value;
        }
      } catch (v) {
        i = { error: v };
      } finally {
        try {
          if (d && !d.done && (a = h.return)) {
            a.call(h);
          }
        } finally {
          if (i) throw i.error;
        }
      }
      if (u >= 10) {
        l |= 1 << (1 - f);
      }
      if (f !== 1) {
        c = e.getNextSet(c);
        c = e.getNextUnset(c);
      }
    }
    if (n.length !== 2) throw new I();
    if (parseInt(n.toString()) % 4 !== l) throw new I();
    return c;
  };
  t.parseExtensionString = function (e) {
    return e.length !== 2 ? null : new Map([[ti.ISSUE_NUMBER, parseInt(e)]]);
  };
  return t;
})();
var lu = (function () {
  function t() {}
  t.decodeRow = function (e, r, n) {
    var i = hr.findGuardPattern(
      r,
      n,
      false,
      this.EXTENSION_START_PATTERN,
      new Int32Array(this.EXTENSION_START_PATTERN.length).fill(0),
    );
    try {
      var a = new ou();
      return a.decodeRow(e, r, i);
    } catch {
      var o = new cu();
      return o.decodeRow(e, r, i);
    }
  };
  t.EXTENSION_START_PATTERN = Int32Array.from([1, 1, 2]);
  return t;
})();
var fu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Ae = (function (t) {
  fu(e, t);
  function e() {
    var r = t() || this;
    r.decodeRowStringBuffer = '';
    e.L_AND_G_PATTERNS = e.L_PATTERNS.map(function (s) {
      return Int32Array.from(s);
    });
    for (var n = 10; n < 20; n++) {
      for (var i = e.L_PATTERNS[n - 10], a = new Int32Array(i.length), o = 0; o < i.length; o++)
        a[o] = i[i.length - o - 1];
      e.L_AND_G_PATTERNS[n] = a;
    }
    return r;
  }
  e.prototype.decodeRow = function (r, n, i) {
    var a = e.findStartGuardPattern(n);
    var o = i == null ? null : i.get(Qn.NEED_RESULT_POINT_CALLBACK);
    if (o != null) {
      var s = new U((a[0] + a[1]) / 2, r);
      o.foundPossibleResultPoint(s);
    }
    var c = this.decodeMiddle(n, a, this.decodeRowStringBuffer);
    var l = c.rowOffset;
    var f = c.resultString;
    if (o != null) {
      var u = new U(c.rowOffset, r);
      o.foundPossibleResultPoint(u);
    }
    var h = e.decodeEnd(n, c.rowOffset);
    if (o != null) {
      var d = new U((h[0] + h[1]) / 2, r);
      o.foundPossibleResultPoint(d);
    }
    var p = h[1];
    var v = h[1] + (h[1] - h[0]);
    if (v >= n.getSize() || !n.isRange(h[1], v, false)) throw new I();
    var g = c.resultString.toString();
    if (g.length < 8) throw new M();
    if (!e.checkChecksum(g)) throw new Me();
    var _ = (a[1] + a[0]) / 2;
    var y = (h[1] + h[0]) / 2;
    var x = this.getBarcodeFormat();
    var w = [new U(_, r), new U(y, r)];
    var C = new je(g, null, 0, w, x, new Date().getTime());
    var S = 0;
    try {
      var T = lu.decodeRow(r, n, h[1]);
      C.putMetadata(ti.UPC_EAN_EXTENSION, T.getText());
      C.putAllMetadata(T.getResultMetadata());
      C.addResultPoints(T.getResultPoints());
      S = T.getText().length;
    } catch {}
    var D = i == null ? null : i.get(Qn.ALLOWED_EAN_EXTENSIONS);
    if (D != null) {
      var O = false;
      for (var R in D)
        if (S.toString() === R) {
          O = true;
          break;
        }
      if (!O) throw new I();
    }
    if (!(x === ei.EAN_13)) {
      ei.UPC_A;
    }
    return C;
  };
  e.checkChecksum = function (r) {
    return e.checkStandardUPCEANChecksum(r);
  };
  e.checkStandardUPCEANChecksum = function (r) {
    var n = r.length;
    if (r.length === 0) return false;
    var i = parseInt(r.charAt(r.length - 1), 10);
    return e.getStandardUPCEANChecksum(r.substring(0, r.length - 1)) === i;
  };
  e.getStandardUPCEANChecksum = function (r) {
    for (var n = r.length, i = 0, a = n - 1; a >= 0; a -= 2) {
      var o = r.charAt(a).charCodeAt(0) - 48;
      if (o < 0 || o > 9) throw new M();
      i += o;
    }
    i *= 3;
    for (var a = n - 2; a >= 0; a -= 2) {
      var o = r.charAt(a).charCodeAt(0) - 48;
      if (o < 0 || o > 9) throw new M();
      i += o;
    }
    return (1000 - i) % 10;
  };
  e.decodeEnd = function (r, n) {
    return e.findGuardPattern(r, n, false, e.START_END_PATTERN, new Int32Array(e.START_END_PATTERN.length).fill(0));
  };
  return e;
})(hr);
var uu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Oa = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var ai = (function (t) {
  uu(e, t);
  function e() {
    var r = t() || this;
    r.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);
    return r;
  }
  e.prototype.decodeMiddle = function (r, n, i) {
    var a;
    var o;
    var s;
    var c;
    var l = this.decodeMiddleCounters;
    l[0] = 0;
    l[1] = 0;
    l[2] = 0;
    l[3] = 0;
    for (var f = r.getSize(), u = n[1], h = 0, d = 0; d < 6 && u < f; d++) {
      var p = Ae.decodeDigit(r, l, u, Ae.L_AND_G_PATTERNS);
      i += String.fromCharCode(48 + (p % 10));
      try {
        for (var v = ((a = void 0), Oa(l)), g = v.next(); !g.done; g = v.next()) {
          var _ = g.value;
          u += g.value;
        }
      } catch (C) {
        a = { error: C };
      } finally {
        try {
          if (g && !g.done && (o = v.return)) {
            o.call(v);
          }
        } finally {
          if (a) throw a.error;
        }
      }
      if (p >= 10) {
        h |= 1 << (5 - d);
      }
    }
    i = e.determineFirstDigit(i, h);
    var y = Ae.findGuardPattern(r, u, true, Ae.MIDDLE_PATTERN, new Int32Array(Ae.MIDDLE_PATTERN.length).fill(0));
    u = y[1];
    for (var d = 0; d < 6 && u < f; d++) {
      var p = Ae.decodeDigit(r, l, u, Ae.L_PATTERNS);
      i += String.fromCharCode(48 + p);
      try {
        for (var x = ((s = void 0), Oa(l)), w = x.next(); !w.done; w = x.next()) {
          var _ = w.value;
          u += w.value;
        }
      } catch (T) {
        s = { error: T };
      } finally {
        try {
          if (w && !w.done && (c = x.return)) {
            c.call(x);
          }
        } finally {
          if (s) throw s.error;
        }
      }
    }
    return {
      rowOffset: u,
      resultString: i,
    };
  };
  e.prototype.getBarcodeFormat = function () {
    return ei.EAN_13;
  };
  e.determineFirstDigit = function (r, n) {
    for (var i = 0; i < 10; i++)
      if (n === this.FIRST_DIGIT_ENCODINGS[i]) {
        r = String.fromCharCode(48 + i) + r;
        return r;
      }
    throw new I();
  };
  e.FIRST_DIGIT_ENCODINGS = [0, 11, 13, 14, 19, 25, 28, 21, 22, 26];
  return e;
})(Ae);
var hu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Da = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Ra = (function (t) {
  hu(e, t);
  function e() {
    var r = t() || this;
    r.decodeMiddleCounters = Int32Array.from([0, 0, 0, 0]);
    return r;
  }
  e.prototype.decodeMiddle = function (r, n, i) {
    var a;
    var o;
    var s;
    var c;
    var l = this.decodeMiddleCounters;
    l[0] = 0;
    l[1] = 0;
    l[2] = 0;
    l[3] = 0;
    for (var f = r.getSize(), u = n[1], h = 0; h < 4 && u < f; h++) {
      var d = Ae.decodeDigit(r, l, u, Ae.L_PATTERNS);
      i += String.fromCharCode(48 + d);
      try {
        for (var p = ((a = void 0), Da(l)), v = p.next(); !v.done; v = p.next()) {
          var g = v.value;
          u += v.value;
        }
      } catch (w) {
        a = { error: w };
      } finally {
        try {
          if (v && !v.done && (o = p.return)) {
            o.call(p);
          }
        } finally {
          if (a) throw a.error;
        }
      }
    }
    var _ = Ae.findGuardPattern(r, u, true, Ae.MIDDLE_PATTERN, new Int32Array(Ae.MIDDLE_PATTERN.length).fill(0));
    u = _[1];
    for (var h = 0; h < 4 && u < f; h++) {
      var d = Ae.decodeDigit(r, l, u, Ae.L_PATTERNS);
      i += String.fromCharCode(48 + d);
      try {
        for (var y = ((s = void 0), Da(l)), x = y.next(); !x.done; x = y.next()) {
          var g = x.value;
          u += x.value;
        }
      } catch (S) {
        s = { error: S };
      } finally {
        try {
          if (x && !x.done && (c = y.return)) {
            c.call(y);
          }
        } finally {
          if (s) throw s.error;
        }
      }
    }
    return {
      rowOffset: u,
      resultString: i,
    };
  };
  e.prototype.getBarcodeFormat = function () {
    return ei.EAN_8;
  };
  return e;
})(Ae);
var du = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Pa = (function (t) {
  du(e, t);
  function e() {
    var r = (t !== null && t()) || this;
    r.ean13Reader = new ai();
    return r;
  }
  e.prototype.getBarcodeFormat = function () {
    return ei.UPC_A;
  };
  e.prototype.decode = function (r, n) {
    return this.maybeReturnResult(this.ean13Reader.decode(r));
  };
  e.prototype.decodeRow = function (r, n, i) {
    return this.maybeReturnResult(this.ean13Reader.decodeRow(r, n, i));
  };
  e.prototype.decodeMiddle = function (r, n, i) {
    return this.ean13Reader.decodeMiddle(r, n, i);
  };
  e.prototype.maybeReturnResult = function (r) {
    var n = r.getText();
    if (n.charAt(0) === '0') {
      var i = new je(n.substring(1), null, null, r.getResultPoints(), ei.UPC_A);
      if (r.getResultMetadata() != null) {
        i.putAllMetadata(r.getResultMetadata());
      }
      return i;
    } else throw new I();
  };
  e.prototype.reset = function () {
    this.ean13Reader.reset();
  };
  return e;
})(Ae);
var pu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var vu = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Ma = (function (t) {
  pu(e, t);
  function e() {
    var r = t() || this;
    r.decodeMiddleCounters = new Int32Array(4);
    return r;
  }
  e.prototype.decodeMiddle = function (r, n, i) {
    var a;
    var o;
    var s = this.decodeMiddleCounters.map(function (g) {
      return g;
    });
    s[0] = 0;
    s[1] = 0;
    s[2] = 0;
    s[3] = 0;
    for (var c = r.getSize(), l = n[1], f = 0, u = 0; u < 6 && l < c; u++) {
      var h = e.decodeDigit(r, s, l, e.L_AND_G_PATTERNS);
      i += String.fromCharCode(48 + (h % 10));
      try {
        for (var d = ((a = void 0), vu(s)), p = d.next(); !p.done; p = d.next()) {
          var v = p.value;
          l += p.value;
        }
      } catch (g) {
        a = { error: g };
      } finally {
        try {
          if (p && !p.done && (o = d.return)) {
            o.call(d);
          }
        } finally {
          if (a) throw a.error;
        }
      }
      if (h >= 10) {
        f |= 1 << (5 - u);
      }
    }
    e.determineNumSysAndCheckDigit(new K(i), f);
    return l;
  };
  e.prototype.decodeEnd = function (r, n) {
    return e.findGuardPatternWithoutCounters(r, n, true, e.MIDDLE_END_PATTERN);
  };
  e.prototype.checkChecksum = function (r) {
    return Ae.checkChecksum(e.convertUPCEtoUPCA(r));
  };
  e.determineNumSysAndCheckDigit = function (r, n) {
    for (var i = 0; i <= 1; i++)
      for (var a = 0; a < 10; a++)
        if (n === this.NUMSYS_AND_CHECK_DIGIT_PATTERNS[i][a]) {
          r.insert(0, '0' + i);
          r.append('0' + a);
          return;
        }
    throw I.getNotFoundInstance();
  };
  e.prototype.getBarcodeFormat = function () {
    return ei.UPC_E;
  };
  e.convertUPCEtoUPCA = function (r) {
    var n = r
      .slice(1, 7)
      .split('')
      .map(function (o) {
        return o.charCodeAt(0);
      });
    var i = new K();
    i.append(r.charAt(0));
    var a = n[5];
    switch (n[5]) {
      case 0:
      case 1:
      case 2:
        {
          i.appendChars(n, 0, 2);
          i.append(n[5]);
          i.append('0000');
          i.appendChars(n, 2, 3);
        }
        break;
      case 3:
        {
          i.appendChars(n, 0, 3);
          i.append('00000');
          i.appendChars(n, 3, 2);
        }
        break;
      case 4:
        {
          i.appendChars(n, 0, 4);
          i.append('00000');
          i.append(n[4]);
        }
        break;
      default:
        {
          i.appendChars(n, 0, 5);
          i.append('0000');
          i.append(n[5]);
        }
        break;
    }
    if (r.length >= 8) {
      i.append(r.charAt(7));
    }
    return i.toString();
  };
  e.MIDDLE_END_PATTERN = Int32Array.from([1, 1, 1, 1, 1, 1]);
  e.NUMSYS_AND_CHECK_DIGIT_PATTERNS = [
    Int32Array.from([56, 52, 50, 49, 44, 38, 35, 42, 41, 37]),
    Int32Array.from([7, 11, 13, 14, 19, 25, 28, 21, 22, 1]),
  ];
  return e;
})(Ae);
var gu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var ka = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Vn = (function (t) {
  gu(e, t);
  function e(r) {
    var n = t() || this;
    var i = r == null ? null : r.get(Qn.POSSIBLE_FORMATS);
    var a = [];
    if (i != null) {
      if (i.indexOf(ei.EAN_13) > -1) {
        a.push(new ai());
      }
      if (i.indexOf(ei.UPC_A) > -1) {
        a.push(new Pa());
      }
      if (i.indexOf(ei.EAN_8) > -1) {
        a.push(new Ra());
      }
      if (i.indexOf(ei.UPC_E) > -1) {
        a.push(new Ma());
      }
    }
    if (a.length === 0) {
      a.push(new ai());
      a.push(new Pa());
      a.push(new Ra());
      a.push(new Ma());
    }
    n.readers = a;
    return n;
  }
  e.prototype.decodeRow = function (r, n, i) {
    var a;
    var o;
    try {
      for (var s = ka(this.readers), c = s.next(); !c.done; c = s.next()) {
        var l = c.value;
        try {
          var f = c.value.decodeRow(r, n, i);
          var u = f.getBarcodeFormat() === ei.EAN_13 && f.getText().charAt(0) === '0';
          var h = i == null ? null : i.get(Qn.POSSIBLE_FORMATS);
          var d = h == null || h.includes(ei.UPC_A);
          if (u && d) {
            var p = f.getRawBytes();
            var v = new je(f.getText().substring(1), p, p ? p.length : null, f.getResultPoints(), ei.UPC_A);
            v.putAllMetadata(f.getResultMetadata());
            return v;
          }
          return f;
        } catch {}
      }
    } catch (g) {
      a = { error: g };
    } finally {
      try {
        if (c && !c.done && (o = s.return)) {
          o.call(s);
        }
      } finally {
        if (a) throw a.error;
      }
    }
    throw new I();
  };
  e.prototype.reset = function () {
    var r;
    var n;
    try {
      for (var i = ka(this.readers), a = i.next(); !a.done; a = i.next()) {
        var o = a.value;
        a.value.reset();
      }
    } catch (s) {
      r = { error: s };
    } finally {
      try {
        if (a && !a.done && (n = i.return)) {
          n.call(i);
        }
      } finally {
        if (r) throw r.error;
      }
    }
  };
  return e;
})(be);
var _u = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var mu = (function (t) {
  _u(e, t);
  function e() {
    var r = (t !== null && t()) || this;
    r.CODA_BAR_CHAR_SET = {
      nnnnnww: '0',
      nnnnwwn: '1',
      nnnwnnw: '2',
      wwnnnnn: '3',
      nnwnnwn: '4',
      wnnnnwn: '5',
      nwnnnnw: '6',
      nwnnwnn: '7',
      nwwnnnn: '8',
      wnnwnnn: '9',
      nnnwwnn: '-',
      nnwwnnn: '$',
      wnnnwnw: ':',
      wnwnnnw: '/',
      wnwnwnn: '.',
      nnwwwww: '+',
      nnwwnwn: 'A',
      nwnwnnw: 'B',
      nnnwnww: 'C',
      nnnwwwn: 'D',
    };
    return r;
  }
  e.prototype.decodeRow = function (r, n, i) {
    var a = this.getValidRowData(n);
    if (!a) throw new I();
    var o = this.codaBarDecodeRow(a.row);
    if (!o) throw new I();
    return new je(o, null, 0, [new U(a.left, r), new U(a.right, r)], ei.CODABAR, new Date().getTime());
  };
  e.prototype.getValidRowData = function (r) {
    var n = r.toArray();
    var i = n.indexOf(true);
    if (i === -1) return null;
    var a = n.lastIndexOf(true);
    if (a <= i) return null;
    n = n.slice(i, a + 1);
    for (var o = [], s = n[0], c = 1, l = 1; l < n.length; l++) n[l] === s ? c++ : ((s = n[l]), o.push(c), (c = 1));
    o.push(c);
    return o.length < 23 && (o.length + 1) % 8 !== 0
      ? null
      : {
          row: o,
          left: i,
          right: a,
        };
  };
  e.prototype.codaBarDecodeRow = function (r) {
    for (
      var n = [],
        i = Math.ceil(
          r.reduce(function (c, l) {
            return (c + l) / 2;
          }, 0),
        );
      r.length > 0;

    ) {
      var a = r.splice(0, 8).splice(0, 7);
      var o = a
        .map(function (c) {
          return c < i ? 'n' : 'w';
        })
        .join('');
      if (this.CODA_BAR_CHAR_SET[o] === void 0) return null;
      n.push(this.CODA_BAR_CHAR_SET[o]);
    }
    var s = n.join('');
    return this.validCodaBarString(s) ? s : null;
  };
  e.prototype.validCodaBarString = function (r) {
    var n = /^[A-D].{1,}[A-D]$/;
    return n.test(r);
  };
  return e;
})(be);
var xu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var yu = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Xt = (function (t) {
  xu(e, t);
  function e() {
    var r = t() || this;
    r.decodeFinderCounters = new Int32Array(4);
    r.dataCharacterCounters = new Int32Array(8);
    r.oddRoundingErrors = new Array(4);
    r.evenRoundingErrors = new Array(4);
    r.oddCounts = new Array(r.dataCharacterCounters.length / 2);
    r.evenCounts = new Array(r.dataCharacterCounters.length / 2);
    return r;
  }
  e.prototype.getDecodeFinderCounters = function () {
    return this.decodeFinderCounters;
  };
  e.prototype.getDataCharacterCounters = function () {
    return this.dataCharacterCounters;
  };
  e.prototype.getOddRoundingErrors = function () {
    return this.oddRoundingErrors;
  };
  e.prototype.getEvenRoundingErrors = function () {
    return this.evenRoundingErrors;
  };
  e.prototype.getOddCounts = function () {
    return this.oddCounts;
  };
  e.prototype.getEvenCounts = function () {
    return this.evenCounts;
  };
  e.prototype.parseFinderValue = function (r, n) {
    for (var i = 0; i < n.length; i++)
      if (be.patternMatchVariance(r, n[i], e.MAX_INDIVIDUAL_VARIANCE) < e.MAX_AVG_VARIANCE) return i;
    throw new I();
  };
  e.count = function (r) {
    return re.sum(new Int32Array(r));
  };
  e.increment = function (r, n) {
    for (var i = 0, a = n[0], o = 1; o < r.length; o++)
      if (n[o] > a) {
        a = n[o];
        i = o;
      }
    r[i]++;
  };
  e.decrement = function (r, n) {
    for (var i = 0, a = n[0], o = 1; o < r.length; o++)
      if (n[o] < a) {
        a = n[o];
        i = o;
      }
    r[i]--;
  };
  e.isFinderPattern = function (r) {
    var n;
    var i;
    var a = r[0] + r[1];
    var o = a + r[2] + r[3];
    var s = a / o;
    if (s >= e.MIN_FINDER_PATTERN_RATIO && s <= e.MAX_FINDER_PATTERN_RATIO) {
      var c = Number.MAX_SAFE_INTEGER;
      var l = Number.MIN_SAFE_INTEGER;
      try {
        for (var f = yu(r), u = f.next(); !u.done; u = f.next()) {
          var h = u.value;
          if (u.value > l) {
            l = u.value;
          }
          if (u.value < c) {
            c = u.value;
          }
        }
      } catch (d) {
        n = { error: d };
      } finally {
        try {
          if (u && !u.done && (i = f.return)) {
            i.call(f);
          }
        } finally {
          if (n) throw n.error;
        }
      }
      return l < 10 * c;
    }
    return false;
  };
  e.MAX_AVG_VARIANCE = 0.2;
  e.MAX_INDIVIDUAL_VARIANCE = 0.45;
  e.MIN_FINDER_PATTERN_RATIO = 0.7916666666666666;
  e.MAX_FINDER_PATTERN_RATIO = 0.8928571428571429;
  return e;
})(be);
var un = (function () {
  function t(e, r) {
    this.value = e;
    this.checksumPortion = r;
  }
  t.prototype.getValue = function () {
    return this.value;
  };
  t.prototype.getChecksumPortion = function () {
    return this.checksumPortion;
  };
  t.prototype.toString = function () {
    return this.value + '(' + this.checksumPortion + ')';
  };
  t.prototype.equals = function (e) {
    if (!(e instanceof t)) return false;
    var r = e;
    return this.value === e.value && this.checksumPortion === e.checksumPortion;
  };
  t.prototype.hashCode = function () {
    return this.value ^ this.checksumPortion;
  };
  return t;
})();
var _s = (function () {
  function t(e, r, n, i, a) {
    this.value = e;
    this.startEnd = r;
    this.value = e;
    this.startEnd = r;
    this.resultPoints = new Array();
    this.resultPoints.push(new U(n, a));
    this.resultPoints.push(new U(i, a));
  }
  t.prototype.getValue = function () {
    return this.value;
  };
  t.prototype.getStartEnd = function () {
    return this.startEnd;
  };
  t.prototype.getResultPoints = function () {
    return this.resultPoints;
  };
  t.prototype.equals = function (e) {
    if (!(e instanceof t)) return false;
    var r = e;
    return this.value === e.value;
  };
  t.prototype.hashCode = function () {
    return this.value;
  };
  return t;
})();
var wu = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var rr = (function () {
  function t() {}
  t.getRSSvalue = function (e, r, n) {
    var i;
    var a;
    var o = 0;
    try {
      for (var s = wu(e), c = s.next(); !c.done; c = s.next()) {
        var l = c.value;
        o += c.value;
      }
    } catch (y) {
      i = { error: y };
    } finally {
      try {
        if (c && !c.done && (a = s.return)) {
          a.call(s);
        }
      } finally {
        if (i) throw i.error;
      }
    }
    for (var f = 0, u = 0, h = e.length, d = 0; d < h - 1; d++) {
      var p = void 0;
      for (p = 1, u |= 1 << d; p < e[d]; p++, u &= ~(1 << d)) {
        var v = t.combins(o - p - 1, h - d - 2);
        if (n && u === 0 && o - p - (h - d - 1) >= h - d - 1) {
          v -= t.combins(o - p - (h - d), h - d - 2);
        }
        if (h - d - 1 > 1) {
          for (var g = 0, _ = o - p - (h - d - 2); _ > r; _--) g += t.combins(o - p - _ - 1, h - d - 3);
          v -= g * (h - 1 - d);
        } else if (o - p > r) {
          v--;
        }
        f += v;
      }
      o -= p;
    }
    return f;
  };
  t.combins = function (e, r) {
    var n;
    var i;
    e - r > r ? ((i = r), (n = e - r)) : ((i = e - r), (n = r));
    for (var a = 1, o = 1, s = e; s > n; s--) {
      a *= s;
      if (o <= i) {
        a /= o;
        o++;
      }
    }
    for (; o <= i; ) {
      a /= o;
      o++;
    }
    return a;
  };
  return t;
})();
var Eu = (function () {
  function t() {}
  t.buildBitArray = function (e) {
    var r = e.length * 2 - 1;
    if (e[e.length - 1].getRightChar() == null) {
      r -= 1;
    }
    for (var n = 12 * r, i = new ke(n), a = 0, o = e[0], s = o.getRightChar().getValue(), c = 11; c >= 0; --c) {
      if ((s & (1 << c)) !== 0) {
        i.set(a);
      }
      a++;
    }
    for (var c = 1; c < e.length; ++c) {
      for (var l = e[c], f = l.getLeftChar().getValue(), u = 11; u >= 0; --u) {
        if ((f & (1 << u)) !== 0) {
          i.set(a);
        }
        a++;
      }
      if (l.getRightChar() !== null)
        for (var h = l.getRightChar().getValue(), u = 11; u >= 0; --u) {
          if ((h & (1 << u)) !== 0) {
            i.set(a);
          }
          a++;
        }
    }
    return i;
  };
  return t;
})();
var Vt = (function () {
  function t(e, r) {
    r ? (this.decodedInformation = null) : ((this.finished = e), (this.decodedInformation = r));
  }
  t.prototype.getDecodedInformation = function () {
    return this.decodedInformation;
  };
  t.prototype.isFinished = function () {
    return this.finished;
  };
  return t;
})();
var Ki = (function () {
  function t(e) {
    this.newPosition = e;
  }
  t.prototype.getNewPosition = function () {
    return this.newPosition;
  };
  return t;
})();
var Cu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var ht = (function (t) {
  Cu(e, t);
  function e(r, n) {
    var i = t(r) || this;
    i.value = n;
    return i;
  }
  e.prototype.getValue = function () {
    return this.value;
  };
  e.prototype.isFNC1 = function () {
    return this.value === e.FNC1;
  };
  e.FNC1 = '$';
  return e;
})(Ki);
var Su = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Gt = (function (t) {
  Su(e, t);
  function e(r, n, i) {
    var a = t(r) || this;
    i ? ((a.remaining = true), (a.remainingValue = a.remainingValue)) : ((a.remaining = false), (a.remainingValue = 0));
    a.newString = n;
    return a;
  }
  e.prototype.getNewString = function () {
    return this.newString;
  };
  e.prototype.isRemaining = function () {
    return this.remaining;
  };
  e.prototype.getRemainingValue = function () {
    return this.remainingValue;
  };
  return e;
})(Ki);
var Au = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var tr = (function (t) {
  Au(e, t);
  function e(r, n, i) {
    var a = t(r) || this;
    if (n < 0 || n > 10 || i < 0 || i > 10) throw new M();
    a.firstDigit = n;
    a.secondDigit = i;
    return a;
  }
  e.prototype.getFirstDigit = function () {
    return this.firstDigit;
  };
  e.prototype.getSecondDigit = function () {
    return this.secondDigit;
  };
  e.prototype.getValue = function () {
    return this.firstDigit * 10 + this.secondDigit;
  };
  e.prototype.isFirstDigitFNC1 = function () {
    return this.firstDigit === e.FNC1;
  };
  e.prototype.isSecondDigitFNC1 = function () {
    return this.secondDigit === e.FNC1;
  };
  e.prototype.isAnyFNC1 = function () {
    return this.firstDigit === e.FNC1 || this.secondDigit === e.FNC1;
  };
  e.FNC1 = 10;
  return e;
})(Ki);
var Hr = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Iu = (function () {
  function t() {}
  t.parseFieldsInGeneralPurpose = function (e) {
    var r;
    var n;
    var i;
    var a;
    var o;
    var s;
    var c;
    var l;
    if (!e) return null;
    if (e.length < 2) throw new I();
    var f = e.substring(0, 2);
    try {
      for (var u = Hr(t.TWO_DIGIT_DATA_LENGTH), h = u.next(); !h.done; h = u.next()) {
        var d = h.value;
        if (h.value[0] === f)
          return h.value[1] === t.VARIABLE_LENGTH
            ? t.processVariableAI(2, h.value[2], e)
            : t.processFixedAI(2, h.value[1], e);
      }
    } catch (S) {
      r = { error: S };
    } finally {
      try {
        if (h && !h.done && (n = u.return)) {
          n.call(u);
        }
      } finally {
        if (r) throw r.error;
      }
    }
    if (e.length < 3) throw new I();
    var p = e.substring(0, 3);
    try {
      for (var v = Hr(t.THREE_DIGIT_DATA_LENGTH), g = v.next(); !g.done; g = v.next()) {
        var d = g.value;
        if (g.value[0] === p)
          return g.value[1] === t.VARIABLE_LENGTH
            ? t.processVariableAI(3, g.value[2], e)
            : t.processFixedAI(3, g.value[1], e);
      }
    } catch (S) {
      i = { error: S };
    } finally {
      try {
        if (g && !g.done && (a = v.return)) {
          a.call(v);
        }
      } finally {
        if (i) throw i.error;
      }
    }
    try {
      for (var _ = Hr(t.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH), y = _.next(); !y.done; y = _.next()) {
        var d = y.value;
        if (y.value[0] === p)
          return y.value[1] === t.VARIABLE_LENGTH
            ? t.processVariableAI(4, y.value[2], e)
            : t.processFixedAI(4, y.value[1], e);
      }
    } catch (S) {
      o = { error: S };
    } finally {
      try {
        if (y && !y.done && (s = _.return)) {
          s.call(_);
        }
      } finally {
        if (o) throw o.error;
      }
    }
    if (e.length < 4) throw new I();
    var x = e.substring(0, 4);
    try {
      for (var w = Hr(t.FOUR_DIGIT_DATA_LENGTH), C = w.next(); !C.done; C = w.next()) {
        var d = C.value;
        if (C.value[0] === x)
          return C.value[1] === t.VARIABLE_LENGTH
            ? t.processVariableAI(4, C.value[2], e)
            : t.processFixedAI(4, C.value[1], e);
      }
    } catch (S) {
      c = { error: S };
    } finally {
      try {
        if (C && !C.done && (l = w.return)) {
          l.call(w);
        }
      } finally {
        if (c) throw c.error;
      }
    }
    throw new I();
  };
  t.processFixedAI = function (e, r, n) {
    if (n.length < e) throw new I();
    var i = n.substring(0, e);
    if (n.length < e + r) throw new I();
    var a = n.substring(e, e + r);
    var o = n.substring(e + r);
    var s = '(' + i + ')' + a;
    var c = t.parseFieldsInGeneralPurpose(o);
    return c == null ? s : s + c;
  };
  t.processVariableAI = function (e, r, n) {
    var i = n.substring(0, e);
    var a;
    n.length < e + r ? (a = n.length) : (a = e + r);
    var o = n.substring(e, a);
    var s = n.substring(a);
    var c = '(' + i + ')' + o;
    var l = t.parseFieldsInGeneralPurpose(s);
    return l == null ? c : c + l;
  };
  t.VARIABLE_LENGTH = [];
  t.TWO_DIGIT_DATA_LENGTH = [
    ['00', 18],
    ['01', 14],
    ['02', 14],
    ['10', t.VARIABLE_LENGTH, 20],
    ['11', 6],
    ['12', 6],
    ['13', 6],
    ['15', 6],
    ['17', 6],
    ['20', 2],
    ['21', t.VARIABLE_LENGTH, 20],
    ['22', t.VARIABLE_LENGTH, 29],
    ['30', t.VARIABLE_LENGTH, 8],
    ['37', t.VARIABLE_LENGTH, 8],
    ['90', t.VARIABLE_LENGTH, 30],
    ['91', t.VARIABLE_LENGTH, 30],
    ['92', t.VARIABLE_LENGTH, 30],
    ['93', t.VARIABLE_LENGTH, 30],
    ['94', t.VARIABLE_LENGTH, 30],
    ['95', t.VARIABLE_LENGTH, 30],
    ['96', t.VARIABLE_LENGTH, 30],
    ['97', t.VARIABLE_LENGTH, 3],
    ['98', t.VARIABLE_LENGTH, 30],
    ['99', t.VARIABLE_LENGTH, 30],
  ];
  t.THREE_DIGIT_DATA_LENGTH = [
    ['240', t.VARIABLE_LENGTH, 30],
    ['241', t.VARIABLE_LENGTH, 30],
    ['242', t.VARIABLE_LENGTH, 6],
    ['250', t.VARIABLE_LENGTH, 30],
    ['251', t.VARIABLE_LENGTH, 30],
    ['253', t.VARIABLE_LENGTH, 17],
    ['254', t.VARIABLE_LENGTH, 20],
    ['400', t.VARIABLE_LENGTH, 30],
    ['401', t.VARIABLE_LENGTH, 30],
    ['402', 17],
    ['403', t.VARIABLE_LENGTH, 30],
    ['410', 13],
    ['411', 13],
    ['412', 13],
    ['413', 13],
    ['414', 13],
    ['420', t.VARIABLE_LENGTH, 20],
    ['421', t.VARIABLE_LENGTH, 15],
    ['422', 3],
    ['423', t.VARIABLE_LENGTH, 15],
    ['424', 3],
    ['425', 3],
    ['426', 3],
  ];
  t.THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH = [
    ['310', 6],
    ['311', 6],
    ['312', 6],
    ['313', 6],
    ['314', 6],
    ['315', 6],
    ['316', 6],
    ['320', 6],
    ['321', 6],
    ['322', 6],
    ['323', 6],
    ['324', 6],
    ['325', 6],
    ['326', 6],
    ['327', 6],
    ['328', 6],
    ['329', 6],
    ['330', 6],
    ['331', 6],
    ['332', 6],
    ['333', 6],
    ['334', 6],
    ['335', 6],
    ['336', 6],
    ['340', 6],
    ['341', 6],
    ['342', 6],
    ['343', 6],
    ['344', 6],
    ['345', 6],
    ['346', 6],
    ['347', 6],
    ['348', 6],
    ['349', 6],
    ['350', 6],
    ['351', 6],
    ['352', 6],
    ['353', 6],
    ['354', 6],
    ['355', 6],
    ['356', 6],
    ['357', 6],
    ['360', 6],
    ['361', 6],
    ['362', 6],
    ['363', 6],
    ['364', 6],
    ['365', 6],
    ['366', 6],
    ['367', 6],
    ['368', 6],
    ['369', 6],
    ['390', t.VARIABLE_LENGTH, 15],
    ['391', t.VARIABLE_LENGTH, 18],
    ['392', t.VARIABLE_LENGTH, 15],
    ['393', t.VARIABLE_LENGTH, 18],
    ['703', t.VARIABLE_LENGTH, 30],
  ];
  t.FOUR_DIGIT_DATA_LENGTH = [
    ['7001', 13],
    ['7002', t.VARIABLE_LENGTH, 30],
    ['7003', 10],
    ['8001', 14],
    ['8002', t.VARIABLE_LENGTH, 20],
    ['8003', t.VARIABLE_LENGTH, 30],
    ['8004', t.VARIABLE_LENGTH, 30],
    ['8005', 6],
    ['8006', 18],
    ['8007', t.VARIABLE_LENGTH, 30],
    ['8008', t.VARIABLE_LENGTH, 12],
    ['8018', 18],
    ['8020', t.VARIABLE_LENGTH, 25],
    ['8100', 6],
    ['8101', 10],
    ['8102', 2],
    ['8110', t.VARIABLE_LENGTH, 70],
    ['8200', t.VARIABLE_LENGTH, 70],
  ];
  return t;
})();
var en = (function () {
  function t(e) {
    this.buffer = new K();
    this.information = e;
  }
  t.prototype.decodeAllCodes = function (e, r) {
    var n = r;
    var i = null;
    do {
      var a = this.decodeGeneralPurposeField(n, i);
      var o = Iu.parseFieldsInGeneralPurpose(a.getNewString());
      if (o != null) {
        e.append(o);
      }
      a.isRemaining() ? (i = '' + a.getRemainingValue()) : (i = null);
      if (n === a.getNewPosition()) break;
      n = a.getNewPosition();
    } while (true);
    return e.toString();
  };
  t.prototype.isStillNumeric = function (e) {
    if (e + 7 > this.information.getSize()) return e + 4 <= this.information.getSize();
    for (var r = e; r < e + 3; ++r) if (this.information.get(r)) return true;
    return this.information.get(e + 3);
  };
  t.prototype.decodeNumeric = function (e) {
    if (e + 7 > this.information.getSize()) {
      var r = this.extractNumericValueFromBitArray(e, 4);
      return r === 0
        ? new tr(this.information.getSize(), tr.FNC1, tr.FNC1)
        : new tr(this.information.getSize(), r - 1, tr.FNC1);
    }
    var n = this.extractNumericValueFromBitArray(e, 7);
    var i = (n - 8) / 11;
    var a = (n - 8) % 11;
    return new tr(e + 7, i, a);
  };
  t.prototype.extractNumericValueFromBitArray = function (e, r) {
    return t.extractNumericValueFromBitArray(this.information, e, r);
  };
  t.extractNumericValueFromBitArray = function (e, r, n) {
    for (var i = 0, a = 0; a < n; ++a)
      if (e.get(r + a)) {
        i |= 1 << (n - a - 1);
      }
    return i;
  };
  t.prototype.decodeGeneralPurposeField = function (e, r) {
    this.buffer.setLengthToZero();
    if (r != null) {
      this.buffer.append(r);
    }
    this.current.setPosition(e);
    var n = this.parseBlocks();
    return n != null && n.isRemaining()
      ? new Gt(this.current.getPosition(), this.buffer.toString(), n.getRemainingValue())
      : new Gt(this.current.getPosition(), this.buffer.toString());
  };
  t.prototype.parseBlocks = function () {
    var e;
    var r;
    do {
      var n = this.current.getPosition();
      this.current.isAlpha()
        ? ((r = this.parseAlphaBlock()), (e = r.isFinished()))
        : this.current.isIsoIec646()
          ? ((r = this.parseIsoIec646Block()), (e = r.isFinished()))
          : ((r = this.parseNumericBlock()), (e = r.isFinished()));
      var i = n !== this.current.getPosition();
      if (!i && !e) break;
    } while (!e);
    return r.getDecodedInformation();
  };
  t.prototype.parseNumericBlock = function () {
    for (; this.isStillNumeric(this.current.getPosition()); ) {
      var e = this.decodeNumeric(this.current.getPosition());
      this.current.setPosition(e.getNewPosition());
      if (e.isFirstDigitFNC1()) {
        var r = void 0;
        e.isSecondDigitFNC1()
          ? (r = new Gt(this.current.getPosition(), this.buffer.toString()))
          : (r = new Gt(this.current.getPosition(), this.buffer.toString(), e.getSecondDigit()));
        return new Vt(true, r);
      }
      this.buffer.append(e.getFirstDigit());
      if (e.isSecondDigitFNC1()) {
        var r = new Gt(this.current.getPosition(), this.buffer.toString());
        return new Vt(true, r);
      }
      this.buffer.append(e.getSecondDigit());
    }
    if (this.isNumericToAlphaNumericLatch(this.current.getPosition())) {
      this.current.setAlpha();
      this.current.incrementPosition(4);
    }
    return new Vt(false);
  };
  t.prototype.parseIsoIec646Block = function () {
    for (; this.isStillIsoIec646(this.current.getPosition()); ) {
      var e = this.decodeIsoIec646(this.current.getPosition());
      this.current.setPosition(e.getNewPosition());
      if (e.isFNC1()) {
        var r = new Gt(this.current.getPosition(), this.buffer.toString());
        return new Vt(true, r);
      }
      this.buffer.append(e.getValue());
    }
    this.isAlphaOr646ToNumericLatch(this.current.getPosition())
      ? (this.current.incrementPosition(3), this.current.setNumeric())
      : this.isAlphaTo646ToAlphaLatch(this.current.getPosition()) &&
        (this.current.getPosition() + 5 < this.information.getSize()
          ? this.current.incrementPosition(5)
          : this.current.setPosition(this.information.getSize()),
        this.current.setAlpha());
    return new Vt(false);
  };
  t.prototype.parseAlphaBlock = function () {
    for (; this.isStillAlpha(this.current.getPosition()); ) {
      var e = this.decodeAlphanumeric(this.current.getPosition());
      this.current.setPosition(e.getNewPosition());
      if (e.isFNC1()) {
        var r = new Gt(this.current.getPosition(), this.buffer.toString());
        return new Vt(true, r);
      }
      this.buffer.append(e.getValue());
    }
    this.isAlphaOr646ToNumericLatch(this.current.getPosition())
      ? (this.current.incrementPosition(3), this.current.setNumeric())
      : this.isAlphaTo646ToAlphaLatch(this.current.getPosition()) &&
        (this.current.getPosition() + 5 < this.information.getSize()
          ? this.current.incrementPosition(5)
          : this.current.setPosition(this.information.getSize()),
        this.current.setIsoIec646());
    return new Vt(false);
  };
  t.prototype.isStillIsoIec646 = function (e) {
    if (e + 5 > this.information.getSize()) return false;
    var r = this.extractNumericValueFromBitArray(e, 5);
    if (r >= 5 && r < 16) return true;
    if (e + 7 > this.information.getSize()) return false;
    var n = this.extractNumericValueFromBitArray(e, 7);
    if (n >= 64 && n < 116) return true;
    if (e + 8 > this.information.getSize()) return false;
    var i = this.extractNumericValueFromBitArray(e, 8);
    return i >= 232 && i < 253;
  };
  t.prototype.decodeIsoIec646 = function (e) {
    var r = this.extractNumericValueFromBitArray(e, 5);
    if (r === 15) return new ht(e + 5, ht.FNC1);
    if (r >= 5 && r < 15) return new ht(e + 5, '0' + (r - 5));
    var n = this.extractNumericValueFromBitArray(e, 7);
    if (n >= 64 && n < 90) return new ht(e + 7, '' + (n + 1));
    if (n >= 90 && n < 116) return new ht(e + 7, '' + (n + 7));
    var i = this.extractNumericValueFromBitArray(e, 8);
    var a;
    switch (i) {
      case 232:
        a = '!';
        break;
      case 233:
        a = '"';
        break;
      case 234:
        a = '%';
        break;
      case 235:
        a = '&';
        break;
      case 236:
        a = "'";
        break;
      case 237:
        a = '(';
        break;
      case 238:
        a = ')';
        break;
      case 239:
        a = '*';
        break;
      case 240:
        a = '+';
        break;
      case 241:
        a = ',';
        break;
      case 242:
        a = '-';
        break;
      case 243:
        a = '.';
        break;
      case 244:
        a = '/';
        break;
      case 245:
        a = ':';
        break;
      case 246:
        a = ';';
        break;
      case 247:
        a = '<';
        break;
      case 248:
        a = '=';
        break;
      case 249:
        a = '>';
        break;
      case 250:
        a = '?';
        break;
      case 251:
        a = '_';
        break;
      case 252:
        a = ' ';
        break;
      default:
        throw new M();
    }
    return new ht(e + 8, a);
  };
  t.prototype.isStillAlpha = function (e) {
    if (e + 5 > this.information.getSize()) return false;
    var r = this.extractNumericValueFromBitArray(e, 5);
    if (r >= 5 && r < 16) return true;
    if (e + 6 > this.information.getSize()) return false;
    var n = this.extractNumericValueFromBitArray(e, 6);
    return n >= 16 && n < 63;
  };
  t.prototype.decodeAlphanumeric = function (e) {
    var r = this.extractNumericValueFromBitArray(e, 5);
    if (r === 15) return new ht(e + 5, ht.FNC1);
    if (r >= 5 && r < 15) return new ht(e + 5, '0' + (r - 5));
    var n = this.extractNumericValueFromBitArray(e, 6);
    if (n >= 32 && n < 58) return new ht(e + 6, '' + (n + 33));
    var i;
    switch (n) {
      case 58:
        i = '*';
        break;
      case 59:
        i = ',';
        break;
      case 60:
        i = '-';
        break;
      case 61:
        i = '.';
        break;
      case 62:
        i = '/';
        break;
      default:
        throw new Br('Decoding invalid alphanumeric value: ' + n);
    }
    return new ht(e + 6, i);
  };
  t.prototype.isAlphaTo646ToAlphaLatch = function (e) {
    if (e + 1 > this.information.getSize()) return false;
    for (var r = 0; r < 5 && r + e < this.information.getSize(); ++r)
      if (r === 2) {
        if (!this.information.get(e + 2)) return false;
      } else if (this.information.get(e + r)) return false;
    return true;
  };
  t.prototype.isAlphaOr646ToNumericLatch = function (e) {
    if (e + 3 > this.information.getSize()) return false;
    for (var r = e; r < e + 3; ++r) if (this.information.get(r)) return false;
    return true;
  };
  t.prototype.isNumericToAlphaNumericLatch = function (e) {
    if (e + 1 > this.information.getSize()) return false;
    for (var r = 0; r < 4 && r + e < this.information.getSize(); ++r) if (this.information.get(e + r)) return false;
    return true;
  };
  return t;
})();
var ms = (function () {
  function t(e) {
    this.information = e;
    this.generalDecoder = new en(e);
  }
  t.prototype.getInformation = function () {
    return this.information;
  };
  t.prototype.getGeneralDecoder = function () {
    return this.generalDecoder;
  };
  return t;
})();
var Tu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var vt = (function (t) {
  Tu(e, t);
  function e(r) {
    return t(r) || this;
  }
  e.prototype.encodeCompressedGtin = function (r, n) {
    r.append('(01)');
    var i = r.length();
    r.append('9');
    this.encodeCompressedGtinWithoutAI(r, n, i);
  };
  e.prototype.encodeCompressedGtinWithoutAI = function (r, n, i) {
    for (var a = 0; a < 4; ++a) {
      var o = this.getGeneralDecoder().extractNumericValueFromBitArray(n + 10 * a, 10);
      if (o / 100 === 0) {
        r.append('0');
      }
      if (o / 10 === 0) {
        r.append('0');
      }
      r.append(o);
    }
    e.appendCheckDigit(r, i);
  };
  e.appendCheckDigit = function (r, n) {
    for (var i = 0, a = 0; a < 13; a++) {
      var o = r.charAt(a + n).charCodeAt(0) - 48;
      i += (a & 1) === 0 ? 3 * o : o;
    }
    i = 10 - (i % 10);
    if (i === 10) {
      i = 0;
    }
    r.append(i);
  };
  e.GTIN_SIZE = 40;
  return e;
})(ms);
var bu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Nu = (function (t) {
  bu(e, t);
  function e(r) {
    return t(r) || this;
  }
  e.prototype.parseInformation = function () {
    var r = new K();
    r.append('(01)');
    var n = r.length();
    var i = this.getGeneralDecoder().extractNumericValueFromBitArray(e.HEADER_SIZE, 4);
    r.append(i);
    this.encodeCompressedGtinWithoutAI(r, e.HEADER_SIZE + 4, n);
    return this.getGeneralDecoder().decodeAllCodes(r, e.HEADER_SIZE + 44);
  };
  e.HEADER_SIZE = 4;
  return e;
})(vt);
var Ou = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Du = (function (t) {
  Ou(e, t);
  function e(r) {
    return t(r) || this;
  }
  e.prototype.parseInformation = function () {
    var r = new K();
    return this.getGeneralDecoder().decodeAllCodes(r, e.HEADER_SIZE);
  };
  e.HEADER_SIZE = 5;
  return e;
})(ms);
var Ru = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var tn = (function (t) {
  Ru(e, t);
  function e(r) {
    return t(r) || this;
  }
  e.prototype.encodeCompressedWeight = function (r, n, i) {
    var a = this.getGeneralDecoder().extractNumericValueFromBitArray(n, i);
    this.addWeightCode(r, a);
    for (var o = this.checkWeight(a), s = 100000, c = 0; c < 5; ++c) {
      if (o / s === 0) {
        r.append('0');
      }
      s /= 10;
    }
    r.append(o);
  };
  return e;
})(vt);
var Pu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var xs = (function (t) {
  Pu(e, t);
  function e(r) {
    return t(r) || this;
  }
  e.prototype.parseInformation = function () {
    if (this.getInformation().getSize() !== e.HEADER_SIZE + tn.GTIN_SIZE + e.WEIGHT_SIZE) throw new I();
    var r = new K();
    this.encodeCompressedGtin(r, e.HEADER_SIZE);
    this.encodeCompressedWeight(r, e.HEADER_SIZE + tn.GTIN_SIZE, e.WEIGHT_SIZE);
    return r.toString();
  };
  e.HEADER_SIZE = 5;
  e.WEIGHT_SIZE = 15;
  return e;
})(tn);
var Mu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var ku = (function (t) {
  Mu(e, t);
  function e(r) {
    return t(r) || this;
  }
  e.prototype.addWeightCode = function (r, n) {
    r.append('(3103)');
  };
  e.prototype.checkWeight = function (r) {
    return r;
  };
  return e;
})(xs);
var Bu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Lu = (function (t) {
  Bu(e, t);
  function e(r) {
    return t(r) || this;
  }
  e.prototype.addWeightCode = function (r, n) {
    n < 10000 ? r.append('(3202)') : r.append('(3203)');
  };
  e.prototype.checkWeight = function (r) {
    return r < 10000 ? r : r - 10000;
  };
  return e;
})(xs);
var Fu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Uu = (function (t) {
  Fu(e, t);
  function e(r) {
    return t(r) || this;
  }
  e.prototype.parseInformation = function () {
    if (this.getInformation().getSize() < e.HEADER_SIZE + vt.GTIN_SIZE) throw new I();
    var r = new K();
    this.encodeCompressedGtin(r, e.HEADER_SIZE);
    var n = this.getGeneralDecoder().extractNumericValueFromBitArray(e.HEADER_SIZE + vt.GTIN_SIZE, e.LAST_DIGIT_SIZE);
    r.append('(392');
    r.append(n);
    r.append(')');
    var i = this.getGeneralDecoder().decodeGeneralPurposeField(e.HEADER_SIZE + vt.GTIN_SIZE + e.LAST_DIGIT_SIZE, null);
    r.append(i.getNewString());
    return r.toString();
  };
  e.HEADER_SIZE = 8;
  e.LAST_DIGIT_SIZE = 2;
  return e;
})(vt);
var Vu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Gu = (function (t) {
  Vu(e, t);
  function e(r) {
    return t(r) || this;
  }
  e.prototype.parseInformation = function () {
    if (this.getInformation().getSize() < e.HEADER_SIZE + vt.GTIN_SIZE) throw new I();
    var r = new K();
    this.encodeCompressedGtin(r, e.HEADER_SIZE);
    var n = this.getGeneralDecoder().extractNumericValueFromBitArray(e.HEADER_SIZE + vt.GTIN_SIZE, e.LAST_DIGIT_SIZE);
    r.append('(393');
    r.append(n);
    r.append(')');
    var i = this.getGeneralDecoder().extractNumericValueFromBitArray(
      e.HEADER_SIZE + vt.GTIN_SIZE + e.LAST_DIGIT_SIZE,
      e.FIRST_THREE_DIGITS_SIZE,
    );
    if (i / 100 === 0) {
      r.append('0');
    }
    if (i / 10 === 0) {
      r.append('0');
    }
    r.append(i);
    var a = this.getGeneralDecoder().decodeGeneralPurposeField(
      e.HEADER_SIZE + vt.GTIN_SIZE + e.LAST_DIGIT_SIZE + e.FIRST_THREE_DIGITS_SIZE,
      null,
    );
    r.append(a.getNewString());
    return r.toString();
  };
  e.HEADER_SIZE = 8;
  e.LAST_DIGIT_SIZE = 2;
  e.FIRST_THREE_DIGITS_SIZE = 10;
  return e;
})(vt);
var Hu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Tt = (function (t) {
  Hu(e, t);
  function e(r, n, i) {
    var a = t(r) || this;
    a.dateCode = i;
    a.firstAIdigits = n;
    return a;
  }
  e.prototype.parseInformation = function () {
    if (this.getInformation().getSize() !== e.HEADER_SIZE + e.GTIN_SIZE + e.WEIGHT_SIZE + e.DATE_SIZE) throw new I();
    var r = new K();
    this.encodeCompressedGtin(r, e.HEADER_SIZE);
    this.encodeCompressedWeight(r, e.HEADER_SIZE + e.GTIN_SIZE, e.WEIGHT_SIZE);
    this.encodeCompressedDate(r, e.HEADER_SIZE + e.GTIN_SIZE + e.WEIGHT_SIZE);
    return r.toString();
  };
  e.prototype.encodeCompressedDate = function (r, n) {
    var i = this.getGeneralDecoder().extractNumericValueFromBitArray(n, e.DATE_SIZE);
    if (i !== 38400) {
      r.append('(');
      r.append(this.dateCode);
      r.append(')');
      var a = i % 32;
      i /= 32;
      var o = (i % 12) + 1;
      i /= 12;
      var s = i;
      if (i / 10 === 0) {
        r.append('0');
      }
      r.append(i);
      if (o / 10 === 0) {
        r.append('0');
      }
      r.append(o);
      if (a / 10 === 0) {
        r.append('0');
      }
      r.append(a);
    }
  };
  e.prototype.addWeightCode = function (r, n) {
    r.append('(');
    r.append(this.firstAIdigits);
    r.append(n / 100000);
    r.append(')');
  };
  e.prototype.checkWeight = function (r) {
    return r % 100000;
  };
  e.HEADER_SIZE = 8;
  e.WEIGHT_SIZE = 20;
  e.DATE_SIZE = 16;
  return e;
})(tn);
function Xu(t) {
  try {
    if (t.get(1)) return new Nu(t);
    if (!t.get(2)) return new Du(t);
    var e = en.extractNumericValueFromBitArray(t, 1, 4);
    switch (e) {
      case 4:
        return new ku(t);
      case 5:
        return new Lu(t);
    }
    var r = en.extractNumericValueFromBitArray(t, 1, 5);
    switch (r) {
      case 12:
        return new Uu(t);
      case 13:
        return new Gu(t);
    }
    var n = en.extractNumericValueFromBitArray(t, 1, 7);
    switch (n) {
      case 56:
        return new Tt(t, '310', '11');
      case 57:
        return new Tt(t, '320', '11');
      case 58:
        return new Tt(t, '310', '13');
      case 59:
        return new Tt(t, '320', '13');
      case 60:
        return new Tt(t, '310', '15');
      case 61:
        return new Tt(t, '320', '15');
      case 62:
        return new Tt(t, '310', '17');
      case 63:
        return new Tt(t, '320', '17');
    }
  } catch (i) {
    throw (console.log(i), new Br('unknown decoder: ' + t));
  }
}
var Ba = (function () {
  function t(e, r, n, i) {
    this.leftchar = e;
    this.rightchar = r;
    this.finderpattern = n;
    this.maybeLast = i;
  }
  t.prototype.mayBeLast = function () {
    return this.maybeLast;
  };
  t.prototype.getLeftChar = function () {
    return this.leftchar;
  };
  t.prototype.getRightChar = function () {
    return this.rightchar;
  };
  t.prototype.getFinderPattern = function () {
    return this.finderpattern;
  };
  t.prototype.mustBeLast = function () {
    return this.rightchar == null;
  };
  t.prototype.toString = function () {
    return (
      '[ ' +
      this.leftchar +
      ', ' +
      this.rightchar +
      ' : ' +
      (this.finderpattern == null ? 'null' : this.finderpattern.getValue()) +
      ' ]'
    );
  };
  t.equals = function (e, r) {
    return e instanceof t
      ? t.equalsOrNull(e.leftchar, r.leftchar) &&
          t.equalsOrNull(e.rightchar, r.rightchar) &&
          t.equalsOrNull(e.finderpattern, r.finderpattern)
      : false;
  };
  t.equalsOrNull = function (e, r) {
    return e === null ? r === null : t.equals(e, r);
  };
  t.prototype.hashCode = function () {
    var e = this.leftchar.getValue() ^ this.rightchar.getValue() ^ this.finderpattern.getValue();
    return e;
  };
  return t;
})();
var zu = (function () {
  function t(e, r, n) {
    this.pairs = e;
    this.rowNumber = r;
    this.wasReversed = n;
  }
  t.prototype.getPairs = function () {
    return this.pairs;
  };
  t.prototype.getRowNumber = function () {
    return this.rowNumber;
  };
  t.prototype.isReversed = function () {
    return this.wasReversed;
  };
  t.prototype.isEquivalent = function (e) {
    return this.checkEqualitity(this, e);
  };
  t.prototype.toString = function () {
    return '{ ' + this.pairs + ' }';
  };
  t.prototype.equals = function (e, r) {
    return e instanceof t ? this.checkEqualitity(e, r) && e.wasReversed === r.wasReversed : false;
  };
  t.prototype.checkEqualitity = function (e, r) {
    if (!(!e || !r)) {
      var n;
      e.forEach(function (i, a) {
        r.forEach(function (o) {
          if (
            i.getLeftChar().getValue() === o.getLeftChar().getValue() &&
            i.getRightChar().getValue() === o.getRightChar().getValue() &&
            i.getFinderPatter().getValue() === o.getFinderPatter().getValue()
          ) {
            n = true;
          }
        });
      });
      return n;
    }
  };
  return t;
})();
var ju = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var bt = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Wu = (function (t) {
  ju(e, t);
  function e() {
    var r = (t !== null && t()) || this;
    r.pairs = new Array(e.MAX_PAIRS);
    r.rows = new Array();
    r.startEnd = [2];
    return r;
  }
  e.prototype.decodeRow = function (r, n, i) {
    this.pairs.length = 0;
    this.startFromEven = false;
    try {
      return e.constructResult(this.decodeRow2pairs(r, n));
    } catch {}
    this.pairs.length = 0;
    this.startFromEven = true;
    return e.constructResult(this.decodeRow2pairs(r, n));
  };
  e.prototype.reset = function () {
    this.pairs.length = 0;
    this.rows.length = 0;
  };
  e.prototype.decodeRow2pairs = function (r, n) {
    for (var i = false; !i; )
      try {
        this.pairs.push(this.retrieveNextPair(n, this.pairs, r));
      } catch (s) {
        if (s instanceof I) {
          if (!this.pairs.length) throw new I();
          i = true;
        }
      }
    if (this.checkChecksum()) return this.pairs;
    var a;
    this.rows.length ? (a = true) : (a = false);
    this.storeRow(r, false);
    if (a) {
      var o = this.checkRowsBoolean(false);
      if (o != null || ((o = this.checkRowsBoolean(true)), o != null)) return o;
    }
    throw new I();
  };
  e.prototype.checkRowsBoolean = function (r) {
    if (this.rows.length > 25) {
      this.rows.length = 0;
      return null;
    }
    this.pairs.length = 0;
    if (r) {
      this.rows = this.rows.reverse();
    }
    var n = null;
    try {
      n = this.checkRows(new Array(), 0);
    } catch (i) {
      console.log(i);
    }
    if (r) {
      this.rows = this.rows.reverse();
    }
    return n;
  };
  e.prototype.checkRows = function (r, n) {
    for (var i, a, o = n; o < this.rows.length; o++) {
      var s = this.rows[o];
      this.pairs.length = 0;
      try {
        for (var c = ((i = void 0), bt(r)), l = c.next(); !l.done; l = c.next()) {
          var f = l.value;
          this.pairs.push(l.value.getPairs());
        }
      } catch (h) {
        i = { error: h };
      } finally {
        try {
          if (l && !l.done && (a = c.return)) {
            a.call(c);
          }
        } finally {
          if (i) throw i.error;
        }
      }
      this.pairs.push(this.rows[o].getPairs());
      if (!!e.isValidSequence(this.pairs)) {
        if (this.checkChecksum()) return this.pairs;
        var u = new Array(r);
        u.push(this.rows[o]);
        try {
          return this.checkRows(u, o + 1);
        } catch (h) {
          console.log(h);
        }
      }
    }
    throw new I();
  };
  e.isValidSequence = function (r) {
    var n;
    var i;
    try {
      for (var a = bt(e.FINDER_PATTERN_SEQUENCES), o = a.next(); !o.done; o = a.next()) {
        var s = o.value;
        if (!(r.length > o.value.length)) {
          for (var c = true, l = 0; l < r.length; l++)
            if (r[l].getFinderPattern().getValue() !== o.value[l]) {
              c = false;
              break;
            }
          if (c) return true;
        }
      }
    } catch (f) {
      n = { error: f };
    } finally {
      try {
        if (o && !o.done && (i = a.return)) {
          i.call(a);
        }
      } finally {
        if (n) throw n.error;
      }
    }
    return false;
  };
  e.prototype.storeRow = function (r, n) {
    for (var i = 0, a = false, o = false; i < this.rows.length; ) {
      var s = this.rows[i];
      if (this.rows[i].getRowNumber() > r) {
        o = this.rows[i].isEquivalent(this.pairs);
        break;
      }
      a = this.rows[i].isEquivalent(this.pairs);
      i++;
    }
    if (!(o || a || e.isPartialRow(this.pairs, this.rows))) {
      this.rows.push(i, new zu(this.pairs, r, n));
      this.removePartialRows(this.pairs, this.rows);
    }
  };
  e.prototype.removePartialRows = function (r, n) {
    var i;
    var a;
    var o;
    var s;
    var c;
    var l;
    try {
      for (var f = bt(n), u = f.next(); !u.done; u = f.next()) {
        var h = u.value;
        if (u.value.getPairs().length !== r.length) {
          var d = true;
          try {
            for (var p = ((o = void 0), bt(u.value.getPairs())), v = p.next(); !v.done; v = p.next()) {
              var g = v.value;
              var _ = false;
              try {
                for (var y = ((c = void 0), bt(r)), x = y.next(); !x.done; x = y.next()) {
                  var w = x.value;
                  if (Ba.equals(v.value, x.value)) {
                    _ = true;
                    break;
                  }
                }
              } catch (C) {
                c = { error: C };
              } finally {
                try {
                  if (x && !x.done && (l = y.return)) {
                    l.call(y);
                  }
                } finally {
                  if (c) throw c.error;
                }
              }
              if (!_) {
                d = false;
              }
            }
          } catch (C) {
            o = { error: C };
          } finally {
            try {
              if (v && !v.done && (s = p.return)) {
                s.call(p);
              }
            } finally {
              if (o) throw o.error;
            }
          }
        }
      }
    } catch (C) {
      i = { error: C };
    } finally {
      try {
        if (u && !u.done && (a = f.return)) {
          a.call(f);
        }
      } finally {
        if (i) throw i.error;
      }
    }
  };
  e.isPartialRow = function (r, n) {
    var i;
    var a;
    var o;
    var s;
    var c;
    var l;
    try {
      for (var f = bt(n), u = f.next(); !u.done; u = f.next()) {
        var h = u.value;
        var d = true;
        try {
          for (var p = ((o = void 0), bt(r)), v = p.next(); !v.done; v = p.next()) {
            var g = v.value;
            var _ = false;
            try {
              for (var y = ((c = void 0), bt(u.value.getPairs())), x = y.next(); !x.done; x = y.next()) {
                var w = x.value;
                if (v.value.equals(x.value)) {
                  _ = true;
                  break;
                }
              }
            } catch (C) {
              c = { error: C };
            } finally {
              try {
                if (x && !x.done && (l = y.return)) {
                  l.call(y);
                }
              } finally {
                if (c) throw c.error;
              }
            }
            if (!_) {
              d = false;
              break;
            }
          }
        } catch (C) {
          o = { error: C };
        } finally {
          try {
            if (v && !v.done && (s = p.return)) {
              s.call(p);
            }
          } finally {
            if (o) throw o.error;
          }
        }
        if (d) return true;
      }
    } catch (C) {
      i = { error: C };
    } finally {
      try {
        if (u && !u.done && (a = f.return)) {
          a.call(f);
        }
      } finally {
        if (i) throw i.error;
      }
    }
    return false;
  };
  e.prototype.getRows = function () {
    return this.rows;
  };
  e.constructResult = function (r) {
    var n = Eu.buildBitArray(r);
    var i = Xu(n);
    var a = i.parseInformation();
    var o = r[0].getFinderPattern().getResultPoints();
    var s = r[r.length - 1].getFinderPattern().getResultPoints();
    var c = [o[0], o[1], s[0], s[1]];
    return new je(a, null, null, c, ei.RSS_EXPANDED, null);
  };
  e.prototype.checkChecksum = function () {
    var r = this.pairs.get(0);
    var n = r.getLeftChar();
    var i = r.getRightChar();
    if (i === null) return false;
    for (var a = i.getChecksumPortion(), o = 2, s = 1; s < this.pairs.size(); ++s) {
      var c = this.pairs.get(s);
      a += c.getLeftChar().getChecksumPortion();
      o++;
      var l = c.getRightChar();
      if (l != null) {
        a += l.getChecksumPortion();
        o++;
      }
    }
    a %= 211;
    var f = 211 * (o - 4) + a;
    return f === n.getValue();
  };
  e.getNextSecondBar = function (r, n) {
    var i;
    r.get(n) ? ((i = r.getNextUnset(n)), (i = r.getNextSet(i))) : ((i = r.getNextSet(n)), (i = r.getNextUnset(i)));
    return i;
  };
  e.prototype.retrieveNextPair = function (r, n, i) {
    var a = n.length % 2 === 0;
    if (this.startFromEven) {
      a = !a;
    }
    var o;
    var s = true;
    var c = -1;
    do {
      this.findNextPair(r, n, c);
      o = this.parseFoundFinderPattern(r, i, a);
      o === null ? (c = e.getNextSecondBar(r, this.startEnd[0])) : (s = false);
    } while (s);
    var l = this.decodeDataCharacter(r, o, a, true);
    if (!this.isEmptyPair(n) && n[n.length - 1].mustBeLast()) throw new I();
    var f;
    try {
      f = this.decodeDataCharacter(r, o, a, false);
    } catch (u) {
      f = null;
      console.log(u);
    }
    return new Ba(l, f, o, true);
  };
  e.prototype.isEmptyPair = function (r) {
    return r.length === 0;
  };
  e.prototype.findNextPair = function (r, n, i) {
    var a = this.getDecodeFinderCounters();
    a[0] = 0;
    a[1] = 0;
    a[2] = 0;
    a[3] = 0;
    var o = r.getSize();
    var s;
    if (i >= 0) s = i;
    else if (this.isEmptyPair(n)) s = 0;
    else {
      var c = n[n.length - 1];
      s = n[n.length - 1].getFinderPattern().getStartEnd()[1];
    }
    var l = n.length % 2 !== 0;
    if (this.startFromEven) {
      l = !l;
    }
    for (var f = false; s < o && ((f = !r.get(s)), !!f); ) s++;
    for (var u = 0, h = s, d = s; d < o; d++)
      if (r.get(d) !== f) a[u]++;
      else {
        if (u === 3) {
          if (l) {
            e.reverseCounters(a);
          }
          if (e.isFinderPattern(a)) {
            this.startEnd[0] = h;
            this.startEnd[1] = d;
            return;
          }
          if (l) {
            e.reverseCounters(a);
          }
          h += a[0] + a[1];
          a[0] = a[2];
          a[1] = a[3];
          a[2] = 0;
          a[3] = 0;
          u--;
        } else u++;
        a[u] = 1;
        f = !f;
      }
    throw new I();
  };
  e.reverseCounters = function (r) {
    for (var n = r.length, i = 0; i < n / 2; ++i) {
      var a = r[i];
      r[i] = r[n - i - 1];
      r[n - i - 1] = r[i];
    }
  };
  e.prototype.parseFoundFinderPattern = function (r, n, i) {
    var a;
    var o;
    var s;
    if (i) {
      for (var c = this.startEnd[0] - 1; c >= 0 && !r.get(c); ) c--;
      c++;
      a = this.startEnd[0] - c;
      o = c;
      s = this.startEnd[1];
    } else {
      o = this.startEnd[0];
      s = r.getNextUnset(this.startEnd[1] + 1);
      a = s - this.startEnd[1];
    }
    var l = this.getDecodeFinderCounters();
    ue.arraycopy(l, 0, l, 1, l.length - 1);
    l[0] = a;
    var f;
    try {
      f = this.parseFinderValue(l, e.FINDER_PATTERNS);
    } catch {
      return null;
    }
    return new _s(f, [o, s], o, s, n);
  };
  e.prototype.decodeDataCharacter = function (r, n, i, a) {
    for (var o = this.getDataCharacterCounters(), s = 0; s < o.length; s++) o[s] = 0;
    if (a) e.recordPatternInReverse(r, n.getStartEnd()[0], o);
    else {
      e.recordPattern(r, n.getStartEnd()[1], o);
      for (var c = 0, l = o.length - 1; c < l; c++, l--) {
        var f = o[c];
        o[c] = o[l];
        o[l] = o[c];
      }
    }
    var u = 17;
    var h = re.sum(new Int32Array(o)) / 17;
    var d = (n.getStartEnd()[1] - n.getStartEnd()[0]) / 15;
    if (Math.abs(h - d) / d > 0.3) throw new I();
    for (
      var p = this.getOddCounts(),
        v = this.getEvenCounts(),
        g = this.getOddRoundingErrors(),
        _ = this.getEvenRoundingErrors(),
        c = 0;
      c < o.length;
      c++
    ) {
      var y = (1 * o[c]) / h;
      var x = y + 0.5;
      if (x < 1) {
        if (y < 0.3) throw new I();
        x = 1;
      } else if (x > 8) {
        if (y > 8.7) throw new I();
        x = 8;
      }
      var w = c / 2;
      (c & 1) === 0 ? ((p[w] = x), (g[w] = y - x)) : ((v[w] = x), (_[w] = y - x));
    }
    this.adjustOddEvenCounts(17);
    for (var C = 4 * n.getValue() + (i ? 0 : 2) + (a ? 0 : 1) - 1, S = 0, T = 0, c = p.length - 1; c >= 0; c--) {
      if (e.isNotA1left(n, i, a)) {
        var D = e.WEIGHTS[C][2 * c];
        T += p[c] * e.WEIGHTS[C][2 * c];
      }
      S += p[c];
    }
    for (var O = 0, c = v.length - 1; c >= 0; c--)
      if (e.isNotA1left(n, i, a)) {
        var D = e.WEIGHTS[C][2 * c + 1];
        O += v[c] * e.WEIGHTS[C][2 * c + 1];
      }
    var R = T + O;
    if ((S & 1) !== 0 || S > 13 || S < 4) throw new I();
    var H = (13 - S) / 2;
    var N = e.SYMBOL_WIDEST[H];
    var k = 9 - e.SYMBOL_WIDEST[H];
    var F = rr.getRSSvalue(p, e.SYMBOL_WIDEST[H], true);
    var V = rr.getRSSvalue(v, k, false);
    var J = e.EVEN_TOTAL_SUBSET[H];
    var ne = e.GSUM[H];
    var me = F * e.EVEN_TOTAL_SUBSET[H] + V + e.GSUM[H];
    return new un(me, R);
  };
  e.isNotA1left = function (r, n, i) {
    return !(r.getValue() === 0 && n && i);
  };
  e.prototype.adjustOddEvenCounts = function (r) {
    var n = re.sum(new Int32Array(this.getOddCounts()));
    var i = re.sum(new Int32Array(this.getEvenCounts()));
    var a = false;
    var o = false;
    n > 13 ? (o = true) : n < 4 && (a = true);
    var s = false;
    var c = false;
    i > 13 ? (c = true) : i < 4 && (s = true);
    var l = n + i - r;
    var f = (n & 1) === 1;
    var u = (i & 1) === 0;
    if (l === 1)
      if (f) {
        if (u) throw new I();
        o = true;
      } else {
        if (!u) throw new I();
        c = true;
      }
    else if (l === -1)
      if (f) {
        if (u) throw new I();
        a = true;
      } else {
        if (!u) throw new I();
        s = true;
      }
    else if (l === 0) {
      if (f) {
        if (!u) throw new I();
        n < i ? ((a = true), (c = true)) : ((o = true), (s = true));
      } else if (u) throw new I();
    } else throw new I();
    if (a) {
      if (o) throw new I();
      e.increment(this.getOddCounts(), this.getOddRoundingErrors());
    }
    if (o) {
      e.decrement(this.getOddCounts(), this.getOddRoundingErrors());
    }
    if (s) {
      if (c) throw new I();
      e.increment(this.getEvenCounts(), this.getOddRoundingErrors());
    }
    if (c) {
      e.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());
    }
  };
  e.SYMBOL_WIDEST = [7, 5, 4, 3, 1];
  e.EVEN_TOTAL_SUBSET = [4, 20, 52, 104, 204];
  e.GSUM = [0, 348, 1388, 2948, 3988];
  e.FINDER_PATTERNS = [
    Int32Array.from([1, 8, 4, 1]),
    Int32Array.from([3, 6, 4, 1]),
    Int32Array.from([3, 4, 6, 1]),
    Int32Array.from([3, 2, 8, 1]),
    Int32Array.from([2, 6, 5, 1]),
    Int32Array.from([2, 2, 9, 1]),
  ];
  e.WEIGHTS = [
    [1, 3, 9, 27, 81, 32, 96, 77],
    [20, 60, 180, 118, 143, 7, 21, 63],
    [189, 145, 13, 39, 117, 140, 209, 205],
    [193, 157, 49, 147, 19, 57, 171, 91],
    [62, 186, 136, 197, 169, 85, 44, 132],
    [185, 133, 188, 142, 4, 12, 36, 108],
    [113, 128, 173, 97, 80, 29, 87, 50],
    [150, 28, 84, 41, 123, 158, 52, 156],
    [46, 138, 203, 187, 139, 206, 196, 166],
    [76, 17, 51, 153, 37, 111, 122, 155],
    [43, 129, 176, 106, 107, 110, 119, 146],
    [16, 48, 144, 10, 30, 90, 59, 177],
    [109, 116, 137, 200, 178, 112, 125, 164],
    [70, 210, 208, 202, 184, 130, 179, 115],
    [134, 191, 151, 31, 93, 68, 204, 190],
    [148, 22, 66, 198, 172, 94, 71, 2],
    [6, 18, 54, 162, 64, 192, 154, 40],
    [120, 149, 25, 75, 14, 42, 126, 167],
    [79, 26, 78, 23, 69, 207, 199, 175],
    [103, 98, 83, 38, 114, 131, 182, 124],
    [161, 61, 183, 127, 170, 88, 53, 159],
    [55, 165, 73, 8, 24, 72, 5, 15],
    [45, 135, 194, 160, 58, 174, 100, 89],
  ];
  e.FINDER_PAT_A = 0;
  e.FINDER_PAT_B = 1;
  e.FINDER_PAT_C = 2;
  e.FINDER_PAT_D = 3;
  e.FINDER_PAT_E = 4;
  e.FINDER_PAT_F = 5;
  e.FINDER_PATTERN_SEQUENCES = [
    [e.FINDER_PAT_A, e.FINDER_PAT_A],
    [e.FINDER_PAT_A, e.FINDER_PAT_B, e.FINDER_PAT_B],
    [e.FINDER_PAT_A, e.FINDER_PAT_C, e.FINDER_PAT_B, e.FINDER_PAT_D],
    [e.FINDER_PAT_A, e.FINDER_PAT_E, e.FINDER_PAT_B, e.FINDER_PAT_D, e.FINDER_PAT_C],
    [e.FINDER_PAT_A, e.FINDER_PAT_E, e.FINDER_PAT_B, e.FINDER_PAT_D, e.FINDER_PAT_D, e.FINDER_PAT_F],
    [e.FINDER_PAT_A, e.FINDER_PAT_E, e.FINDER_PAT_B, e.FINDER_PAT_D, e.FINDER_PAT_E, e.FINDER_PAT_F, e.FINDER_PAT_F],
    [
      e.FINDER_PAT_A,
      e.FINDER_PAT_A,
      e.FINDER_PAT_B,
      e.FINDER_PAT_B,
      e.FINDER_PAT_C,
      e.FINDER_PAT_C,
      e.FINDER_PAT_D,
      e.FINDER_PAT_D,
    ],
    [
      e.FINDER_PAT_A,
      e.FINDER_PAT_A,
      e.FINDER_PAT_B,
      e.FINDER_PAT_B,
      e.FINDER_PAT_C,
      e.FINDER_PAT_C,
      e.FINDER_PAT_D,
      e.FINDER_PAT_E,
      e.FINDER_PAT_E,
    ],
    [
      e.FINDER_PAT_A,
      e.FINDER_PAT_A,
      e.FINDER_PAT_B,
      e.FINDER_PAT_B,
      e.FINDER_PAT_C,
      e.FINDER_PAT_C,
      e.FINDER_PAT_D,
      e.FINDER_PAT_E,
      e.FINDER_PAT_F,
      e.FINDER_PAT_F,
    ],
    [
      e.FINDER_PAT_A,
      e.FINDER_PAT_A,
      e.FINDER_PAT_B,
      e.FINDER_PAT_B,
      e.FINDER_PAT_C,
      e.FINDER_PAT_D,
      e.FINDER_PAT_D,
      e.FINDER_PAT_E,
      e.FINDER_PAT_E,
      e.FINDER_PAT_F,
      e.FINDER_PAT_F,
    ],
  ];
  e.MAX_PAIRS = 11;
  return e;
})(Xt);
var $u = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Ju = (function (t) {
  $u(e, t);
  function e(r, n, i) {
    var a = t(r, n) || this;
    a.count = 0;
    a.finderPattern = i;
    return a;
  }
  e.prototype.getFinderPattern = function () {
    return this.finderPattern;
  };
  e.prototype.getCount = function () {
    return this.count;
  };
  e.prototype.incrementCount = function () {
    this.count++;
  };
  return e;
})(un);
var qu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Gn = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var La = (function (t) {
  qu(e, t);
  function e() {
    var r = (t !== null && t()) || this;
    r.possibleLeftPairs = [];
    r.possibleRightPairs = [];
    return r;
  }
  e.prototype.decodeRow = function (r, n, i) {
    var a;
    var o;
    var s;
    var c;
    var l = this.decodePair(n, false, r, i);
    e.addOrTally(this.possibleLeftPairs, l);
    n.reverse();
    var f = this.decodePair(n, true, r, i);
    e.addOrTally(this.possibleRightPairs, f);
    n.reverse();
    try {
      for (var u = Gn(this.possibleLeftPairs), h = u.next(); !h.done; h = u.next()) {
        var d = h.value;
        if (h.value.getCount() > 1)
          try {
            for (var p = ((s = void 0), Gn(this.possibleRightPairs)), v = p.next(); !v.done; v = p.next()) {
              var g = v.value;
              if (v.value.getCount() > 1 && e.checkChecksum(h.value, v.value))
                return e.constructResult(h.value, v.value);
            }
          } catch (_) {
            s = { error: _ };
          } finally {
            try {
              if (v && !v.done && (c = p.return)) {
                c.call(p);
              }
            } finally {
              if (s) throw s.error;
            }
          }
      }
    } catch (_) {
      a = { error: _ };
    } finally {
      try {
        if (h && !h.done && (o = u.return)) {
          o.call(u);
        }
      } finally {
        if (a) throw a.error;
      }
    }
    throw new I();
  };
  e.addOrTally = function (r, n) {
    var i;
    var a;
    if (n != null) {
      var o = false;
      try {
        for (var s = Gn(r), c = s.next(); !c.done; c = s.next()) {
          var l = c.value;
          if (c.value.getValue() === n.getValue()) {
            c.value.incrementCount();
            o = true;
            break;
          }
        }
      } catch (f) {
        i = { error: f };
      } finally {
        try {
          if (c && !c.done && (a = s.return)) {
            a.call(s);
          }
        } finally {
          if (i) throw i.error;
        }
      }
      if (!o) {
        r.push(n);
      }
    }
  };
  e.prototype.reset = function () {
    this.possibleLeftPairs.length = 0;
    this.possibleRightPairs.length = 0;
  };
  e.constructResult = function (r, n) {
    for (
      var i = 4537077 * r.getValue() + n.getValue(), a = new String(i).toString(), o = new K(), s = 13 - a.length;
      s > 0;
      s--
    )
      o.append('0');
    o.append(a);
    for (var c = 0, s = 0; s < 13; s++) {
      var l = o.charAt(s).charCodeAt(0) - 48;
      c += (s & 1) === 0 ? 3 * l : l;
    }
    c = 10 - (c % 10);
    if (c === 10) {
      c = 0;
    }
    o.append(c.toString());
    var f = r.getFinderPattern().getResultPoints();
    var u = n.getFinderPattern().getResultPoints();
    return new je(o.toString(), null, 0, [f[0], f[1], u[0], u[1]], ei.RSS_14, new Date().getTime());
  };
  e.checkChecksum = function (r, n) {
    var i = (r.getChecksumPortion() + 16 * n.getChecksumPortion()) % 79;
    var a = 9 * r.getFinderPattern().getValue() + n.getFinderPattern().getValue();
    if (a > 72) {
      a--;
    }
    if (a > 8) {
      a--;
    }
    return i === a;
  };
  e.prototype.decodePair = function (r, n, i, a) {
    try {
      var o = this.findFinderPattern(r, n);
      var s = this.parseFoundFinderPattern(r, i, n, o);
      var c = a == null ? null : a.get(Qn.NEED_RESULT_POINT_CALLBACK);
      if (c != null) {
        var l = (o[0] + o[1]) / 2;
        if (n) {
          l = r.getSize() - 1 - l;
        }
        c.foundPossibleResultPoint(new U(l, i));
      }
      var f = this.decodeDataCharacter(r, s, true);
      var u = this.decodeDataCharacter(r, s, false);
      return new Ju(1597 * f.getValue() + u.getValue(), f.getChecksumPortion() + 4 * u.getChecksumPortion(), s);
    } catch {
      return null;
    }
  };
  e.prototype.decodeDataCharacter = function (r, n, i) {
    for (var a = this.getDataCharacterCounters(), o = 0; o < a.length; o++) a[o] = 0;
    if (i) be.recordPatternInReverse(r, n.getStartEnd()[0], a);
    else {
      be.recordPattern(r, n.getStartEnd()[1] + 1, a);
      for (var s = 0, c = a.length - 1; s < c; s++, c--) {
        var l = a[s];
        a[s] = a[c];
        a[c] = a[s];
      }
    }
    for (
      var f = i ? 16 : 15,
        u = re.sum(new Int32Array(a)) / f,
        h = this.getOddCounts(),
        d = this.getEvenCounts(),
        p = this.getOddRoundingErrors(),
        v = this.getEvenRoundingErrors(),
        s = 0;
      s < a.length;
      s++
    ) {
      var g = a[s] / u;
      var _ = Math.floor(g + 0.5);
      _ < 1 ? (_ = 1) : _ > 8 && (_ = 8);
      var y = Math.floor(s / 2);
      (s & 1) === 0 ? ((h[y] = _), (p[y] = g - _)) : ((d[y] = _), (v[y] = g - _));
    }
    this.adjustOddEvenCounts(i, f);
    for (var x = 0, w = 0, s = h.length - 1; s >= 0; s--) {
      w *= 9;
      w += h[s];
      x += h[s];
    }
    for (var C = 0, S = 0, s = d.length - 1; s >= 0; s--) {
      C *= 9;
      C += d[s];
      S += d[s];
    }
    var T = w + 3 * C;
    if (i) {
      if ((x & 1) !== 0 || x > 12 || x < 4) throw new I();
      var D = (12 - x) / 2;
      var O = e.OUTSIDE_ODD_WIDEST[D];
      var R = 9 - e.OUTSIDE_ODD_WIDEST[D];
      var H = rr.getRSSvalue(h, e.OUTSIDE_ODD_WIDEST[D], false);
      var N = rr.getRSSvalue(d, R, true);
      var k = e.OUTSIDE_EVEN_TOTAL_SUBSET[D];
      var F = e.OUTSIDE_GSUM[D];
      return new un(H * e.OUTSIDE_EVEN_TOTAL_SUBSET[D] + N + e.OUTSIDE_GSUM[D], T);
    } else {
      if ((S & 1) !== 0 || S > 10 || S < 4) throw new I();
      var D = (10 - S) / 2;
      var O = e.INSIDE_ODD_WIDEST[D];
      var R = 9 - e.INSIDE_ODD_WIDEST[D];
      var H = rr.getRSSvalue(h, e.INSIDE_ODD_WIDEST[D], true);
      var N = rr.getRSSvalue(d, R, false);
      var V = e.INSIDE_ODD_TOTAL_SUBSET[D];
      var F = e.INSIDE_GSUM[D];
      return new un(N * e.INSIDE_ODD_TOTAL_SUBSET[D] + H + e.INSIDE_GSUM[D], T);
    }
  };
  e.prototype.findFinderPattern = function (r, n) {
    var i = this.getDecodeFinderCounters();
    i[0] = 0;
    i[1] = 0;
    i[2] = 0;
    i[3] = 0;
    for (var a = r.getSize(), o = false, s = 0; s < a && ((o = !r.get(s)), n !== o); ) s++;
    for (var c = 0, l = s, f = s; f < a; f++)
      if (r.get(f) !== o) i[c]++;
      else {
        if (c === 3) {
          if (Xt.isFinderPattern(i)) return [l, f];
          l += i[0] + i[1];
          i[0] = i[2];
          i[1] = i[3];
          i[2] = 0;
          i[3] = 0;
          c--;
        } else c++;
        i[c] = 1;
        o = !o;
      }
    throw new I();
  };
  e.prototype.parseFoundFinderPattern = function (r, n, i, a) {
    for (var o = r.get(a[0]), s = a[0] - 1; s >= 0 && o !== r.get(s); ) s--;
    s++;
    var c = a[0] - s;
    var l = this.getDecodeFinderCounters();
    var f = new Int32Array(l.length);
    ue.arraycopy(l, 0, f, 1, l.length - 1);
    f[0] = c;
    var u = this.parseFinderValue(f, e.FINDER_PATTERNS);
    var h = s;
    var d = a[1];
    if (i) {
      h = r.getSize() - 1 - h;
      d = r.getSize() - 1 - d;
    }
    return new _s(u, [s, a[1]], h, d, n);
  };
  e.prototype.adjustOddEvenCounts = function (r, n) {
    var i = re.sum(new Int32Array(this.getOddCounts()));
    var a = re.sum(new Int32Array(this.getEvenCounts()));
    var o = false;
    var s = false;
    var c = false;
    var l = false;
    r
      ? (i > 12 ? (s = true) : i < 4 && (o = true), a > 12 ? (l = true) : a < 4 && (c = true))
      : (i > 11 ? (s = true) : i < 5 && (o = true), a > 10 ? (l = true) : a < 4 && (c = true));
    var f = i + a - n;
    var u = (i & 1) === (r ? 1 : 0);
    var h = (a & 1) === 1;
    if (f === 1)
      if (u) {
        if (h) throw new I();
        s = true;
      } else {
        if (!h) throw new I();
        l = true;
      }
    else if (f === -1)
      if (u) {
        if (h) throw new I();
        o = true;
      } else {
        if (!h) throw new I();
        c = true;
      }
    else if (f === 0) {
      if (u) {
        if (!h) throw new I();
        i < a ? ((o = true), (l = true)) : ((s = true), (c = true));
      } else if (h) throw new I();
    } else throw new I();
    if (o) {
      if (s) throw new I();
      Xt.increment(this.getOddCounts(), this.getOddRoundingErrors());
    }
    if (s) {
      Xt.decrement(this.getOddCounts(), this.getOddRoundingErrors());
    }
    if (c) {
      if (l) throw new I();
      Xt.increment(this.getEvenCounts(), this.getOddRoundingErrors());
    }
    if (l) {
      Xt.decrement(this.getEvenCounts(), this.getEvenRoundingErrors());
    }
  };
  e.OUTSIDE_EVEN_TOTAL_SUBSET = [1, 10, 34, 70, 126];
  e.INSIDE_ODD_TOTAL_SUBSET = [4, 20, 48, 81];
  e.OUTSIDE_GSUM = [0, 161, 961, 2015, 2715];
  e.INSIDE_GSUM = [0, 336, 1036, 1516];
  e.OUTSIDE_ODD_WIDEST = [8, 6, 4, 3, 1];
  e.INSIDE_ODD_WIDEST = [2, 4, 6, 8];
  e.FINDER_PATTERNS = [
    Int32Array.from([3, 8, 2, 1]),
    Int32Array.from([3, 5, 5, 1]),
    Int32Array.from([3, 3, 7, 1]),
    Int32Array.from([3, 1, 9, 1]),
    Int32Array.from([2, 7, 4, 1]),
    Int32Array.from([2, 5, 6, 1]),
    Int32Array.from([2, 3, 8, 1]),
    Int32Array.from([1, 5, 7, 1]),
    Int32Array.from([1, 3, 9, 1]),
  ];
  return e;
})(Xt);
var Yu = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var yr = (function (t) {
  Yu(e, t);
  function e(r) {
    var n = t() || this;
    n.readers = [];
    var i = r ? r.get(Qn.POSSIBLE_FORMATS) : null;
    var a = r && r.get(Qn.ASSUME_CODE_39_CHECK_DIGIT) !== void 0;
    var o = r && r.get(Qn.ENABLE_CODE_39_EXTENDED_MODE) !== void 0;
    if (i) {
      if (i.includes(ei.EAN_13) || i.includes(ei.UPC_A) || i.includes(ei.EAN_8) || i.includes(ei.UPC_E)) {
        n.readers.push(new Vn(r));
      }
      if (i.includes(ei.CODE_39)) {
        n.readers.push(new Ta(a, o));
      }
      if (i.includes(ei.CODE_93)) {
        n.readers.push(new ba());
      }
      if (i.includes(ei.CODE_128)) {
        n.readers.push(new Ia());
      }
      if (i.includes(ei.ITF)) {
        n.readers.push(new Na());
      }
      if (i.includes(ei.CODABAR)) {
        n.readers.push(new mu());
      }
      if (i.includes(ei.RSS_14)) {
        n.readers.push(new La());
      }
      if (i.includes(ei.RSS_EXPANDED)) {
        console.warn('RSS Expanded reader IS NOT ready for production yet! use at your own risk.');
        n.readers.push(new Wu());
      }
    }
    if (n.readers.length === 0) {
      n.readers.push(new Vn(r));
      n.readers.push(new Ta());
      n.readers.push(new ba());
      n.readers.push(new Vn(r));
      n.readers.push(new Ia());
      n.readers.push(new Na());
      n.readers.push(new La());
    }
    return n;
  }
  e.prototype.decodeRow = function (r, n, i) {
    for (var a = 0; a < this.readers.length; a++)
      try {
        return this.readers[a].decodeRow(r, n, i);
      } catch {}
    throw new I();
  };
  e.prototype.reset = function () {
    this.readers.forEach(function (r) {
      return r.reset();
    });
  };
  return e;
})(be);
var Ku = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
(function (t) {
  Ku(e, t);
  function e(r, n) {
    if (r === void 0) {
      r = 500;
    }
    return t(new yr(n), r, n) || this;
  }
  return e;
})(vr);
var Fa = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var se = (function () {
  function t(e, r, n) {
    this.ecCodewords = e;
    this.ecBlocks = [r];
    if (n) {
      this.ecBlocks.push(n);
    }
  }
  t.prototype.getECCodewords = function () {
    return this.ecCodewords;
  };
  t.prototype.getECBlocks = function () {
    return this.ecBlocks;
  };
  return t;
})();
var ie = (function () {
  function t(e, r) {
    this.count = e;
    this.dataCodewords = r;
  }
  t.prototype.getCount = function () {
    return this.count;
  };
  t.prototype.getDataCodewords = function () {
    return this.dataCodewords;
  };
  return t;
})();
var Zu = (function () {
  function t(e, r, n, i, a, o) {
    var s;
    var c;
    this.versionNumber = e;
    this.symbolSizeRows = r;
    this.symbolSizeColumns = n;
    this.dataRegionSizeRows = i;
    this.dataRegionSizeColumns = a;
    this.ecBlocks = o;
    var l = 0;
    var f = o.getECCodewords();
    var u = o.getECBlocks();
    try {
      for (var h = Fa(u), d = h.next(); !d.done; d = h.next()) {
        var p = d.value;
        l += d.value.getCount() * (d.value.getDataCodewords() + f);
      }
    } catch (v) {
      s = { error: v };
    } finally {
      try {
        if (d && !d.done && (c = h.return)) {
          c.call(h);
        }
      } finally {
        if (s) throw s.error;
      }
    }
    this.totalCodewords = l;
  }
  t.prototype.getVersionNumber = function () {
    return this.versionNumber;
  };
  t.prototype.getSymbolSizeRows = function () {
    return this.symbolSizeRows;
  };
  t.prototype.getSymbolSizeColumns = function () {
    return this.symbolSizeColumns;
  };
  t.prototype.getDataRegionSizeRows = function () {
    return this.dataRegionSizeRows;
  };
  t.prototype.getDataRegionSizeColumns = function () {
    return this.dataRegionSizeColumns;
  };
  t.prototype.getTotalCodewords = function () {
    return this.totalCodewords;
  };
  t.prototype.getECBlocks = function () {
    return this.ecBlocks;
  };
  t.getVersionForDimensions = function (e, r) {
    var n;
    var i;
    if ((e & 1) !== 0 || (r & 1) !== 0) throw new M();
    try {
      for (var a = Fa(t.VERSIONS), o = a.next(); !o.done; o = a.next()) {
        var s = o.value;
        if (o.value.symbolSizeRows === e && o.value.symbolSizeColumns === r) return o.value;
      }
    } catch (c) {
      n = { error: c };
    } finally {
      try {
        if (o && !o.done && (i = a.return)) {
          i.call(a);
        }
      } finally {
        if (n) throw n.error;
      }
    }
    throw new M();
  };
  t.prototype.toString = function () {
    return '' + this.versionNumber;
  };
  t.buildVersions = function () {
    return [
      new t(1, 10, 10, 8, 8, new se(5, new ie(1, 3))),
      new t(2, 12, 12, 10, 10, new se(7, new ie(1, 5))),
      new t(3, 14, 14, 12, 12, new se(10, new ie(1, 8))),
      new t(4, 16, 16, 14, 14, new se(12, new ie(1, 12))),
      new t(5, 18, 18, 16, 16, new se(14, new ie(1, 18))),
      new t(6, 20, 20, 18, 18, new se(18, new ie(1, 22))),
      new t(7, 22, 22, 20, 20, new se(20, new ie(1, 30))),
      new t(8, 24, 24, 22, 22, new se(24, new ie(1, 36))),
      new t(9, 26, 26, 24, 24, new se(28, new ie(1, 44))),
      new t(10, 32, 32, 14, 14, new se(36, new ie(1, 62))),
      new t(11, 36, 36, 16, 16, new se(42, new ie(1, 86))),
      new t(12, 40, 40, 18, 18, new se(48, new ie(1, 114))),
      new t(13, 44, 44, 20, 20, new se(56, new ie(1, 144))),
      new t(14, 48, 48, 22, 22, new se(68, new ie(1, 174))),
      new t(15, 52, 52, 24, 24, new se(42, new ie(2, 102))),
      new t(16, 64, 64, 14, 14, new se(56, new ie(2, 140))),
      new t(17, 72, 72, 16, 16, new se(36, new ie(4, 92))),
      new t(18, 80, 80, 18, 18, new se(48, new ie(4, 114))),
      new t(19, 88, 88, 20, 20, new se(56, new ie(4, 144))),
      new t(20, 96, 96, 22, 22, new se(68, new ie(4, 174))),
      new t(21, 104, 104, 24, 24, new se(56, new ie(6, 136))),
      new t(22, 120, 120, 18, 18, new se(68, new ie(6, 175))),
      new t(23, 132, 132, 20, 20, new se(62, new ie(8, 163))),
      new t(24, 144, 144, 22, 22, new se(62, new ie(8, 156), new ie(2, 155))),
      new t(25, 8, 18, 6, 16, new se(7, new ie(1, 5))),
      new t(26, 8, 32, 6, 14, new se(11, new ie(1, 10))),
      new t(27, 12, 26, 10, 24, new se(14, new ie(1, 16))),
      new t(28, 12, 36, 10, 16, new se(18, new ie(1, 22))),
      new t(29, 16, 36, 14, 16, new se(24, new ie(1, 32))),
      new t(30, 16, 48, 14, 22, new se(28, new ie(1, 49))),
    ];
  };
  t.VERSIONS = t.buildVersions();
  return t;
})();
var Qu = (function () {
  function t(e) {
    var r = e.getHeight();
    if (r < 8 || r > 144 || (r & 1) !== 0) throw new M();
    this.version = t.readVersion(e);
    this.mappingBitMatrix = this.extractDataRegion(e);
    this.readMappingMatrix = new xt(this.mappingBitMatrix.getWidth(), this.mappingBitMatrix.getHeight());
  }
  t.prototype.getVersion = function () {
    return this.version;
  };
  t.readVersion = function (e) {
    var r = e.getHeight();
    var n = e.getWidth();
    return Zu.getVersionForDimensions(r, n);
  };
  t.prototype.readCodewords = function () {
    var e = new Int8Array(this.version.getTotalCodewords());
    var r = 0;
    var n = 4;
    var i = 0;
    var a = this.mappingBitMatrix.getHeight();
    var o = this.mappingBitMatrix.getWidth();
    var s = false;
    var c = false;
    var l = false;
    var f = false;
    do
      if (n === a && i === 0 && !s) {
        e[r++] = this.readCorner1(a, o) & 255;
        n -= 2;
        i += 2;
        s = true;
      } else if (n === a - 2 && i === 0 && (o & 3) !== 0 && !c) {
        e[r++] = this.readCorner2(a, o) & 255;
        n -= 2;
        i += 2;
        c = true;
      } else if (n === a + 4 && i === 2 && (o & 7) === 0 && !l) {
        e[r++] = this.readCorner3(a, o) & 255;
        n -= 2;
        i += 2;
        l = true;
      } else if (n === a - 2 && i === 0 && (o & 7) === 4 && !f) {
        e[r++] = this.readCorner4(a, o) & 255;
        n -= 2;
        i += 2;
        f = true;
      } else {
        do {
          if (n < a && i >= 0 && !this.readMappingMatrix.get(i, n)) {
            e[r++] = this.readUtah(n, i, a, o) & 255;
          }
          n -= 2;
          i += 2;
        } while (n >= 0 && i < o);
        n += 1;
        i += 3;
        do {
          if (n >= 0 && i < o && !this.readMappingMatrix.get(i, n)) {
            e[r++] = this.readUtah(n, i, a, o) & 255;
          }
          n += 2;
          i -= 2;
        } while (n < a && i >= 0);
        n += 3;
        i += 1;
      }
    while (n < a || i < o);
    if (r !== this.version.getTotalCodewords()) throw new M();
    return e;
  };
  t.prototype.readModule = function (e, r, n, i) {
    if (e < 0) {
      e += n;
      r += 4 - ((n + 4) & 7);
    }
    if (r < 0) {
      r += i;
      e += 4 - ((i + 4) & 7);
    }
    this.readMappingMatrix.set(r, e);
    return this.mappingBitMatrix.get(r, e);
  };
  t.prototype.readUtah = function (e, r, n, i) {
    var a = 0;
    if (this.readModule(e - 2, r - 2, n, i)) {
      a |= 1;
    }
    a <<= 1;
    if (this.readModule(e - 2, r - 1, n, i)) {
      a |= 1;
    }
    a <<= 1;
    if (this.readModule(e - 1, r - 2, n, i)) {
      a |= 1;
    }
    a <<= 1;
    if (this.readModule(e - 1, r - 1, n, i)) {
      a |= 1;
    }
    a <<= 1;
    if (this.readModule(e - 1, r, n, i)) {
      a |= 1;
    }
    a <<= 1;
    if (this.readModule(e, r - 2, n, i)) {
      a |= 1;
    }
    a <<= 1;
    if (this.readModule(e, r - 1, n, i)) {
      a |= 1;
    }
    a <<= 1;
    if (this.readModule(e, r, n, i)) {
      a |= 1;
    }
    return a;
  };
  t.prototype.readCorner1 = function (e, r) {
    var n = 0;
    if (this.readModule(e - 1, 0, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(e - 1, 1, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(e - 1, 2, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(0, r - 2, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(0, r - 1, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(1, r - 1, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(2, r - 1, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(3, r - 1, e, r)) {
      n |= 1;
    }
    return n;
  };
  t.prototype.readCorner2 = function (e, r) {
    var n = 0;
    if (this.readModule(e - 3, 0, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(e - 2, 0, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(e - 1, 0, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(0, r - 4, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(0, r - 3, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(0, r - 2, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(0, r - 1, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(1, r - 1, e, r)) {
      n |= 1;
    }
    return n;
  };
  t.prototype.readCorner3 = function (e, r) {
    var n = 0;
    if (this.readModule(e - 1, 0, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(e - 1, r - 1, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(0, r - 3, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(0, r - 2, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(0, r - 1, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(1, r - 3, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(1, r - 2, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(1, r - 1, e, r)) {
      n |= 1;
    }
    return n;
  };
  t.prototype.readCorner4 = function (e, r) {
    var n = 0;
    if (this.readModule(e - 3, 0, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(e - 2, 0, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(e - 1, 0, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(0, r - 2, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(0, r - 1, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(1, r - 1, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(2, r - 1, e, r)) {
      n |= 1;
    }
    n <<= 1;
    if (this.readModule(3, r - 1, e, r)) {
      n |= 1;
    }
    return n;
  };
  t.prototype.extractDataRegion = function (e) {
    var r = this.version.getSymbolSizeRows();
    var n = this.version.getSymbolSizeColumns();
    if (e.getHeight() !== r) throw new z('Dimension of bitMatrix must match the version size');
    for (
      var i = this.version.getDataRegionSizeRows(),
        a = this.version.getDataRegionSizeColumns(),
        o = (r / i) | 0,
        s = (n / a) | 0,
        c = o * i,
        l = s * a,
        f = new xt(l, c),
        u = 0;
      u < o;
      ++u
    )
      for (var h = u * i, d = 0; d < s; ++d)
        for (var p = d * a, v = 0; v < i; ++v)
          for (var g = u * (i + 2) + 1 + v, _ = h + v, y = 0; y < a; ++y) {
            var x = d * (a + 2) + 1 + y;
            if (e.get(x, g)) {
              var w = p + y;
              f.set(w, _);
            }
          }
    return f;
  };
  return t;
})();
var Ua = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var eh = (function () {
  function t(e, r) {
    this.numDataCodewords = e;
    this.codewords = r;
  }
  t.getDataBlocks = function (e, r) {
    var n;
    var i;
    var a;
    var o;
    var s = r.getECBlocks();
    var c = 0;
    var l = s.getECBlocks();
    try {
      for (var f = Ua(l), u = f.next(); !u.done; u = f.next()) {
        var h = u.value;
        c += u.value.getCount();
      }
    } catch (F) {
      n = { error: F };
    } finally {
      try {
        if (u && !u.done && (i = f.return)) {
          i.call(f);
        }
      } finally {
        if (n) throw n.error;
      }
    }
    var d = new Array(c);
    var p = 0;
    try {
      for (var v = Ua(l), g = v.next(); !g.done; g = v.next())
        for (var h = g.value, _ = 0; _ < h.getCount(); _++) {
          var y = h.getDataCodewords();
          var x = s.getECCodewords() + y;
          d[p++] = new t(y, new Uint8Array(x));
        }
    } catch (F) {
      a = { error: F };
    } finally {
      try {
        if (g && !g.done && (o = v.return)) {
          o.call(v);
        }
      } finally {
        if (a) throw a.error;
      }
    }
    for (var w = d[0].codewords.length, C = w - s.getECCodewords(), S = C - 1, T = 0, _ = 0; _ < S; _++)
      for (var D = 0; D < p; D++) d[D].codewords[_] = e[T++];
    for (var O = r.getVersionNumber() === 24, R = O ? 8 : p, D = 0; D < R; D++) d[D].codewords[C - 1] = e[T++];
    for (var H = d[0].codewords.length, _ = C; _ < H; _++)
      for (var D = 0; D < p; D++) {
        var N = O ? (D + 8) % p : D;
        var k = O && N > 7 ? _ - 1 : _;
        d[N].codewords[k] = e[T++];
      }
    if (T !== e.length) throw new z();
    return d;
  };
  t.prototype.getNumDataCodewords = function () {
    return this.numDataCodewords;
  };
  t.prototype.getCodewords = function () {
    return this.codewords;
  };
  return t;
})();
var ys = (function () {
  function t(e) {
    this.bytes = e;
    this.byteOffset = 0;
    this.bitOffset = 0;
  }
  t.prototype.getBitOffset = function () {
    return this.bitOffset;
  };
  t.prototype.getByteOffset = function () {
    return this.byteOffset;
  };
  t.prototype.readBits = function (e) {
    if (e < 1 || e > 32 || e > this.available()) throw new z('' + e);
    var r = 0;
    var n = this.bitOffset;
    var i = this.byteOffset;
    var a = this.bytes;
    if (n > 0) {
      var o = 8 - n;
      var s = e < o ? e : o;
      var c = o - s;
      var l = (255 >> (8 - s)) << c;
      r = (this.bytes[i] & l) >> c;
      e -= s;
      n += s;
      if (n === 8) {
        n = 0;
        i++;
      }
    }
    if (e > 0) {
      for (; e >= 8; ) {
        r = (r << 8) | (this.bytes[i] & 255);
        i++;
        e -= 8;
      }
      if (e > 0) {
        var c = 8 - e;
        var l = (255 >> c) << c;
        r = (r << e) | ((this.bytes[i] & l) >> c);
        n += e;
      }
    }
    this.bitOffset = n;
    this.byteOffset = i;
    return r;
  };
  t.prototype.available = function () {
    return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;
  };
  return t;
})();
var Ce;
(function (t) {
  t[(t.PAD_ENCODE = 0)] = 'PAD_ENCODE';
  t[(t.ASCII_ENCODE = 1)] = 'ASCII_ENCODE';
  t[(t.C40_ENCODE = 2)] = 'C40_ENCODE';
  t[(t.TEXT_ENCODE = 3)] = 'TEXT_ENCODE';
  t[(t.ANSIX12_ENCODE = 4)] = 'ANSIX12_ENCODE';
  t[(t.EDIFACT_ENCODE = 5)] = 'EDIFACT_ENCODE';
  t[(t.BASE256_ENCODE = 6)] = 'BASE256_ENCODE';
})(Ce || (Ce = {}));
var th = (function () {
  function t() {}
  t.decode = function (e) {
    var r = new ys(e);
    var n = new K();
    var i = new K();
    var a = new Array();
    var o = Ce.ASCII_ENCODE;
    do
      if (o === Ce.ASCII_ENCODE) o = this.decodeAsciiSegment(r, n, i);
      else {
        switch (o) {
          case Ce.C40_ENCODE:
            this.decodeC40Segment(r, n);
            break;
          case Ce.TEXT_ENCODE:
            this.decodeTextSegment(r, n);
            break;
          case Ce.ANSIX12_ENCODE:
            this.decodeAnsiX12Segment(r, n);
            break;
          case Ce.EDIFACT_ENCODE:
            this.decodeEdifactSegment(r, n);
            break;
          case Ce.BASE256_ENCODE:
            this.decodeBase256Segment(r, n, a);
            break;
          default:
            throw new M();
        }
        o = Ce.ASCII_ENCODE;
      }
    while (o !== Ce.PAD_ENCODE && r.available() > 0);
    if (i.length() > 0) {
      n.append(i.toString());
    }
    return new Pn(e, n.toString(), a.length === 0 ? null : a, null);
  };
  t.decodeAsciiSegment = function (e, r, n) {
    var i = false;
    do {
      var a = e.readBits(8);
      if (a === 0) throw new M();
      if (a <= 128) {
        if (i) {
          a += 128;
        }
        r.append(String.fromCharCode(a - 1));
        return Ce.ASCII_ENCODE;
      }
      if (a === 129) return Ce.PAD_ENCODE;
      if (a <= 229) {
        var o = a - 130;
        if (o < 10) {
          r.append('0');
        }
        r.append('' + o);
      } else
        switch (a) {
          case 230:
            return Ce.C40_ENCODE;
          case 231:
            return Ce.BASE256_ENCODE;
          case 232:
            r.append('\x1D');
            break;
          case 233:
          case 234:
            break;
          case 235:
            i = true;
            break;
          case 236:
            {
              r.append('[)>\x1E05\x1D');
              n.insert(0, '\x1E\x04');
            }
            break;
          case 237:
            {
              r.append('[)>\x1E06\x1D');
              n.insert(0, '\x1E\x04');
            }
            break;
          case 238:
            return Ce.ANSIX12_ENCODE;
          case 239:
            return Ce.TEXT_ENCODE;
          case 240:
            return Ce.EDIFACT_ENCODE;
          case 241:
            break;
          default:
            if (a !== 254 || e.available() !== 0) throw new M();
            break;
        }
    } while (e.available() > 0);
    return Ce.ASCII_ENCODE;
  };
  t.decodeC40Segment = function (e, r) {
    var n = false;
    var i = [];
    var a = 0;
    do {
      if (e.available() === 8) return;
      var o = e.readBits(8);
      if (o === 254) return;
      this.parseTwoBytes(o, e.readBits(8), i);
      for (var s = 0; s < 3; s++) {
        var c = i[s];
        if (i[s] < 3) a = i[s] + 1;
        else if (i[s] < this.C40_BASIC_SET_CHARS.length) {
          var l = this.C40_BASIC_SET_CHARS[i[s]];
          n
            ? (r.append(String.fromCharCode(this.C40_BASIC_SET_CHARS[i[s]].charCodeAt(0) + 128)), (n = false))
            : r.append(this.C40_BASIC_SET_CHARS[i[s]]);
        } else throw new M();
      }
    } while (e.available() > 0);
  };
  t.decodeTextSegment = function (e, r) {
    var n = false;
    var i = [];
    var a = 0;
    do {
      if (e.available() === 8) return;
      var o = e.readBits(8);
      if (o === 254) return;
      this.parseTwoBytes(o, e.readBits(8), i);
      for (var s = 0; s < 3; s++) {
        var c = i[s];
        if (i[s] < 3) a = i[s] + 1;
        else if (i[s] < this.TEXT_BASIC_SET_CHARS.length) {
          var l = this.TEXT_BASIC_SET_CHARS[i[s]];
          n
            ? (r.append(String.fromCharCode(this.TEXT_BASIC_SET_CHARS[i[s]].charCodeAt(0) + 128)), (n = false))
            : r.append(this.TEXT_BASIC_SET_CHARS[i[s]]);
        } else throw new M();
      }
    } while (e.available() > 0);
  };
  t.decodeAnsiX12Segment = function (e, r) {
    var n = [];
    do {
      if (e.available() === 8) return;
      var i = e.readBits(8);
      if (i === 254) return;
      this.parseTwoBytes(i, e.readBits(8), n);
      for (var a = 0; a < 3; a++) {
        var o = n[a];
        switch (n[a]) {
          case 0:
            r.append('\r');
            break;
          case 1:
            r.append('*');
            break;
          case 2:
            r.append('>');
            break;
          case 3:
            r.append(' ');
            break;
          default:
            if (n[a] < 14) r.append(String.fromCharCode(n[a] + 44));
            else if (n[a] < 40) r.append(String.fromCharCode(n[a] + 51));
            else throw new M();
            break;
        }
      }
    } while (e.available() > 0);
  };
  t.parseTwoBytes = function (e, r, n) {
    var i = (e << 8) + r - 1;
    var a = Math.floor(i / 1600);
    n[0] = a;
    i -= a * 1600;
    a = Math.floor(i / 40);
    n[1] = a;
    n[2] = i - a * 40;
  };
  t.decodeEdifactSegment = function (e, r) {
    do {
      if (e.available() <= 16) return;
      for (var n = 0; n < 4; n++) {
        var i = e.readBits(6);
        if (i === 31) {
          var a = 8 - e.getBitOffset();
          if (a !== 8) {
            e.readBits(a);
          }
          return;
        }
        if ((i & 32) === 0) {
          i |= 64;
        }
        r.append(String.fromCharCode(i));
      }
    } while (e.available() > 0);
  };
  t.decodeBase256Segment = function (e, r, n) {
    var i = 1 + e.getByteOffset();
    var a = this.unrandomize255State(e.readBits(8), i++);
    var o;
    a === 0
      ? (o = (e.available() / 8) | 0)
      : a < 250
        ? (o = a)
        : (o = 250 * (a - 249) + this.unrandomize255State(e.readBits(8), i++));
    if (o < 0) throw new M();
    for (var s = new Uint8Array(o), c = 0; c < o; c++) {
      if (e.available() < 8) throw new M();
      s[c] = this.unrandomize255State(e.readBits(8), i++);
    }
    n.push(s);
    try {
      r.append(ut.decode(s, ee.ISO88591));
    } catch (l) {
      throw new Br('Platform does not support required encoding: ' + l.message);
    }
  };
  t.unrandomize255State = function (e, r) {
    var n = ((149 * r) % 255) + 1;
    var i = e - n;
    return i >= 0 ? i : i + 256;
  };
  t.C40_BASIC_SET_CHARS = [
    '*',
    '*',
    '*',
    ' ',
    '0',
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9',
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
    'R',
    'S',
    'T',
    'U',
    'V',
    'W',
    'X',
    'Y',
    'Z',
  ];
  t.C40_SHIFT2_SET_CHARS = [
    '!',
    '"',
    '#',
    '$',
    '%',
    '&',
    "'",
    '(',
    ')',
    '*',
    '+',
    ',',
    '-',
    '.',
    '/',
    ':',
    ';',
    '<',
    '=',
    '>',
    '?',
    '@',
    '[',
    '\\',
    ']',
    '^',
    '_',
  ];
  t.TEXT_BASIC_SET_CHARS = [
    '*',
    '*',
    '*',
    ' ',
    '0',
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7',
    '8',
    '9',
    'a',
    'b',
    'c',
    'd',
    'e',
    'f',
    'g',
    'h',
    'i',
    'j',
    'k',
    'l',
    'm',
    'n',
    'o',
    'p',
    'q',
    'r',
    's',
    't',
    'u',
    'v',
    'w',
    'x',
    'y',
    'z',
  ];
  t.TEXT_SHIFT2_SET_CHARS = t.C40_SHIFT2_SET_CHARS;
  t.TEXT_SHIFT3_SET_CHARS = [
    '`',
    'A',
    'B',
    'C',
    'D',
    'E',
    'F',
    'G',
    'H',
    'I',
    'J',
    'K',
    'L',
    'M',
    'N',
    'O',
    'P',
    'Q',
    'R',
    'S',
    'T',
    'U',
    'V',
    'W',
    'X',
    'Y',
    'Z',
    '{',
    '|',
    '}',
    '~',
    '\x7F',
  ];
  return t;
})();
var rh = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var nh = (function () {
  function t() {
    this.rsDecoder = new Mn(et.DATA_MATRIX_FIELD_256);
  }
  t.prototype.decode = function (e) {
    var r;
    var n;
    var i = new Qu(e);
    var a = i.getVersion();
    var o = i.readCodewords();
    var s = eh.getDataBlocks(o, a);
    var c = 0;
    try {
      for (var l = rh(s), f = l.next(); !f.done; f = l.next()) {
        var u = f.value;
        c += f.value.getNumDataCodewords();
      }
    } catch (x) {
      r = { error: x };
    } finally {
      try {
        if (f && !f.done && (n = l.return)) {
          n.call(l);
        }
      } finally {
        if (r) throw r.error;
      }
    }
    for (var h = new Uint8Array(c), d = s.length, p = 0; p < d; p++) {
      var v = s[p];
      var g = s[p].getCodewords();
      var _ = s[p].getNumDataCodewords();
      this.correctErrors(g, _);
      for (var y = 0; y < _; y++) h[y * d + p] = g[y];
    }
    return th.decode(h);
  };
  t.prototype.correctErrors = function (e, r) {
    var n = new Int32Array(e);
    try {
      this.rsDecoder.decode(n, e.length - r);
    } catch {
      throw new Me();
    }
    for (var i = 0; i < r; i++) e[i] = n[i];
  };
  return t;
})();
var ih = (function () {
  function t(e) {
    this.image = e;
    this.rectangleDetector = new ni(this.image);
  }
  t.prototype.detect = function () {
    var e = this.rectangleDetector.detect();
    var r = this.detectSolid1(e);
    r = this.detectSolid2(r);
    r[3] = this.correctTopRight(r);
    if (!r[3]) throw new I();
    r = this.shiftToModuleCenter(r);
    var n = r[0];
    var i = r[1];
    var a = r[2];
    var o = r[3];
    var s = this.transitionsBetween(r[0], r[3]) + 1;
    var c = this.transitionsBetween(r[2], r[3]) + 1;
    if ((s & 1) === 1) {
      s += 1;
    }
    if ((c & 1) === 1) {
      c += 1;
    }
    if (4 * s < 7 * c && 4 * c < 7 * s) {
      s = c = Math.max(s, c);
    }
    var l = t.sampleGrid(this.image, r[0], r[1], r[2], r[3], s, c);
    return new qi(l, [r[0], r[1], r[2], r[3]]);
  };
  t.shiftPoint = function (e, r, n) {
    var i = (r.getX() - e.getX()) / (n + 1);
    var a = (r.getY() - e.getY()) / (n + 1);
    return new U(e.getX() + i, e.getY() + a);
  };
  t.moveAway = function (e, r, n) {
    var i = e.getX();
    var a = e.getY();
    i < r ? (i -= 1) : (i += 1);
    a < n ? (a -= 1) : (a += 1);
    return new U(i, a);
  };
  t.prototype.detectSolid1 = function (e) {
    var r = e[0];
    var n = e[1];
    var i = e[3];
    var a = e[2];
    var o = this.transitionsBetween(e[0], e[1]);
    var s = this.transitionsBetween(e[1], e[3]);
    var c = this.transitionsBetween(e[3], e[2]);
    var l = this.transitionsBetween(e[2], e[0]);
    var f = o;
    var u = [e[2], e[0], e[1], e[3]];
    if (f > s) {
      f = s;
      u[0] = e[0];
      u[1] = e[1];
      u[2] = e[3];
      u[3] = e[2];
    }
    if (f > c) {
      f = c;
      u[0] = e[1];
      u[1] = e[3];
      u[2] = e[2];
      u[3] = e[0];
    }
    if (f > l) {
      u[0] = e[3];
      u[1] = e[2];
      u[2] = e[0];
      u[3] = e[1];
    }
    return u;
  };
  t.prototype.detectSolid2 = function (e) {
    var r = e[0];
    var n = e[1];
    var i = e[2];
    var a = e[3];
    var o = this.transitionsBetween(e[0], e[3]);
    var s = t.shiftPoint(e[1], e[2], (o + 1) * 4);
    var c = t.shiftPoint(e[2], e[1], (o + 1) * 4);
    var l = this.transitionsBetween(s, e[0]);
    var f = this.transitionsBetween(c, e[3]);
    l < f
      ? ((e[0] = e[0]), (e[1] = e[1]), (e[2] = e[2]), (e[3] = e[3]))
      : ((e[0] = e[1]), (e[1] = e[2]), (e[2] = e[3]), (e[3] = e[0]));
    return e;
  };
  t.prototype.correctTopRight = function (e) {
    var r = e[0];
    var n = e[1];
    var i = e[2];
    var a = e[3];
    var o = this.transitionsBetween(e[0], e[3]);
    var s = this.transitionsBetween(e[1], e[3]);
    var c = t.shiftPoint(e[0], e[1], (s + 1) * 4);
    var l = t.shiftPoint(e[2], e[1], (o + 1) * 4);
    o = this.transitionsBetween(c, e[3]);
    s = this.transitionsBetween(l, e[3]);
    var f = new U(
      e[3].getX() + (e[2].getX() - e[1].getX()) / (o + 1),
      e[3].getY() + (e[2].getY() - e[1].getY()) / (o + 1),
    );
    var u = new U(
      e[3].getX() + (e[0].getX() - e[1].getX()) / (s + 1),
      e[3].getY() + (e[0].getY() - e[1].getY()) / (s + 1),
    );
    if (!this.isValid(f)) return this.isValid(u) ? u : null;
    if (!this.isValid(u)) return f;
    var h = this.transitionsBetween(c, f) + this.transitionsBetween(l, f);
    var d = this.transitionsBetween(c, u) + this.transitionsBetween(l, u);
    return h > d ? f : u;
  };
  t.prototype.shiftToModuleCenter = function (e) {
    var r = e[0];
    var n = e[1];
    var i = e[2];
    var a = e[3];
    var o = this.transitionsBetween(r, a) + 1;
    var s = this.transitionsBetween(i, a) + 1;
    var c = t.shiftPoint(r, n, s * 4);
    var l = t.shiftPoint(i, n, o * 4);
    o = this.transitionsBetween(c, a) + 1;
    s = this.transitionsBetween(l, a) + 1;
    if ((o & 1) === 1) {
      o += 1;
    }
    if ((s & 1) === 1) {
      s += 1;
    }
    var f = (r.getX() + n.getX() + i.getX() + a.getX()) / 4;
    var u = (r.getY() + n.getY() + i.getY() + a.getY()) / 4;
    r = t.moveAway(r, f, u);
    n = t.moveAway(n, f, u);
    i = t.moveAway(i, f, u);
    a = t.moveAway(a, f, u);
    var h;
    var d;
    c = t.shiftPoint(r, n, s * 4);
    c = t.shiftPoint(c, a, o * 4);
    h = t.shiftPoint(n, r, s * 4);
    h = t.shiftPoint(h, i, o * 4);
    l = t.shiftPoint(i, a, s * 4);
    l = t.shiftPoint(l, n, o * 4);
    d = t.shiftPoint(a, i, s * 4);
    d = t.shiftPoint(d, r, o * 4);
    return [c, h, l, d];
  };
  t.prototype.isValid = function (e) {
    return e.getX() >= 0 && e.getX() < this.image.getWidth() && e.getY() > 0 && e.getY() < this.image.getHeight();
  };
  t.sampleGrid = function (e, r, n, i, a, o, s) {
    var c = Yi.getInstance();
    return c.sampleGrid(
      e,
      o,
      s,
      0.5,
      0.5,
      o - 0.5,
      0.5,
      o - 0.5,
      s - 0.5,
      0.5,
      s - 0.5,
      r.getX(),
      r.getY(),
      a.getX(),
      a.getY(),
      i.getX(),
      i.getY(),
      n.getX(),
      n.getY(),
    );
  };
  t.prototype.transitionsBetween = function (e, r) {
    var n = Math.trunc(e.getX());
    var i = Math.trunc(e.getY());
    var a = Math.trunc(r.getX());
    var o = Math.trunc(r.getY());
    var s = Math.abs(o - i) > Math.abs(a - n);
    if (s) {
      var c = n;
      n = i;
      i = c;
      c = a;
      a = o;
      o = c;
    }
    for (
      var l = Math.abs(a - n),
        f = Math.abs(o - i),
        u = -l / 2,
        h = i < o ? 1 : -1,
        d = n < a ? 1 : -1,
        p = 0,
        v = this.image.get(s ? i : n, s ? n : i),
        g = n,
        _ = i;
      g !== a;
      g += d
    ) {
      var y = this.image.get(s ? _ : g, s ? g : _);
      if (y !== v) {
        p++;
        v = y;
      }
      u += f;
      if (u > 0) {
        if (_ === o) break;
        _ += h;
        u -= l;
      }
    }
    return p;
  };
  return t;
})();
var oi = (function () {
  function t() {
    this.decoder = new nh();
  }
  t.prototype.decode = function (e, r) {
    if (r === void 0) {
      r = null;
    }
    var n;
    var i;
    if (r != null && r.has(Qn.PURE_BARCODE)) {
      var a = t.extractPureBits(e.getBlackMatrix());
      n = this.decoder.decode(a);
      i = t.NO_POINTS;
    } else {
      var o = new ih(e.getBlackMatrix()).detect();
      n = this.decoder.decode(o.getBits());
      i = o.getPoints();
    }
    var s = n.getRawBytes();
    var c = new je(n.getText(), s, 8 * s.length, i, ei.DATA_MATRIX, ue.currentTimeMillis());
    var l = n.getByteSegments();
    if (l != null) {
      c.putMetadata(ti.BYTE_SEGMENTS, l);
    }
    var f = n.getECLevel();
    if (f != null) {
      c.putMetadata(ti.ERROR_CORRECTION_LEVEL, f);
    }
    return c;
  };
  t.prototype.reset = function () {};
  t.extractPureBits = function (e) {
    var r = e.getTopLeftOnBit();
    var n = e.getBottomRightOnBit();
    if (r == null || n == null) throw new I();
    var i = this.moduleSize(r, e);
    var a = r[1];
    var o = n[1];
    var s = r[0];
    var c = n[0];
    var l = (n[0] - s + 1) / i;
    var f = (n[1] - a + 1) / i;
    if (l <= 0 || f <= 0) throw new I();
    var u = i / 2;
    a += u;
    s += u;
    for (var h = new xt(l, f), d = 0; d < f; d++)
      for (var p = a + d * i, v = 0; v < l; v++)
        if (e.get(s + v * i, p)) {
          h.set(v, d);
        }
    return h;
  };
  t.moduleSize = function (e, r) {
    for (var n = r.getWidth(), i = e[0], a = e[1]; i < n && r.get(i, a); ) i++;
    if (i === n) throw new I();
    var o = i - e[0];
    if (o === 0) throw new I();
    return o;
  };
  t.NO_POINTS = [];
  return t;
})();
var ah = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
(function (t) {
  ah(e, t);
  function e(r) {
    if (r === void 0) {
      r = 500;
    }
    return t(new oi(), r) || this;
  }
  return e;
})(vr);
var nr;
(function (t) {
  t[(t.L = 0)] = 'L';
  t[(t.M = 1)] = 'M';
  t[(t.Q = 2)] = 'Q';
  t[(t.H = 3)] = 'H';
})(nr || (nr = {}));
var oh = (function () {
  function t(e, r, n) {
    this.value = e;
    this.stringValue = r;
    this.bits = n;
    t.FOR_BITS.set(n, this);
    t.FOR_VALUE.set(e, this);
  }
  t.prototype.getValue = function () {
    return this.value;
  };
  t.prototype.getBits = function () {
    return this.bits;
  };
  t.fromString = function (e) {
    switch (e) {
      case 'L':
        return t.L;
      case 'M':
        return t.M;
      case 'Q':
        return t.Q;
      case 'H':
        return t.H;
      default:
        throw new pt(e + 'not available');
    }
  };
  t.prototype.toString = function () {
    return this.stringValue;
  };
  t.prototype.equals = function (e) {
    if (!(e instanceof t)) return false;
    var r = e;
    return this.value === e.value;
  };
  t.forBits = function (e) {
    if (e < 0 || e >= t.FOR_BITS.size) throw new z();
    return t.FOR_BITS.get(e);
  };
  t.FOR_BITS = new Map();
  t.FOR_VALUE = new Map();
  t.L = new t(nr.L, 'L', 1);
  t.M = new t(nr.M, 'M', 0);
  t.Q = new t(nr.Q, 'Q', 3);
  t.H = new t(nr.H, 'H', 2);
  return t;
})();
var sh = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var ws = (function () {
  function t(e) {
    this.errorCorrectionLevel = oh.forBits((e >> 3) & 3);
    this.dataMask = e & 7;
  }
  t.numBitsDiffering = function (e, r) {
    return Z.bitCount(e ^ r);
  };
  t.decodeFormatInformation = function (e, r) {
    var n = t.doDecodeFormatInformation(e, r);
    return n !== null ? n : t.doDecodeFormatInformation(e ^ t.FORMAT_INFO_MASK_QR, r ^ t.FORMAT_INFO_MASK_QR);
  };
  t.doDecodeFormatInformation = function (e, r) {
    var n;
    var i;
    var a = Number.MAX_SAFE_INTEGER;
    var o = 0;
    try {
      for (var s = sh(t.FORMAT_INFO_DECODE_LOOKUP), c = s.next(); !c.done; c = s.next()) {
        var l = c.value;
        var f = c.value[0];
        if (c.value[0] === e || c.value[0] === r) return new t(c.value[1]);
        var u = t.numBitsDiffering(e, c.value[0]);
        if (u < a) {
          o = c.value[1];
          a = u;
        }
        if (e !== r) {
          u = t.numBitsDiffering(r, c.value[0]);
          if (u < a) {
            o = c.value[1];
            a = u;
          }
        }
      }
    } catch (h) {
      n = { error: h };
    } finally {
      try {
        if (c && !c.done && (i = s.return)) {
          i.call(s);
        }
      } finally {
        if (n) throw n.error;
      }
    }
    return a <= 3 ? new t(o) : null;
  };
  t.prototype.getErrorCorrectionLevel = function () {
    return this.errorCorrectionLevel;
  };
  t.prototype.getDataMask = function () {
    return this.dataMask;
  };
  t.prototype.hashCode = function () {
    return (this.errorCorrectionLevel.getBits() << 3) | this.dataMask;
  };
  t.prototype.equals = function (e) {
    if (!(e instanceof t)) return false;
    var r = e;
    return this.errorCorrectionLevel === e.errorCorrectionLevel && this.dataMask === e.dataMask;
  };
  t.FORMAT_INFO_MASK_QR = 21522;
  t.FORMAT_INFO_DECODE_LOOKUP = [
    Int32Array.from([21522, 0]),
    Int32Array.from([20773, 1]),
    Int32Array.from([24188, 2]),
    Int32Array.from([23371, 3]),
    Int32Array.from([17913, 4]),
    Int32Array.from([16590, 5]),
    Int32Array.from([20375, 6]),
    Int32Array.from([19104, 7]),
    Int32Array.from([30660, 8]),
    Int32Array.from([29427, 9]),
    Int32Array.from([32170, 10]),
    Int32Array.from([30877, 11]),
    Int32Array.from([26159, 12]),
    Int32Array.from([25368, 13]),
    Int32Array.from([27713, 14]),
    Int32Array.from([26998, 15]),
    Int32Array.from([5769, 16]),
    Int32Array.from([5054, 17]),
    Int32Array.from([7399, 18]),
    Int32Array.from([6608, 19]),
    Int32Array.from([1890, 20]),
    Int32Array.from([597, 21]),
    Int32Array.from([3340, 22]),
    Int32Array.from([2107, 23]),
    Int32Array.from([13663, 24]),
    Int32Array.from([12392, 25]),
    Int32Array.from([16177, 26]),
    Int32Array.from([14854, 27]),
    Int32Array.from([9396, 28]),
    Int32Array.from([8579, 29]),
    Int32Array.from([11994, 30]),
    Int32Array.from([11245, 31]),
  ];
  return t;
})();
var ch = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var E = (function () {
  function t(e) {
    for (var r = [], n = 1; n < arguments.length; n++) r[n - 1] = arguments[n];
    this.ecCodewordsPerBlock = e;
    this.ecBlocks = r;
  }
  t.prototype.getECCodewordsPerBlock = function () {
    return this.ecCodewordsPerBlock;
  };
  t.prototype.getNumBlocks = function () {
    var e;
    var r;
    var n = 0;
    var i = this.ecBlocks;
    try {
      for (var a = ch(this.ecBlocks), o = a.next(); !o.done; o = a.next()) {
        var s = o.value;
        n += o.value.getCount();
      }
    } catch (c) {
      e = { error: c };
    } finally {
      try {
        if (o && !o.done && (r = a.return)) {
          r.call(a);
        }
      } finally {
        if (e) throw e.error;
      }
    }
    return n;
  };
  t.prototype.getTotalECCodewords = function () {
    return this.ecCodewordsPerBlock * this.getNumBlocks();
  };
  t.prototype.getECBlocks = function () {
    return this.ecBlocks;
  };
  return t;
})();
var m = (function () {
  function t(e, r) {
    this.count = e;
    this.dataCodewords = r;
  }
  t.prototype.getCount = function () {
    return this.count;
  };
  t.prototype.getDataCodewords = function () {
    return this.dataCodewords;
  };
  return t;
})();
var lh = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Jt = (function () {
  function t(e, r) {
    for (var n, i, a = [], o = 2; o < arguments.length; o++) a[o - 2] = arguments[o];
    this.versionNumber = e;
    this.alignmentPatternCenters = r;
    this.ecBlocks = a;
    var s = 0;
    var c = a[0].getECCodewordsPerBlock();
    var l = a[0].getECBlocks();
    try {
      for (var f = lh(l), u = f.next(); !u.done; u = f.next()) {
        var h = u.value;
        s += u.value.getCount() * (u.value.getDataCodewords() + c);
      }
    } catch (d) {
      n = { error: d };
    } finally {
      try {
        if (u && !u.done && (i = f.return)) {
          i.call(f);
        }
      } finally {
        if (n) throw n.error;
      }
    }
    this.totalCodewords = s;
  }
  t.prototype.getVersionNumber = function () {
    return this.versionNumber;
  };
  t.prototype.getAlignmentPatternCenters = function () {
    return this.alignmentPatternCenters;
  };
  t.prototype.getTotalCodewords = function () {
    return this.totalCodewords;
  };
  t.prototype.getDimensionForVersion = function () {
    return 17 + 4 * this.versionNumber;
  };
  t.prototype.getECBlocksForLevel = function (e) {
    return this.ecBlocks[e.getValue()];
  };
  t.getProvisionalVersionForDimension = function (e) {
    if (e % 4 !== 1) throw new M();
    try {
      return this.getVersionForNumber((e - 17) / 4);
    } catch {
      throw new M();
    }
  };
  t.getVersionForNumber = function (e) {
    if (e < 1 || e > 40) throw new z();
    return t.VERSIONS[e - 1];
  };
  t.decodeVersionInformation = function (e) {
    for (var r = Number.MAX_SAFE_INTEGER, n = 0, i = 0; i < t.VERSION_DECODE_INFO.length; i++) {
      var a = t.VERSION_DECODE_INFO[i];
      if (t.VERSION_DECODE_INFO[i] === e) return t.getVersionForNumber(i + 7);
      var o = ws.numBitsDiffering(e, t.VERSION_DECODE_INFO[i]);
      if (o < r) {
        n = i + 7;
        r = o;
      }
    }
    return r <= 3 ? t.getVersionForNumber(n) : null;
  };
  t.prototype.buildFunctionPattern = function () {
    var e = this.getDimensionForVersion();
    var r = new xt(e);
    r.setRegion(0, 0, 9, 9);
    r.setRegion(e - 8, 0, 8, 9);
    r.setRegion(0, e - 8, 9, 8);
    for (var n = this.alignmentPatternCenters.length, i = 0; i < n; i++)
      for (var a = this.alignmentPatternCenters[i] - 2, o = 0; o < n; o++)
        if (!((i === 0 && (o === 0 || o === n - 1)) || (i === n - 1 && o === 0))) {
          r.setRegion(this.alignmentPatternCenters[o] - 2, a, 5, 5);
        }
    r.setRegion(6, 9, 1, e - 17);
    r.setRegion(9, 6, e - 17, 1);
    if (this.versionNumber > 6) {
      r.setRegion(e - 11, 0, 3, 6);
      r.setRegion(0, e - 11, 6, 3);
    }
    return r;
  };
  t.prototype.toString = function () {
    return '' + this.versionNumber;
  };
  t.VERSION_DECODE_INFO = Int32Array.from([
    31892, 34236, 39577, 42195, 48118, 51042, 55367, 58893, 63784, 68472, 70749, 76311, 79154, 84390, 87683, 92361,
    96236, 102084, 102881, 110507, 110734, 117786, 119615, 126325, 127568, 133589, 136944, 141498, 145311, 150283,
    152622, 158308, 161089, 167017,
  ]);
  t.VERSIONS = [
    new t(
      1,
      new Int32Array(0),
      new E(7, new m(1, 19)),
      new E(10, new m(1, 16)),
      new E(13, new m(1, 13)),
      new E(17, new m(1, 9)),
    ),
    new t(
      2,
      Int32Array.from([6, 18]),
      new E(10, new m(1, 34)),
      new E(16, new m(1, 28)),
      new E(22, new m(1, 22)),
      new E(28, new m(1, 16)),
    ),
    new t(
      3,
      Int32Array.from([6, 22]),
      new E(15, new m(1, 55)),
      new E(26, new m(1, 44)),
      new E(18, new m(2, 17)),
      new E(22, new m(2, 13)),
    ),
    new t(
      4,
      Int32Array.from([6, 26]),
      new E(20, new m(1, 80)),
      new E(18, new m(2, 32)),
      new E(26, new m(2, 24)),
      new E(16, new m(4, 9)),
    ),
    new t(
      5,
      Int32Array.from([6, 30]),
      new E(26, new m(1, 108)),
      new E(24, new m(2, 43)),
      new E(18, new m(2, 15), new m(2, 16)),
      new E(22, new m(2, 11), new m(2, 12)),
    ),
    new t(
      6,
      Int32Array.from([6, 34]),
      new E(18, new m(2, 68)),
      new E(16, new m(4, 27)),
      new E(24, new m(4, 19)),
      new E(28, new m(4, 15)),
    ),
    new t(
      7,
      Int32Array.from([6, 22, 38]),
      new E(20, new m(2, 78)),
      new E(18, new m(4, 31)),
      new E(18, new m(2, 14), new m(4, 15)),
      new E(26, new m(4, 13), new m(1, 14)),
    ),
    new t(
      8,
      Int32Array.from([6, 24, 42]),
      new E(24, new m(2, 97)),
      new E(22, new m(2, 38), new m(2, 39)),
      new E(22, new m(4, 18), new m(2, 19)),
      new E(26, new m(4, 14), new m(2, 15)),
    ),
    new t(
      9,
      Int32Array.from([6, 26, 46]),
      new E(30, new m(2, 116)),
      new E(22, new m(3, 36), new m(2, 37)),
      new E(20, new m(4, 16), new m(4, 17)),
      new E(24, new m(4, 12), new m(4, 13)),
    ),
    new t(
      10,
      Int32Array.from([6, 28, 50]),
      new E(18, new m(2, 68), new m(2, 69)),
      new E(26, new m(4, 43), new m(1, 44)),
      new E(24, new m(6, 19), new m(2, 20)),
      new E(28, new m(6, 15), new m(2, 16)),
    ),
    new t(
      11,
      Int32Array.from([6, 30, 54]),
      new E(20, new m(4, 81)),
      new E(30, new m(1, 50), new m(4, 51)),
      new E(28, new m(4, 22), new m(4, 23)),
      new E(24, new m(3, 12), new m(8, 13)),
    ),
    new t(
      12,
      Int32Array.from([6, 32, 58]),
      new E(24, new m(2, 92), new m(2, 93)),
      new E(22, new m(6, 36), new m(2, 37)),
      new E(26, new m(4, 20), new m(6, 21)),
      new E(28, new m(7, 14), new m(4, 15)),
    ),
    new t(
      13,
      Int32Array.from([6, 34, 62]),
      new E(26, new m(4, 107)),
      new E(22, new m(8, 37), new m(1, 38)),
      new E(24, new m(8, 20), new m(4, 21)),
      new E(22, new m(12, 11), new m(4, 12)),
    ),
    new t(
      14,
      Int32Array.from([6, 26, 46, 66]),
      new E(30, new m(3, 115), new m(1, 116)),
      new E(24, new m(4, 40), new m(5, 41)),
      new E(20, new m(11, 16), new m(5, 17)),
      new E(24, new m(11, 12), new m(5, 13)),
    ),
    new t(
      15,
      Int32Array.from([6, 26, 48, 70]),
      new E(22, new m(5, 87), new m(1, 88)),
      new E(24, new m(5, 41), new m(5, 42)),
      new E(30, new m(5, 24), new m(7, 25)),
      new E(24, new m(11, 12), new m(7, 13)),
    ),
    new t(
      16,
      Int32Array.from([6, 26, 50, 74]),
      new E(24, new m(5, 98), new m(1, 99)),
      new E(28, new m(7, 45), new m(3, 46)),
      new E(24, new m(15, 19), new m(2, 20)),
      new E(30, new m(3, 15), new m(13, 16)),
    ),
    new t(
      17,
      Int32Array.from([6, 30, 54, 78]),
      new E(28, new m(1, 107), new m(5, 108)),
      new E(28, new m(10, 46), new m(1, 47)),
      new E(28, new m(1, 22), new m(15, 23)),
      new E(28, new m(2, 14), new m(17, 15)),
    ),
    new t(
      18,
      Int32Array.from([6, 30, 56, 82]),
      new E(30, new m(5, 120), new m(1, 121)),
      new E(26, new m(9, 43), new m(4, 44)),
      new E(28, new m(17, 22), new m(1, 23)),
      new E(28, new m(2, 14), new m(19, 15)),
    ),
    new t(
      19,
      Int32Array.from([6, 30, 58, 86]),
      new E(28, new m(3, 113), new m(4, 114)),
      new E(26, new m(3, 44), new m(11, 45)),
      new E(26, new m(17, 21), new m(4, 22)),
      new E(26, new m(9, 13), new m(16, 14)),
    ),
    new t(
      20,
      Int32Array.from([6, 34, 62, 90]),
      new E(28, new m(3, 107), new m(5, 108)),
      new E(26, new m(3, 41), new m(13, 42)),
      new E(30, new m(15, 24), new m(5, 25)),
      new E(28, new m(15, 15), new m(10, 16)),
    ),
    new t(
      21,
      Int32Array.from([6, 28, 50, 72, 94]),
      new E(28, new m(4, 116), new m(4, 117)),
      new E(26, new m(17, 42)),
      new E(28, new m(17, 22), new m(6, 23)),
      new E(30, new m(19, 16), new m(6, 17)),
    ),
    new t(
      22,
      Int32Array.from([6, 26, 50, 74, 98]),
      new E(28, new m(2, 111), new m(7, 112)),
      new E(28, new m(17, 46)),
      new E(30, new m(7, 24), new m(16, 25)),
      new E(24, new m(34, 13)),
    ),
    new t(
      23,
      Int32Array.from([6, 30, 54, 78, 102]),
      new E(30, new m(4, 121), new m(5, 122)),
      new E(28, new m(4, 47), new m(14, 48)),
      new E(30, new m(11, 24), new m(14, 25)),
      new E(30, new m(16, 15), new m(14, 16)),
    ),
    new t(
      24,
      Int32Array.from([6, 28, 54, 80, 106]),
      new E(30, new m(6, 117), new m(4, 118)),
      new E(28, new m(6, 45), new m(14, 46)),
      new E(30, new m(11, 24), new m(16, 25)),
      new E(30, new m(30, 16), new m(2, 17)),
    ),
    new t(
      25,
      Int32Array.from([6, 32, 58, 84, 110]),
      new E(26, new m(8, 106), new m(4, 107)),
      new E(28, new m(8, 47), new m(13, 48)),
      new E(30, new m(7, 24), new m(22, 25)),
      new E(30, new m(22, 15), new m(13, 16)),
    ),
    new t(
      26,
      Int32Array.from([6, 30, 58, 86, 114]),
      new E(28, new m(10, 114), new m(2, 115)),
      new E(28, new m(19, 46), new m(4, 47)),
      new E(28, new m(28, 22), new m(6, 23)),
      new E(30, new m(33, 16), new m(4, 17)),
    ),
    new t(
      27,
      Int32Array.from([6, 34, 62, 90, 118]),
      new E(30, new m(8, 122), new m(4, 123)),
      new E(28, new m(22, 45), new m(3, 46)),
      new E(30, new m(8, 23), new m(26, 24)),
      new E(30, new m(12, 15), new m(28, 16)),
    ),
    new t(
      28,
      Int32Array.from([6, 26, 50, 74, 98, 122]),
      new E(30, new m(3, 117), new m(10, 118)),
      new E(28, new m(3, 45), new m(23, 46)),
      new E(30, new m(4, 24), new m(31, 25)),
      new E(30, new m(11, 15), new m(31, 16)),
    ),
    new t(
      29,
      Int32Array.from([6, 30, 54, 78, 102, 126]),
      new E(30, new m(7, 116), new m(7, 117)),
      new E(28, new m(21, 45), new m(7, 46)),
      new E(30, new m(1, 23), new m(37, 24)),
      new E(30, new m(19, 15), new m(26, 16)),
    ),
    new t(
      30,
      Int32Array.from([6, 26, 52, 78, 104, 130]),
      new E(30, new m(5, 115), new m(10, 116)),
      new E(28, new m(19, 47), new m(10, 48)),
      new E(30, new m(15, 24), new m(25, 25)),
      new E(30, new m(23, 15), new m(25, 16)),
    ),
    new t(
      31,
      Int32Array.from([6, 30, 56, 82, 108, 134]),
      new E(30, new m(13, 115), new m(3, 116)),
      new E(28, new m(2, 46), new m(29, 47)),
      new E(30, new m(42, 24), new m(1, 25)),
      new E(30, new m(23, 15), new m(28, 16)),
    ),
    new t(
      32,
      Int32Array.from([6, 34, 60, 86, 112, 138]),
      new E(30, new m(17, 115)),
      new E(28, new m(10, 46), new m(23, 47)),
      new E(30, new m(10, 24), new m(35, 25)),
      new E(30, new m(19, 15), new m(35, 16)),
    ),
    new t(
      33,
      Int32Array.from([6, 30, 58, 86, 114, 142]),
      new E(30, new m(17, 115), new m(1, 116)),
      new E(28, new m(14, 46), new m(21, 47)),
      new E(30, new m(29, 24), new m(19, 25)),
      new E(30, new m(11, 15), new m(46, 16)),
    ),
    new t(
      34,
      Int32Array.from([6, 34, 62, 90, 118, 146]),
      new E(30, new m(13, 115), new m(6, 116)),
      new E(28, new m(14, 46), new m(23, 47)),
      new E(30, new m(44, 24), new m(7, 25)),
      new E(30, new m(59, 16), new m(1, 17)),
    ),
    new t(
      35,
      Int32Array.from([6, 30, 54, 78, 102, 126, 150]),
      new E(30, new m(12, 121), new m(7, 122)),
      new E(28, new m(12, 47), new m(26, 48)),
      new E(30, new m(39, 24), new m(14, 25)),
      new E(30, new m(22, 15), new m(41, 16)),
    ),
    new t(
      36,
      Int32Array.from([6, 24, 50, 76, 102, 128, 154]),
      new E(30, new m(6, 121), new m(14, 122)),
      new E(28, new m(6, 47), new m(34, 48)),
      new E(30, new m(46, 24), new m(10, 25)),
      new E(30, new m(2, 15), new m(64, 16)),
    ),
    new t(
      37,
      Int32Array.from([6, 28, 54, 80, 106, 132, 158]),
      new E(30, new m(17, 122), new m(4, 123)),
      new E(28, new m(29, 46), new m(14, 47)),
      new E(30, new m(49, 24), new m(10, 25)),
      new E(30, new m(24, 15), new m(46, 16)),
    ),
    new t(
      38,
      Int32Array.from([6, 32, 58, 84, 110, 136, 162]),
      new E(30, new m(4, 122), new m(18, 123)),
      new E(28, new m(13, 46), new m(32, 47)),
      new E(30, new m(48, 24), new m(14, 25)),
      new E(30, new m(42, 15), new m(32, 16)),
    ),
    new t(
      39,
      Int32Array.from([6, 26, 54, 82, 110, 138, 166]),
      new E(30, new m(20, 117), new m(4, 118)),
      new E(28, new m(40, 47), new m(7, 48)),
      new E(30, new m(43, 24), new m(22, 25)),
      new E(30, new m(10, 15), new m(67, 16)),
    ),
    new t(
      40,
      Int32Array.from([6, 30, 58, 86, 114, 142, 170]),
      new E(30, new m(19, 118), new m(6, 119)),
      new E(28, new m(18, 47), new m(31, 48)),
      new E(30, new m(34, 24), new m(34, 25)),
      new E(30, new m(20, 15), new m(61, 16)),
    ),
  ];
  return t;
})();
var De;
(function (t) {
  t[(t.DATA_MASK_000 = 0)] = 'DATA_MASK_000';
  t[(t.DATA_MASK_001 = 1)] = 'DATA_MASK_001';
  t[(t.DATA_MASK_010 = 2)] = 'DATA_MASK_010';
  t[(t.DATA_MASK_011 = 3)] = 'DATA_MASK_011';
  t[(t.DATA_MASK_100 = 4)] = 'DATA_MASK_100';
  t[(t.DATA_MASK_101 = 5)] = 'DATA_MASK_101';
  t[(t.DATA_MASK_110 = 6)] = 'DATA_MASK_110';
  t[(t.DATA_MASK_111 = 7)] = 'DATA_MASK_111';
})(De || (De = {}));
var Va = (function () {
  function t(e, r) {
    this.value = e;
    this.isMasked = r;
  }
  t.prototype.unmaskBitMatrix = function (e, r) {
    for (var n = 0; n < r; n++)
      for (var i = 0; i < r; i++)
        if (this.isMasked(n, i)) {
          e.flip(i, n);
        }
  };
  t.values = new Map([
    [
      De.DATA_MASK_000,
      new t(De.DATA_MASK_000, function (e, r) {
        return ((e + r) & 1) === 0;
      }),
    ],
    [
      De.DATA_MASK_001,
      new t(De.DATA_MASK_001, function (e, r) {
        return (e & 1) === 0;
      }),
    ],
    [
      De.DATA_MASK_010,
      new t(De.DATA_MASK_010, function (e, r) {
        return r % 3 === 0;
      }),
    ],
    [
      De.DATA_MASK_011,
      new t(De.DATA_MASK_011, function (e, r) {
        return (e + r) % 3 === 0;
      }),
    ],
    [
      De.DATA_MASK_100,
      new t(De.DATA_MASK_100, function (e, r) {
        return ((Math.floor(e / 2) + Math.floor(r / 3)) & 1) === 0;
      }),
    ],
    [
      De.DATA_MASK_101,
      new t(De.DATA_MASK_101, function (e, r) {
        return (e * r) % 6 === 0;
      }),
    ],
    [
      De.DATA_MASK_110,
      new t(De.DATA_MASK_110, function (e, r) {
        return (e * r) % 6 < 3;
      }),
    ],
    [
      De.DATA_MASK_111,
      new t(De.DATA_MASK_111, function (e, r) {
        return ((e + r + ((e * r) % 3)) & 1) === 0;
      }),
    ],
  ]);
  return t;
})();
var fh = (function () {
  function t(e) {
    var r = e.getHeight();
    if (r < 21 || (r & 3) !== 1) throw new M();
    this.bitMatrix = e;
  }
  t.prototype.readFormatInformation = function () {
    if (this.parsedFormatInfo !== null && this.parsedFormatInfo !== void 0) return this.parsedFormatInfo;
    for (var e = 0, r = 0; r < 6; r++) e = this.copyBit(r, 8, e);
    e = this.copyBit(7, 8, e);
    e = this.copyBit(8, 8, e);
    e = this.copyBit(8, 7, e);
    for (var n = 5; n >= 0; n--) e = this.copyBit(8, n, e);
    for (var i = this.bitMatrix.getHeight(), a = 0, o = i - 7, n = i - 1; n >= o; n--) a = this.copyBit(8, n, a);
    for (var r = i - 8; r < i; r++) a = this.copyBit(r, 8, a);
    this.parsedFormatInfo = ws.decodeFormatInformation(e, a);
    if (this.parsedFormatInfo !== null) return this.parsedFormatInfo;
    throw new M();
  };
  t.prototype.readVersion = function () {
    if (this.parsedVersion !== null && this.parsedVersion !== void 0) return this.parsedVersion;
    var e = this.bitMatrix.getHeight();
    var r = Math.floor((e - 17) / 4);
    if (r <= 6) return Jt.getVersionForNumber(r);
    for (var n = 0, i = e - 11, a = 5; a >= 0; a--) for (var o = e - 9; o >= i; o--) n = this.copyBit(o, a, n);
    var s = Jt.decodeVersionInformation(n);
    if (s !== null && s.getDimensionForVersion() === e) {
      this.parsedVersion = s;
      return s;
    }
    n = 0;
    for (var o = 5; o >= 0; o--) for (var a = e - 9; a >= i; a--) n = this.copyBit(o, a, n);
    s = Jt.decodeVersionInformation(n);
    if (s !== null && s.getDimensionForVersion() === e) {
      this.parsedVersion = s;
      return s;
    }
    throw new M();
  };
  t.prototype.copyBit = function (e, r, n) {
    var i = this.isMirror ? this.bitMatrix.get(r, e) : this.bitMatrix.get(e, r);
    return i ? (n << 1) | 1 : n << 1;
  };
  t.prototype.readCodewords = function () {
    var e = this.readFormatInformation();
    var r = this.readVersion();
    var n = Va.values.get(e.getDataMask());
    var i = this.bitMatrix.getHeight();
    n.unmaskBitMatrix(this.bitMatrix, i);
    for (
      var a = r.buildFunctionPattern(),
        o = true,
        s = new Uint8Array(r.getTotalCodewords()),
        c = 0,
        l = 0,
        f = 0,
        u = i - 1;
      u > 0;
      u -= 2
    ) {
      if (u === 6) {
        u--;
      }
      for (var h = 0; h < i; h++)
        for (var d = o ? i - 1 - h : h, p = 0; p < 2; p++)
          if (!a.get(u - p, d)) {
            f++;
            l <<= 1;
            if (this.bitMatrix.get(u - p, d)) {
              l |= 1;
            }
            if (f === 8) {
              s[c++] = l;
              f = 0;
              l = 0;
            }
          }
      o = !o;
    }
    if (c !== r.getTotalCodewords()) throw new M();
    return s;
  };
  t.prototype.remask = function () {
    if (this.parsedFormatInfo !== null) {
      var e = Va.values.get(this.parsedFormatInfo.getDataMask());
      var r = this.bitMatrix.getHeight();
      e.unmaskBitMatrix(this.bitMatrix, r);
    }
  };
  t.prototype.setMirror = function (e) {
    this.parsedVersion = null;
    this.parsedFormatInfo = null;
    this.isMirror = e;
  };
  t.prototype.mirror = function () {
    for (var e = this.bitMatrix, r = 0, n = e.getWidth(); r < n; r++)
      for (var i = r + 1, a = e.getHeight(); i < a; i++)
        if (e.get(r, i) !== e.get(i, r)) {
          e.flip(i, r);
          e.flip(r, i);
        }
  };
  return t;
})();
var Ga = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var uh = (function () {
  function t(e, r) {
    this.numDataCodewords = e;
    this.codewords = r;
  }
  t.getDataBlocks = function (e, r, n) {
    var i;
    var a;
    var o;
    var s;
    if (e.length !== r.getTotalCodewords()) throw new z();
    var c = r.getECBlocksForLevel(n);
    var l = 0;
    var f = c.getECBlocks();
    try {
      for (var u = Ga(f), h = u.next(); !h.done; h = u.next()) {
        var d = h.value;
        l += h.value.getCount();
      }
    } catch (k) {
      i = { error: k };
    } finally {
      try {
        if (h && !h.done && (a = u.return)) {
          a.call(u);
        }
      } finally {
        if (i) throw i.error;
      }
    }
    var p = new Array(l);
    var v = 0;
    try {
      for (var g = Ga(f), _ = g.next(); !_.done; _ = g.next())
        for (var d = _.value, y = 0; y < d.getCount(); y++) {
          var x = d.getDataCodewords();
          var w = c.getECCodewordsPerBlock() + x;
          p[v++] = new t(x, new Uint8Array(w));
        }
    } catch (k) {
      o = { error: k };
    } finally {
      try {
        if (_ && !_.done && (s = g.return)) {
          s.call(g);
        }
      } finally {
        if (o) throw o.error;
      }
    }
    for (var C = p[0].codewords.length, S = p.length - 1; S >= 0; ) {
      var T = p[S].codewords.length;
      if (p[S].codewords.length === C) break;
      S--;
    }
    S++;
    for (var D = C - c.getECCodewordsPerBlock(), O = 0, y = 0; y < D; y++)
      for (var R = 0; R < v; R++) p[R].codewords[y] = e[O++];
    for (var R = S; R < v; R++) p[R].codewords[D] = e[O++];
    for (var H = p[0].codewords.length, y = D; y < H; y++)
      for (var R = 0; R < v; R++) {
        var N = R < S ? y : y + 1;
        p[R].codewords[N] = e[O++];
      }
    return p;
  };
  t.prototype.getNumDataCodewords = function () {
    return this.numDataCodewords;
  };
  t.prototype.getCodewords = function () {
    return this.codewords;
  };
  return t;
})();
var ct;
(function (t) {
  t[(t.TERMINATOR = 0)] = 'TERMINATOR';
  t[(t.NUMERIC = 1)] = 'NUMERIC';
  t[(t.ALPHANUMERIC = 2)] = 'ALPHANUMERIC';
  t[(t.STRUCTURED_APPEND = 3)] = 'STRUCTURED_APPEND';
  t[(t.BYTE = 4)] = 'BYTE';
  t[(t.ECI = 5)] = 'ECI';
  t[(t.KANJI = 6)] = 'KANJI';
  t[(t.FNC1_FIRST_POSITION = 7)] = 'FNC1_FIRST_POSITION';
  t[(t.FNC1_SECOND_POSITION = 8)] = 'FNC1_SECOND_POSITION';
  t[(t.HANZI = 9)] = 'HANZI';
})(ct || (ct = {}));
var de = (function () {
  function t(e, r, n, i) {
    this.value = e;
    this.stringValue = r;
    this.characterCountBitsForVersions = n;
    this.bits = i;
    t.FOR_BITS.set(i, this);
    t.FOR_VALUE.set(e, this);
  }
  t.forBits = function (e) {
    var r = t.FOR_BITS.get(e);
    if (r === void 0) throw new z();
    return r;
  };
  t.prototype.getCharacterCountBits = function (e) {
    var r = e.getVersionNumber();
    var n;
    r <= 9 ? (n = 0) : r <= 26 ? (n = 1) : (n = 2);
    return this.characterCountBitsForVersions[n];
  };
  t.prototype.getValue = function () {
    return this.value;
  };
  t.prototype.getBits = function () {
    return this.bits;
  };
  t.prototype.equals = function (e) {
    if (!(e instanceof t)) return false;
    var r = e;
    return this.value === e.value;
  };
  t.prototype.toString = function () {
    return this.stringValue;
  };
  t.FOR_BITS = new Map();
  t.FOR_VALUE = new Map();
  t.TERMINATOR = new t(ct.TERMINATOR, 'TERMINATOR', Int32Array.from([0, 0, 0]), 0);
  t.NUMERIC = new t(ct.NUMERIC, 'NUMERIC', Int32Array.from([10, 12, 14]), 1);
  t.ALPHANUMERIC = new t(ct.ALPHANUMERIC, 'ALPHANUMERIC', Int32Array.from([9, 11, 13]), 2);
  t.STRUCTURED_APPEND = new t(ct.STRUCTURED_APPEND, 'STRUCTURED_APPEND', Int32Array.from([0, 0, 0]), 3);
  t.BYTE = new t(ct.BYTE, 'BYTE', Int32Array.from([8, 16, 16]), 4);
  t.ECI = new t(ct.ECI, 'ECI', Int32Array.from([0, 0, 0]), 7);
  t.KANJI = new t(ct.KANJI, 'KANJI', Int32Array.from([8, 10, 12]), 8);
  t.FNC1_FIRST_POSITION = new t(ct.FNC1_FIRST_POSITION, 'FNC1_FIRST_POSITION', Int32Array.from([0, 0, 0]), 5);
  t.FNC1_SECOND_POSITION = new t(ct.FNC1_SECOND_POSITION, 'FNC1_SECOND_POSITION', Int32Array.from([0, 0, 0]), 9);
  t.HANZI = new t(ct.HANZI, 'HANZI', Int32Array.from([8, 10, 12]), 13);
  return t;
})();
var hh = (function () {
  function t() {}
  t.decode = function (e, r, n, i) {
    var a = new ys(e);
    var o = new K();
    var s = new Array();
    var c = -1;
    var l = -1;
    try {
      var f = null;
      var u = false;
      var h = void 0;
      do {
        if (a.available() < 4) h = de.TERMINATOR;
        else {
          var d = a.readBits(4);
          h = de.forBits(d);
        }
        switch (h) {
          case de.TERMINATOR:
            break;
          case de.FNC1_FIRST_POSITION:
          case de.FNC1_SECOND_POSITION:
            u = true;
            break;
          case de.STRUCTURED_APPEND:
            if (a.available() < 16) throw new M();
            {
              c = a.readBits(8);
              l = a.readBits(8);
            }
            break;
          case de.ECI:
            var p = t.parseECIValue(a);
            {
              f = Ie.getCharacterSetECIByValue(p);
              if (f === null) throw new M();
            }
            break;
          case de.HANZI:
            {
              var v = a.readBits(4);
              var g = a.readBits(h.getCharacterCountBits(r));
            }
            if (v === t.GB2312_SUBSET) {
              t.decodeHanziSegment(a, o, g);
            }
            break;
          default:
            var _ = a.readBits(h.getCharacterCountBits(r));
            switch (h) {
              case de.NUMERIC:
                t.decodeNumericSegment(a, o, _);
                break;
              case de.ALPHANUMERIC:
                t.decodeAlphanumericSegment(a, o, _, u);
                break;
              case de.BYTE:
                t.decodeByteSegment(a, o, _, f, s, i);
                break;
              case de.KANJI:
                t.decodeKanjiSegment(a, o, _);
                break;
              default:
                throw new M();
            }
            break;
        }
      } while (h !== de.TERMINATOR);
    } catch {
      throw new M();
    }
    return new Pn(e, o.toString(), s.length === 0 ? null : s, n === null ? null : n.toString(), c, l);
  };
  t.decodeHanziSegment = function (e, r, n) {
    if (n * 13 > e.available()) throw new M();
    for (var i = new Uint8Array(2 * n), a = 0; n > 0; ) {
      var o = e.readBits(13);
      var s = (((o / 96) << 8) & 4294967295) | o % 96;
      s < 959 ? (s += 41377) : (s += 42657);
      i[a] = (s >> 8) & 255;
      i[a + 1] = s & 255;
      a += 2;
      n--;
    }
    try {
      r.append(ut.decode(i, ee.GB2312));
    } catch (c) {
      throw new M(c);
    }
  };
  t.decodeKanjiSegment = function (e, r, n) {
    if (n * 13 > e.available()) throw new M();
    for (var i = new Uint8Array(2 * n), a = 0; n > 0; ) {
      var o = e.readBits(13);
      var s = (((o / 192) << 8) & 4294967295) | o % 192;
      s < 7936 ? (s += 33088) : (s += 49472);
      i[a] = s >> 8;
      i[a + 1] = s;
      a += 2;
      n--;
    }
    try {
      r.append(ut.decode(i, ee.SHIFT_JIS));
    } catch (c) {
      throw new M(c);
    }
  };
  t.decodeByteSegment = function (e, r, n, i, a, o) {
    if (8 * n > e.available()) throw new M();
    for (var s = new Uint8Array(n), c = 0; c < n; c++) s[c] = e.readBits(8);
    var l;
    i === null ? (l = ee.guessEncoding(s, o)) : (l = i.getName());
    try {
      r.append(ut.decode(s, l));
    } catch (f) {
      throw new M(f);
    }
    a.push(s);
  };
  t.toAlphaNumericChar = function (e) {
    if (e >= t.ALPHANUMERIC_CHARS.length) throw new M();
    return t.ALPHANUMERIC_CHARS[e];
  };
  t.decodeAlphanumericSegment = function (e, r, n, i) {
    for (var a = r.length(); n > 1; ) {
      if (e.available() < 11) throw new M();
      var o = e.readBits(11);
      r.append(t.toAlphaNumericChar(Math.floor(o / 45)));
      r.append(t.toAlphaNumericChar(o % 45));
      n -= 2;
    }
    if (n === 1) {
      if (e.available() < 6) throw new M();
      r.append(t.toAlphaNumericChar(e.readBits(6)));
    }
    if (i)
      for (var s = a; s < r.length(); s++)
        if (r.charAt(s) === '%') {
          s < r.length() - 1 && r.charAt(s + 1) === '%' ? r.deleteCharAt(s + 1) : r.setCharAt(s, '\x1D');
        }
  };
  t.decodeNumericSegment = function (e, r, n) {
    for (; n >= 3; ) {
      if (e.available() < 10) throw new M();
      var i = e.readBits(10);
      if (i >= 1000) throw new M();
      r.append(t.toAlphaNumericChar(Math.floor(i / 100)));
      r.append(t.toAlphaNumericChar(Math.floor(i / 10) % 10));
      r.append(t.toAlphaNumericChar(i % 10));
      n -= 3;
    }
    if (n === 2) {
      if (e.available() < 7) throw new M();
      var a = e.readBits(7);
      if (a >= 100) throw new M();
      r.append(t.toAlphaNumericChar(Math.floor(a / 10)));
      r.append(t.toAlphaNumericChar(a % 10));
    } else if (n === 1) {
      if (e.available() < 4) throw new M();
      var o = e.readBits(4);
      if (o >= 10) throw new M();
      r.append(t.toAlphaNumericChar(o));
    }
  };
  t.parseECIValue = function (e) {
    var r = e.readBits(8);
    if ((r & 128) === 0) return r & 127;
    if ((r & 192) === 128) {
      var n = e.readBits(8);
      return (((r & 63) << 8) & 4294967295) | n;
    }
    if ((r & 224) === 192) {
      var i = e.readBits(16);
      return (((r & 31) << 16) & 4294967295) | i;
    }
    throw new M();
  };
  t.ALPHANUMERIC_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';
  t.GB2312_SUBSET = 1;
  return t;
})();
var Es = (function () {
  function t(e) {
    this.mirrored = e;
  }
  t.prototype.isMirrored = function () {
    return this.mirrored;
  };
  t.prototype.applyMirroredCorrection = function (e) {
    if (!(!this.mirrored || e === null || e.length < 3)) {
      var r = e[0];
      e[0] = e[2];
      e[2] = e[0];
    }
  };
  return t;
})();
var Ha = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var dh = (function () {
  function t() {
    this.rsDecoder = new Mn(et.QR_CODE_FIELD_256);
  }
  t.prototype.decodeBooleanArray = function (e, r) {
    return this.decodeBitMatrix(xt.parseFromBooleanArray(e), r);
  };
  t.prototype.decodeBitMatrix = function (e, r) {
    var n = new fh(e);
    var i = null;
    try {
      return this.decodeBitMatrixParser(n, r);
    } catch (o) {
      i = o;
    }
    try {
      n.remask();
      n.setMirror(true);
      n.readVersion();
      n.readFormatInformation();
      n.mirror();
      var a = this.decodeBitMatrixParser(n, r);
      a.setOther(new Es(true));
      return a;
    } catch (o) {
      throw i !== null ? i : o;
    }
  };
  t.prototype.decodeBitMatrixParser = function (e, r) {
    var n;
    var i;
    var a;
    var o;
    var s = e.readVersion();
    var c = e.readFormatInformation().getErrorCorrectionLevel();
    var l = e.readCodewords();
    var f = uh.getDataBlocks(l, s, c);
    var u = 0;
    try {
      for (var h = Ha(f), d = h.next(); !d.done; d = h.next()) {
        var p = d.value;
        u += d.value.getNumDataCodewords();
      }
    } catch (S) {
      n = { error: S };
    } finally {
      try {
        if (d && !d.done && (i = h.return)) {
          i.call(h);
        }
      } finally {
        if (n) throw n.error;
      }
    }
    var v = new Uint8Array(u);
    var g = 0;
    try {
      for (var _ = Ha(f), y = _.next(); !y.done; y = _.next()) {
        var p = y.value;
        var x = y.value.getCodewords();
        var w = y.value.getNumDataCodewords();
        this.correctErrors(x, w);
        for (var C = 0; C < w; C++) v[g++] = x[C];
      }
    } catch (S) {
      a = { error: S };
    } finally {
      try {
        if (y && !y.done && (o = _.return)) {
          o.call(_);
        }
      } finally {
        if (a) throw a.error;
      }
    }
    return hh.decode(v, s, c, r);
  };
  t.prototype.correctErrors = function (e, r) {
    var n = new Int32Array(e);
    try {
      this.rsDecoder.decode(n, e.length - r);
    } catch {
      throw new Me();
    }
    for (var i = 0; i < r; i++) e[i] = n[i];
  };
  return t;
})();
var ph = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var vh = (function (t) {
  ph(e, t);
  function e(r, n, i) {
    var a = t(r, n) || this;
    a.estimatedModuleSize = i;
    return a;
  }
  e.prototype.aboutEquals = function (r, n, i) {
    if (Math.abs(n - this.getY()) <= r && Math.abs(i - this.getX()) <= r) {
      var a = Math.abs(r - this.estimatedModuleSize);
      return a <= 1 || a <= this.estimatedModuleSize;
    }
    return false;
  };
  e.prototype.combineEstimate = function (r, n, i) {
    var a = (this.getX() + n) / 2;
    var o = (this.getY() + r) / 2;
    var s = (this.estimatedModuleSize + i) / 2;
    return new e(a, o, s);
  };
  return e;
})(U);
var gh = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var _h = (function () {
  function t(e, r, n, i, a, o, s) {
    this.image = e;
    this.startX = r;
    this.startY = n;
    this.width = i;
    this.height = a;
    this.moduleSize = o;
    this.resultPointCallback = s;
    this.possibleCenters = [];
    this.crossCheckStateCount = new Int32Array(3);
  }
  t.prototype.find = function () {
    for (
      var e = this.startX,
        r = this.height,
        n = this.width,
        i = e + n,
        a = this.startY + r / 2,
        o = new Int32Array(3),
        s = this.image,
        c = 0;
      c < r;
      c++
    ) {
      var l = a + ((c & 1) === 0 ? Math.floor((c + 1) / 2) : -Math.floor((c + 1) / 2));
      o[0] = 0;
      o[1] = 0;
      o[2] = 0;
      for (var f = e; f < i && !s.get(f, l); ) f++;
      for (var u = 0; f < i; ) {
        if (s.get(f, l))
          if (u === 1) o[1]++;
          else if (u === 2) {
            if (this.foundPatternCross(o)) {
              var h = this.handlePossibleCenter(o, l, f);
              if (h !== null) return h;
            }
            o[0] = o[2];
            o[1] = 1;
            o[2] = 0;
            u = 1;
          } else o[++u]++;
        else {
          if (u === 1) {
            u++;
          }
          o[u]++;
        }
        f++;
      }
      if (this.foundPatternCross(o)) {
        var h = this.handlePossibleCenter(o, l, i);
        if (h !== null) return h;
      }
    }
    if (this.possibleCenters.length !== 0) return this.possibleCenters[0];
    throw new I();
  };
  t.centerFromEnd = function (e, r) {
    return r - e[2] - e[1] / 2;
  };
  t.prototype.foundPatternCross = function (e) {
    for (var r = this.moduleSize, n = r / 2, i = 0; i < 3; i++) if (Math.abs(r - e[i]) >= n) return false;
    return true;
  };
  t.prototype.crossCheckVertical = function (e, r, n, i) {
    var a = this.image;
    var o = this.image.getHeight();
    var s = this.crossCheckStateCount;
    s[0] = 0;
    s[1] = 0;
    s[2] = 0;
    for (var c = e; c >= 0 && this.image.get(r, c) && s[1] <= n; ) {
      s[1]++;
      c--;
    }
    if (c < 0 || s[1] > n) return NaN;
    for (; c >= 0 && !this.image.get(r, c) && s[0] <= n; ) {
      s[0]++;
      c--;
    }
    if (s[0] > n) return NaN;
    for (c = e + 1; c < o && this.image.get(r, c) && s[1] <= n; ) {
      s[1]++;
      c++;
    }
    if (c === o || s[1] > n) return NaN;
    for (; c < o && !this.image.get(r, c) && s[2] <= n; ) {
      s[2]++;
      c++;
    }
    if (s[2] > n) return NaN;
    var l = s[0] + s[1] + s[2];
    return 5 * Math.abs(l - i) >= 2 * i ? NaN : this.foundPatternCross(s) ? t.centerFromEnd(s, c) : NaN;
  };
  t.prototype.handlePossibleCenter = function (e, r, n) {
    var i;
    var a;
    var o = e[0] + e[1] + e[2];
    var s = t.centerFromEnd(e, n);
    var c = this.crossCheckVertical(r, s, 2 * e[1], o);
    if (!isNaN(c)) {
      var l = (e[0] + e[1] + e[2]) / 3;
      try {
        for (var f = gh(this.possibleCenters), u = f.next(); !u.done; u = f.next()) {
          var h = u.value;
          if (u.value.aboutEquals(l, c, s)) return u.value.combineEstimate(c, s, l);
        }
      } catch (p) {
        i = { error: p };
      } finally {
        try {
          if (u && !u.done && (a = f.return)) {
            a.call(f);
          }
        } finally {
          if (i) throw i.error;
        }
      }
      var d = new vh(s, c, l);
      this.possibleCenters.push(d);
      if (this.resultPointCallback !== null && this.resultPointCallback !== void 0) {
        this.resultPointCallback.foundPossibleResultPoint(d);
      }
    }
    return null;
  };
  return t;
})();
var mh = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var xh = (function (t) {
  mh(e, t);
  function e(r, n, i, a) {
    var o = t(r, n) || this;
    o.estimatedModuleSize = i;
    o.count = a;
    if (a === void 0) {
      o.count = 1;
    }
    return o;
  }
  e.prototype.getEstimatedModuleSize = function () {
    return this.estimatedModuleSize;
  };
  e.prototype.getCount = function () {
    return this.count;
  };
  e.prototype.aboutEquals = function (r, n, i) {
    if (Math.abs(n - this.getY()) <= r && Math.abs(i - this.getX()) <= r) {
      var a = Math.abs(r - this.estimatedModuleSize);
      return a <= 1 || a <= this.estimatedModuleSize;
    }
    return false;
  };
  e.prototype.combineEstimate = function (r, n, i) {
    var a = this.count + 1;
    var o = (this.count * this.getX() + n) / a;
    var s = (this.count * this.getY() + r) / a;
    var c = (this.count * this.estimatedModuleSize + i) / a;
    return new e(o, s, c, a);
  };
  return e;
})(U);
var yh = (function () {
  function t(e) {
    this.bottomLeft = e[0];
    this.topLeft = e[1];
    this.topRight = e[2];
  }
  t.prototype.getBottomLeft = function () {
    return this.bottomLeft;
  };
  t.prototype.getTopLeft = function () {
    return this.topLeft;
  };
  t.prototype.getTopRight = function () {
    return this.topRight;
  };
  return t;
})();
var gr = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var wh = (function () {
  function t(e, r) {
    this.image = e;
    this.resultPointCallback = r;
    this.possibleCenters = [];
    this.crossCheckStateCount = new Int32Array(5);
    this.resultPointCallback = r;
  }
  t.prototype.getImage = function () {
    return this.image;
  };
  t.prototype.getPossibleCenters = function () {
    return this.possibleCenters;
  };
  t.prototype.find = function (e) {
    var r = e != null && e.get(Qn.TRY_HARDER) !== void 0;
    var n = e != null && e.get(Qn.PURE_BARCODE) !== void 0;
    var i = this.image;
    var a = this.image.getHeight();
    var o = this.image.getWidth();
    var s = Math.floor((3 * a) / (4 * t.MAX_MODULES));
    if (s < t.MIN_SKIP || r) {
      s = t.MIN_SKIP;
    }
    for (var c = false, l = new Int32Array(5), f = s - 1; f < a && !c; f += s) {
      l[0] = 0;
      l[1] = 0;
      l[2] = 0;
      l[3] = 0;
      l[4] = 0;
      for (var u = 0, h = 0; h < o; h++)
        if (this.image.get(h, f)) {
          if ((u & 1) === 1) {
            u++;
          }
          l[u]++;
        } else if ((u & 1) === 0)
          if (u === 4)
            if (t.foundPatternCross(l)) {
              var d = this.handlePossibleCenter(l, f, h, n);
              if (d === true) {
                s = 2;
                if (this.hasSkipped === true) c = this.haveMultiplyConfirmedCenters();
                else {
                  var p = this.findRowSkip();
                  if (p > l[2]) {
                    f += p - l[2] - s;
                    h = o - 1;
                  }
                }
              } else {
                l[0] = l[2];
                l[1] = l[3];
                l[2] = l[4];
                l[3] = 1;
                l[4] = 0;
                u = 3;
                continue;
              }
              u = 0;
              l[0] = 0;
              l[1] = 0;
              l[2] = 0;
              l[3] = 0;
              l[4] = 0;
            } else {
              l[0] = l[2];
              l[1] = l[3];
              l[2] = l[4];
              l[3] = 1;
              l[4] = 0;
              u = 3;
            }
          else l[++u]++;
        else l[u]++;
      if (t.foundPatternCross(l)) {
        var d = this.handlePossibleCenter(l, f, o, n);
        if (d === true) {
          s = l[0];
          if (this.hasSkipped) {
            c = this.haveMultiplyConfirmedCenters();
          }
        }
      }
    }
    var v = this.selectBestPatterns();
    U.orderBestPatterns(v);
    return new yh(v);
  };
  t.centerFromEnd = function (e, r) {
    return r - e[4] - e[3] - e[2] / 2;
  };
  t.foundPatternCross = function (e) {
    for (var r = 0, n = 0; n < 5; n++) {
      var i = e[n];
      if (e[n] === 0) return false;
      r += e[n];
    }
    if (r < 7) return false;
    var a = r / 7;
    var o = a / 2;
    return (
      Math.abs(a - e[0]) < o &&
      Math.abs(a - e[1]) < o &&
      Math.abs(3 * a - e[2]) < 3 * o &&
      Math.abs(a - e[3]) < o &&
      Math.abs(a - e[4]) < o
    );
  };
  t.prototype.getCrossCheckStateCount = function () {
    var e = this.crossCheckStateCount;
    e[0] = 0;
    e[1] = 0;
    e[2] = 0;
    e[3] = 0;
    e[4] = 0;
    return e;
  };
  t.prototype.crossCheckDiagonal = function (e, r, n, i) {
    for (var a = this.getCrossCheckStateCount(), o = 0, s = this.image; e >= o && r >= o && s.get(r - o, e - o); ) {
      a[2]++;
      o++;
    }
    if (e < o || r < o) return false;
    for (; e >= o && r >= o && !s.get(r - o, e - o) && a[1] <= n; ) {
      a[1]++;
      o++;
    }
    if (e < o || r < o || a[1] > n) return false;
    for (; e >= o && r >= o && s.get(r - o, e - o) && a[0] <= n; ) {
      a[0]++;
      o++;
    }
    if (a[0] > n) return false;
    var c = s.getHeight();
    var l = s.getWidth();
    for (o = 1; e + o < c && r + o < l && s.get(r + o, e + o); ) {
      a[2]++;
      o++;
    }
    if (e + o >= c || r + o >= l) return false;
    for (; e + o < c && r + o < l && !s.get(r + o, e + o) && a[3] < n; ) {
      a[3]++;
      o++;
    }
    if (e + o >= c || r + o >= l || a[3] >= n) return false;
    for (; e + o < c && r + o < l && s.get(r + o, e + o) && a[4] < n; ) {
      a[4]++;
      o++;
    }
    if (a[4] >= n) return false;
    var f = a[0] + a[1] + a[2] + a[3] + a[4];
    return Math.abs(f - i) < 2 * i && t.foundPatternCross(a);
  };
  t.prototype.crossCheckVertical = function (e, r, n, i) {
    for (var a = this.image, o = a.getHeight(), s = this.getCrossCheckStateCount(), c = e; c >= 0 && a.get(r, c); ) {
      s[2]++;
      c--;
    }
    if (c < 0) return NaN;
    for (; c >= 0 && !a.get(r, c) && s[1] <= n; ) {
      s[1]++;
      c--;
    }
    if (c < 0 || s[1] > n) return NaN;
    for (; c >= 0 && a.get(r, c) && s[0] <= n; ) {
      s[0]++;
      c--;
    }
    if (s[0] > n) return NaN;
    for (c = e + 1; c < o && a.get(r, c); ) {
      s[2]++;
      c++;
    }
    if (c === o) return NaN;
    for (; c < o && !a.get(r, c) && s[3] < n; ) {
      s[3]++;
      c++;
    }
    if (c === o || s[3] >= n) return NaN;
    for (; c < o && a.get(r, c) && s[4] < n; ) {
      s[4]++;
      c++;
    }
    if (s[4] >= n) return NaN;
    var l = s[0] + s[1] + s[2] + s[3] + s[4];
    return 5 * Math.abs(l - i) >= 2 * i ? NaN : t.foundPatternCross(s) ? t.centerFromEnd(s, c) : NaN;
  };
  t.prototype.crossCheckHorizontal = function (e, r, n, i) {
    for (var a = this.image, o = a.getWidth(), s = this.getCrossCheckStateCount(), c = e; c >= 0 && a.get(c, r); ) {
      s[2]++;
      c--;
    }
    if (c < 0) return NaN;
    for (; c >= 0 && !a.get(c, r) && s[1] <= n; ) {
      s[1]++;
      c--;
    }
    if (c < 0 || s[1] > n) return NaN;
    for (; c >= 0 && a.get(c, r) && s[0] <= n; ) {
      s[0]++;
      c--;
    }
    if (s[0] > n) return NaN;
    for (c = e + 1; c < o && a.get(c, r); ) {
      s[2]++;
      c++;
    }
    if (c === o) return NaN;
    for (; c < o && !a.get(c, r) && s[3] < n; ) {
      s[3]++;
      c++;
    }
    if (c === o || s[3] >= n) return NaN;
    for (; c < o && a.get(c, r) && s[4] < n; ) {
      s[4]++;
      c++;
    }
    if (s[4] >= n) return NaN;
    var l = s[0] + s[1] + s[2] + s[3] + s[4];
    return 5 * Math.abs(l - i) >= i ? NaN : t.foundPatternCross(s) ? t.centerFromEnd(s, c) : NaN;
  };
  t.prototype.handlePossibleCenter = function (e, r, n, i) {
    var a = e[0] + e[1] + e[2] + e[3] + e[4];
    var o = t.centerFromEnd(e, n);
    var s = this.crossCheckVertical(r, Math.floor(o), e[2], a);
    if (
      !isNaN(s) &&
      ((o = this.crossCheckHorizontal(Math.floor(o), Math.floor(s), e[2], a)),
      !isNaN(o) && (!i || this.crossCheckDiagonal(Math.floor(s), Math.floor(o), e[2], a)))
    ) {
      for (var c = a / 7, l = false, f = this.possibleCenters, u = 0, h = f.length; u < h; u++) {
        var d = f[u];
        if (f[u].aboutEquals(c, s, o)) {
          f[u] = f[u].combineEstimate(s, o, c);
          l = true;
          break;
        }
      }
      if (!l) {
        var p = new xh(o, s, c);
        f.push(p);
        if (this.resultPointCallback !== null && this.resultPointCallback !== void 0) {
          this.resultPointCallback.foundPossibleResultPoint(p);
        }
      }
      return true;
    }
    return false;
  };
  t.prototype.findRowSkip = function () {
    var e;
    var r;
    var n = this.possibleCenters.length;
    if (this.possibleCenters.length <= 1) return 0;
    var i = null;
    try {
      for (var a = gr(this.possibleCenters), o = a.next(); !o.done; o = a.next()) {
        var s = o.value;
        if (o.value.getCount() >= t.CENTER_QUORUM)
          if (i == null) i = o.value;
          else {
            this.hasSkipped = true;
            return Math.floor((Math.abs(i.getX() - o.value.getX()) - Math.abs(i.getY() - o.value.getY())) / 2);
          }
      }
    } catch (c) {
      e = { error: c };
    } finally {
      try {
        if (o && !o.done && (r = a.return)) {
          r.call(a);
        }
      } finally {
        if (e) throw e.error;
      }
    }
    return 0;
  };
  t.prototype.haveMultiplyConfirmedCenters = function () {
    var e;
    var r;
    var n;
    var i;
    var a = 0;
    var o = 0;
    var s = this.possibleCenters.length;
    try {
      for (var c = gr(this.possibleCenters), l = c.next(); !l.done; l = c.next()) {
        var f = l.value;
        if (l.value.getCount() >= t.CENTER_QUORUM) {
          a++;
          o += l.value.getEstimatedModuleSize();
        }
      }
    } catch (v) {
      e = { error: v };
    } finally {
      try {
        if (l && !l.done && (r = c.return)) {
          r.call(c);
        }
      } finally {
        if (e) throw e.error;
      }
    }
    if (a < 3) return false;
    var u = o / this.possibleCenters.length;
    var h = 0;
    try {
      for (var d = gr(this.possibleCenters), p = d.next(); !p.done; p = d.next()) {
        var f = p.value;
        h += Math.abs(p.value.getEstimatedModuleSize() - u);
      }
    } catch (v) {
      n = { error: v };
    } finally {
      try {
        if (p && !p.done && (i = d.return)) {
          i.call(d);
        }
      } finally {
        if (n) throw n.error;
      }
    }
    return h <= 0.05 * o;
  };
  t.prototype.selectBestPatterns = function () {
    var e;
    var r;
    var n;
    var i;
    var a = this.possibleCenters.length;
    if (this.possibleCenters.length < 3) throw new I();
    var o = this.possibleCenters;
    var s;
    if (this.possibleCenters.length > 3) {
      var c = 0;
      var l = 0;
      try {
        for (var f = gr(this.possibleCenters), u = f.next(); !u.done; u = f.next()) {
          var h = u.value;
          var d = u.value.getEstimatedModuleSize();
          c += d;
          l += d * d;
        }
      } catch (C) {
        e = { error: C };
      } finally {
        try {
          if (u && !u.done && (r = f.return)) {
            r.call(f);
          }
        } finally {
          if (e) throw e.error;
        }
      }
      s = c / this.possibleCenters.length;
      var p = Math.sqrt(l / this.possibleCenters.length - s * s);
      o.sort(function (C, S) {
        var T = Math.abs(S.getEstimatedModuleSize() - s);
        var D = Math.abs(C.getEstimatedModuleSize() - s);
        return T < D ? -1 : T > D ? 1 : 0;
      });
      for (var v = Math.max(0.2 * s, p), g = 0; g < o.length && o.length > 3; g++) {
        var _ = o[g];
        if (Math.abs(o[g].getEstimatedModuleSize() - s) > v) {
          o.splice(g, 1);
          g--;
        }
      }
    }
    if (o.length > 3) {
      var c = 0;
      try {
        for (var y = gr(o), x = y.next(); !x.done; x = y.next()) {
          var w = x.value;
          c += x.value.getEstimatedModuleSize();
        }
      } catch (S) {
        n = { error: S };
      } finally {
        try {
          if (x && !x.done && (i = y.return)) {
            i.call(y);
          }
        } finally {
          if (n) throw n.error;
        }
      }
      s = c / o.length;
      o.sort(function (S, T) {
        if (T.getCount() === S.getCount()) {
          var D = Math.abs(T.getEstimatedModuleSize() - s);
          var O = Math.abs(S.getEstimatedModuleSize() - s);
          return D < O ? 1 : D > O ? -1 : 0;
        } else return T.getCount() - S.getCount();
      });
      o.splice(3);
    }
    return [o[0], o[1], o[2]];
  };
  t.CENTER_QUORUM = 2;
  t.MIN_SKIP = 3;
  t.MAX_MODULES = 57;
  return t;
})();
var Eh = (function () {
  function t(e) {
    this.image = e;
  }
  t.prototype.getImage = function () {
    return this.image;
  };
  t.prototype.getResultPointCallback = function () {
    return this.resultPointCallback;
  };
  t.prototype.detect = function (e) {
    this.resultPointCallback = e == null ? null : e.get(Qn.NEED_RESULT_POINT_CALLBACK);
    var r = new wh(this.image, this.resultPointCallback);
    var n = r.find(e);
    return this.processFinderPatternInfo(n);
  };
  t.prototype.processFinderPatternInfo = function (e) {
    var r = e.getTopLeft();
    var n = e.getTopRight();
    var i = e.getBottomLeft();
    var a = this.calculateModuleSize(r, n, i);
    if (a < 1) throw new I('No pattern found in proccess finder.');
    var o = t.computeDimension(r, n, i, a);
    var s = Jt.getProvisionalVersionForDimension(o);
    var c = s.getDimensionForVersion() - 7;
    var l = null;
    if (s.getAlignmentPatternCenters().length > 0)
      for (
        var f = n.getX() - r.getX() + i.getX(),
          u = n.getY() - r.getY() + i.getY(),
          h = 1 - 3 / c,
          d = Math.floor(r.getX() + h * (f - r.getX())),
          p = Math.floor(r.getY() + h * (u - r.getY())),
          v = 4;
        v <= 16;
        v <<= 1
      )
        try {
          l = this.findAlignmentInRegion(a, d, p, v);
          break;
        } catch (x) {
          if (!(x instanceof I)) throw x;
        }
    var g = t.createTransform(r, n, i, l, o);
    var _ = t.sampleGrid(this.image, g, o);
    var y;
    l === null ? (y = [i, r, n]) : (y = [i, r, n, l]);
    return new qi(_, y);
  };
  t.createTransform = function (e, r, n, i, a) {
    var o = a - 3.5;
    var s;
    var c;
    var l;
    var f;
    i !== null
      ? ((s = i.getX()), (c = i.getY()), (l = o - 3), (f = l))
      : ((s = r.getX() - e.getX() + n.getX()), (c = r.getY() - e.getY() + n.getY()), (l = o), (f = o));
    return gs.quadrilateralToQuadrilateral(
      3.5,
      3.5,
      o,
      3.5,
      l,
      f,
      3.5,
      o,
      e.getX(),
      e.getY(),
      r.getX(),
      r.getY(),
      s,
      c,
      n.getX(),
      n.getY(),
    );
  };
  t.sampleGrid = function (e, r, n) {
    var i = Yi.getInstance();
    return i.sampleGridWithTransform(e, n, n, r);
  };
  t.computeDimension = function (e, r, n, i) {
    var a = re.round(U.distance(e, r) / i);
    var o = re.round(U.distance(e, n) / i);
    var s = Math.floor((a + o) / 2) + 7;
    switch (s & 3) {
      case 0:
        s++;
        break;
      case 2:
        s--;
        break;
      case 3:
        throw new I('Dimensions could be not found.');
    }
    return s;
  };
  t.prototype.calculateModuleSize = function (e, r, n) {
    return (this.calculateModuleSizeOneWay(e, r) + this.calculateModuleSizeOneWay(e, n)) / 2;
  };
  t.prototype.calculateModuleSizeOneWay = function (e, r) {
    var n = this.sizeOfBlackWhiteBlackRunBothWays(
      Math.floor(e.getX()),
      Math.floor(e.getY()),
      Math.floor(r.getX()),
      Math.floor(r.getY()),
    );
    var i = this.sizeOfBlackWhiteBlackRunBothWays(
      Math.floor(r.getX()),
      Math.floor(r.getY()),
      Math.floor(e.getX()),
      Math.floor(e.getY()),
    );
    return isNaN(n) ? i / 7 : isNaN(i) ? n / 7 : (n + i) / 14;
  };
  t.prototype.sizeOfBlackWhiteBlackRunBothWays = function (e, r, n, i) {
    var a = this.sizeOfBlackWhiteBlackRun(e, r, n, i);
    var o = 1;
    var s = e - (n - e);
    s < 0
      ? ((o = e / (e - s)), (s = 0))
      : s >= this.image.getWidth() &&
        ((o = (this.image.getWidth() - 1 - e) / (s - e)), (s = this.image.getWidth() - 1));
    var c = Math.floor(r - (i - r) * o);
    o = 1;
    c < 0
      ? ((o = r / (r - c)), (c = 0))
      : c >= this.image.getHeight() &&
        ((o = (this.image.getHeight() - 1 - r) / (c - r)), (c = this.image.getHeight() - 1));
    s = Math.floor(e + (s - e) * o);
    a += this.sizeOfBlackWhiteBlackRun(e, r, s, c);
    return a - 1;
  };
  t.prototype.sizeOfBlackWhiteBlackRun = function (e, r, n, i) {
    var a = Math.abs(i - r) > Math.abs(n - e);
    if (a) {
      var o = e;
      e = r;
      r = o;
      o = n;
      n = i;
      i = o;
    }
    for (
      var s = Math.abs(n - e),
        c = Math.abs(i - r),
        l = -s / 2,
        f = e < n ? 1 : -1,
        u = r < i ? 1 : -1,
        h = 0,
        d = n + f,
        p = e,
        v = r;
      p !== d;
      p += f
    ) {
      var g = a ? v : p;
      var _ = a ? p : v;
      if ((h === 1) === this.image.get(g, _)) {
        if (h === 2) return re.distance(p, v, e, r);
        h++;
      }
      l += c;
      if (l > 0) {
        if (v === i) break;
        v += u;
        l -= s;
      }
    }
    return h === 2 ? re.distance(n + f, i, e, r) : NaN;
  };
  t.prototype.findAlignmentInRegion = function (e, r, n, i) {
    var a = Math.floor(i * e);
    var o = Math.max(0, r - a);
    var s = Math.min(this.image.getWidth() - 1, r + a);
    if (s - o < e * 3) throw new I('Alignment top exceeds estimated module size.');
    var c = Math.max(0, n - a);
    var l = Math.min(this.image.getHeight() - 1, n + a);
    if (l - c < e * 3) throw new I('Alignment bottom exceeds estimated module size.');
    var f = new _h(this.image, o, c, s - o, l - c, e, this.resultPointCallback);
    return f.find();
  };
  return t;
})();
var si = (function () {
  function t() {
    this.decoder = new dh();
  }
  t.prototype.getDecoder = function () {
    return this.decoder;
  };
  t.prototype.decode = function (e, r) {
    var n;
    var i;
    if (r != null && r.get(Qn.PURE_BARCODE) !== void 0) {
      var a = t.extractPureBits(e.getBlackMatrix());
      n = this.decoder.decodeBitMatrix(a, r);
      i = t.NO_POINTS;
    } else {
      var o = new Eh(e.getBlackMatrix()).detect(r);
      n = this.decoder.decodeBitMatrix(o.getBits(), r);
      i = o.getPoints();
    }
    if (n.getOther() instanceof Es) {
      n.getOther().applyMirroredCorrection(i);
    }
    var s = new je(n.getText(), n.getRawBytes(), void 0, i, ei.QR_CODE, void 0);
    var c = n.getByteSegments();
    if (c !== null) {
      s.putMetadata(ti.BYTE_SEGMENTS, c);
    }
    var l = n.getECLevel();
    if (l !== null) {
      s.putMetadata(ti.ERROR_CORRECTION_LEVEL, l);
    }
    if (n.hasStructuredAppend()) {
      s.putMetadata(ti.STRUCTURED_APPEND_SEQUENCE, n.getStructuredAppendSequenceNumber());
      s.putMetadata(ti.STRUCTURED_APPEND_PARITY, n.getStructuredAppendParity());
    }
    return s;
  };
  t.prototype.reset = function () {};
  t.extractPureBits = function (e) {
    var r = e.getTopLeftOnBit();
    var n = e.getBottomRightOnBit();
    if (r === null || n === null) throw new I();
    var i = this.moduleSize(r, e);
    var a = r[1];
    var o = n[1];
    var s = r[0];
    var c = n[0];
    if (s >= c || a >= n[1]) throw new I();
    if (n[1] - a !== c - s && ((c = s + (n[1] - a)), c >= e.getWidth())) throw new I();
    var l = Math.round((c - s + 1) / i);
    var f = Math.round((n[1] - a + 1) / i);
    if (l <= 0 || f <= 0) throw new I();
    if (f !== l) throw new I();
    var u = Math.floor(i / 2);
    a += u;
    s += u;
    var h = s + Math.floor((l - 1) * i) - c;
    if (h > 0) {
      if (h > u) throw new I();
      s -= h;
    }
    var d = a + Math.floor((f - 1) * i) - n[1];
    if (d > 0) {
      if (d > u) throw new I();
      a -= d;
    }
    for (var p = new xt(l, f), v = 0; v < f; v++)
      for (var g = a + Math.floor(v * i), _ = 0; _ < l; _++)
        if (e.get(s + Math.floor(_ * i), g)) {
          p.set(_, v);
        }
    return p;
  };
  t.moduleSize = function (e, r) {
    for (var n = r.getHeight(), i = r.getWidth(), a = e[0], o = e[1], s = true, c = 0; a < i && o < n; ) {
      if (s !== r.get(a, o)) {
        if (++c === 5) break;
        s = !s;
      }
      a++;
      o++;
    }
    if (a === i || o === n) throw new I();
    return (a - e[0]) / 7;
  };
  t.NO_POINTS = new Array();
  return t;
})();
var Ch = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var te = (function () {
  function t() {}
  t.prototype.PDF417Common = function () {};
  t.getBitCountSum = function (e) {
    return re.sum(e);
  };
  t.toIntArray = function (e) {
    var r;
    var n;
    if (e == null || !e.length) return t.EMPTY_INT_ARRAY;
    var i = new Int32Array(e.length);
    var a = 0;
    try {
      for (var o = Ch(e), s = o.next(); !s.done; s = o.next()) {
        var c = s.value;
        i[a++] = s.value;
      }
    } catch (l) {
      r = { error: l };
    } finally {
      try {
        if (s && !s.done && (n = o.return)) {
          n.call(o);
        }
      } finally {
        if (r) throw r.error;
      }
    }
    return i;
  };
  t.getCodeword = function (e) {
    var r = Te.binarySearch(t.SYMBOL_TABLE, e & 262143);
    return r < 0 ? -1 : (t.CODEWORD_TABLE[r] - 1) % t.NUMBER_OF_CODEWORDS;
  };
  t.NUMBER_OF_CODEWORDS = 929;
  t.MAX_CODEWORDS_IN_BARCODE = t.NUMBER_OF_CODEWORDS - 1;
  t.MIN_ROWS_IN_BARCODE = 3;
  t.MAX_ROWS_IN_BARCODE = 90;
  t.MODULES_IN_CODEWORD = 17;
  t.MODULES_IN_STOP_PATTERN = 18;
  t.BARS_IN_MODULE = 8;
  t.EMPTY_INT_ARRAY = new Int32Array([]);
  t.SYMBOL_TABLE = Int32Array.from([
    66142, 66170, 66206, 66236, 66290, 66292, 66350, 66382, 66396, 66454, 66470, 66476, 66594, 66600, 66614, 66626,
    66628, 66632, 66640, 66654, 66662, 66668, 66682, 66690, 66718, 66720, 66748, 66758, 66776, 66798, 66802, 66804,
    66820, 66824, 66832, 66846, 66848, 66876, 66880, 66936, 66950, 66956, 66968, 66992, 67006, 67022, 67036, 67042,
    67044, 67048, 67062, 67118, 67150, 67164, 67214, 67228, 67256, 67294, 67322, 67350, 67366, 67372, 67398, 67404,
    67416, 67438, 67474, 67476, 67490, 67492, 67496, 67510, 67618, 67624, 67650, 67656, 67664, 67678, 67686, 67692,
    67706, 67714, 67716, 67728, 67742, 67744, 67772, 67782, 67788, 67800, 67822, 67826, 67828, 67842, 67848, 67870,
    67872, 67900, 67904, 67960, 67974, 67992, 68016, 68030, 68046, 68060, 68066, 68068, 68072, 68086, 68104, 68112,
    68126, 68128, 68156, 68160, 68216, 68336, 68358, 68364, 68376, 68400, 68414, 68448, 68476, 68494, 68508, 68536,
    68546, 68548, 68552, 68560, 68574, 68582, 68588, 68654, 68686, 68700, 68706, 68708, 68712, 68726, 68750, 68764,
    68792, 68802, 68804, 68808, 68816, 68830, 68838, 68844, 68858, 68878, 68892, 68920, 68976, 68990, 68994, 68996,
    69000, 69008, 69022, 69024, 69052, 69062, 69068, 69080, 69102, 69106, 69108, 69142, 69158, 69164, 69190, 69208,
    69230, 69254, 69260, 69272, 69296, 69310, 69326, 69340, 69386, 69394, 69396, 69410, 69416, 69430, 69442, 69444,
    69448, 69456, 69470, 69478, 69484, 69554, 69556, 69666, 69672, 69698, 69704, 69712, 69726, 69754, 69762, 69764,
    69776, 69790, 69792, 69820, 69830, 69836, 69848, 69870, 69874, 69876, 69890, 69918, 69920, 69948, 69952, 70008,
    70022, 70040, 70064, 70078, 70094, 70108, 70114, 70116, 70120, 70134, 70152, 70174, 70176, 70264, 70384, 70412,
    70448, 70462, 70496, 70524, 70542, 70556, 70584, 70594, 70600, 70608, 70622, 70630, 70636, 70664, 70672, 70686,
    70688, 70716, 70720, 70776, 70896, 71136, 71180, 71192, 71216, 71230, 71264, 71292, 71360, 71416, 71452, 71480,
    71536, 71550, 71554, 71556, 71560, 71568, 71582, 71584, 71612, 71622, 71628, 71640, 71662, 71726, 71732, 71758,
    71772, 71778, 71780, 71784, 71798, 71822, 71836, 71864, 71874, 71880, 71888, 71902, 71910, 71916, 71930, 71950,
    71964, 71992, 72048, 72062, 72066, 72068, 72080, 72094, 72096, 72124, 72134, 72140, 72152, 72174, 72178, 72180,
    72206, 72220, 72248, 72304, 72318, 72416, 72444, 72456, 72464, 72478, 72480, 72508, 72512, 72568, 72588, 72600,
    72624, 72638, 72654, 72668, 72674, 72676, 72680, 72694, 72726, 72742, 72748, 72774, 72780, 72792, 72814, 72838,
    72856, 72880, 72894, 72910, 72924, 72930, 72932, 72936, 72950, 72966, 72972, 72984, 73008, 73022, 73056, 73084,
    73102, 73116, 73144, 73156, 73160, 73168, 73182, 73190, 73196, 73210, 73226, 73234, 73236, 73250, 73252, 73256,
    73270, 73282, 73284, 73296, 73310, 73318, 73324, 73346, 73348, 73352, 73360, 73374, 73376, 73404, 73414, 73420,
    73432, 73454, 73498, 73518, 73522, 73524, 73550, 73564, 73570, 73572, 73576, 73590, 73800, 73822, 73858, 73860,
    73872, 73886, 73888, 73916, 73944, 73970, 73972, 73992, 74014, 74016, 74044, 74048, 74104, 74118, 74136, 74160,
    74174, 74210, 74212, 74216, 74230, 74244, 74256, 74270, 74272, 74360, 74480, 74502, 74508, 74544, 74558, 74592,
    74620, 74638, 74652, 74680, 74690, 74696, 74704, 74726, 74732, 74782, 74784, 74812, 74992, 75232, 75288, 75326,
    75360, 75388, 75456, 75512, 75576, 75632, 75646, 75650, 75652, 75664, 75678, 75680, 75708, 75718, 75724, 75736,
    75758, 75808, 75836, 75840, 75896, 76016, 76256, 76736, 76824, 76848, 76862, 76896, 76924, 76992, 77048, 77296,
    77340, 77368, 77424, 77438, 77536, 77564, 77572, 77576, 77584, 77600, 77628, 77632, 77688, 77702, 77708, 77720,
    77744, 77758, 77774, 77788, 77870, 77902, 77916, 77922, 77928, 77966, 77980, 78008, 78018, 78024, 78032, 78046,
    78060, 78074, 78094, 78136, 78192, 78206, 78210, 78212, 78224, 78238, 78240, 78268, 78278, 78284, 78296, 78322,
    78324, 78350, 78364, 78448, 78462, 78560, 78588, 78600, 78622, 78624, 78652, 78656, 78712, 78726, 78744, 78768,
    78782, 78798, 78812, 78818, 78820, 78824, 78838, 78862, 78876, 78904, 78960, 78974, 79072, 79100, 79296, 79352,
    79368, 79376, 79390, 79392, 79420, 79424, 79480, 79600, 79628, 79640, 79664, 79678, 79712, 79740, 79772, 79800,
    79810, 79812, 79816, 79824, 79838, 79846, 79852, 79894, 79910, 79916, 79942, 79948, 79960, 79982, 79988, 80006,
    80024, 80048, 80062, 80078, 80092, 80098, 80100, 80104, 80134, 80140, 80176, 80190, 80224, 80252, 80270, 80284,
    80312, 80328, 80336, 80350, 80358, 80364, 80378, 80390, 80396, 80408, 80432, 80446, 80480, 80508, 80576, 80632,
    80654, 80668, 80696, 80752, 80766, 80776, 80784, 80798, 80800, 80828, 80844, 80856, 80878, 80882, 80884, 80914,
    80916, 80930, 80932, 80936, 80950, 80962, 80968, 80976, 80990, 80998, 81004, 81026, 81028, 81040, 81054, 81056,
    81084, 81094, 81100, 81112, 81134, 81154, 81156, 81160, 81168, 81182, 81184, 81212, 81216, 81272, 81286, 81292,
    81304, 81328, 81342, 81358, 81372, 81380, 81384, 81398, 81434, 81454, 81458, 81460, 81486, 81500, 81506, 81508,
    81512, 81526, 81550, 81564, 81592, 81602, 81604, 81608, 81616, 81630, 81638, 81644, 81702, 81708, 81722, 81734,
    81740, 81752, 81774, 81778, 81780, 82050, 82078, 82080, 82108, 82180, 82184, 82192, 82206, 82208, 82236, 82240,
    82296, 82316, 82328, 82352, 82366, 82402, 82404, 82408, 82440, 82448, 82462, 82464, 82492, 82496, 82552, 82672,
    82694, 82700, 82712, 82736, 82750, 82784, 82812, 82830, 82882, 82884, 82888, 82896, 82918, 82924, 82952, 82960,
    82974, 82976, 83004, 83008, 83064, 83184, 83424, 83468, 83480, 83504, 83518, 83552, 83580, 83648, 83704, 83740,
    83768, 83824, 83838, 83842, 83844, 83848, 83856, 83872, 83900, 83910, 83916, 83928, 83950, 83984, 84000, 84028,
    84032, 84088, 84208, 84448, 84928, 85040, 85054, 85088, 85116, 85184, 85240, 85488, 85560, 85616, 85630, 85728,
    85756, 85764, 85768, 85776, 85790, 85792, 85820, 85824, 85880, 85894, 85900, 85912, 85936, 85966, 85980, 86048,
    86080, 86136, 86256, 86496, 86976, 88160, 88188, 88256, 88312, 88560, 89056, 89200, 89214, 89312, 89340, 89536,
    89592, 89608, 89616, 89632, 89664, 89720, 89840, 89868, 89880, 89904, 89952, 89980, 89998, 90012, 90040, 90190,
    90204, 90254, 90268, 90296, 90306, 90308, 90312, 90334, 90382, 90396, 90424, 90480, 90494, 90500, 90504, 90512,
    90526, 90528, 90556, 90566, 90572, 90584, 90610, 90612, 90638, 90652, 90680, 90736, 90750, 90848, 90876, 90884,
    90888, 90896, 90910, 90912, 90940, 90944, 91000, 91014, 91020, 91032, 91056, 91070, 91086, 91100, 91106, 91108,
    91112, 91126, 91150, 91164, 91192, 91248, 91262, 91360, 91388, 91584, 91640, 91664, 91678, 91680, 91708, 91712,
    91768, 91888, 91928, 91952, 91966, 92000, 92028, 92046, 92060, 92088, 92098, 92100, 92104, 92112, 92126, 92134,
    92140, 92188, 92216, 92272, 92384, 92412, 92608, 92664, 93168, 93200, 93214, 93216, 93244, 93248, 93304, 93424,
    93664, 93720, 93744, 93758, 93792, 93820, 93888, 93944, 93980, 94008, 94064, 94078, 94084, 94088, 94096, 94110,
    94112, 94140, 94150, 94156, 94168, 94246, 94252, 94278, 94284, 94296, 94318, 94342, 94348, 94360, 94384, 94398,
    94414, 94428, 94440, 94470, 94476, 94488, 94512, 94526, 94560, 94588, 94606, 94620, 94648, 94658, 94660, 94664,
    94672, 94686, 94694, 94700, 94714, 94726, 94732, 94744, 94768, 94782, 94816, 94844, 94912, 94968, 94990, 95004,
    95032, 95088, 95102, 95112, 95120, 95134, 95136, 95164, 95180, 95192, 95214, 95218, 95220, 95244, 95256, 95280,
    95294, 95328, 95356, 95424, 95480, 95728, 95758, 95772, 95800, 95856, 95870, 95968, 95996, 96008, 96016, 96030,
    96032, 96060, 96064, 96120, 96152, 96176, 96190, 96220, 96226, 96228, 96232, 96290, 96292, 96296, 96310, 96322,
    96324, 96328, 96336, 96350, 96358, 96364, 96386, 96388, 96392, 96400, 96414, 96416, 96444, 96454, 96460, 96472,
    96494, 96498, 96500, 96514, 96516, 96520, 96528, 96542, 96544, 96572, 96576, 96632, 96646, 96652, 96664, 96688,
    96702, 96718, 96732, 96738, 96740, 96744, 96758, 96772, 96776, 96784, 96798, 96800, 96828, 96832, 96888, 97008,
    97030, 97036, 97048, 97072, 97086, 97120, 97148, 97166, 97180, 97208, 97220, 97224, 97232, 97246, 97254, 97260,
    97326, 97330, 97332, 97358, 97372, 97378, 97380, 97384, 97398, 97422, 97436, 97464, 97474, 97476, 97480, 97488,
    97502, 97510, 97516, 97550, 97564, 97592, 97648, 97666, 97668, 97672, 97680, 97694, 97696, 97724, 97734, 97740,
    97752, 97774, 97830, 97836, 97850, 97862, 97868, 97880, 97902, 97906, 97908, 97926, 97932, 97944, 97968, 97998,
    98012, 98018, 98020, 98024, 98038, 98618, 98674, 98676, 98838, 98854, 98874, 98892, 98904, 98926, 98930, 98932,
    98968, 99006, 99042, 99044, 99048, 99062, 99166, 99194, 99246, 99286, 99350, 99366, 99372, 99386, 99398, 99416,
    99438, 99442, 99444, 99462, 99504, 99518, 99534, 99548, 99554, 99556, 99560, 99574, 99590, 99596, 99608, 99632,
    99646, 99680, 99708, 99726, 99740, 99768, 99778, 99780, 99784, 99792, 99806, 99814, 99820, 99834, 99858, 99860,
    99874, 99880, 99894, 99906, 99920, 99934, 99962, 99970, 99972, 99976, 99984, 99998, 100000, 100028, 100038, 100044,
    100056, 100078, 100082, 100084, 100142, 100174, 100188, 100246, 100262, 100268, 100306, 100308, 100390, 100396,
    100410, 100422, 100428, 100440, 100462, 100466, 100468, 100486, 100504, 100528, 100542, 100558, 100572, 100578,
    100580, 100584, 100598, 100620, 100656, 100670, 100704, 100732, 100750, 100792, 100802, 100808, 100816, 100830,
    100838, 100844, 100858, 100888, 100912, 100926, 100960, 100988, 101056, 101112, 101148, 101176, 101232, 101246,
    101250, 101252, 101256, 101264, 101278, 101280, 101308, 101318, 101324, 101336, 101358, 101362, 101364, 101410,
    101412, 101416, 101430, 101442, 101448, 101456, 101470, 101478, 101498, 101506, 101508, 101520, 101534, 101536,
    101564, 101580, 101618, 101620, 101636, 101640, 101648, 101662, 101664, 101692, 101696, 101752, 101766, 101784,
    101838, 101858, 101860, 101864, 101934, 101938, 101940, 101966, 101980, 101986, 101988, 101992, 102030, 102044,
    102072, 102082, 102084, 102088, 102096, 102138, 102166, 102182, 102188, 102214, 102220, 102232, 102254, 102282,
    102290, 102292, 102306, 102308, 102312, 102326, 102444, 102458, 102470, 102476, 102488, 102514, 102516, 102534,
    102552, 102576, 102590, 102606, 102620, 102626, 102632, 102646, 102662, 102668, 102704, 102718, 102752, 102780,
    102798, 102812, 102840, 102850, 102856, 102864, 102878, 102886, 102892, 102906, 102936, 102974, 103008, 103036,
    103104, 103160, 103224, 103280, 103294, 103298, 103300, 103312, 103326, 103328, 103356, 103366, 103372, 103384,
    103406, 103410, 103412, 103472, 103486, 103520, 103548, 103616, 103672, 103920, 103992, 104048, 104062, 104160,
    104188, 104194, 104196, 104200, 104208, 104224, 104252, 104256, 104312, 104326, 104332, 104344, 104368, 104382,
    104398, 104412, 104418, 104420, 104424, 104482, 104484, 104514, 104520, 104528, 104542, 104550, 104570, 104578,
    104580, 104592, 104606, 104608, 104636, 104652, 104690, 104692, 104706, 104712, 104734, 104736, 104764, 104768,
    104824, 104838, 104856, 104910, 104930, 104932, 104936, 104968, 104976, 104990, 104992, 105020, 105024, 105080,
    105200, 105240, 105278, 105312, 105372, 105410, 105412, 105416, 105424, 105446, 105518, 105524, 105550, 105564,
    105570, 105572, 105576, 105614, 105628, 105656, 105666, 105672, 105680, 105702, 105722, 105742, 105756, 105784,
    105840, 105854, 105858, 105860, 105864, 105872, 105888, 105932, 105970, 105972, 106006, 106022, 106028, 106054,
    106060, 106072, 106100, 106118, 106124, 106136, 106160, 106174, 106190, 106210, 106212, 106216, 106250, 106258,
    106260, 106274, 106276, 106280, 106306, 106308, 106312, 106320, 106334, 106348, 106394, 106414, 106418, 106420,
    106566, 106572, 106610, 106612, 106630, 106636, 106648, 106672, 106686, 106722, 106724, 106728, 106742, 106758,
    106764, 106776, 106800, 106814, 106848, 106876, 106894, 106908, 106936, 106946, 106948, 106952, 106960, 106974,
    106982, 106988, 107032, 107056, 107070, 107104, 107132, 107200, 107256, 107292, 107320, 107376, 107390, 107394,
    107396, 107400, 107408, 107422, 107424, 107452, 107462, 107468, 107480, 107502, 107506, 107508, 107544, 107568,
    107582, 107616, 107644, 107712, 107768, 108016, 108060, 108088, 108144, 108158, 108256, 108284, 108290, 108292,
    108296, 108304, 108318, 108320, 108348, 108352, 108408, 108422, 108428, 108440, 108464, 108478, 108494, 108508,
    108514, 108516, 108520, 108592, 108640, 108668, 108736, 108792, 109040, 109536, 109680, 109694, 109792, 109820,
    110016, 110072, 110084, 110088, 110096, 110112, 110140, 110144, 110200, 110320, 110342, 110348, 110360, 110384,
    110398, 110432, 110460, 110478, 110492, 110520, 110532, 110536, 110544, 110558, 110658, 110686, 110714, 110722,
    110724, 110728, 110736, 110750, 110752, 110780, 110796, 110834, 110836, 110850, 110852, 110856, 110864, 110878,
    110880, 110908, 110912, 110968, 110982, 111000, 111054, 111074, 111076, 111080, 111108, 111112, 111120, 111134,
    111136, 111164, 111168, 111224, 111344, 111372, 111422, 111456, 111516, 111554, 111556, 111560, 111568, 111590,
    111632, 111646, 111648, 111676, 111680, 111736, 111856, 112096, 112152, 112224, 112252, 112320, 112440, 112514,
    112516, 112520, 112528, 112542, 112544, 112588, 112686, 112718, 112732, 112782, 112796, 112824, 112834, 112836,
    112840, 112848, 112870, 112890, 112910, 112924, 112952, 113008, 113022, 113026, 113028, 113032, 113040, 113054,
    113056, 113100, 113138, 113140, 113166, 113180, 113208, 113264, 113278, 113376, 113404, 113416, 113424, 113440,
    113468, 113472, 113560, 113614, 113634, 113636, 113640, 113686, 113702, 113708, 113734, 113740, 113752, 113778,
    113780, 113798, 113804, 113816, 113840, 113854, 113870, 113890, 113892, 113896, 113926, 113932, 113944, 113968,
    113982, 114016, 114044, 114076, 114114, 114116, 114120, 114128, 114150, 114170, 114194, 114196, 114210, 114212,
    114216, 114242, 114244, 114248, 114256, 114270, 114278, 114306, 114308, 114312, 114320, 114334, 114336, 114364,
    114380, 114420, 114458, 114478, 114482, 114484, 114510, 114524, 114530, 114532, 114536, 114842, 114866, 114868,
    114970, 114994, 114996, 115042, 115044, 115048, 115062, 115130, 115226, 115250, 115252, 115278, 115292, 115298,
    115300, 115304, 115318, 115342, 115394, 115396, 115400, 115408, 115422, 115430, 115436, 115450, 115478, 115494,
    115514, 115526, 115532, 115570, 115572, 115738, 115758, 115762, 115764, 115790, 115804, 115810, 115812, 115816,
    115830, 115854, 115868, 115896, 115906, 115912, 115920, 115934, 115942, 115948, 115962, 115996, 116024, 116080,
    116094, 116098, 116100, 116104, 116112, 116126, 116128, 116156, 116166, 116172, 116184, 116206, 116210, 116212,
    116246, 116262, 116268, 116282, 116294, 116300, 116312, 116334, 116338, 116340, 116358, 116364, 116376, 116400,
    116414, 116430, 116444, 116450, 116452, 116456, 116498, 116500, 116514, 116520, 116534, 116546, 116548, 116552,
    116560, 116574, 116582, 116588, 116602, 116654, 116694, 116714, 116762, 116782, 116786, 116788, 116814, 116828,
    116834, 116836, 116840, 116854, 116878, 116892, 116920, 116930, 116936, 116944, 116958, 116966, 116972, 116986,
    117006, 117048, 117104, 117118, 117122, 117124, 117136, 117150, 117152, 117180, 117190, 117196, 117208, 117230,
    117234, 117236, 117304, 117360, 117374, 117472, 117500, 117506, 117508, 117512, 117520, 117536, 117564, 117568,
    117624, 117638, 117644, 117656, 117680, 117694, 117710, 117724, 117730, 117732, 117736, 117750, 117782, 117798,
    117804, 117818, 117830, 117848, 117874, 117876, 117894, 117936, 117950, 117966, 117986, 117988, 117992, 118022,
    118028, 118040, 118064, 118078, 118112, 118140, 118172, 118210, 118212, 118216, 118224, 118238, 118246, 118266,
    118306, 118312, 118338, 118352, 118366, 118374, 118394, 118402, 118404, 118408, 118416, 118430, 118432, 118460,
    118476, 118514, 118516, 118574, 118578, 118580, 118606, 118620, 118626, 118628, 118632, 118678, 118694, 118700,
    118730, 118738, 118740, 118830, 118834, 118836, 118862, 118876, 118882, 118884, 118888, 118902, 118926, 118940,
    118968, 118978, 118980, 118984, 118992, 119006, 119014, 119020, 119034, 119068, 119096, 119152, 119166, 119170,
    119172, 119176, 119184, 119198, 119200, 119228, 119238, 119244, 119256, 119278, 119282, 119284, 119324, 119352,
    119408, 119422, 119520, 119548, 119554, 119556, 119560, 119568, 119582, 119584, 119612, 119616, 119672, 119686,
    119692, 119704, 119728, 119742, 119758, 119772, 119778, 119780, 119784, 119798, 119920, 119934, 120032, 120060,
    120256, 120312, 120324, 120328, 120336, 120352, 120384, 120440, 120560, 120582, 120588, 120600, 120624, 120638,
    120672, 120700, 120718, 120732, 120760, 120770, 120772, 120776, 120784, 120798, 120806, 120812, 120870, 120876,
    120890, 120902, 120908, 120920, 120946, 120948, 120966, 120972, 120984, 121008, 121022, 121038, 121058, 121060,
    121064, 121078, 121100, 121112, 121136, 121150, 121184, 121212, 121244, 121282, 121284, 121288, 121296, 121318,
    121338, 121356, 121368, 121392, 121406, 121440, 121468, 121536, 121592, 121656, 121730, 121732, 121736, 121744,
    121758, 121760, 121804, 121842, 121844, 121890, 121922, 121924, 121928, 121936, 121950, 121958, 121978, 121986,
    121988, 121992, 122000, 122014, 122016, 122044, 122060, 122098, 122100, 122116, 122120, 122128, 122142, 122144,
    122172, 122176, 122232, 122246, 122264, 122318, 122338, 122340, 122344, 122414, 122418, 122420, 122446, 122460,
    122466, 122468, 122472, 122510, 122524, 122552, 122562, 122564, 122568, 122576, 122598, 122618, 122646, 122662,
    122668, 122694, 122700, 122712, 122738, 122740, 122762, 122770, 122772, 122786, 122788, 122792, 123018, 123026,
    123028, 123042, 123044, 123048, 123062, 123098, 123146, 123154, 123156, 123170, 123172, 123176, 123190, 123202,
    123204, 123208, 123216, 123238, 123244, 123258, 123290, 123314, 123316, 123402, 123410, 123412, 123426, 123428,
    123432, 123446, 123458, 123464, 123472, 123486, 123494, 123500, 123514, 123522, 123524, 123528, 123536, 123552,
    123580, 123590, 123596, 123608, 123630, 123634, 123636, 123674, 123698, 123700, 123740, 123746, 123748, 123752,
    123834, 123914, 123922, 123924, 123938, 123944, 123958, 123970, 123976, 123984, 123998, 124006, 124012, 124026,
    124034, 124036, 124048, 124062, 124064, 124092, 124102, 124108, 124120, 124142, 124146, 124148, 124162, 124164,
    124168, 124176, 124190, 124192, 124220, 124224, 124280, 124294, 124300, 124312, 124336, 124350, 124366, 124380,
    124386, 124388, 124392, 124406, 124442, 124462, 124466, 124468, 124494, 124508, 124514, 124520, 124558, 124572,
    124600, 124610, 124612, 124616, 124624, 124646, 124666, 124694, 124710, 124716, 124730, 124742, 124748, 124760,
    124786, 124788, 124818, 124820, 124834, 124836, 124840, 124854, 124946, 124948, 124962, 124964, 124968, 124982,
    124994, 124996, 125000, 125008, 125022, 125030, 125036, 125050, 125058, 125060, 125064, 125072, 125086, 125088,
    125116, 125126, 125132, 125144, 125166, 125170, 125172, 125186, 125188, 125192, 125200, 125216, 125244, 125248,
    125304, 125318, 125324, 125336, 125360, 125374, 125390, 125404, 125410, 125412, 125416, 125430, 125444, 125448,
    125456, 125472, 125504, 125560, 125680, 125702, 125708, 125720, 125744, 125758, 125792, 125820, 125838, 125852,
    125880, 125890, 125892, 125896, 125904, 125918, 125926, 125932, 125978, 125998, 126002, 126004, 126030, 126044,
    126050, 126052, 126056, 126094, 126108, 126136, 126146, 126148, 126152, 126160, 126182, 126202, 126222, 126236,
    126264, 126320, 126334, 126338, 126340, 126344, 126352, 126366, 126368, 126412, 126450, 126452, 126486, 126502,
    126508, 126522, 126534, 126540, 126552, 126574, 126578, 126580, 126598, 126604, 126616, 126640, 126654, 126670,
    126684, 126690, 126692, 126696, 126738, 126754, 126756, 126760, 126774, 126786, 126788, 126792, 126800, 126814,
    126822, 126828, 126842, 126894, 126898, 126900, 126934, 127126, 127142, 127148, 127162, 127178, 127186, 127188,
    127254, 127270, 127276, 127290, 127302, 127308, 127320, 127342, 127346, 127348, 127370, 127378, 127380, 127394,
    127396, 127400, 127450, 127510, 127526, 127532, 127546, 127558, 127576, 127598, 127602, 127604, 127622, 127628,
    127640, 127664, 127678, 127694, 127708, 127714, 127716, 127720, 127734, 127754, 127762, 127764, 127778, 127784,
    127810, 127812, 127816, 127824, 127838, 127846, 127866, 127898, 127918, 127922, 127924, 128022, 128038, 128044,
    128058, 128070, 128076, 128088, 128110, 128114, 128116, 128134, 128140, 128152, 128176, 128190, 128206, 128220,
    128226, 128228, 128232, 128246, 128262, 128268, 128280, 128304, 128318, 128352, 128380, 128398, 128412, 128440,
    128450, 128452, 128456, 128464, 128478, 128486, 128492, 128506, 128522, 128530, 128532, 128546, 128548, 128552,
    128566, 128578, 128580, 128584, 128592, 128606, 128614, 128634, 128642, 128644, 128648, 128656, 128670, 128672,
    128700, 128716, 128754, 128756, 128794, 128814, 128818, 128820, 128846, 128860, 128866, 128868, 128872, 128886,
    128918, 128934, 128940, 128954, 128978, 128980, 129178, 129198, 129202, 129204, 129238, 129258, 129306, 129326,
    129330, 129332, 129358, 129372, 129378, 129380, 129384, 129398, 129430, 129446, 129452, 129466, 129482, 129490,
    129492, 129562, 129582, 129586, 129588, 129614, 129628, 129634, 129636, 129640, 129654, 129678, 129692, 129720,
    129730, 129732, 129736, 129744, 129758, 129766, 129772, 129814, 129830, 129836, 129850, 129862, 129868, 129880,
    129902, 129906, 129908, 129930, 129938, 129940, 129954, 129956, 129960, 129974, 130010,
  ]);
  t.CODEWORD_TABLE = Int32Array.from([
    2627, 1819, 2622, 2621, 1813, 1812, 2729, 2724, 2723, 2779, 2774, 2773, 902, 896, 908, 868, 865, 861, 859, 2511,
    873, 871, 1780, 835, 2493, 825, 2491, 842, 837, 844, 1764, 1762, 811, 810, 809, 2483, 807, 2482, 806, 2480, 815,
    814, 813, 812, 2484, 817, 816, 1745, 1744, 1742, 1746, 2655, 2637, 2635, 2626, 2625, 2623, 2628, 1820, 2752, 2739,
    2737, 2728, 2727, 2725, 2730, 2785, 2783, 2778, 2777, 2775, 2780, 787, 781, 747, 739, 736, 2413, 754, 752, 1719,
    692, 689, 681, 2371, 678, 2369, 700, 697, 694, 703, 1688, 1686, 642, 638, 2343, 631, 2341, 627, 2338, 651, 646, 643,
    2345, 654, 652, 1652, 1650, 1647, 1654, 601, 599, 2322, 596, 2321, 594, 2319, 2317, 611, 610, 608, 606, 2324, 603,
    2323, 615, 614, 612, 1617, 1616, 1614, 1612, 616, 1619, 1618, 2575, 2538, 2536, 905, 901, 898, 909, 2509, 2507,
    2504, 870, 867, 864, 860, 2512, 875, 872, 1781, 2490, 2489, 2487, 2485, 1748, 836, 834, 832, 830, 2494, 827, 2492,
    843, 841, 839, 845, 1765, 1763, 2701, 2676, 2674, 2653, 2648, 2656, 2634, 2633, 2631, 2629, 1821, 2638, 2636, 2770,
    2763, 2761, 2750, 2745, 2753, 2736, 2735, 2733, 2731, 1848, 2740, 2738, 2786, 2784, 591, 588, 576, 569, 566, 2296,
    1590, 537, 534, 526, 2276, 522, 2274, 545, 542, 539, 548, 1572, 1570, 481, 2245, 466, 2242, 462, 2239, 492, 485,
    482, 2249, 496, 494, 1534, 1531, 1528, 1538, 413, 2196, 406, 2191, 2188, 425, 419, 2202, 415, 2199, 432, 430, 427,
    1472, 1467, 1464, 433, 1476, 1474, 368, 367, 2160, 365, 2159, 362, 2157, 2155, 2152, 378, 377, 375, 2166, 372, 2165,
    369, 2162, 383, 381, 379, 2168, 1419, 1418, 1416, 1414, 385, 1411, 384, 1423, 1422, 1420, 1424, 2461, 802, 2441,
    2439, 790, 786, 783, 794, 2409, 2406, 2403, 750, 742, 738, 2414, 756, 753, 1720, 2367, 2365, 2362, 2359, 1663, 693,
    691, 684, 2373, 680, 2370, 702, 699, 696, 704, 1690, 1687, 2337, 2336, 2334, 2332, 1624, 2329, 1622, 640, 637, 2344,
    634, 2342, 630, 2340, 650, 648, 645, 2346, 655, 653, 1653, 1651, 1649, 1655, 2612, 2597, 2595, 2571, 2568, 2565,
    2576, 2534, 2529, 2526, 1787, 2540, 2537, 907, 904, 900, 910, 2503, 2502, 2500, 2498, 1768, 2495, 1767, 2510, 2508,
    2506, 869, 866, 863, 2513, 876, 874, 1782, 2720, 2713, 2711, 2697, 2694, 2691, 2702, 2672, 2670, 2664, 1828, 2678,
    2675, 2647, 2646, 2644, 2642, 1823, 2639, 1822, 2654, 2652, 2650, 2657, 2771, 1855, 2765, 2762, 1850, 1849, 2751,
    2749, 2747, 2754, 353, 2148, 344, 342, 336, 2142, 332, 2140, 345, 1375, 1373, 306, 2130, 299, 2128, 295, 2125, 319,
    314, 311, 2132, 1354, 1352, 1349, 1356, 262, 257, 2101, 253, 2096, 2093, 274, 273, 267, 2107, 263, 2104, 280, 278,
    275, 1316, 1311, 1308, 1320, 1318, 2052, 202, 2050, 2044, 2040, 219, 2063, 212, 2060, 208, 2055, 224, 221, 2066,
    1260, 1258, 1252, 231, 1248, 229, 1266, 1264, 1261, 1268, 155, 1998, 153, 1996, 1994, 1991, 1988, 165, 164, 2007,
    162, 2006, 159, 2003, 2000, 172, 171, 169, 2012, 166, 2010, 1186, 1184, 1182, 1179, 175, 1176, 173, 1192, 1191,
    1189, 1187, 176, 1194, 1193, 2313, 2307, 2305, 592, 589, 2294, 2292, 2289, 578, 572, 568, 2297, 580, 1591, 2272,
    2267, 2264, 1547, 538, 536, 529, 2278, 525, 2275, 547, 544, 541, 1574, 1571, 2237, 2235, 2229, 1493, 2225, 1489,
    478, 2247, 470, 2244, 465, 2241, 493, 488, 484, 2250, 498, 495, 1536, 1533, 1530, 1539, 2187, 2186, 2184, 2182,
    1432, 2179, 1430, 2176, 1427, 414, 412, 2197, 409, 2195, 405, 2193, 2190, 426, 424, 421, 2203, 418, 2201, 431, 429,
    1473, 1471, 1469, 1466, 434, 1477, 1475, 2478, 2472, 2470, 2459, 2457, 2454, 2462, 803, 2437, 2432, 2429, 1726,
    2443, 2440, 792, 789, 785, 2401, 2399, 2393, 1702, 2389, 1699, 2411, 2408, 2405, 745, 741, 2415, 758, 755, 1721,
    2358, 2357, 2355, 2353, 1661, 2350, 1660, 2347, 1657, 2368, 2366, 2364, 2361, 1666, 690, 687, 2374, 683, 2372, 701,
    698, 705, 1691, 1689, 2619, 2617, 2610, 2608, 2605, 2613, 2593, 2588, 2585, 1803, 2599, 2596, 2563, 2561, 2555,
    1797, 2551, 1795, 2573, 2570, 2567, 2577, 2525, 2524, 2522, 2520, 1786, 2517, 1785, 2514, 1783, 2535, 2533, 2531,
    2528, 1788, 2541, 2539, 906, 903, 911, 2721, 1844, 2715, 2712, 1838, 1836, 2699, 2696, 2693, 2703, 1827, 1826, 1824,
    2673, 2671, 2669, 2666, 1829, 2679, 2677, 1858, 1857, 2772, 1854, 1853, 1851, 1856, 2766, 2764, 143, 1987, 139,
    1986, 135, 133, 131, 1984, 128, 1983, 125, 1981, 138, 137, 136, 1985, 1133, 1132, 1130, 112, 110, 1974, 107, 1973,
    104, 1971, 1969, 122, 121, 119, 117, 1977, 114, 1976, 124, 1115, 1114, 1112, 1110, 1117, 1116, 84, 83, 1953, 81,
    1952, 78, 1950, 1948, 1945, 94, 93, 91, 1959, 88, 1958, 85, 1955, 99, 97, 95, 1961, 1086, 1085, 1083, 1081, 1078,
    100, 1090, 1089, 1087, 1091, 49, 47, 1917, 44, 1915, 1913, 1910, 1907, 59, 1926, 56, 1925, 53, 1922, 1919, 66, 64,
    1931, 61, 1929, 1042, 1040, 1038, 71, 1035, 70, 1032, 68, 1048, 1047, 1045, 1043, 1050, 1049, 12, 10, 1869, 1867,
    1864, 1861, 21, 1880, 19, 1877, 1874, 1871, 28, 1888, 25, 1886, 22, 1883, 982, 980, 977, 974, 32, 30, 991, 989, 987,
    984, 34, 995, 994, 992, 2151, 2150, 2147, 2146, 2144, 356, 355, 354, 2149, 2139, 2138, 2136, 2134, 1359, 343, 341,
    338, 2143, 335, 2141, 348, 347, 346, 1376, 1374, 2124, 2123, 2121, 2119, 1326, 2116, 1324, 310, 308, 305, 2131, 302,
    2129, 298, 2127, 320, 318, 316, 313, 2133, 322, 321, 1355, 1353, 1351, 1357, 2092, 2091, 2089, 2087, 1276, 2084,
    1274, 2081, 1271, 259, 2102, 256, 2100, 252, 2098, 2095, 272, 269, 2108, 266, 2106, 281, 279, 277, 1317, 1315, 1313,
    1310, 282, 1321, 1319, 2039, 2037, 2035, 2032, 1203, 2029, 1200, 1197, 207, 2053, 205, 2051, 201, 2049, 2046, 2043,
    220, 218, 2064, 215, 2062, 211, 2059, 228, 226, 223, 2069, 1259, 1257, 1254, 232, 1251, 230, 1267, 1265, 1263, 2316,
    2315, 2312, 2311, 2309, 2314, 2304, 2303, 2301, 2299, 1593, 2308, 2306, 590, 2288, 2287, 2285, 2283, 1578, 2280,
    1577, 2295, 2293, 2291, 579, 577, 574, 571, 2298, 582, 581, 1592, 2263, 2262, 2260, 2258, 1545, 2255, 1544, 2252,
    1541, 2273, 2271, 2269, 2266, 1550, 535, 532, 2279, 528, 2277, 546, 543, 549, 1575, 1573, 2224, 2222, 2220, 1486,
    2217, 1485, 2214, 1482, 1479, 2238, 2236, 2234, 2231, 1496, 2228, 1492, 480, 477, 2248, 473, 2246, 469, 2243, 490,
    487, 2251, 497, 1537, 1535, 1532, 2477, 2476, 2474, 2479, 2469, 2468, 2466, 2464, 1730, 2473, 2471, 2453, 2452,
    2450, 2448, 1729, 2445, 1728, 2460, 2458, 2456, 2463, 805, 804, 2428, 2427, 2425, 2423, 1725, 2420, 1724, 2417,
    1722, 2438, 2436, 2434, 2431, 1727, 2444, 2442, 793, 791, 788, 795, 2388, 2386, 2384, 1697, 2381, 1696, 2378, 1694,
    1692, 2402, 2400, 2398, 2395, 1703, 2392, 1701, 2412, 2410, 2407, 751, 748, 744, 2416, 759, 757, 1807, 2620, 2618,
    1806, 1805, 2611, 2609, 2607, 2614, 1802, 1801, 1799, 2594, 2592, 2590, 2587, 1804, 2600, 2598, 1794, 1793, 1791,
    1789, 2564, 2562, 2560, 2557, 1798, 2554, 1796, 2574, 2572, 2569, 2578, 1847, 1846, 2722, 1843, 1842, 1840, 1845,
    2716, 2714, 1835, 1834, 1832, 1830, 1839, 1837, 2700, 2698, 2695, 2704, 1817, 1811, 1810, 897, 862, 1777, 829, 826,
    838, 1760, 1758, 808, 2481, 1741, 1740, 1738, 1743, 2624, 1818, 2726, 2776, 782, 740, 737, 1715, 686, 679, 695,
    1682, 1680, 639, 628, 2339, 647, 644, 1645, 1643, 1640, 1648, 602, 600, 597, 595, 2320, 593, 2318, 609, 607, 604,
    1611, 1610, 1608, 1606, 613, 1615, 1613, 2328, 926, 924, 892, 886, 899, 857, 850, 2505, 1778, 824, 823, 821, 819,
    2488, 818, 2486, 833, 831, 828, 840, 1761, 1759, 2649, 2632, 2630, 2746, 2734, 2732, 2782, 2781, 570, 567, 1587,
    531, 527, 523, 540, 1566, 1564, 476, 467, 463, 2240, 486, 483, 1524, 1521, 1518, 1529, 411, 403, 2192, 399, 2189,
    423, 416, 1462, 1457, 1454, 428, 1468, 1465, 2210, 366, 363, 2158, 360, 2156, 357, 2153, 376, 373, 370, 2163, 1410,
    1409, 1407, 1405, 382, 1402, 380, 1417, 1415, 1412, 1421, 2175, 2174, 777, 774, 771, 784, 732, 725, 722, 2404, 743,
    1716, 676, 674, 668, 2363, 665, 2360, 685, 1684, 1681, 626, 624, 622, 2335, 620, 2333, 617, 2330, 641, 635, 649,
    1646, 1644, 1642, 2566, 928, 925, 2530, 2527, 894, 891, 888, 2501, 2499, 2496, 858, 856, 854, 851, 1779, 2692, 2668,
    2665, 2645, 2643, 2640, 2651, 2768, 2759, 2757, 2744, 2743, 2741, 2748, 352, 1382, 340, 337, 333, 1371, 1369, 307,
    300, 296, 2126, 315, 312, 1347, 1342, 1350, 261, 258, 250, 2097, 246, 2094, 271, 268, 264, 1306, 1301, 1298, 276,
    1312, 1309, 2115, 203, 2048, 195, 2045, 191, 2041, 213, 209, 2056, 1246, 1244, 1238, 225, 1234, 222, 1256, 1253,
    1249, 1262, 2080, 2079, 154, 1997, 150, 1995, 147, 1992, 1989, 163, 160, 2004, 156, 2001, 1175, 1174, 1172, 1170,
    1167, 170, 1164, 167, 1185, 1183, 1180, 1177, 174, 1190, 1188, 2025, 2024, 2022, 587, 586, 564, 559, 556, 2290, 573,
    1588, 520, 518, 512, 2268, 508, 2265, 530, 1568, 1565, 461, 457, 2233, 450, 2230, 446, 2226, 479, 471, 489, 1526,
    1523, 1520, 397, 395, 2185, 392, 2183, 389, 2180, 2177, 410, 2194, 402, 422, 1463, 1461, 1459, 1456, 1470, 2455,
    799, 2433, 2430, 779, 776, 773, 2397, 2394, 2390, 734, 728, 724, 746, 1717, 2356, 2354, 2351, 2348, 1658, 677, 675,
    673, 670, 667, 688, 1685, 1683, 2606, 2589, 2586, 2559, 2556, 2552, 927, 2523, 2521, 2518, 2515, 1784, 2532, 895,
    893, 890, 2718, 2709, 2707, 2689, 2687, 2684, 2663, 2662, 2660, 2658, 1825, 2667, 2769, 1852, 2760, 2758, 142, 141,
    1139, 1138, 134, 132, 129, 126, 1982, 1129, 1128, 1126, 1131, 113, 111, 108, 105, 1972, 101, 1970, 120, 118, 115,
    1109, 1108, 1106, 1104, 123, 1113, 1111, 82, 79, 1951, 75, 1949, 72, 1946, 92, 89, 86, 1956, 1077, 1076, 1074, 1072,
    98, 1069, 96, 1084, 1082, 1079, 1088, 1968, 1967, 48, 45, 1916, 42, 1914, 39, 1911, 1908, 60, 57, 54, 1923, 50,
    1920, 1031, 1030, 1028, 1026, 67, 1023, 65, 1020, 62, 1041, 1039, 1036, 1033, 69, 1046, 1044, 1944, 1943, 1941, 11,
    9, 1868, 7, 1865, 1862, 1859, 20, 1878, 16, 1875, 13, 1872, 970, 968, 966, 963, 29, 960, 26, 23, 983, 981, 978, 975,
    33, 971, 31, 990, 988, 985, 1906, 1904, 1902, 993, 351, 2145, 1383, 331, 330, 328, 326, 2137, 323, 2135, 339, 1372,
    1370, 294, 293, 291, 289, 2122, 286, 2120, 283, 2117, 309, 303, 317, 1348, 1346, 1344, 245, 244, 242, 2090, 239,
    2088, 236, 2085, 2082, 260, 2099, 249, 270, 1307, 1305, 1303, 1300, 1314, 189, 2038, 186, 2036, 183, 2033, 2030,
    2026, 206, 198, 2047, 194, 216, 1247, 1245, 1243, 1240, 227, 1237, 1255, 2310, 2302, 2300, 2286, 2284, 2281, 565,
    563, 561, 558, 575, 1589, 2261, 2259, 2256, 2253, 1542, 521, 519, 517, 514, 2270, 511, 533, 1569, 1567, 2223, 2221,
    2218, 2215, 1483, 2211, 1480, 459, 456, 453, 2232, 449, 474, 491, 1527, 1525, 1522, 2475, 2467, 2465, 2451, 2449,
    2446, 801, 800, 2426, 2424, 2421, 2418, 1723, 2435, 780, 778, 775, 2387, 2385, 2382, 2379, 1695, 2375, 1693, 2396,
    735, 733, 730, 727, 749, 1718, 2616, 2615, 2604, 2603, 2601, 2584, 2583, 2581, 2579, 1800, 2591, 2550, 2549, 2547,
    2545, 1792, 2542, 1790, 2558, 929, 2719, 1841, 2710, 2708, 1833, 1831, 2690, 2688, 2686, 1815, 1809, 1808, 1774,
    1756, 1754, 1737, 1736, 1734, 1739, 1816, 1711, 1676, 1674, 633, 629, 1638, 1636, 1633, 1641, 598, 1605, 1604, 1602,
    1600, 605, 1609, 1607, 2327, 887, 853, 1775, 822, 820, 1757, 1755, 1584, 524, 1560, 1558, 468, 464, 1514, 1511,
    1508, 1519, 408, 404, 400, 1452, 1447, 1444, 417, 1458, 1455, 2208, 364, 361, 358, 2154, 1401, 1400, 1398, 1396,
    374, 1393, 371, 1408, 1406, 1403, 1413, 2173, 2172, 772, 726, 723, 1712, 672, 669, 666, 682, 1678, 1675, 625, 623,
    621, 618, 2331, 636, 632, 1639, 1637, 1635, 920, 918, 884, 880, 889, 849, 848, 847, 846, 2497, 855, 852, 1776, 2641,
    2742, 2787, 1380, 334, 1367, 1365, 301, 297, 1340, 1338, 1335, 1343, 255, 251, 247, 1296, 1291, 1288, 265, 1302,
    1299, 2113, 204, 196, 192, 2042, 1232, 1230, 1224, 214, 1220, 210, 1242, 1239, 1235, 1250, 2077, 2075, 151, 148,
    1993, 144, 1990, 1163, 1162, 1160, 1158, 1155, 161, 1152, 157, 1173, 1171, 1168, 1165, 168, 1181, 1178, 2021, 2020,
    2018, 2023, 585, 560, 557, 1585, 516, 509, 1562, 1559, 458, 447, 2227, 472, 1516, 1513, 1510, 398, 396, 393, 390,
    2181, 386, 2178, 407, 1453, 1451, 1449, 1446, 420, 1460, 2209, 769, 764, 720, 712, 2391, 729, 1713, 664, 663, 661,
    659, 2352, 656, 2349, 671, 1679, 1677, 2553, 922, 919, 2519, 2516, 885, 883, 881, 2685, 2661, 2659, 2767, 2756,
    2755, 140, 1137, 1136, 130, 127, 1125, 1124, 1122, 1127, 109, 106, 102, 1103, 1102, 1100, 1098, 116, 1107, 1105,
    1980, 80, 76, 73, 1947, 1068, 1067, 1065, 1063, 90, 1060, 87, 1075, 1073, 1070, 1080, 1966, 1965, 46, 43, 40, 1912,
    36, 1909, 1019, 1018, 1016, 1014, 58, 1011, 55, 1008, 51, 1029, 1027, 1024, 1021, 63, 1037, 1034, 1940, 1939, 1937,
    1942, 8, 1866, 4, 1863, 1, 1860, 956, 954, 952, 949, 946, 17, 14, 969, 967, 964, 961, 27, 957, 24, 979, 976, 972,
    1901, 1900, 1898, 1896, 986, 1905, 1903, 350, 349, 1381, 329, 327, 324, 1368, 1366, 292, 290, 287, 284, 2118, 304,
    1341, 1339, 1337, 1345, 243, 240, 237, 2086, 233, 2083, 254, 1297, 1295, 1293, 1290, 1304, 2114, 190, 187, 184,
    2034, 180, 2031, 177, 2027, 199, 1233, 1231, 1229, 1226, 217, 1223, 1241, 2078, 2076, 584, 555, 554, 552, 550, 2282,
    562, 1586, 507, 506, 504, 502, 2257, 499, 2254, 515, 1563, 1561, 445, 443, 441, 2219, 438, 2216, 435, 2212, 460,
    454, 475, 1517, 1515, 1512, 2447, 798, 797, 2422, 2419, 770, 768, 766, 2383, 2380, 2376, 721, 719, 717, 714, 731,
    1714, 2602, 2582, 2580, 2548, 2546, 2543, 923, 921, 2717, 2706, 2705, 2683, 2682, 2680, 1771, 1752, 1750, 1733,
    1732, 1731, 1735, 1814, 1707, 1670, 1668, 1631, 1629, 1626, 1634, 1599, 1598, 1596, 1594, 1603, 1601, 2326, 1772,
    1753, 1751, 1581, 1554, 1552, 1504, 1501, 1498, 1509, 1442, 1437, 1434, 401, 1448, 1445, 2206, 1392, 1391, 1389,
    1387, 1384, 359, 1399, 1397, 1394, 1404, 2171, 2170, 1708, 1672, 1669, 619, 1632, 1630, 1628, 1773, 1378, 1363,
    1361, 1333, 1328, 1336, 1286, 1281, 1278, 248, 1292, 1289, 2111, 1218, 1216, 1210, 197, 1206, 193, 1228, 1225, 1221,
    1236, 2073, 2071, 1151, 1150, 1148, 1146, 152, 1143, 149, 1140, 145, 1161, 1159, 1156, 1153, 158, 1169, 1166, 2017,
    2016, 2014, 2019, 1582, 510, 1556, 1553, 452, 448, 1506, 1500, 394, 391, 387, 1443, 1441, 1439, 1436, 1450, 2207,
    765, 716, 713, 1709, 662, 660, 657, 1673, 1671, 916, 914, 879, 878, 877, 882, 1135, 1134, 1121, 1120, 1118, 1123,
    1097, 1096, 1094, 1092, 103, 1101, 1099, 1979, 1059, 1058, 1056, 1054, 77, 1051, 74, 1066, 1064, 1061, 1071, 1964,
    1963, 1007, 1006, 1004, 1002, 999, 41, 996, 37, 1017, 1015, 1012, 1009, 52, 1025, 1022, 1936, 1935, 1933, 1938, 942,
    940, 938, 935, 932, 5, 2, 955, 953, 950, 947, 18, 943, 15, 965, 962, 958, 1895, 1894, 1892, 1890, 973, 1899, 1897,
    1379, 325, 1364, 1362, 288, 285, 1334, 1332, 1330, 241, 238, 234, 1287, 1285, 1283, 1280, 1294, 2112, 188, 185, 181,
    178, 2028, 1219, 1217, 1215, 1212, 200, 1209, 1227, 2074, 2072, 583, 553, 551, 1583, 505, 503, 500, 513, 1557, 1555,
    444, 442, 439, 436, 2213, 455, 451, 1507, 1505, 1502, 796, 763, 762, 760, 767, 711, 710, 708, 706, 2377, 718, 715,
    1710, 2544, 917, 915, 2681, 1627, 1597, 1595, 2325, 1769, 1749, 1747, 1499, 1438, 1435, 2204, 1390, 1388, 1385,
    1395, 2169, 2167, 1704, 1665, 1662, 1625, 1623, 1620, 1770, 1329, 1282, 1279, 2109, 1214, 1207, 1222, 2068, 2065,
    1149, 1147, 1144, 1141, 146, 1157, 1154, 2013, 2011, 2008, 2015, 1579, 1549, 1546, 1495, 1487, 1433, 1431, 1428,
    1425, 388, 1440, 2205, 1705, 658, 1667, 1664, 1119, 1095, 1093, 1978, 1057, 1055, 1052, 1062, 1962, 1960, 1005,
    1003, 1000, 997, 38, 1013, 1010, 1932, 1930, 1927, 1934, 941, 939, 936, 933, 6, 930, 3, 951, 948, 944, 1889, 1887,
    1884, 1881, 959, 1893, 1891, 35, 1377, 1360, 1358, 1327, 1325, 1322, 1331, 1277, 1275, 1272, 1269, 235, 1284, 2110,
    1205, 1204, 1201, 1198, 182, 1195, 179, 1213, 2070, 2067, 1580, 501, 1551, 1548, 440, 437, 1497, 1494, 1490, 1503,
    761, 709, 707, 1706, 913, 912, 2198, 1386, 2164, 2161, 1621, 1766, 2103, 1208, 2058, 2054, 1145, 1142, 2005, 2002,
    1999, 2009, 1488, 1429, 1426, 2200, 1698, 1659, 1656, 1975, 1053, 1957, 1954, 1001, 998, 1924, 1921, 1918, 1928,
    937, 934, 931, 1879, 1876, 1873, 1870, 945, 1885, 1882, 1323, 1273, 1270, 2105, 1202, 1199, 1196, 1211, 2061, 2057,
    1576, 1543, 1540, 1484, 1481, 1478, 1491, 1700,
  ]);
  return t;
})();
var Sh = (function () {
  function t(e, r) {
    this.bits = e;
    this.points = r;
  }
  t.prototype.getBits = function () {
    return this.bits;
  };
  t.prototype.getPoints = function () {
    return this.points;
  };
  return t;
})();
var Ah = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Ih = (function () {
  function t() {}
  t.detectMultiple = function (e, r, n) {
    var i = e.getBlackMatrix();
    var a = t.detect(n, i);
    if (!a.length) {
      i = i.clone();
      i.rotate180();
      a = t.detect(n, i);
    }
    return new Sh(i, a);
  };
  t.detect = function (e, r) {
    for (var n, i, a = new Array(), o = 0, s = 0, c = false; o < r.getHeight(); ) {
      var l = t.findVertices(r, o, s);
      if (l[0] == null && l[3] == null) {
        if (!c) break;
        c = false;
        s = 0;
        try {
          for (var f = ((n = void 0), Ah(a)), u = f.next(); !u.done; u = f.next()) {
            var h = u.value;
            if (u.value[1] != null) {
              o = Math.trunc(Math.max(o, u.value[1].getY()));
            }
            if (u.value[3] != null) {
              o = Math.max(o, Math.trunc(u.value[3].getY()));
            }
          }
        } catch (d) {
          n = { error: d };
        } finally {
          try {
            if (u && !u.done && (i = f.return)) {
              i.call(f);
            }
          } finally {
            if (n) throw n.error;
          }
        }
        o += t.ROW_STEP;
        continue;
      }
      c = true;
      a.push(l);
      if (!e) break;
      l[2] != null
        ? ((s = Math.trunc(l[2].getX())), (o = Math.trunc(l[2].getY())))
        : ((s = Math.trunc(l[4].getX())), (o = Math.trunc(l[4].getY())));
    }
    return a;
  };
  t.findVertices = function (e, r, n) {
    var i = e.getHeight();
    var a = e.getWidth();
    var o = new Array(8);
    t.copyToResult(o, t.findRowsWithPattern(e, i, a, r, n, t.START_PATTERN), t.INDEXES_START_PATTERN);
    if (o[4] != null) {
      n = Math.trunc(o[4].getX());
      r = Math.trunc(o[4].getY());
    }
    t.copyToResult(o, t.findRowsWithPattern(e, i, a, r, n, t.STOP_PATTERN), t.INDEXES_STOP_PATTERN);
    return o;
  };
  t.copyToResult = function (e, r, n) {
    for (var i = 0; i < n.length; i++) e[n[i]] = r[i];
  };
  t.findRowsWithPattern = function (e, r, n, i, a, o) {
    for (var s = new Array(4), c = false, l = new Int32Array(o.length); i < r; i += t.ROW_STEP) {
      var f = t.findGuardPattern(e, a, i, n, false, o, l);
      if (f != null) {
        for (; i > 0; ) {
          var u = t.findGuardPattern(e, a, --i, n, false, o, l);
          if (u != null) f = u;
          else {
            i++;
            break;
          }
        }
        s[0] = new U(f[0], i);
        s[1] = new U(f[1], i);
        c = true;
        break;
      }
    }
    var h = i + 1;
    if (c) {
      for (var d = 0, u = Int32Array.from([Math.trunc(s[0].getX()), Math.trunc(s[1].getX())]); h < r; h++) {
        var f = t.findGuardPattern(e, u[0], h, n, false, o, l);
        if (f != null && Math.abs(u[0] - f[0]) < t.MAX_PATTERN_DRIFT && Math.abs(u[1] - f[1]) < t.MAX_PATTERN_DRIFT) {
          u = f;
          d = 0;
        } else {
          if (d > t.SKIPPED_ROW_COUNT_MAX) break;
          d++;
        }
      }
      h -= d + 1;
      s[2] = new U(u[0], h);
      s[3] = new U(u[1], h);
    }
    if (h - i < t.BARCODE_MIN_HEIGHT) {
      Te.fill(s, null);
    }
    return s;
  };
  t.findGuardPattern = function (e, r, n, i, a, o, s) {
    Te.fillWithin(s, 0, s.length, 0);
    for (var c = r, l = 0; e.get(c, n) && c > 0 && l++ < t.MAX_PIXEL_DRIFT; ) c--;
    for (var f = c, u = 0, h = o.length, d = a; f < i; f++) {
      var p = e.get(f, n);
      if (p !== d) s[u]++;
      else {
        if (u === h - 1) {
          if (t.patternMatchVariance(s, o, t.MAX_INDIVIDUAL_VARIANCE) < t.MAX_AVG_VARIANCE)
            return new Int32Array([c, f]);
          c += s[0] + s[1];
          ue.arraycopy(s, 2, s, 0, u - 1);
          s[u - 1] = 0;
          s[u] = 0;
          u--;
        } else u++;
        s[u] = 1;
        d = !d;
      }
    }
    return u === h - 1 && t.patternMatchVariance(s, o, t.MAX_INDIVIDUAL_VARIANCE) < t.MAX_AVG_VARIANCE
      ? new Int32Array([c, f - 1])
      : null;
  };
  t.patternMatchVariance = function (e, r, n) {
    for (var i = e.length, a = 0, o = 0, s = 0; s < i; s++) {
      a += e[s];
      o += r[s];
    }
    if (a < o) return Infinity;
    var c = a / o;
    n *= c;
    for (var l = 0, f = 0; f < i; f++) {
      var u = e[f];
      var h = r[f] * c;
      var d = e[f] > h ? e[f] - h : h - e[f];
      if (d > n) return Infinity;
      l += d;
    }
    return l / a;
  };
  t.INDEXES_START_PATTERN = Int32Array.from([0, 4, 1, 5]);
  t.INDEXES_STOP_PATTERN = Int32Array.from([6, 2, 7, 3]);
  t.MAX_AVG_VARIANCE = 0.42;
  t.MAX_INDIVIDUAL_VARIANCE = 0.8;
  t.START_PATTERN = Int32Array.from([8, 1, 1, 1, 1, 1, 1, 3]);
  t.STOP_PATTERN = Int32Array.from([7, 1, 1, 3, 1, 1, 1, 2, 1]);
  t.MAX_PIXEL_DRIFT = 3;
  t.MAX_PATTERN_DRIFT = 5;
  t.SKIPPED_ROW_COUNT_MAX = 25;
  t.ROW_STEP = 5;
  t.BARCODE_MIN_HEIGHT = 10;
  return t;
})();
var Th = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Wt = (function () {
  function t(e, r) {
    if (r.length === 0) throw new z();
    this.field = e;
    var n = r.length;
    if (r.length > 1 && r[0] === 0) {
      for (var i = 1; i < r.length && r[i] === 0; ) i++;
      i === r.length
        ? (this.coefficients = new Int32Array([0]))
        : ((this.coefficients = new Int32Array(r.length - i)),
          ue.arraycopy(r, i, this.coefficients, 0, this.coefficients.length));
    } else this.coefficients = r;
  }
  t.prototype.getCoefficients = function () {
    return this.coefficients;
  };
  t.prototype.getDegree = function () {
    return this.coefficients.length - 1;
  };
  t.prototype.isZero = function () {
    return this.coefficients[0] === 0;
  };
  t.prototype.getCoefficient = function (e) {
    return this.coefficients[this.coefficients.length - 1 - e];
  };
  t.prototype.evaluateAt = function (e) {
    var r;
    var n;
    if (e === 0) return this.getCoefficient(0);
    if (e === 1) {
      var i = 0;
      try {
        for (var a = Th(this.coefficients), o = a.next(); !o.done; o = a.next()) {
          var s = o.value;
          i = this.field.add(i, o.value);
        }
      } catch (u) {
        r = { error: u };
      } finally {
        try {
          if (o && !o.done && (n = a.return)) {
            n.call(a);
          }
        } finally {
          if (r) throw r.error;
        }
      }
      return i;
    }
    for (var c = this.coefficients[0], l = this.coefficients.length, f = 1; f < l; f++)
      c = this.field.add(this.field.multiply(e, c), this.coefficients[f]);
    return c;
  };
  t.prototype.add = function (e) {
    if (!this.field.equals(e.field)) throw new z('ModulusPolys do not have same ModulusGF field');
    if (this.isZero()) return e;
    if (e.isZero()) return this;
    var r = this.coefficients;
    var n = e.coefficients;
    if (r.length > n.length) {
      var i = r;
      r = n;
      n = r;
    }
    var a = new Int32Array(n.length);
    var o = n.length - r.length;
    ue.arraycopy(n, 0, a, 0, o);
    for (var s = o; s < n.length; s++) a[s] = this.field.add(r[s - o], n[s]);
    return new t(this.field, a);
  };
  t.prototype.subtract = function (e) {
    if (!this.field.equals(e.field)) throw new z('ModulusPolys do not have same ModulusGF field');
    return e.isZero() ? this : this.add(e.negative());
  };
  t.prototype.multiply = function (e) {
    return e instanceof t ? this.multiplyOther(e) : this.multiplyScalar(e);
  };
  t.prototype.multiplyOther = function (e) {
    if (!this.field.equals(e.field)) throw new z('ModulusPolys do not have same ModulusGF field');
    if (this.isZero() || e.isZero()) return new t(this.field, new Int32Array([0]));
    for (
      var r = this.coefficients, n = r.length, i = e.coefficients, a = i.length, o = new Int32Array(n + a - 1), s = 0;
      s < n;
      s++
    )
      for (var c = r[s], l = 0; l < a; l++) o[s + l] = this.field.add(o[s + l], this.field.multiply(c, i[l]));
    return new t(this.field, o);
  };
  t.prototype.negative = function () {
    for (var e = this.coefficients.length, r = new Int32Array(e), n = 0; n < e; n++)
      r[n] = this.field.subtract(0, this.coefficients[n]);
    return new t(this.field, r);
  };
  t.prototype.multiplyScalar = function (e) {
    if (e === 0) return new t(this.field, new Int32Array([0]));
    if (e === 1) return this;
    for (var r = this.coefficients.length, n = new Int32Array(r), i = 0; i < r; i++)
      n[i] = this.field.multiply(this.coefficients[i], e);
    return new t(this.field, n);
  };
  t.prototype.multiplyByMonomial = function (e, r) {
    if (e < 0) throw new z();
    if (r === 0) return new t(this.field, new Int32Array([0]));
    for (var n = this.coefficients.length, i = new Int32Array(n + e), a = 0; a < n; a++)
      i[a] = this.field.multiply(this.coefficients[a], r);
    return new t(this.field, i);
  };
  t.prototype.toString = function () {
    for (var e = new K(), r = this.getDegree(); r >= 0; r--) {
      var n = this.getCoefficient(r);
      if (n !== 0) {
        n < 0 ? (e.append(' - '), (n = -n)) : e.length() > 0 && e.append(' + ');
        if (r === 0 || n !== 1) {
          e.append(n);
        }
        if (r !== 0) {
          r === 1 ? e.append('x') : (e.append('x^'), e.append(r));
        }
      }
    }
    return e.toString();
  };
  return t;
})();
var bh = (function () {
  function t() {}
  t.prototype.add = function (e, r) {
    return (e + r) % this.modulus;
  };
  t.prototype.subtract = function (e, r) {
    return (this.modulus + e - r) % this.modulus;
  };
  t.prototype.exp = function (e) {
    return this.expTable[e];
  };
  t.prototype.log = function (e) {
    if (e === 0) throw new z();
    return this.logTable[e];
  };
  t.prototype.inverse = function (e) {
    if (e === 0) throw new vs();
    return this.expTable[this.modulus - this.logTable[e] - 1];
  };
  t.prototype.multiply = function (e, r) {
    return e === 0 || r === 0 ? 0 : this.expTable[(this.logTable[e] + this.logTable[r]) % (this.modulus - 1)];
  };
  t.prototype.getSize = function () {
    return this.modulus;
  };
  t.prototype.equals = function (e) {
    return e === this;
  };
  return t;
})();
var Nh = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Oh = (function (t) {
  Nh(e, t);
  function e(r, n) {
    var i = t() || this;
    i.modulus = r;
    i.expTable = new Int32Array(r);
    i.logTable = new Int32Array(r);
    for (var a = 1, o = 0; o < r; o++) {
      i.expTable[o] = a;
      a = (a * n) % r;
    }
    for (var o = 0; o < r - 1; o++) i.logTable[i.expTable[o]] = o;
    i.zero = new Wt(i, new Int32Array([0]));
    i.one = new Wt(i, new Int32Array([1]));
    return i;
  }
  e.prototype.getZero = function () {
    return this.zero;
  };
  e.prototype.getOne = function () {
    return this.one;
  };
  e.prototype.buildMonomial = function (r, n) {
    if (r < 0) throw new z();
    if (n === 0) return this.zero;
    var i = new Int32Array(r + 1);
    i[0] = n;
    return new Wt(this, i);
  };
  e.PDF417_GF = new e(929, 3);
  return e;
})(bh);
var Dh = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Rh = (function () {
  function t() {
    this.field = Oh.PDF417_GF;
  }
  t.prototype.decode = function (e, r, n) {
    for (var i, a, o = new Wt(this.field, e), s = new Int32Array(r), c = false, l = r; l > 0; l--) {
      var f = o.evaluateAt(this.field.exp(l));
      s[r - l] = f;
      if (f !== 0) {
        c = true;
      }
    }
    if (!c) return 0;
    var u = this.field.getOne();
    if (n != null)
      try {
        for (var h = Dh(n), d = h.next(); !d.done; d = h.next()) {
          var p = d.value;
          var v = this.field.exp(e.length - 1 - d.value);
          var g = new Wt(this.field, new Int32Array([this.field.subtract(0, v), 1]));
          u = u.multiply(g);
        }
      } catch (D) {
        i = { error: D };
      } finally {
        try {
          if (d && !d.done && (a = h.return)) {
            a.call(h);
          }
        } finally {
          if (i) throw i.error;
        }
      }
    for (
      var _ = new Wt(this.field, s),
        y = this.runEuclideanAlgorithm(this.field.buildMonomial(r, 1), _, r),
        x = y[0],
        w = y[1],
        C = this.findErrorLocations(x),
        S = this.findErrorMagnitudes(w, x, C),
        l = 0;
      l < C.length;
      l++
    ) {
      var T = e.length - 1 - this.field.log(C[l]);
      if (T < 0) throw Me.getChecksumInstance();
      e[T] = this.field.subtract(e[T], S[l]);
    }
    return C.length;
  };
  t.prototype.runEuclideanAlgorithm = function (e, r, n) {
    if (e.getDegree() < r.getDegree()) {
      var i = e;
      e = r;
      r = e;
    }
    for (var a = e, o = r, s = this.field.getZero(), c = this.field.getOne(); o.getDegree() >= Math.round(n / 2); ) {
      var l = a;
      var f = s;
      a = o;
      s = c;
      if (a.isZero()) throw Me.getChecksumInstance();
      o = a;
      for (
        var u = this.field.getZero(), h = a.getCoefficient(a.getDegree()), d = this.field.inverse(h);
        o.getDegree() >= a.getDegree() && !o.isZero();

      ) {
        var p = o.getDegree() - a.getDegree();
        var v = this.field.multiply(o.getCoefficient(o.getDegree()), d);
        u = u.add(this.field.buildMonomial(p, v));
        o = o.subtract(a.multiplyByMonomial(p, v));
      }
      c = u.multiply(s).subtract(s).negative();
    }
    var g = c.getCoefficient(0);
    if (g === 0) throw Me.getChecksumInstance();
    var _ = this.field.inverse(g);
    var y = c.multiply(_);
    var x = o.multiply(_);
    return [y, x];
  };
  t.prototype.findErrorLocations = function (e) {
    for (var r = e.getDegree(), n = new Int32Array(r), i = 0, a = 1; a < this.field.getSize() && i < r; a++)
      if (e.evaluateAt(a) === 0) {
        n[i] = this.field.inverse(a);
        i++;
      }
    if (i !== r) throw Me.getChecksumInstance();
    return n;
  };
  t.prototype.findErrorMagnitudes = function (e, r, n) {
    for (var i = r.getDegree(), a = new Int32Array(i), o = 1; o <= i; o++)
      a[i - o] = this.field.multiply(o, r.getCoefficient(o));
    for (var s = new Wt(this.field, a), c = n.length, l = new Int32Array(c), o = 0; o < c; o++) {
      var f = this.field.inverse(n[o]);
      var u = this.field.subtract(0, e.evaluateAt(f));
      var h = this.field.inverse(s.evaluateAt(f));
      l[o] = this.field.multiply(u, h);
    }
    return l;
  };
  return t;
})();
var ci = (function () {
  function t(e, r, n, i, a) {
    e instanceof t ? this.constructor_2(e) : this.constructor_1(e, r, n, i, a);
  }
  t.prototype.constructor_1 = function (e, r, n, i, a) {
    var o = r == null || n == null;
    var s = i == null || a == null;
    if (o && s) throw new I();
    o
      ? ((r = new U(0, i.getY())), (n = new U(0, a.getY())))
      : s && ((i = new U(e.getWidth() - 1, r.getY())), (a = new U(e.getWidth() - 1, n.getY())));
    this.image = e;
    this.topLeft = r;
    this.bottomLeft = n;
    this.topRight = i;
    this.bottomRight = a;
    this.minX = Math.trunc(Math.min(r.getX(), n.getX()));
    this.maxX = Math.trunc(Math.max(i.getX(), a.getX()));
    this.minY = Math.trunc(Math.min(r.getY(), i.getY()));
    this.maxY = Math.trunc(Math.max(n.getY(), a.getY()));
  };
  t.prototype.constructor_2 = function (e) {
    this.image = e.image;
    this.topLeft = e.getTopLeft();
    this.bottomLeft = e.getBottomLeft();
    this.topRight = e.getTopRight();
    this.bottomRight = e.getBottomRight();
    this.minX = e.getMinX();
    this.maxX = e.getMaxX();
    this.minY = e.getMinY();
    this.maxY = e.getMaxY();
  };
  t.merge = function (e, r) {
    return e == null ? r : r == null ? e : new t(e.image, e.topLeft, e.bottomLeft, r.topRight, r.bottomRight);
  };
  t.prototype.addMissingRows = function (e, r, n) {
    var i = this.topLeft;
    var a = this.bottomLeft;
    var o = this.topRight;
    var s = this.bottomRight;
    if (e > 0) {
      var c = n ? this.topLeft : this.topRight;
      var l = Math.trunc(c.getY() - e);
      if (l < 0) {
        l = 0;
      }
      var f = new U(c.getX(), l);
      n ? (i = f) : (o = f);
    }
    if (r > 0) {
      var u = n ? this.bottomLeft : this.bottomRight;
      var h = Math.trunc(u.getY() + r);
      if (h >= this.image.getHeight()) {
        h = this.image.getHeight() - 1;
      }
      var d = new U(u.getX(), h);
      n ? (a = d) : (s = d);
    }
    return new t(this.image, i, a, o, s);
  };
  t.prototype.getMinX = function () {
    return this.minX;
  };
  t.prototype.getMaxX = function () {
    return this.maxX;
  };
  t.prototype.getMinY = function () {
    return this.minY;
  };
  t.prototype.getMaxY = function () {
    return this.maxY;
  };
  t.prototype.getTopLeft = function () {
    return this.topLeft;
  };
  t.prototype.getTopRight = function () {
    return this.topRight;
  };
  t.prototype.getBottomLeft = function () {
    return this.bottomLeft;
  };
  t.prototype.getBottomRight = function () {
    return this.bottomRight;
  };
  return t;
})();
var Ph = (function () {
  function t(e, r, n, i) {
    this.columnCount = e;
    this.errorCorrectionLevel = i;
    this.rowCountUpperPart = r;
    this.rowCountLowerPart = n;
    this.rowCount = r + n;
  }
  t.prototype.getColumnCount = function () {
    return this.columnCount;
  };
  t.prototype.getErrorCorrectionLevel = function () {
    return this.errorCorrectionLevel;
  };
  t.prototype.getRowCount = function () {
    return this.rowCount;
  };
  t.prototype.getRowCountUpperPart = function () {
    return this.rowCountUpperPart;
  };
  t.prototype.getRowCountLowerPart = function () {
    return this.rowCountLowerPart;
  };
  return t;
})();
var Zi = (function () {
  function t() {
    this.buffer = '';
  }
  t.form = function (e, r) {
    var n = -1;
    function i(o, s, c, l, f, u) {
      if (o === '%%') return '%';
      if (r[++n] !== void 0) {
        o = l ? parseInt(l.substr(1)) : void 0;
        var h = f ? parseInt(f.substr(1)) : void 0;
        var d;
        switch (u) {
          case 's':
            d = r[n];
            break;
          case 'c':
            d = r[n][0];
            break;
          case 'f':
            d = parseFloat(r[n]).toFixed(o);
            break;
          case 'p':
            d = parseFloat(r[n]).toPrecision(o);
            break;
          case 'e':
            d = parseFloat(r[n]).toExponential(o);
            break;
          case 'x':
            d = parseInt(r[n]).toString(h || 16);
            break;
          case 'd':
            d = parseFloat(parseInt(r[n], h || 10).toPrecision(o)).toFixed(0);
            break;
        }
        d = typeof d == 'object' ? JSON.stringify(d) : (+d).toString(h);
        for (var p = parseInt(c), v = c && c[0] + '' == '0' ? '0' : ' '; d.length < p; )
          d = s !== void 0 ? d + v : v + d;
        return d;
      }
    }
    var a = /%(-)?(0?[0-9]+)?([.][0-9]+)?([#][0-9]+)?([scfpexd%])/g;
    return e.replace(a, i);
  };
  t.prototype.format = function (e) {
    for (var r = [], n = 1; n < arguments.length; n++) r[n - 1] = arguments[n];
    this.buffer += t.form(e, r);
  };
  t.prototype.toString = function () {
    return this.buffer;
  };
  return t;
})();
var Mh = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Cs = (function () {
  function t(e) {
    this.boundingBox = new ci(e);
    this.codewords = new Array(e.getMaxY() - e.getMinY() + 1);
  }
  t.prototype.getCodewordNearby = function (e) {
    var r = this.getCodeword(e);
    if (r != null) return r;
    for (var n = 1; n < t.MAX_NEARBY_DISTANCE; n++) {
      var i = this.imageRowToCodewordIndex(e) - n;
      if (
        (i >= 0 && ((r = this.codewords[i]), r != null)) ||
        ((i = this.imageRowToCodewordIndex(e) + n), i < this.codewords.length && ((r = this.codewords[i]), r != null))
      )
        return r;
    }
    return null;
  };
  t.prototype.imageRowToCodewordIndex = function (e) {
    return e - this.boundingBox.getMinY();
  };
  t.prototype.setCodeword = function (e, r) {
    this.codewords[this.imageRowToCodewordIndex(e)] = r;
  };
  t.prototype.getCodeword = function (e) {
    return this.codewords[this.imageRowToCodewordIndex(e)];
  };
  t.prototype.getBoundingBox = function () {
    return this.boundingBox;
  };
  t.prototype.getCodewords = function () {
    return this.codewords;
  };
  t.prototype.toString = function () {
    var e;
    var r;
    var n = new Zi();
    var i = 0;
    try {
      for (var a = Mh(this.codewords), o = a.next(); !o.done; o = a.next()) {
        var s = o.value;
        if (o.value == null) {
          n.format('%3d:    |   %n', i++);
          continue;
        }
        n.format('%3d: %3d|%3d%n', i++, o.value.getRowNumber(), o.value.getValue());
      }
    } catch (c) {
      e = { error: c };
    } finally {
      try {
        if (o && !o.done && (r = a.return)) {
          r.call(a);
        }
      } finally {
        if (e) throw e.error;
      }
    }
    return n.toString();
  };
  t.MAX_NEARBY_DISTANCE = 5;
  return t;
})();
var kh = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Bh = function (t, e) {
  var r = typeof Symbol == 'function' && t[Symbol.iterator];
  if (!r) return t;
  var n = r.call(t);
  var i;
  var a = [];
  var o;
  try {
    for (; (e === void 0 || e-- > 0) && !(i = n.next()).done; ) a.push(i.value);
  } catch (s) {
    o = { error: s };
  } finally {
    try {
      if (i && !i.done && (r = n.return)) {
        r.call(n);
      }
    } finally {
      if (o) throw o.error;
    }
  }
  return a;
};
var wr = (function () {
  function t() {
    this.values = new Map();
  }
  t.prototype.setValue = function (e) {
    e = Math.trunc(e);
    var r = this.values.get(e);
    if (r == null) {
      r = 0;
    }
    r++;
    this.values.set(e, r);
  };
  t.prototype.getValue = function () {
    var e;
    var r;
    var n = -1;
    var i = new Array();
    var a = function (u, h) {
      var d = {
        getKey: function () {
          return u;
        },
        getValue: function () {
          return h;
        },
      };
      d.getValue() > n ? ((n = d.getValue()), (i = []), i.push(d.getKey())) : d.getValue() === n && i.push(d.getKey());
    };
    try {
      for (var o = kh(this.values.entries()), s = o.next(); !s.done; s = o.next()) {
        var c = Bh(s.value, 2);
        var l = c[0];
        var f = c[1];
        a(c[0], c[1]);
      }
    } catch (u) {
      e = { error: u };
    } finally {
      try {
        if (s && !s.done && (r = o.return)) {
          r.call(o);
        }
      } finally {
        if (e) throw e.error;
      }
    }
    return te.toIntArray(i);
  };
  t.prototype.getConfidence = function (e) {
    return this.values.get(e);
  };
  return t;
})();
var Lh = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Hn = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Xa = (function (t) {
  Lh(e, t);
  function e(r, n) {
    var i = t(r) || this;
    i._isLeft = n;
    return i;
  }
  e.prototype.setRowNumbers = function () {
    var r;
    var n;
    try {
      for (var i = Hn(this.getCodewords()), a = i.next(); !a.done; a = i.next()) {
        var o = a.value;
        a.value?.setRowNumberAsRowIndicatorColumn();
      }
    } catch (s) {
      r = { error: s };
    } finally {
      try {
        if (a && !a.done && (n = i.return)) {
          n.call(i);
        }
      } finally {
        if (r) throw r.error;
      }
    }
  };
  e.prototype.adjustCompleteIndicatorColumnRowNumbers = function (r) {
    var n = this.getCodewords();
    this.setRowNumbers();
    this.removeIncorrectCodewords(n, r);
    for (
      var i = this.getBoundingBox(),
        a = this._isLeft ? i.getTopLeft() : i.getTopRight(),
        o = this._isLeft ? i.getBottomLeft() : i.getBottomRight(),
        s = this.imageRowToCodewordIndex(Math.trunc(a.getY())),
        c = this.imageRowToCodewordIndex(Math.trunc(o.getY())),
        l = -1,
        f = 1,
        u = 0,
        h = s;
      h < c;
      h++
    )
      if (n[h] != null) {
        var d = n[h];
        var p = n[h].getRowNumber() - l;
        if (p === 0) u++;
        else if (p === 1) {
          f = Math.max(f, u);
          u = 1;
          l = n[h].getRowNumber();
        } else if (p < 0 || n[h].getRowNumber() >= r.getRowCount() || p > h) n[h] = null;
        else {
          var v = void 0;
          f > 2 ? (v = (f - 2) * p) : (v = p);
          for (var g = v >= h, _ = 1; _ <= v && !g; _++) g = n[h - _] != null;
          g ? (n[h] = null) : ((l = n[h].getRowNumber()), (u = 1));
        }
      }
  };
  e.prototype.getRowHeights = function () {
    var r;
    var n;
    var i = this.getBarcodeMetadata();
    if (i == null) return null;
    this.adjustIncompleteIndicatorColumnRowNumbers(i);
    var a = new Int32Array(i.getRowCount());
    try {
      for (var o = Hn(this.getCodewords()), s = o.next(); !s.done; s = o.next()) {
        var c = s.value;
        if (s.value != null) {
          var l = s.value.getRowNumber();
          if (l >= a.length) continue;
          a[l]++;
        }
      }
    } catch (f) {
      r = { error: f };
    } finally {
      try {
        if (s && !s.done && (n = o.return)) {
          n.call(o);
        }
      } finally {
        if (r) throw r.error;
      }
    }
    return a;
  };
  e.prototype.adjustIncompleteIndicatorColumnRowNumbers = function (r) {
    for (
      var n = this.getBoundingBox(),
        i = this._isLeft ? n.getTopLeft() : n.getTopRight(),
        a = this._isLeft ? n.getBottomLeft() : n.getBottomRight(),
        o = this.imageRowToCodewordIndex(Math.trunc(i.getY())),
        s = this.imageRowToCodewordIndex(Math.trunc(a.getY())),
        c = this.getCodewords(),
        l = -1,
        f = o;
      f < s;
      f++
    )
      if (c[f] != null) {
        var u = c[f];
        c[f].setRowNumberAsRowIndicatorColumn();
        var h = c[f].getRowNumber() - l;
        if (!(h === 0)) {
          h === 1
            ? (l = c[f].getRowNumber())
            : c[f].getRowNumber() >= r.getRowCount()
              ? (c[f] = null)
              : (l = c[f].getRowNumber());
        }
      }
  };
  e.prototype.getBarcodeMetadata = function () {
    var r;
    var n;
    var i = this.getCodewords();
    var a = new wr();
    var o = new wr();
    var s = new wr();
    var c = new wr();
    try {
      for (var l = Hn(i), f = l.next(); !f.done; f = l.next()) {
        var u = f.value;
        if (f.value != null) {
          f.value.setRowNumberAsRowIndicatorColumn();
          var h = f.value.getValue() % 30;
          var d = f.value.getRowNumber();
          switch ((this._isLeft || (d += 2), d % 3)) {
            case 0:
              o.setValue(h * 3 + 1);
              break;
            case 1:
              {
                c.setValue(h / 3);
                s.setValue(h % 3);
              }
              break;
            case 2:
              a.setValue(h + 1);
              break;
          }
        }
      }
    } catch (v) {
      r = { error: v };
    } finally {
      try {
        if (f && !f.done && (n = l.return)) {
          n.call(l);
        }
      } finally {
        if (r) throw r.error;
      }
    }
    if (
      a.getValue().length === 0 ||
      o.getValue().length === 0 ||
      s.getValue().length === 0 ||
      c.getValue().length === 0 ||
      a.getValue()[0] < 1 ||
      o.getValue()[0] + s.getValue()[0] < 3 ||
      o.getValue()[0] + s.getValue()[0] > 90
    )
      return null;
    var p = new Ph(a.getValue()[0], o.getValue()[0], s.getValue()[0], c.getValue()[0]);
    this.removeIncorrectCodewords(i, p);
    return p;
  };
  e.prototype.removeIncorrectCodewords = function (r, n) {
    for (var i = 0; i < r.length; i++) {
      var a = r[i];
      if (r[i] != null) {
        var o = r[i].getValue() % 30;
        var s = r[i].getRowNumber();
        if (s > n.getRowCount()) {
          r[i] = null;
          continue;
        }
        switch ((this._isLeft || (s += 2), s % 3)) {
          case 0:
            if (o * 3 + 1 !== n.getRowCountUpperPart()) {
              r[i] = null;
            }
            break;
          case 1:
            if (Math.trunc(o / 3) !== n.getErrorCorrectionLevel() || o % 3 !== n.getRowCountLowerPart()) {
              r[i] = null;
            }
            break;
          case 2:
            if (o + 1 !== n.getColumnCount()) {
              r[i] = null;
            }
            break;
        }
      }
    }
  };
  e.prototype.isLeft = function () {
    return this._isLeft;
  };
  e.prototype.toString = function () {
    return (
      'IsLeft: ' +
      this._isLeft +
      `
` +
      t.prototype.toString()
    );
  };
  return e;
})(Cs);
var Fh = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Uh = (function () {
  function t(e, r) {
    this.ADJUST_ROW_NUMBER_SKIP = 2;
    this.barcodeMetadata = e;
    this.barcodeColumnCount = e.getColumnCount();
    this.boundingBox = r;
    this.detectionResultColumns = new Array(this.barcodeColumnCount + 2);
  }
  t.prototype.getDetectionResultColumns = function () {
    this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[0]);
    this.adjustIndicatorColumnRowNumbers(this.detectionResultColumns[this.barcodeColumnCount + 1]);
    var e = 928;
    var r;
    do {
      r = e;
      e = this.adjustRowNumbersAndGetCount();
    } while (e > 0 && e < r);
    return this.detectionResultColumns;
  };
  t.prototype.adjustIndicatorColumnRowNumbers = function (e) {
    e?.adjustCompleteIndicatorColumnRowNumbers(this.barcodeMetadata);
  };
  t.prototype.adjustRowNumbersAndGetCount = function () {
    var e = this.adjustRowNumbersByRow();
    if (e === 0) return 0;
    for (var r = 1; r < this.barcodeColumnCount + 1; r++)
      for (var n = this.detectionResultColumns[r].getCodewords(), i = 0; i < n.length; i++)
        if (n[i] != null) {
          if (!n[i].hasValidRowNumber()) {
            this.adjustRowNumbers(r, i, n);
          }
        }
    return e;
  };
  t.prototype.adjustRowNumbersByRow = function () {
    this.adjustRowNumbersFromBothRI();
    var e = this.adjustRowNumbersFromLRI();
    return e + this.adjustRowNumbersFromRRI();
  };
  t.prototype.adjustRowNumbersFromBothRI = function () {
    if (!(this.detectionResultColumns[0] == null || this.detectionResultColumns[this.barcodeColumnCount + 1] == null)) {
      for (
        var e = this.detectionResultColumns[0].getCodewords(),
          r = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords(),
          n = 0;
        n < e.length;
        n++
      )
        if (e[n] != null && r[n] != null && e[n].getRowNumber() === r[n].getRowNumber())
          for (var i = 1; i <= this.barcodeColumnCount; i++) {
            var a = this.detectionResultColumns[i].getCodewords()[n];
            if (this.detectionResultColumns[i].getCodewords()[n] != null) {
              this.detectionResultColumns[i].getCodewords()[n].setRowNumber(e[n].getRowNumber());
              if (!this.detectionResultColumns[i].getCodewords()[n].hasValidRowNumber()) {
                this.detectionResultColumns[i].getCodewords()[n] = null;
              }
            }
          }
    }
  };
  t.prototype.adjustRowNumbersFromRRI = function () {
    if (this.detectionResultColumns[this.barcodeColumnCount + 1] == null) return 0;
    for (
      var e = 0, r = this.detectionResultColumns[this.barcodeColumnCount + 1].getCodewords(), n = 0;
      n < r.length;
      n++
    )
      if (r[n] != null)
        for (
          var i = r[n].getRowNumber(), a = 0, o = this.barcodeColumnCount + 1;
          o > 0 && a < this.ADJUST_ROW_NUMBER_SKIP;
          o--
        ) {
          var s = this.detectionResultColumns[o].getCodewords()[n];
          if (this.detectionResultColumns[o].getCodewords()[n] != null) {
            a = t.adjustRowNumberIfValid(i, a, this.detectionResultColumns[o].getCodewords()[n]);
            if (!this.detectionResultColumns[o].getCodewords()[n].hasValidRowNumber()) {
              e++;
            }
          }
        }
    return e;
  };
  t.prototype.adjustRowNumbersFromLRI = function () {
    if (this.detectionResultColumns[0] == null) return 0;
    for (var e = 0, r = this.detectionResultColumns[0].getCodewords(), n = 0; n < r.length; n++)
      if (r[n] != null)
        for (
          var i = r[n].getRowNumber(), a = 0, o = 1;
          o < this.barcodeColumnCount + 1 && a < this.ADJUST_ROW_NUMBER_SKIP;
          o++
        ) {
          var s = this.detectionResultColumns[o].getCodewords()[n];
          if (this.detectionResultColumns[o].getCodewords()[n] != null) {
            a = t.adjustRowNumberIfValid(i, a, this.detectionResultColumns[o].getCodewords()[n]);
            if (!this.detectionResultColumns[o].getCodewords()[n].hasValidRowNumber()) {
              e++;
            }
          }
        }
    return e;
  };
  t.adjustRowNumberIfValid = function (e, r, n) {
    if (!(n == null || n.hasValidRowNumber())) {
      n.isValidRowNumber(e) ? (n.setRowNumber(e), (r = 0)) : ++r;
    }
    return r;
  };
  t.prototype.adjustRowNumbers = function (e, r, n) {
    var i;
    var a;
    if (this.detectionResultColumns[e - 1] != null) {
      var o = n[r];
      var s = this.detectionResultColumns[e - 1].getCodewords();
      var c = s;
      if (this.detectionResultColumns[e + 1] != null) {
        c = this.detectionResultColumns[e + 1].getCodewords();
      }
      var l = new Array(14);
      l[2] = s[r];
      l[3] = c[r];
      if (r > 0) {
        l[0] = n[r - 1];
        l[4] = s[r - 1];
        l[5] = c[r - 1];
      }
      if (r > 1) {
        l[8] = n[r - 2];
        l[10] = s[r - 2];
        l[11] = c[r - 2];
      }
      if (r < n.length - 1) {
        l[1] = n[r + 1];
        l[6] = s[r + 1];
        l[7] = c[r + 1];
      }
      if (r < n.length - 2) {
        l[9] = n[r + 2];
        l[12] = s[r + 2];
        l[13] = c[r + 2];
      }
      try {
        for (var f = Fh(l), u = f.next(); !u.done; u = f.next()) {
          var h = u.value;
          if (t.adjustRowNumber(n[r], u.value)) return;
        }
      } catch (d) {
        i = { error: d };
      } finally {
        try {
          if (u && !u.done && (a = f.return)) {
            a.call(f);
          }
        } finally {
          if (i) throw i.error;
        }
      }
    }
  };
  t.adjustRowNumber = function (e, r) {
    return r == null
      ? false
      : r.hasValidRowNumber() && r.getBucket() === e.getBucket()
        ? (e.setRowNumber(r.getRowNumber()), true)
        : false;
  };
  t.prototype.getBarcodeColumnCount = function () {
    return this.barcodeColumnCount;
  };
  t.prototype.getBarcodeRowCount = function () {
    return this.barcodeMetadata.getRowCount();
  };
  t.prototype.getBarcodeECLevel = function () {
    return this.barcodeMetadata.getErrorCorrectionLevel();
  };
  t.prototype.setBoundingBox = function (e) {
    this.boundingBox = e;
  };
  t.prototype.getBoundingBox = function () {
    return this.boundingBox;
  };
  t.prototype.setDetectionResultColumn = function (e, r) {
    this.detectionResultColumns[e] = r;
  };
  t.prototype.getDetectionResultColumn = function (e) {
    return this.detectionResultColumns[e];
  };
  t.prototype.toString = function () {
    var e = this.detectionResultColumns[0];
    if (e == null) {
      e = this.detectionResultColumns[this.barcodeColumnCount + 1];
    }
    for (var r = new Zi(), n = 0; n < e.getCodewords().length; n++) {
      r.format('CW %3d:', n);
      for (var i = 0; i < this.barcodeColumnCount + 2; i++) {
        if (this.detectionResultColumns[i] == null) {
          r.format('    |   ');
          continue;
        }
        var a = this.detectionResultColumns[i].getCodewords()[n];
        if (this.detectionResultColumns[i].getCodewords()[n] == null) {
          r.format('    |   ');
          continue;
        }
        r.format(
          ' %3d|%3d',
          this.detectionResultColumns[i].getCodewords()[n].getRowNumber(),
          this.detectionResultColumns[i].getCodewords()[n].getValue(),
        );
      }
      r.format('%n');
    }
    return r.toString();
  };
  return t;
})();
var Vh = (function () {
  function t(e, r, n, i) {
    this.rowNumber = t.BARCODE_ROW_UNKNOWN;
    this.startX = Math.trunc(e);
    this.endX = Math.trunc(r);
    this.bucket = Math.trunc(n);
    this.value = Math.trunc(i);
  }
  t.prototype.hasValidRowNumber = function () {
    return this.isValidRowNumber(this.rowNumber);
  };
  t.prototype.isValidRowNumber = function (e) {
    return e !== t.BARCODE_ROW_UNKNOWN && this.bucket === (e % 3) * 3;
  };
  t.prototype.setRowNumberAsRowIndicatorColumn = function () {
    this.rowNumber = Math.trunc(Math.trunc(this.value / 30) * 3 + Math.trunc(this.bucket / 3));
  };
  t.prototype.getWidth = function () {
    return this.endX - this.startX;
  };
  t.prototype.getStartX = function () {
    return this.startX;
  };
  t.prototype.getEndX = function () {
    return this.endX;
  };
  t.prototype.getBucket = function () {
    return this.bucket;
  };
  t.prototype.getValue = function () {
    return this.value;
  };
  t.prototype.getRowNumber = function () {
    return this.rowNumber;
  };
  t.prototype.setRowNumber = function (e) {
    this.rowNumber = e;
  };
  t.prototype.toString = function () {
    return this.rowNumber + '|' + this.value;
  };
  t.BARCODE_ROW_UNKNOWN = -1;
  return t;
})();
var Gh = (function () {
  function t() {}
  t.initialize = function () {
    for (
      var e = 0;
      e <
      {
        0: 66142,
        1: 66170,
        2: 66206,
        3: 66236,
        4: 66290,
        5: 66292,
        6: 66350,
        7: 66382,
        8: 66396,
        9: 66454,
        10: 66470,
        11: 66476,
        12: 66594,
        13: 66600,
        14: 66614,
        15: 66626,
        16: 66628,
        17: 66632,
        18: 66640,
        19: 66654,
        20: 66662,
        21: 66668,
        22: 66682,
        23: 66690,
        24: 66718,
        25: 66720,
        26: 66748,
        27: 66758,
        28: 66776,
        29: 66798,
        30: 66802,
        31: 66804,
        32: 66820,
        33: 66824,
        34: 66832,
        35: 66846,
        36: 66848,
        37: 66876,
        38: 66880,
        39: 66936,
        40: 66950,
        41: 66956,
        42: 66968,
        43: 66992,
        44: 67006,
        45: 67022,
        46: 67036,
        47: 67042,
        48: 67044,
        49: 67048,
        50: 67062,
        51: 67118,
        52: 67150,
        53: 67164,
        54: 67214,
        55: 67228,
        56: 67256,
        57: 67294,
        58: 67322,
        59: 67350,
        60: 67366,
        61: 67372,
        62: 67398,
        63: 67404,
        64: 67416,
        65: 67438,
        66: 67474,
        67: 67476,
        68: 67490,
        69: 67492,
        70: 67496,
        71: 67510,
        72: 67618,
        73: 67624,
        74: 67650,
        75: 67656,
        76: 67664,
        77: 67678,
        78: 67686,
        79: 67692,
        80: 67706,
        81: 67714,
        82: 67716,
        83: 67728,
        84: 67742,
        85: 67744,
        86: 67772,
        87: 67782,
        88: 67788,
        89: 67800,
        90: 67822,
        91: 67826,
        92: 67828,
        93: 67842,
        94: 67848,
        95: 67870,
        96: 67872,
        97: 67900,
        98: 67904,
        99: 67960,
        100: 67974,
        101: 67992,
        102: 68016,
        103: 68030,
        104: 68046,
        105: 68060,
        106: 68066,
        107: 68068,
        108: 68072,
        109: 68086,
        110: 68104,
        111: 68112,
        112: 68126,
        113: 68128,
        114: 68156,
        115: 68160,
        116: 68216,
        117: 68336,
        118: 68358,
        119: 68364,
        120: 68376,
        121: 68400,
        122: 68414,
        123: 68448,
        124: 68476,
        125: 68494,
        126: 68508,
        127: 68536,
        128: 68546,
        129: 68548,
        130: 68552,
        131: 68560,
        132: 68574,
        133: 68582,
        134: 68588,
        135: 68654,
        136: 68686,
        137: 68700,
        138: 68706,
        139: 68708,
        140: 68712,
        141: 68726,
        142: 68750,
        143: 68764,
        144: 68792,
        145: 68802,
        146: 68804,
        147: 68808,
        148: 68816,
        149: 68830,
        150: 68838,
        151: 68844,
        152: 68858,
        153: 68878,
        154: 68892,
        155: 68920,
        156: 68976,
        157: 68990,
        158: 68994,
        159: 68996,
        160: 69000,
        161: 69008,
        162: 69022,
        163: 69024,
        164: 69052,
        165: 69062,
        166: 69068,
        167: 69080,
        168: 69102,
        169: 69106,
        170: 69108,
        171: 69142,
        172: 69158,
        173: 69164,
        174: 69190,
        175: 69208,
        176: 69230,
        177: 69254,
        178: 69260,
        179: 69272,
        180: 69296,
        181: 69310,
        182: 69326,
        183: 69340,
        184: 69386,
        185: 69394,
        186: 69396,
        187: 69410,
        188: 69416,
        189: 69430,
        190: 69442,
        191: 69444,
        192: 69448,
        193: 69456,
        194: 69470,
        195: 69478,
        196: 69484,
        197: 69554,
        198: 69556,
        199: 69666,
        200: 69672,
        201: 69698,
        202: 69704,
        203: 69712,
        204: 69726,
        205: 69754,
        206: 69762,
        207: 69764,
        208: 69776,
        209: 69790,
        210: 69792,
        211: 69820,
        212: 69830,
        213: 69836,
        214: 69848,
        215: 69870,
        216: 69874,
        217: 69876,
        218: 69890,
        219: 69918,
        220: 69920,
        221: 69948,
        222: 69952,
        223: 70008,
        224: 70022,
        225: 70040,
        226: 70064,
        227: 70078,
        228: 70094,
        229: 70108,
        230: 70114,
        231: 70116,
        232: 70120,
        233: 70134,
        234: 70152,
        235: 70174,
        236: 70176,
        237: 70264,
        238: 70384,
        239: 70412,
        240: 70448,
        241: 70462,
        242: 70496,
        243: 70524,
        244: 70542,
        245: 70556,
        246: 70584,
        247: 70594,
        248: 70600,
        249: 70608,
        250: 70622,
        251: 70630,
        252: 70636,
        253: 70664,
        254: 70672,
        255: 70686,
        256: 70688,
        257: 70716,
        258: 70720,
        259: 70776,
        260: 70896,
        261: 71136,
        262: 71180,
        263: 71192,
        264: 71216,
        265: 71230,
        266: 71264,
        267: 71292,
        268: 71360,
        269: 71416,
        270: 71452,
        271: 71480,
        272: 71536,
        273: 71550,
        274: 71554,
        275: 71556,
        276: 71560,
        277: 71568,
        278: 71582,
        279: 71584,
        280: 71612,
        281: 71622,
        282: 71628,
        283: 71640,
        284: 71662,
        285: 71726,
        286: 71732,
        287: 71758,
        288: 71772,
        289: 71778,
        290: 71780,
        291: 71784,
        292: 71798,
        293: 71822,
        294: 71836,
        295: 71864,
        296: 71874,
        297: 71880,
        298: 71888,
        299: 71902,
        300: 71910,
        301: 71916,
        302: 71930,
        303: 71950,
        304: 71964,
        305: 71992,
        306: 72048,
        307: 72062,
        308: 72066,
        309: 72068,
        310: 72080,
        311: 72094,
        312: 72096,
        313: 72124,
        314: 72134,
        315: 72140,
        316: 72152,
        317: 72174,
        318: 72178,
        319: 72180,
        320: 72206,
        321: 72220,
        322: 72248,
        323: 72304,
        324: 72318,
        325: 72416,
        326: 72444,
        327: 72456,
        328: 72464,
        329: 72478,
        330: 72480,
        331: 72508,
        332: 72512,
        333: 72568,
        334: 72588,
        335: 72600,
        336: 72624,
        337: 72638,
        338: 72654,
        339: 72668,
        340: 72674,
        341: 72676,
        342: 72680,
        343: 72694,
        344: 72726,
        345: 72742,
        346: 72748,
        347: 72774,
        348: 72780,
        349: 72792,
        350: 72814,
        351: 72838,
        352: 72856,
        353: 72880,
        354: 72894,
        355: 72910,
        356: 72924,
        357: 72930,
        358: 72932,
        359: 72936,
        360: 72950,
        361: 72966,
        362: 72972,
        363: 72984,
        364: 73008,
        365: 73022,
        366: 73056,
        367: 73084,
        368: 73102,
        369: 73116,
        370: 73144,
        371: 73156,
        372: 73160,
        373: 73168,
        374: 73182,
        375: 73190,
        376: 73196,
        377: 73210,
        378: 73226,
        379: 73234,
        380: 73236,
        381: 73250,
        382: 73252,
        383: 73256,
        384: 73270,
        385: 73282,
        386: 73284,
        387: 73296,
        388: 73310,
        389: 73318,
        390: 73324,
        391: 73346,
        392: 73348,
        393: 73352,
        394: 73360,
        395: 73374,
        396: 73376,
        397: 73404,
        398: 73414,
        399: 73420,
        400: 73432,
        401: 73454,
        402: 73498,
        403: 73518,
        404: 73522,
        405: 73524,
        406: 73550,
        407: 73564,
        408: 73570,
        409: 73572,
        410: 73576,
        411: 73590,
        412: 73800,
        413: 73822,
        414: 73858,
        415: 73860,
        416: 73872,
        417: 73886,
        418: 73888,
        419: 73916,
        420: 73944,
        421: 73970,
        422: 73972,
        423: 73992,
        424: 74014,
        425: 74016,
        426: 74044,
        427: 74048,
        428: 74104,
        429: 74118,
        430: 74136,
        431: 74160,
        432: 74174,
        433: 74210,
        434: 74212,
        435: 74216,
        436: 74230,
        437: 74244,
        438: 74256,
        439: 74270,
        440: 74272,
        441: 74360,
        442: 74480,
        443: 74502,
        444: 74508,
        445: 74544,
        446: 74558,
        447: 74592,
        448: 74620,
        449: 74638,
        450: 74652,
        451: 74680,
        452: 74690,
        453: 74696,
        454: 74704,
        455: 74726,
        456: 74732,
        457: 74782,
        458: 74784,
        459: 74812,
        460: 74992,
        461: 75232,
        462: 75288,
        463: 75326,
        464: 75360,
        465: 75388,
        466: 75456,
        467: 75512,
        468: 75576,
        469: 75632,
        470: 75646,
        471: 75650,
        472: 75652,
        473: 75664,
        474: 75678,
        475: 75680,
        476: 75708,
        477: 75718,
        478: 75724,
        479: 75736,
        480: 75758,
        481: 75808,
        482: 75836,
        483: 75840,
        484: 75896,
        485: 76016,
        486: 76256,
        487: 76736,
        488: 76824,
        489: 76848,
        490: 76862,
        491: 76896,
        492: 76924,
        493: 76992,
        494: 77048,
        495: 77296,
        496: 77340,
        497: 77368,
        498: 77424,
        499: 77438,
        500: 77536,
        501: 77564,
        502: 77572,
        503: 77576,
        504: 77584,
        505: 77600,
        506: 77628,
        507: 77632,
        508: 77688,
        509: 77702,
        510: 77708,
        511: 77720,
        512: 77744,
        513: 77758,
        514: 77774,
        515: 77788,
        516: 77870,
        517: 77902,
        518: 77916,
        519: 77922,
        520: 77928,
        521: 77966,
        522: 77980,
        523: 78008,
        524: 78018,
        525: 78024,
        526: 78032,
        527: 78046,
        528: 78060,
        529: 78074,
        530: 78094,
        531: 78136,
        532: 78192,
        533: 78206,
        534: 78210,
        535: 78212,
        536: 78224,
        537: 78238,
        538: 78240,
        539: 78268,
        540: 78278,
        541: 78284,
        542: 78296,
        543: 78322,
        544: 78324,
        545: 78350,
        546: 78364,
        547: 78448,
        548: 78462,
        549: 78560,
        550: 78588,
        551: 78600,
        552: 78622,
        553: 78624,
        554: 78652,
        555: 78656,
        556: 78712,
        557: 78726,
        558: 78744,
        559: 78768,
        560: 78782,
        561: 78798,
        562: 78812,
        563: 78818,
        564: 78820,
        565: 78824,
        566: 78838,
        567: 78862,
        568: 78876,
        569: 78904,
        570: 78960,
        571: 78974,
        572: 79072,
        573: 79100,
        574: 79296,
        575: 79352,
        576: 79368,
        577: 79376,
        578: 79390,
        579: 79392,
        580: 79420,
        581: 79424,
        582: 79480,
        583: 79600,
        584: 79628,
        585: 79640,
        586: 79664,
        587: 79678,
        588: 79712,
        589: 79740,
        590: 79772,
        591: 79800,
        592: 79810,
        593: 79812,
        594: 79816,
        595: 79824,
        596: 79838,
        597: 79846,
        598: 79852,
        599: 79894,
        600: 79910,
        601: 79916,
        602: 79942,
        603: 79948,
        604: 79960,
        605: 79982,
        606: 79988,
        607: 80006,
        608: 80024,
        609: 80048,
        610: 80062,
        611: 80078,
        612: 80092,
        613: 80098,
        614: 80100,
        615: 80104,
        616: 80134,
        617: 80140,
        618: 80176,
        619: 80190,
        620: 80224,
        621: 80252,
        622: 80270,
        623: 80284,
        624: 80312,
        625: 80328,
        626: 80336,
        627: 80350,
        628: 80358,
        629: 80364,
        630: 80378,
        631: 80390,
        632: 80396,
        633: 80408,
        634: 80432,
        635: 80446,
        636: 80480,
        637: 80508,
        638: 80576,
        639: 80632,
        640: 80654,
        641: 80668,
        642: 80696,
        643: 80752,
        644: 80766,
        645: 80776,
        646: 80784,
        647: 80798,
        648: 80800,
        649: 80828,
        650: 80844,
        651: 80856,
        652: 80878,
        653: 80882,
        654: 80884,
        655: 80914,
        656: 80916,
        657: 80930,
        658: 80932,
        659: 80936,
        660: 80950,
        661: 80962,
        662: 80968,
        663: 80976,
        664: 80990,
        665: 80998,
        666: 81004,
        667: 81026,
        668: 81028,
        669: 81040,
        670: 81054,
        671: 81056,
        672: 81084,
        673: 81094,
        674: 81100,
        675: 81112,
        676: 81134,
        677: 81154,
        678: 81156,
        679: 81160,
        680: 81168,
        681: 81182,
        682: 81184,
        683: 81212,
        684: 81216,
        685: 81272,
        686: 81286,
        687: 81292,
        688: 81304,
        689: 81328,
        690: 81342,
        691: 81358,
        692: 81372,
        693: 81380,
        694: 81384,
        695: 81398,
        696: 81434,
        697: 81454,
        698: 81458,
        699: 81460,
        700: 81486,
        701: 81500,
        702: 81506,
        703: 81508,
        704: 81512,
        705: 81526,
        706: 81550,
        707: 81564,
        708: 81592,
        709: 81602,
        710: 81604,
        711: 81608,
        712: 81616,
        713: 81630,
        714: 81638,
        715: 81644,
        716: 81702,
        717: 81708,
        718: 81722,
        719: 81734,
        720: 81740,
        721: 81752,
        722: 81774,
        723: 81778,
        724: 81780,
        725: 82050,
        726: 82078,
        727: 82080,
        728: 82108,
        729: 82180,
        730: 82184,
        731: 82192,
        732: 82206,
        733: 82208,
        734: 82236,
        735: 82240,
        736: 82296,
        737: 82316,
        738: 82328,
        739: 82352,
        740: 82366,
        741: 82402,
        742: 82404,
        743: 82408,
        744: 82440,
        745: 82448,
        746: 82462,
        747: 82464,
        748: 82492,
        749: 82496,
        750: 82552,
        751: 82672,
        752: 82694,
        753: 82700,
        754: 82712,
        755: 82736,
        756: 82750,
        757: 82784,
        758: 82812,
        759: 82830,
        760: 82882,
        761: 82884,
        762: 82888,
        763: 82896,
        764: 82918,
        765: 82924,
        766: 82952,
        767: 82960,
        768: 82974,
        769: 82976,
        770: 83004,
        771: 83008,
        772: 83064,
        773: 83184,
        774: 83424,
        775: 83468,
        776: 83480,
        777: 83504,
        778: 83518,
        779: 83552,
        780: 83580,
        781: 83648,
        782: 83704,
        783: 83740,
        784: 83768,
        785: 83824,
        786: 83838,
        787: 83842,
        788: 83844,
        789: 83848,
        790: 83856,
        791: 83872,
        792: 83900,
        793: 83910,
        794: 83916,
        795: 83928,
        796: 83950,
        797: 83984,
        798: 84000,
        799: 84028,
        800: 84032,
        801: 84088,
        802: 84208,
        803: 84448,
        804: 84928,
        805: 85040,
        806: 85054,
        807: 85088,
        808: 85116,
        809: 85184,
        810: 85240,
        811: 85488,
        812: 85560,
        813: 85616,
        814: 85630,
        815: 85728,
        816: 85756,
        817: 85764,
        818: 85768,
        819: 85776,
        820: 85790,
        821: 85792,
        822: 85820,
        823: 85824,
        824: 85880,
        825: 85894,
        826: 85900,
        827: 85912,
        828: 85936,
        829: 85966,
        830: 85980,
        831: 86048,
        832: 86080,
        833: 86136,
        834: 86256,
        835: 86496,
        836: 86976,
        837: 88160,
        838: 88188,
        839: 88256,
        840: 88312,
        841: 88560,
        842: 89056,
        843: 89200,
        844: 89214,
        845: 89312,
        846: 89340,
        847: 89536,
        848: 89592,
        849: 89608,
        850: 89616,
        851: 89632,
        852: 89664,
        853: 89720,
        854: 89840,
        855: 89868,
        856: 89880,
        857: 89904,
        858: 89952,
        859: 89980,
        860: 89998,
        861: 90012,
        862: 90040,
        863: 90190,
        864: 90204,
        865: 90254,
        866: 90268,
        867: 90296,
        868: 90306,
        869: 90308,
        870: 90312,
        871: 90334,
        872: 90382,
        873: 90396,
        874: 90424,
        875: 90480,
        876: 90494,
        877: 90500,
        878: 90504,
        879: 90512,
        880: 90526,
        881: 90528,
        882: 90556,
        883: 90566,
        884: 90572,
        885: 90584,
        886: 90610,
        887: 90612,
        888: 90638,
        889: 90652,
        890: 90680,
        891: 90736,
        892: 90750,
        893: 90848,
        894: 90876,
        895: 90884,
        896: 90888,
        897: 90896,
        898: 90910,
        899: 90912,
        900: 90940,
        901: 90944,
        902: 91000,
        903: 91014,
        904: 91020,
        905: 91032,
        906: 91056,
        907: 91070,
        908: 91086,
        909: 91100,
        910: 91106,
        911: 91108,
        912: 91112,
        913: 91126,
        914: 91150,
        915: 91164,
        916: 91192,
        917: 91248,
        918: 91262,
        919: 91360,
        920: 91388,
        921: 91584,
        922: 91640,
        923: 91664,
        924: 91678,
        925: 91680,
        926: 91708,
        927: 91712,
        928: 91768,
        929: 91888,
        930: 91928,
        931: 91952,
        932: 91966,
        933: 92000,
        934: 92028,
        935: 92046,
        936: 92060,
        937: 92088,
        938: 92098,
        939: 92100,
        940: 92104,
        941: 92112,
        942: 92126,
        943: 92134,
        944: 92140,
        945: 92188,
        946: 92216,
        947: 92272,
        948: 92384,
        949: 92412,
        950: 92608,
        951: 92664,
        952: 93168,
        953: 93200,
        954: 93214,
        955: 93216,
        956: 93244,
        957: 93248,
        958: 93304,
        959: 93424,
        960: 93664,
        961: 93720,
        962: 93744,
        963: 93758,
        964: 93792,
        965: 93820,
        966: 93888,
        967: 93944,
        968: 93980,
        969: 94008,
        970: 94064,
        971: 94078,
        972: 94084,
        973: 94088,
        974: 94096,
        975: 94110,
        976: 94112,
        977: 94140,
        978: 94150,
        979: 94156,
        980: 94168,
        981: 94246,
        982: 94252,
        983: 94278,
        984: 94284,
        985: 94296,
        986: 94318,
        987: 94342,
        988: 94348,
        989: 94360,
        990: 94384,
        991: 94398,
        992: 94414,
        993: 94428,
        994: 94440,
        995: 94470,
        996: 94476,
        997: 94488,
        998: 94512,
        999: 94526,
        1000: 94560,
        1001: 94588,
        1002: 94606,
        1003: 94620,
        1004: 94648,
        1005: 94658,
        1006: 94660,
        1007: 94664,
        1008: 94672,
        1009: 94686,
        1010: 94694,
        1011: 94700,
        1012: 94714,
        1013: 94726,
        1014: 94732,
        1015: 94744,
        1016: 94768,
        1017: 94782,
        1018: 94816,
        1019: 94844,
        1020: 94912,
        1021: 94968,
        1022: 94990,
        1023: 95004,
        1024: 95032,
        1025: 95088,
        1026: 95102,
        1027: 95112,
        1028: 95120,
        1029: 95134,
        1030: 95136,
        1031: 95164,
        1032: 95180,
        1033: 95192,
        1034: 95214,
        1035: 95218,
        1036: 95220,
        1037: 95244,
        1038: 95256,
        1039: 95280,
        1040: 95294,
        1041: 95328,
        1042: 95356,
        1043: 95424,
        1044: 95480,
        1045: 95728,
        1046: 95758,
        1047: 95772,
        1048: 95800,
        1049: 95856,
        1050: 95870,
        1051: 95968,
        1052: 95996,
        1053: 96008,
        1054: 96016,
        1055: 96030,
        1056: 96032,
        1057: 96060,
        1058: 96064,
        1059: 96120,
        1060: 96152,
        1061: 96176,
        1062: 96190,
        1063: 96220,
        1064: 96226,
        1065: 96228,
        1066: 96232,
        1067: 96290,
        1068: 96292,
        1069: 96296,
        1070: 96310,
        1071: 96322,
        1072: 96324,
        1073: 96328,
        1074: 96336,
        1075: 96350,
        1076: 96358,
        1077: 96364,
        1078: 96386,
        1079: 96388,
        1080: 96392,
        1081: 96400,
        1082: 96414,
        1083: 96416,
        1084: 96444,
        1085: 96454,
        1086: 96460,
        1087: 96472,
        1088: 96494,
        1089: 96498,
        1090: 96500,
        1091: 96514,
        1092: 96516,
        1093: 96520,
        1094: 96528,
        1095: 96542,
        1096: 96544,
        1097: 96572,
        1098: 96576,
        1099: 96632,
        1100: 96646,
        1101: 96652,
        1102: 96664,
        1103: 96688,
        1104: 96702,
        1105: 96718,
        1106: 96732,
        1107: 96738,
        1108: 96740,
        1109: 96744,
        1110: 96758,
        1111: 96772,
        1112: 96776,
        1113: 96784,
        1114: 96798,
        1115: 96800,
        1116: 96828,
        1117: 96832,
        1118: 96888,
        1119: 97008,
        1120: 97030,
        1121: 97036,
        1122: 97048,
        1123: 97072,
        1124: 97086,
        1125: 97120,
        1126: 97148,
        1127: 97166,
        1128: 97180,
        1129: 97208,
        1130: 97220,
        1131: 97224,
        1132: 97232,
        1133: 97246,
        1134: 97254,
        1135: 97260,
        1136: 97326,
        1137: 97330,
        1138: 97332,
        1139: 97358,
        1140: 97372,
        1141: 97378,
        1142: 97380,
        1143: 97384,
        1144: 97398,
        1145: 97422,
        1146: 97436,
        1147: 97464,
        1148: 97474,
        1149: 97476,
        1150: 97480,
        1151: 97488,
        1152: 97502,
        1153: 97510,
        1154: 97516,
        1155: 97550,
        1156: 97564,
        1157: 97592,
        1158: 97648,
        1159: 97666,
        1160: 97668,
        1161: 97672,
        1162: 97680,
        1163: 97694,
        1164: 97696,
        1165: 97724,
        1166: 97734,
        1167: 97740,
        1168: 97752,
        1169: 97774,
        1170: 97830,
        1171: 97836,
        1172: 97850,
        1173: 97862,
        1174: 97868,
        1175: 97880,
        1176: 97902,
        1177: 97906,
        1178: 97908,
        1179: 97926,
        1180: 97932,
        1181: 97944,
        1182: 97968,
        1183: 97998,
        1184: 98012,
        1185: 98018,
        1186: 98020,
        1187: 98024,
        1188: 98038,
        1189: 98618,
        1190: 98674,
        1191: 98676,
        1192: 98838,
        1193: 98854,
        1194: 98874,
        1195: 98892,
        1196: 98904,
        1197: 98926,
        1198: 98930,
        1199: 98932,
        1200: 98968,
        1201: 99006,
        1202: 99042,
        1203: 99044,
        1204: 99048,
        1205: 99062,
        1206: 99166,
        1207: 99194,
        1208: 99246,
        1209: 99286,
        1210: 99350,
        1211: 99366,
        1212: 99372,
        1213: 99386,
        1214: 99398,
        1215: 99416,
        1216: 99438,
        1217: 99442,
        1218: 99444,
        1219: 99462,
        1220: 99504,
        1221: 99518,
        1222: 99534,
        1223: 99548,
        1224: 99554,
        1225: 99556,
        1226: 99560,
        1227: 99574,
        1228: 99590,
        1229: 99596,
        1230: 99608,
        1231: 99632,
        1232: 99646,
        1233: 99680,
        1234: 99708,
        1235: 99726,
        1236: 99740,
        1237: 99768,
        1238: 99778,
        1239: 99780,
        1240: 99784,
        1241: 99792,
        1242: 99806,
        1243: 99814,
        1244: 99820,
        1245: 99834,
        1246: 99858,
        1247: 99860,
        1248: 99874,
        1249: 99880,
        1250: 99894,
        1251: 99906,
        1252: 99920,
        1253: 99934,
        1254: 99962,
        1255: 99970,
        1256: 99972,
        1257: 99976,
        1258: 99984,
        1259: 99998,
        1260: 100000,
        1261: 100028,
        1262: 100038,
        1263: 100044,
        1264: 100056,
        1265: 100078,
        1266: 100082,
        1267: 100084,
        1268: 100142,
        1269: 100174,
        1270: 100188,
        1271: 100246,
        1272: 100262,
        1273: 100268,
        1274: 100306,
        1275: 100308,
        1276: 100390,
        1277: 100396,
        1278: 100410,
        1279: 100422,
        1280: 100428,
        1281: 100440,
        1282: 100462,
        1283: 100466,
        1284: 100468,
        1285: 100486,
        1286: 100504,
        1287: 100528,
        1288: 100542,
        1289: 100558,
        1290: 100572,
        1291: 100578,
        1292: 100580,
        1293: 100584,
        1294: 100598,
        1295: 100620,
        1296: 100656,
        1297: 100670,
        1298: 100704,
        1299: 100732,
        1300: 100750,
        1301: 100792,
        1302: 100802,
        1303: 100808,
        1304: 100816,
        1305: 100830,
        1306: 100838,
        1307: 100844,
        1308: 100858,
        1309: 100888,
        1310: 100912,
        1311: 100926,
        1312: 100960,
        1313: 100988,
        1314: 101056,
        1315: 101112,
        1316: 101148,
        1317: 101176,
        1318: 101232,
        1319: 101246,
        1320: 101250,
        1321: 101252,
        1322: 101256,
        1323: 101264,
        1324: 101278,
        1325: 101280,
        1326: 101308,
        1327: 101318,
        1328: 101324,
        1329: 101336,
        1330: 101358,
        1331: 101362,
        1332: 101364,
        1333: 101410,
        1334: 101412,
        1335: 101416,
        1336: 101430,
        1337: 101442,
        1338: 101448,
        1339: 101456,
        1340: 101470,
        1341: 101478,
        1342: 101498,
        1343: 101506,
        1344: 101508,
        1345: 101520,
        1346: 101534,
        1347: 101536,
        1348: 101564,
        1349: 101580,
        1350: 101618,
        1351: 101620,
        1352: 101636,
        1353: 101640,
        1354: 101648,
        1355: 101662,
        1356: 101664,
        1357: 101692,
        1358: 101696,
        1359: 101752,
        1360: 101766,
        1361: 101784,
        1362: 101838,
        1363: 101858,
        1364: 101860,
        1365: 101864,
        1366: 101934,
        1367: 101938,
        1368: 101940,
        1369: 101966,
        1370: 101980,
        1371: 101986,
        1372: 101988,
        1373: 101992,
        1374: 102030,
        1375: 102044,
        1376: 102072,
        1377: 102082,
        1378: 102084,
        1379: 102088,
        1380: 102096,
        1381: 102138,
        1382: 102166,
        1383: 102182,
        1384: 102188,
        1385: 102214,
        1386: 102220,
        1387: 102232,
        1388: 102254,
        1389: 102282,
        1390: 102290,
        1391: 102292,
        1392: 102306,
        1393: 102308,
        1394: 102312,
        1395: 102326,
        1396: 102444,
        1397: 102458,
        1398: 102470,
        1399: 102476,
        1400: 102488,
        1401: 102514,
        1402: 102516,
        1403: 102534,
        1404: 102552,
        1405: 102576,
        1406: 102590,
        1407: 102606,
        1408: 102620,
        1409: 102626,
        1410: 102632,
        1411: 102646,
        1412: 102662,
        1413: 102668,
        1414: 102704,
        1415: 102718,
        1416: 102752,
        1417: 102780,
        1418: 102798,
        1419: 102812,
        1420: 102840,
        1421: 102850,
        1422: 102856,
        1423: 102864,
        1424: 102878,
        1425: 102886,
        1426: 102892,
        1427: 102906,
        1428: 102936,
        1429: 102974,
        1430: 103008,
        1431: 103036,
        1432: 103104,
        1433: 103160,
        1434: 103224,
        1435: 103280,
        1436: 103294,
        1437: 103298,
        1438: 103300,
        1439: 103312,
        1440: 103326,
        1441: 103328,
        1442: 103356,
        1443: 103366,
        1444: 103372,
        1445: 103384,
        1446: 103406,
        1447: 103410,
        1448: 103412,
        1449: 103472,
        1450: 103486,
        1451: 103520,
        1452: 103548,
        1453: 103616,
        1454: 103672,
        1455: 103920,
        1456: 103992,
        1457: 104048,
        1458: 104062,
        1459: 104160,
        1460: 104188,
        1461: 104194,
        1462: 104196,
        1463: 104200,
        1464: 104208,
        1465: 104224,
        1466: 104252,
        1467: 104256,
        1468: 104312,
        1469: 104326,
        1470: 104332,
        1471: 104344,
        1472: 104368,
        1473: 104382,
        1474: 104398,
        1475: 104412,
        1476: 104418,
        1477: 104420,
        1478: 104424,
        1479: 104482,
        1480: 104484,
        1481: 104514,
        1482: 104520,
        1483: 104528,
        1484: 104542,
        1485: 104550,
        1486: 104570,
        1487: 104578,
        1488: 104580,
        1489: 104592,
        1490: 104606,
        1491: 104608,
        1492: 104636,
        1493: 104652,
        1494: 104690,
        1495: 104692,
        1496: 104706,
        1497: 104712,
        1498: 104734,
        1499: 104736,
        1500: 104764,
        1501: 104768,
        1502: 104824,
        1503: 104838,
        1504: 104856,
        1505: 104910,
        1506: 104930,
        1507: 104932,
        1508: 104936,
        1509: 104968,
        1510: 104976,
        1511: 104990,
        1512: 104992,
        1513: 105020,
        1514: 105024,
        1515: 105080,
        1516: 105200,
        1517: 105240,
        1518: 105278,
        1519: 105312,
        1520: 105372,
        1521: 105410,
        1522: 105412,
        1523: 105416,
        1524: 105424,
        1525: 105446,
        1526: 105518,
        1527: 105524,
        1528: 105550,
        1529: 105564,
        1530: 105570,
        1531: 105572,
        1532: 105576,
        1533: 105614,
        1534: 105628,
        1535: 105656,
        1536: 105666,
        1537: 105672,
        1538: 105680,
        1539: 105702,
        1540: 105722,
        1541: 105742,
        1542: 105756,
        1543: 105784,
        1544: 105840,
        1545: 105854,
        1546: 105858,
        1547: 105860,
        1548: 105864,
        1549: 105872,
        1550: 105888,
        1551: 105932,
        1552: 105970,
        1553: 105972,
        1554: 106006,
        1555: 106022,
        1556: 106028,
        1557: 106054,
        1558: 106060,
        1559: 106072,
        1560: 106100,
        1561: 106118,
        1562: 106124,
        1563: 106136,
        1564: 106160,
        1565: 106174,
        1566: 106190,
        1567: 106210,
        1568: 106212,
        1569: 106216,
        1570: 106250,
        1571: 106258,
        1572: 106260,
        1573: 106274,
        1574: 106276,
        1575: 106280,
        1576: 106306,
        1577: 106308,
        1578: 106312,
        1579: 106320,
        1580: 106334,
        1581: 106348,
        1582: 106394,
        1583: 106414,
        1584: 106418,
        1585: 106420,
        1586: 106566,
        1587: 106572,
        1588: 106610,
        1589: 106612,
        1590: 106630,
        1591: 106636,
        1592: 106648,
        1593: 106672,
        1594: 106686,
        1595: 106722,
        1596: 106724,
        1597: 106728,
        1598: 106742,
        1599: 106758,
        1600: 106764,
        1601: 106776,
        1602: 106800,
        1603: 106814,
        1604: 106848,
        1605: 106876,
        1606: 106894,
        1607: 106908,
        1608: 106936,
        1609: 106946,
        1610: 106948,
        1611: 106952,
        1612: 106960,
        1613: 106974,
        1614: 106982,
        1615: 106988,
        1616: 107032,
        1617: 107056,
        1618: 107070,
        1619: 107104,
        1620: 107132,
        1621: 107200,
        1622: 107256,
        1623: 107292,
        1624: 107320,
        1625: 107376,
        1626: 107390,
        1627: 107394,
        1628: 107396,
        1629: 107400,
        1630: 107408,
        1631: 107422,
        1632: 107424,
        1633: 107452,
        1634: 107462,
        1635: 107468,
        1636: 107480,
        1637: 107502,
        1638: 107506,
        1639: 107508,
        1640: 107544,
        1641: 107568,
        1642: 107582,
        1643: 107616,
        1644: 107644,
        1645: 107712,
        1646: 107768,
        1647: 108016,
        1648: 108060,
        1649: 108088,
        1650: 108144,
        1651: 108158,
        1652: 108256,
        1653: 108284,
        1654: 108290,
        1655: 108292,
        1656: 108296,
        1657: 108304,
        1658: 108318,
        1659: 108320,
        1660: 108348,
        1661: 108352,
        1662: 108408,
        1663: 108422,
        1664: 108428,
        1665: 108440,
        1666: 108464,
        1667: 108478,
        1668: 108494,
        1669: 108508,
        1670: 108514,
        1671: 108516,
        1672: 108520,
        1673: 108592,
        1674: 108640,
        1675: 108668,
        1676: 108736,
        1677: 108792,
        1678: 109040,
        1679: 109536,
        1680: 109680,
        1681: 109694,
        1682: 109792,
        1683: 109820,
        1684: 110016,
        1685: 110072,
        1686: 110084,
        1687: 110088,
        1688: 110096,
        1689: 110112,
        1690: 110140,
        1691: 110144,
        1692: 110200,
        1693: 110320,
        1694: 110342,
        1695: 110348,
        1696: 110360,
        1697: 110384,
        1698: 110398,
        1699: 110432,
        1700: 110460,
        1701: 110478,
        1702: 110492,
        1703: 110520,
        1704: 110532,
        1705: 110536,
        1706: 110544,
        1707: 110558,
        1708: 110658,
        1709: 110686,
        1710: 110714,
        1711: 110722,
        1712: 110724,
        1713: 110728,
        1714: 110736,
        1715: 110750,
        1716: 110752,
        1717: 110780,
        1718: 110796,
        1719: 110834,
        1720: 110836,
        1721: 110850,
        1722: 110852,
        1723: 110856,
        1724: 110864,
        1725: 110878,
        1726: 110880,
        1727: 110908,
        1728: 110912,
        1729: 110968,
        1730: 110982,
        1731: 111000,
        1732: 111054,
        1733: 111074,
        1734: 111076,
        1735: 111080,
        1736: 111108,
        1737: 111112,
        1738: 111120,
        1739: 111134,
        1740: 111136,
        1741: 111164,
        1742: 111168,
        1743: 111224,
        1744: 111344,
        1745: 111372,
        1746: 111422,
        1747: 111456,
        1748: 111516,
        1749: 111554,
        1750: 111556,
        1751: 111560,
        1752: 111568,
        1753: 111590,
        1754: 111632,
        1755: 111646,
        1756: 111648,
        1757: 111676,
        1758: 111680,
        1759: 111736,
        1760: 111856,
        1761: 112096,
        1762: 112152,
        1763: 112224,
        1764: 112252,
        1765: 112320,
        1766: 112440,
        1767: 112514,
        1768: 112516,
        1769: 112520,
        1770: 112528,
        1771: 112542,
        1772: 112544,
        1773: 112588,
        1774: 112686,
        1775: 112718,
        1776: 112732,
        1777: 112782,
        1778: 112796,
        1779: 112824,
        1780: 112834,
        1781: 112836,
        1782: 112840,
        1783: 112848,
        1784: 112870,
        1785: 112890,
        1786: 112910,
        1787: 112924,
        1788: 112952,
        1789: 113008,
        1790: 113022,
        1791: 113026,
        1792: 113028,
        1793: 113032,
        1794: 113040,
        1795: 113054,
        1796: 113056,
        1797: 113100,
        1798: 113138,
        1799: 113140,
        1800: 113166,
        1801: 113180,
        1802: 113208,
        1803: 113264,
        1804: 113278,
        1805: 113376,
        1806: 113404,
        1807: 113416,
        1808: 113424,
        1809: 113440,
        1810: 113468,
        1811: 113472,
        1812: 113560,
        1813: 113614,
        1814: 113634,
        1815: 113636,
        1816: 113640,
        1817: 113686,
        1818: 113702,
        1819: 113708,
        1820: 113734,
        1821: 113740,
        1822: 113752,
        1823: 113778,
        1824: 113780,
        1825: 113798,
        1826: 113804,
        1827: 113816,
        1828: 113840,
        1829: 113854,
        1830: 113870,
        1831: 113890,
        1832: 113892,
        1833: 113896,
        1834: 113926,
        1835: 113932,
        1836: 113944,
        1837: 113968,
        1838: 113982,
        1839: 114016,
        1840: 114044,
        1841: 114076,
        1842: 114114,
        1843: 114116,
        1844: 114120,
        1845: 114128,
        1846: 114150,
        1847: 114170,
        1848: 114194,
        1849: 114196,
        1850: 114210,
        1851: 114212,
        1852: 114216,
        1853: 114242,
        1854: 114244,
        1855: 114248,
        1856: 114256,
        1857: 114270,
        1858: 114278,
        1859: 114306,
        1860: 114308,
        1861: 114312,
        1862: 114320,
        1863: 114334,
        1864: 114336,
        1865: 114364,
        1866: 114380,
        1867: 114420,
        1868: 114458,
        1869: 114478,
        1870: 114482,
        1871: 114484,
        1872: 114510,
        1873: 114524,
        1874: 114530,
        1875: 114532,
        1876: 114536,
        1877: 114842,
        1878: 114866,
        1879: 114868,
        1880: 114970,
        1881: 114994,
        1882: 114996,
        1883: 115042,
        1884: 115044,
        1885: 115048,
        1886: 115062,
        1887: 115130,
        1888: 115226,
        1889: 115250,
        1890: 115252,
        1891: 115278,
        1892: 115292,
        1893: 115298,
        1894: 115300,
        1895: 115304,
        1896: 115318,
        1897: 115342,
        1898: 115394,
        1899: 115396,
        1900: 115400,
        1901: 115408,
        1902: 115422,
        1903: 115430,
        1904: 115436,
        1905: 115450,
        1906: 115478,
        1907: 115494,
        1908: 115514,
        1909: 115526,
        1910: 115532,
        1911: 115570,
        1912: 115572,
        1913: 115738,
        1914: 115758,
        1915: 115762,
        1916: 115764,
        1917: 115790,
        1918: 115804,
        1919: 115810,
        1920: 115812,
        1921: 115816,
        1922: 115830,
        1923: 115854,
        1924: 115868,
        1925: 115896,
        1926: 115906,
        1927: 115912,
        1928: 115920,
        1929: 115934,
        1930: 115942,
        1931: 115948,
        1932: 115962,
        1933: 115996,
        1934: 116024,
        1935: 116080,
        1936: 116094,
        1937: 116098,
        1938: 116100,
        1939: 116104,
        1940: 116112,
        1941: 116126,
        1942: 116128,
        1943: 116156,
        1944: 116166,
        1945: 116172,
        1946: 116184,
        1947: 116206,
        1948: 116210,
        1949: 116212,
        1950: 116246,
        1951: 116262,
        1952: 116268,
        1953: 116282,
        1954: 116294,
        1955: 116300,
        1956: 116312,
        1957: 116334,
        1958: 116338,
        1959: 116340,
        1960: 116358,
        1961: 116364,
        1962: 116376,
        1963: 116400,
        1964: 116414,
        1965: 116430,
        1966: 116444,
        1967: 116450,
        1968: 116452,
        1969: 116456,
        1970: 116498,
        1971: 116500,
        1972: 116514,
        1973: 116520,
        1974: 116534,
        1975: 116546,
        1976: 116548,
        1977: 116552,
        1978: 116560,
        1979: 116574,
        1980: 116582,
        1981: 116588,
        1982: 116602,
        1983: 116654,
        1984: 116694,
        1985: 116714,
        1986: 116762,
        1987: 116782,
        1988: 116786,
        1989: 116788,
        1990: 116814,
        1991: 116828,
        1992: 116834,
        1993: 116836,
        1994: 116840,
        1995: 116854,
        1996: 116878,
        1997: 116892,
        1998: 116920,
        1999: 116930,
        2000: 116936,
        2001: 116944,
        2002: 116958,
        2003: 116966,
        2004: 116972,
        2005: 116986,
        2006: 117006,
        2007: 117048,
        2008: 117104,
        2009: 117118,
        2010: 117122,
        2011: 117124,
        2012: 117136,
        2013: 117150,
        2014: 117152,
        2015: 117180,
        2016: 117190,
        2017: 117196,
        2018: 117208,
        2019: 117230,
        2020: 117234,
        2021: 117236,
        2022: 117304,
        2023: 117360,
        2024: 117374,
        2025: 117472,
        2026: 117500,
        2027: 117506,
        2028: 117508,
        2029: 117512,
        2030: 117520,
        2031: 117536,
        2032: 117564,
        2033: 117568,
        2034: 117624,
        2035: 117638,
        2036: 117644,
        2037: 117656,
        2038: 117680,
        2039: 117694,
        2040: 117710,
        2041: 117724,
        2042: 117730,
        2043: 117732,
        2044: 117736,
        2045: 117750,
        2046: 117782,
        2047: 117798,
        2048: 117804,
        2049: 117818,
        2050: 117830,
        2051: 117848,
        2052: 117874,
        2053: 117876,
        2054: 117894,
        2055: 117936,
        2056: 117950,
        2057: 117966,
        2058: 117986,
        2059: 117988,
        2060: 117992,
        2061: 118022,
        2062: 118028,
        2063: 118040,
        2064: 118064,
        2065: 118078,
        2066: 118112,
        2067: 118140,
        2068: 118172,
        2069: 118210,
        2070: 118212,
        2071: 118216,
        2072: 118224,
        2073: 118238,
        2074: 118246,
        2075: 118266,
        2076: 118306,
        2077: 118312,
        2078: 118338,
        2079: 118352,
        2080: 118366,
        2081: 118374,
        2082: 118394,
        2083: 118402,
        2084: 118404,
        2085: 118408,
        2086: 118416,
        2087: 118430,
        2088: 118432,
        2089: 118460,
        2090: 118476,
        2091: 118514,
        2092: 118516,
        2093: 118574,
        2094: 118578,
        2095: 118580,
        2096: 118606,
        2097: 118620,
        2098: 118626,
        2099: 118628,
        2100: 118632,
        2101: 118678,
        2102: 118694,
        2103: 118700,
        2104: 118730,
        2105: 118738,
        2106: 118740,
        2107: 118830,
        2108: 118834,
        2109: 118836,
        2110: 118862,
        2111: 118876,
        2112: 118882,
        2113: 118884,
        2114: 118888,
        2115: 118902,
        2116: 118926,
        2117: 118940,
        2118: 118968,
        2119: 118978,
        2120: 118980,
        2121: 118984,
        2122: 118992,
        2123: 119006,
        2124: 119014,
        2125: 119020,
        2126: 119034,
        2127: 119068,
        2128: 119096,
        2129: 119152,
        2130: 119166,
        2131: 119170,
        2132: 119172,
        2133: 119176,
        2134: 119184,
        2135: 119198,
        2136: 119200,
        2137: 119228,
        2138: 119238,
        2139: 119244,
        2140: 119256,
        2141: 119278,
        2142: 119282,
        2143: 119284,
        2144: 119324,
        2145: 119352,
        2146: 119408,
        2147: 119422,
        2148: 119520,
        2149: 119548,
        2150: 119554,
        2151: 119556,
        2152: 119560,
        2153: 119568,
        2154: 119582,
        2155: 119584,
        2156: 119612,
        2157: 119616,
        2158: 119672,
        2159: 119686,
        2160: 119692,
        2161: 119704,
        2162: 119728,
        2163: 119742,
        2164: 119758,
        2165: 119772,
        2166: 119778,
        2167: 119780,
        2168: 119784,
        2169: 119798,
        2170: 119920,
        2171: 119934,
        2172: 120032,
        2173: 120060,
        2174: 120256,
        2175: 120312,
        2176: 120324,
        2177: 120328,
        2178: 120336,
        2179: 120352,
        2180: 120384,
        2181: 120440,
        2182: 120560,
        2183: 120582,
        2184: 120588,
        2185: 120600,
        2186: 120624,
        2187: 120638,
        2188: 120672,
        2189: 120700,
        2190: 120718,
        2191: 120732,
        2192: 120760,
        2193: 120770,
        2194: 120772,
        2195: 120776,
        2196: 120784,
        2197: 120798,
        2198: 120806,
        2199: 120812,
        2200: 120870,
        2201: 120876,
        2202: 120890,
        2203: 120902,
        2204: 120908,
        2205: 120920,
        2206: 120946,
        2207: 120948,
        2208: 120966,
        2209: 120972,
        2210: 120984,
        2211: 121008,
        2212: 121022,
        2213: 121038,
        2214: 121058,
        2215: 121060,
        2216: 121064,
        2217: 121078,
        2218: 121100,
        2219: 121112,
        2220: 121136,
        2221: 121150,
        2222: 121184,
        2223: 121212,
        2224: 121244,
        2225: 121282,
        2226: 121284,
        2227: 121288,
        2228: 121296,
        2229: 121318,
        2230: 121338,
        2231: 121356,
        2232: 121368,
        2233: 121392,
        2234: 121406,
        2235: 121440,
        2236: 121468,
        2237: 121536,
        2238: 121592,
        2239: 121656,
        2240: 121730,
        2241: 121732,
        2242: 121736,
        2243: 121744,
        2244: 121758,
        2245: 121760,
        2246: 121804,
        2247: 121842,
        2248: 121844,
        2249: 121890,
        2250: 121922,
        2251: 121924,
        2252: 121928,
        2253: 121936,
        2254: 121950,
        2255: 121958,
        2256: 121978,
        2257: 121986,
        2258: 121988,
        2259: 121992,
        2260: 122000,
        2261: 122014,
        2262: 122016,
        2263: 122044,
        2264: 122060,
        2265: 122098,
        2266: 122100,
        2267: 122116,
        2268: 122120,
        2269: 122128,
        2270: 122142,
        2271: 122144,
        2272: 122172,
        2273: 122176,
        2274: 122232,
        2275: 122246,
        2276: 122264,
        2277: 122318,
        2278: 122338,
        2279: 122340,
        2280: 122344,
        2281: 122414,
        2282: 122418,
        2283: 122420,
        2284: 122446,
        2285: 122460,
        2286: 122466,
        2287: 122468,
        2288: 122472,
        2289: 122510,
        2290: 122524,
        2291: 122552,
        2292: 122562,
        2293: 122564,
        2294: 122568,
        2295: 122576,
        2296: 122598,
        2297: 122618,
        2298: 122646,
        2299: 122662,
        2300: 122668,
        2301: 122694,
        2302: 122700,
        2303: 122712,
        2304: 122738,
        2305: 122740,
        2306: 122762,
        2307: 122770,
        2308: 122772,
        2309: 122786,
        2310: 122788,
        2311: 122792,
        2312: 123018,
        2313: 123026,
        2314: 123028,
        2315: 123042,
        2316: 123044,
        2317: 123048,
        2318: 123062,
        2319: 123098,
        2320: 123146,
        2321: 123154,
        2322: 123156,
        2323: 123170,
        2324: 123172,
        2325: 123176,
        2326: 123190,
        2327: 123202,
        2328: 123204,
        2329: 123208,
        2330: 123216,
        2331: 123238,
        2332: 123244,
        2333: 123258,
        2334: 123290,
        2335: 123314,
        2336: 123316,
        2337: 123402,
        2338: 123410,
        2339: 123412,
        2340: 123426,
        2341: 123428,
        2342: 123432,
        2343: 123446,
        2344: 123458,
        2345: 123464,
        2346: 123472,
        2347: 123486,
        2348: 123494,
        2349: 123500,
        2350: 123514,
        2351: 123522,
        2352: 123524,
        2353: 123528,
        2354: 123536,
        2355: 123552,
        2356: 123580,
        2357: 123590,
        2358: 123596,
        2359: 123608,
        2360: 123630,
        2361: 123634,
        2362: 123636,
        2363: 123674,
        2364: 123698,
        2365: 123700,
        2366: 123740,
        2367: 123746,
        2368: 123748,
        2369: 123752,
        2370: 123834,
        2371: 123914,
        2372: 123922,
        2373: 123924,
        2374: 123938,
        2375: 123944,
        2376: 123958,
        2377: 123970,
        2378: 123976,
        2379: 123984,
        2380: 123998,
        2381: 124006,
        2382: 124012,
        2383: 124026,
        2384: 124034,
        2385: 124036,
        2386: 124048,
        2387: 124062,
        2388: 124064,
        2389: 124092,
        2390: 124102,
        2391: 124108,
        2392: 124120,
        2393: 124142,
        2394: 124146,
        2395: 124148,
        2396: 124162,
        2397: 124164,
        2398: 124168,
        2399: 124176,
        2400: 124190,
        2401: 124192,
        2402: 124220,
        2403: 124224,
        2404: 124280,
        2405: 124294,
        2406: 124300,
        2407: 124312,
        2408: 124336,
        2409: 124350,
        2410: 124366,
        2411: 124380,
        2412: 124386,
        2413: 124388,
        2414: 124392,
        2415: 124406,
        2416: 124442,
        2417: 124462,
        2418: 124466,
        2419: 124468,
        2420: 124494,
        2421: 124508,
        2422: 124514,
        2423: 124520,
        2424: 124558,
        2425: 124572,
        2426: 124600,
        2427: 124610,
        2428: 124612,
        2429: 124616,
        2430: 124624,
        2431: 124646,
        2432: 124666,
        2433: 124694,
        2434: 124710,
        2435: 124716,
        2436: 124730,
        2437: 124742,
        2438: 124748,
        2439: 124760,
        2440: 124786,
        2441: 124788,
        2442: 124818,
        2443: 124820,
        2444: 124834,
        2445: 124836,
        2446: 124840,
        2447: 124854,
        2448: 124946,
        2449: 124948,
        2450: 124962,
        2451: 124964,
        2452: 124968,
        2453: 124982,
        2454: 124994,
        2455: 124996,
        2456: 125000,
        2457: 125008,
        2458: 125022,
        2459: 125030,
        2460: 125036,
        2461: 125050,
        2462: 125058,
        2463: 125060,
        2464: 125064,
        2465: 125072,
        2466: 125086,
        2467: 125088,
        2468: 125116,
        2469: 125126,
        2470: 125132,
        2471: 125144,
        2472: 125166,
        2473: 125170,
        2474: 125172,
        2475: 125186,
        2476: 125188,
        2477: 125192,
        2478: 125200,
        2479: 125216,
        2480: 125244,
        2481: 125248,
        2482: 125304,
        2483: 125318,
        2484: 125324,
        2485: 125336,
        2486: 125360,
        2487: 125374,
        2488: 125390,
        2489: 125404,
        2490: 125410,
        2491: 125412,
        2492: 125416,
        2493: 125430,
        2494: 125444,
        2495: 125448,
        2496: 125456,
        2497: 125472,
        2498: 125504,
        2499: 125560,
        2500: 125680,
        2501: 125702,
        2502: 125708,
        2503: 125720,
        2504: 125744,
        2505: 125758,
        2506: 125792,
        2507: 125820,
        2508: 125838,
        2509: 125852,
        2510: 125880,
        2511: 125890,
        2512: 125892,
        2513: 125896,
        2514: 125904,
        2515: 125918,
        2516: 125926,
        2517: 125932,
        2518: 125978,
        2519: 125998,
        2520: 126002,
        2521: 126004,
        2522: 126030,
        2523: 126044,
        2524: 126050,
        2525: 126052,
        2526: 126056,
        2527: 126094,
        2528: 126108,
        2529: 126136,
        2530: 126146,
        2531: 126148,
        2532: 126152,
        2533: 126160,
        2534: 126182,
        2535: 126202,
        2536: 126222,
        2537: 126236,
        2538: 126264,
        2539: 126320,
        2540: 126334,
        2541: 126338,
        2542: 126340,
        2543: 126344,
        2544: 126352,
        2545: 126366,
        2546: 126368,
        2547: 126412,
        2548: 126450,
        2549: 126452,
        2550: 126486,
        2551: 126502,
        2552: 126508,
        2553: 126522,
        2554: 126534,
        2555: 126540,
        2556: 126552,
        2557: 126574,
        2558: 126578,
        2559: 126580,
        2560: 126598,
        2561: 126604,
        2562: 126616,
        2563: 126640,
        2564: 126654,
        2565: 126670,
        2566: 126684,
        2567: 126690,
        2568: 126692,
        2569: 126696,
        2570: 126738,
        2571: 126754,
        2572: 126756,
        2573: 126760,
        2574: 126774,
        2575: 126786,
        2576: 126788,
        2577: 126792,
        2578: 126800,
        2579: 126814,
        2580: 126822,
        2581: 126828,
        2582: 126842,
        2583: 126894,
        2584: 126898,
        2585: 126900,
        2586: 126934,
        2587: 127126,
        2588: 127142,
        2589: 127148,
        2590: 127162,
        2591: 127178,
        2592: 127186,
        2593: 127188,
        2594: 127254,
        2595: 127270,
        2596: 127276,
        2597: 127290,
        2598: 127302,
        2599: 127308,
        2600: 127320,
        2601: 127342,
        2602: 127346,
        2603: 127348,
        2604: 127370,
        2605: 127378,
        2606: 127380,
        2607: 127394,
        2608: 127396,
        2609: 127400,
        2610: 127450,
        2611: 127510,
        2612: 127526,
        2613: 127532,
        2614: 127546,
        2615: 127558,
        2616: 127576,
        2617: 127598,
        2618: 127602,
        2619: 127604,
        2620: 127622,
        2621: 127628,
        2622: 127640,
        2623: 127664,
        2624: 127678,
        2625: 127694,
        2626: 127708,
        2627: 127714,
        2628: 127716,
        2629: 127720,
        2630: 127734,
        2631: 127754,
        2632: 127762,
        2633: 127764,
        2634: 127778,
        2635: 127784,
        2636: 127810,
        2637: 127812,
        2638: 127816,
        2639: 127824,
        2640: 127838,
        2641: 127846,
        2642: 127866,
        2643: 127898,
        2644: 127918,
        2645: 127922,
        2646: 127924,
        2647: 128022,
        2648: 128038,
        2649: 128044,
        2650: 128058,
        2651: 128070,
        2652: 128076,
        2653: 128088,
        2654: 128110,
        2655: 128114,
        2656: 128116,
        2657: 128134,
        2658: 128140,
        2659: 128152,
        2660: 128176,
        2661: 128190,
        2662: 128206,
        2663: 128220,
        2664: 128226,
        2665: 128228,
        2666: 128232,
        2667: 128246,
        2668: 128262,
        2669: 128268,
        2670: 128280,
        2671: 128304,
        2672: 128318,
        2673: 128352,
        2674: 128380,
        2675: 128398,
        2676: 128412,
        2677: 128440,
        2678: 128450,
        2679: 128452,
        2680: 128456,
        2681: 128464,
        2682: 128478,
        2683: 128486,
        2684: 128492,
        2685: 128506,
        2686: 128522,
        2687: 128530,
        2688: 128532,
        2689: 128546,
        2690: 128548,
        2691: 128552,
        2692: 128566,
        2693: 128578,
        2694: 128580,
        2695: 128584,
        2696: 128592,
        2697: 128606,
        2698: 128614,
        2699: 128634,
        2700: 128642,
        2701: 128644,
        2702: 128648,
        2703: 128656,
        2704: 128670,
        2705: 128672,
        2706: 128700,
        2707: 128716,
        2708: 128754,
        2709: 128756,
        2710: 128794,
        2711: 128814,
        2712: 128818,
        2713: 128820,
        2714: 128846,
        2715: 128860,
        2716: 128866,
        2717: 128868,
        2718: 128872,
        2719: 128886,
        2720: 128918,
        2721: 128934,
        2722: 128940,
        2723: 128954,
        2724: 128978,
        2725: 128980,
        2726: 129178,
        2727: 129198,
        2728: 129202,
        2729: 129204,
        2730: 129238,
        2731: 129258,
        2732: 129306,
        2733: 129326,
        2734: 129330,
        2735: 129332,
        2736: 129358,
        2737: 129372,
        2738: 129378,
        2739: 129380,
        2740: 129384,
        2741: 129398,
        2742: 129430,
        2743: 129446,
        2744: 129452,
        2745: 129466,
        2746: 129482,
        2747: 129490,
        2748: 129492,
        2749: 129562,
        2750: 129582,
        2751: 129586,
        2752: 129588,
        2753: 129614,
        2754: 129628,
        2755: 129634,
        2756: 129636,
        2757: 129640,
        2758: 129654,
        2759: 129678,
        2760: 129692,
        2761: 129720,
        2762: 129730,
        2763: 129732,
        2764: 129736,
        2765: 129744,
        2766: 129758,
        2767: 129766,
        2768: 129772,
        2769: 129814,
        2770: 129830,
        2771: 129836,
        2772: 129850,
        2773: 129862,
        2774: 129868,
        2775: 129880,
        2776: 129902,
        2777: 129906,
        2778: 129908,
        2779: 129930,
        2780: 129938,
        2781: 129940,
        2782: 129954,
        2783: 129956,
        2784: 129960,
        2785: 129974,
        2786: 130010,
      }.length;
      e++
    )
      for (
        var r = {
            0: 66142,
            1: 66170,
            2: 66206,
            3: 66236,
            4: 66290,
            5: 66292,
            6: 66350,
            7: 66382,
            8: 66396,
            9: 66454,
            10: 66470,
            11: 66476,
            12: 66594,
            13: 66600,
            14: 66614,
            15: 66626,
            16: 66628,
            17: 66632,
            18: 66640,
            19: 66654,
            20: 66662,
            21: 66668,
            22: 66682,
            23: 66690,
            24: 66718,
            25: 66720,
            26: 66748,
            27: 66758,
            28: 66776,
            29: 66798,
            30: 66802,
            31: 66804,
            32: 66820,
            33: 66824,
            34: 66832,
            35: 66846,
            36: 66848,
            37: 66876,
            38: 66880,
            39: 66936,
            40: 66950,
            41: 66956,
            42: 66968,
            43: 66992,
            44: 67006,
            45: 67022,
            46: 67036,
            47: 67042,
            48: 67044,
            49: 67048,
            50: 67062,
            51: 67118,
            52: 67150,
            53: 67164,
            54: 67214,
            55: 67228,
            56: 67256,
            57: 67294,
            58: 67322,
            59: 67350,
            60: 67366,
            61: 67372,
            62: 67398,
            63: 67404,
            64: 67416,
            65: 67438,
            66: 67474,
            67: 67476,
            68: 67490,
            69: 67492,
            70: 67496,
            71: 67510,
            72: 67618,
            73: 67624,
            74: 67650,
            75: 67656,
            76: 67664,
            77: 67678,
            78: 67686,
            79: 67692,
            80: 67706,
            81: 67714,
            82: 67716,
            83: 67728,
            84: 67742,
            85: 67744,
            86: 67772,
            87: 67782,
            88: 67788,
            89: 67800,
            90: 67822,
            91: 67826,
            92: 67828,
            93: 67842,
            94: 67848,
            95: 67870,
            96: 67872,
            97: 67900,
            98: 67904,
            99: 67960,
            100: 67974,
            101: 67992,
            102: 68016,
            103: 68030,
            104: 68046,
            105: 68060,
            106: 68066,
            107: 68068,
            108: 68072,
            109: 68086,
            110: 68104,
            111: 68112,
            112: 68126,
            113: 68128,
            114: 68156,
            115: 68160,
            116: 68216,
            117: 68336,
            118: 68358,
            119: 68364,
            120: 68376,
            121: 68400,
            122: 68414,
            123: 68448,
            124: 68476,
            125: 68494,
            126: 68508,
            127: 68536,
            128: 68546,
            129: 68548,
            130: 68552,
            131: 68560,
            132: 68574,
            133: 68582,
            134: 68588,
            135: 68654,
            136: 68686,
            137: 68700,
            138: 68706,
            139: 68708,
            140: 68712,
            141: 68726,
            142: 68750,
            143: 68764,
            144: 68792,
            145: 68802,
            146: 68804,
            147: 68808,
            148: 68816,
            149: 68830,
            150: 68838,
            151: 68844,
            152: 68858,
            153: 68878,
            154: 68892,
            155: 68920,
            156: 68976,
            157: 68990,
            158: 68994,
            159: 68996,
            160: 69000,
            161: 69008,
            162: 69022,
            163: 69024,
            164: 69052,
            165: 69062,
            166: 69068,
            167: 69080,
            168: 69102,
            169: 69106,
            170: 69108,
            171: 69142,
            172: 69158,
            173: 69164,
            174: 69190,
            175: 69208,
            176: 69230,
            177: 69254,
            178: 69260,
            179: 69272,
            180: 69296,
            181: 69310,
            182: 69326,
            183: 69340,
            184: 69386,
            185: 69394,
            186: 69396,
            187: 69410,
            188: 69416,
            189: 69430,
            190: 69442,
            191: 69444,
            192: 69448,
            193: 69456,
            194: 69470,
            195: 69478,
            196: 69484,
            197: 69554,
            198: 69556,
            199: 69666,
            200: 69672,
            201: 69698,
            202: 69704,
            203: 69712,
            204: 69726,
            205: 69754,
            206: 69762,
            207: 69764,
            208: 69776,
            209: 69790,
            210: 69792,
            211: 69820,
            212: 69830,
            213: 69836,
            214: 69848,
            215: 69870,
            216: 69874,
            217: 69876,
            218: 69890,
            219: 69918,
            220: 69920,
            221: 69948,
            222: 69952,
            223: 70008,
            224: 70022,
            225: 70040,
            226: 70064,
            227: 70078,
            228: 70094,
            229: 70108,
            230: 70114,
            231: 70116,
            232: 70120,
            233: 70134,
            234: 70152,
            235: 70174,
            236: 70176,
            237: 70264,
            238: 70384,
            239: 70412,
            240: 70448,
            241: 70462,
            242: 70496,
            243: 70524,
            244: 70542,
            245: 70556,
            246: 70584,
            247: 70594,
            248: 70600,
            249: 70608,
            250: 70622,
            251: 70630,
            252: 70636,
            253: 70664,
            254: 70672,
            255: 70686,
            256: 70688,
            257: 70716,
            258: 70720,
            259: 70776,
            260: 70896,
            261: 71136,
            262: 71180,
            263: 71192,
            264: 71216,
            265: 71230,
            266: 71264,
            267: 71292,
            268: 71360,
            269: 71416,
            270: 71452,
            271: 71480,
            272: 71536,
            273: 71550,
            274: 71554,
            275: 71556,
            276: 71560,
            277: 71568,
            278: 71582,
            279: 71584,
            280: 71612,
            281: 71622,
            282: 71628,
            283: 71640,
            284: 71662,
            285: 71726,
            286: 71732,
            287: 71758,
            288: 71772,
            289: 71778,
            290: 71780,
            291: 71784,
            292: 71798,
            293: 71822,
            294: 71836,
            295: 71864,
            296: 71874,
            297: 71880,
            298: 71888,
            299: 71902,
            300: 71910,
            301: 71916,
            302: 71930,
            303: 71950,
            304: 71964,
            305: 71992,
            306: 72048,
            307: 72062,
            308: 72066,
            309: 72068,
            310: 72080,
            311: 72094,
            312: 72096,
            313: 72124,
            314: 72134,
            315: 72140,
            316: 72152,
            317: 72174,
            318: 72178,
            319: 72180,
            320: 72206,
            321: 72220,
            322: 72248,
            323: 72304,
            324: 72318,
            325: 72416,
            326: 72444,
            327: 72456,
            328: 72464,
            329: 72478,
            330: 72480,
            331: 72508,
            332: 72512,
            333: 72568,
            334: 72588,
            335: 72600,
            336: 72624,
            337: 72638,
            338: 72654,
            339: 72668,
            340: 72674,
            341: 72676,
            342: 72680,
            343: 72694,
            344: 72726,
            345: 72742,
            346: 72748,
            347: 72774,
            348: 72780,
            349: 72792,
            350: 72814,
            351: 72838,
            352: 72856,
            353: 72880,
            354: 72894,
            355: 72910,
            356: 72924,
            357: 72930,
            358: 72932,
            359: 72936,
            360: 72950,
            361: 72966,
            362: 72972,
            363: 72984,
            364: 73008,
            365: 73022,
            366: 73056,
            367: 73084,
            368: 73102,
            369: 73116,
            370: 73144,
            371: 73156,
            372: 73160,
            373: 73168,
            374: 73182,
            375: 73190,
            376: 73196,
            377: 73210,
            378: 73226,
            379: 73234,
            380: 73236,
            381: 73250,
            382: 73252,
            383: 73256,
            384: 73270,
            385: 73282,
            386: 73284,
            387: 73296,
            388: 73310,
            389: 73318,
            390: 73324,
            391: 73346,
            392: 73348,
            393: 73352,
            394: 73360,
            395: 73374,
            396: 73376,
            397: 73404,
            398: 73414,
            399: 73420,
            400: 73432,
            401: 73454,
            402: 73498,
            403: 73518,
            404: 73522,
            405: 73524,
            406: 73550,
            407: 73564,
            408: 73570,
            409: 73572,
            410: 73576,
            411: 73590,
            412: 73800,
            413: 73822,
            414: 73858,
            415: 73860,
            416: 73872,
            417: 73886,
            418: 73888,
            419: 73916,
            420: 73944,
            421: 73970,
            422: 73972,
            423: 73992,
            424: 74014,
            425: 74016,
            426: 74044,
            427: 74048,
            428: 74104,
            429: 74118,
            430: 74136,
            431: 74160,
            432: 74174,
            433: 74210,
            434: 74212,
            435: 74216,
            436: 74230,
            437: 74244,
            438: 74256,
            439: 74270,
            440: 74272,
            441: 74360,
            442: 74480,
            443: 74502,
            444: 74508,
            445: 74544,
            446: 74558,
            447: 74592,
            448: 74620,
            449: 74638,
            450: 74652,
            451: 74680,
            452: 74690,
            453: 74696,
            454: 74704,
            455: 74726,
            456: 74732,
            457: 74782,
            458: 74784,
            459: 74812,
            460: 74992,
            461: 75232,
            462: 75288,
            463: 75326,
            464: 75360,
            465: 75388,
            466: 75456,
            467: 75512,
            468: 75576,
            469: 75632,
            470: 75646,
            471: 75650,
            472: 75652,
            473: 75664,
            474: 75678,
            475: 75680,
            476: 75708,
            477: 75718,
            478: 75724,
            479: 75736,
            480: 75758,
            481: 75808,
            482: 75836,
            483: 75840,
            484: 75896,
            485: 76016,
            486: 76256,
            487: 76736,
            488: 76824,
            489: 76848,
            490: 76862,
            491: 76896,
            492: 76924,
            493: 76992,
            494: 77048,
            495: 77296,
            496: 77340,
            497: 77368,
            498: 77424,
            499: 77438,
            500: 77536,
            501: 77564,
            502: 77572,
            503: 77576,
            504: 77584,
            505: 77600,
            506: 77628,
            507: 77632,
            508: 77688,
            509: 77702,
            510: 77708,
            511: 77720,
            512: 77744,
            513: 77758,
            514: 77774,
            515: 77788,
            516: 77870,
            517: 77902,
            518: 77916,
            519: 77922,
            520: 77928,
            521: 77966,
            522: 77980,
            523: 78008,
            524: 78018,
            525: 78024,
            526: 78032,
            527: 78046,
            528: 78060,
            529: 78074,
            530: 78094,
            531: 78136,
            532: 78192,
            533: 78206,
            534: 78210,
            535: 78212,
            536: 78224,
            537: 78238,
            538: 78240,
            539: 78268,
            540: 78278,
            541: 78284,
            542: 78296,
            543: 78322,
            544: 78324,
            545: 78350,
            546: 78364,
            547: 78448,
            548: 78462,
            549: 78560,
            550: 78588,
            551: 78600,
            552: 78622,
            553: 78624,
            554: 78652,
            555: 78656,
            556: 78712,
            557: 78726,
            558: 78744,
            559: 78768,
            560: 78782,
            561: 78798,
            562: 78812,
            563: 78818,
            564: 78820,
            565: 78824,
            566: 78838,
            567: 78862,
            568: 78876,
            569: 78904,
            570: 78960,
            571: 78974,
            572: 79072,
            573: 79100,
            574: 79296,
            575: 79352,
            576: 79368,
            577: 79376,
            578: 79390,
            579: 79392,
            580: 79420,
            581: 79424,
            582: 79480,
            583: 79600,
            584: 79628,
            585: 79640,
            586: 79664,
            587: 79678,
            588: 79712,
            589: 79740,
            590: 79772,
            591: 79800,
            592: 79810,
            593: 79812,
            594: 79816,
            595: 79824,
            596: 79838,
            597: 79846,
            598: 79852,
            599: 79894,
            600: 79910,
            601: 79916,
            602: 79942,
            603: 79948,
            604: 79960,
            605: 79982,
            606: 79988,
            607: 80006,
            608: 80024,
            609: 80048,
            610: 80062,
            611: 80078,
            612: 80092,
            613: 80098,
            614: 80100,
            615: 80104,
            616: 80134,
            617: 80140,
            618: 80176,
            619: 80190,
            620: 80224,
            621: 80252,
            622: 80270,
            623: 80284,
            624: 80312,
            625: 80328,
            626: 80336,
            627: 80350,
            628: 80358,
            629: 80364,
            630: 80378,
            631: 80390,
            632: 80396,
            633: 80408,
            634: 80432,
            635: 80446,
            636: 80480,
            637: 80508,
            638: 80576,
            639: 80632,
            640: 80654,
            641: 80668,
            642: 80696,
            643: 80752,
            644: 80766,
            645: 80776,
            646: 80784,
            647: 80798,
            648: 80800,
            649: 80828,
            650: 80844,
            651: 80856,
            652: 80878,
            653: 80882,
            654: 80884,
            655: 80914,
            656: 80916,
            657: 80930,
            658: 80932,
            659: 80936,
            660: 80950,
            661: 80962,
            662: 80968,
            663: 80976,
            664: 80990,
            665: 80998,
            666: 81004,
            667: 81026,
            668: 81028,
            669: 81040,
            670: 81054,
            671: 81056,
            672: 81084,
            673: 81094,
            674: 81100,
            675: 81112,
            676: 81134,
            677: 81154,
            678: 81156,
            679: 81160,
            680: 81168,
            681: 81182,
            682: 81184,
            683: 81212,
            684: 81216,
            685: 81272,
            686: 81286,
            687: 81292,
            688: 81304,
            689: 81328,
            690: 81342,
            691: 81358,
            692: 81372,
            693: 81380,
            694: 81384,
            695: 81398,
            696: 81434,
            697: 81454,
            698: 81458,
            699: 81460,
            700: 81486,
            701: 81500,
            702: 81506,
            703: 81508,
            704: 81512,
            705: 81526,
            706: 81550,
            707: 81564,
            708: 81592,
            709: 81602,
            710: 81604,
            711: 81608,
            712: 81616,
            713: 81630,
            714: 81638,
            715: 81644,
            716: 81702,
            717: 81708,
            718: 81722,
            719: 81734,
            720: 81740,
            721: 81752,
            722: 81774,
            723: 81778,
            724: 81780,
            725: 82050,
            726: 82078,
            727: 82080,
            728: 82108,
            729: 82180,
            730: 82184,
            731: 82192,
            732: 82206,
            733: 82208,
            734: 82236,
            735: 82240,
            736: 82296,
            737: 82316,
            738: 82328,
            739: 82352,
            740: 82366,
            741: 82402,
            742: 82404,
            743: 82408,
            744: 82440,
            745: 82448,
            746: 82462,
            747: 82464,
            748: 82492,
            749: 82496,
            750: 82552,
            751: 82672,
            752: 82694,
            753: 82700,
            754: 82712,
            755: 82736,
            756: 82750,
            757: 82784,
            758: 82812,
            759: 82830,
            760: 82882,
            761: 82884,
            762: 82888,
            763: 82896,
            764: 82918,
            765: 82924,
            766: 82952,
            767: 82960,
            768: 82974,
            769: 82976,
            770: 83004,
            771: 83008,
            772: 83064,
            773: 83184,
            774: 83424,
            775: 83468,
            776: 83480,
            777: 83504,
            778: 83518,
            779: 83552,
            780: 83580,
            781: 83648,
            782: 83704,
            783: 83740,
            784: 83768,
            785: 83824,
            786: 83838,
            787: 83842,
            788: 83844,
            789: 83848,
            790: 83856,
            791: 83872,
            792: 83900,
            793: 83910,
            794: 83916,
            795: 83928,
            796: 83950,
            797: 83984,
            798: 84000,
            799: 84028,
            800: 84032,
            801: 84088,
            802: 84208,
            803: 84448,
            804: 84928,
            805: 85040,
            806: 85054,
            807: 85088,
            808: 85116,
            809: 85184,
            810: 85240,
            811: 85488,
            812: 85560,
            813: 85616,
            814: 85630,
            815: 85728,
            816: 85756,
            817: 85764,
            818: 85768,
            819: 85776,
            820: 85790,
            821: 85792,
            822: 85820,
            823: 85824,
            824: 85880,
            825: 85894,
            826: 85900,
            827: 85912,
            828: 85936,
            829: 85966,
            830: 85980,
            831: 86048,
            832: 86080,
            833: 86136,
            834: 86256,
            835: 86496,
            836: 86976,
            837: 88160,
            838: 88188,
            839: 88256,
            840: 88312,
            841: 88560,
            842: 89056,
            843: 89200,
            844: 89214,
            845: 89312,
            846: 89340,
            847: 89536,
            848: 89592,
            849: 89608,
            850: 89616,
            851: 89632,
            852: 89664,
            853: 89720,
            854: 89840,
            855: 89868,
            856: 89880,
            857: 89904,
            858: 89952,
            859: 89980,
            860: 89998,
            861: 90012,
            862: 90040,
            863: 90190,
            864: 90204,
            865: 90254,
            866: 90268,
            867: 90296,
            868: 90306,
            869: 90308,
            870: 90312,
            871: 90334,
            872: 90382,
            873: 90396,
            874: 90424,
            875: 90480,
            876: 90494,
            877: 90500,
            878: 90504,
            879: 90512,
            880: 90526,
            881: 90528,
            882: 90556,
            883: 90566,
            884: 90572,
            885: 90584,
            886: 90610,
            887: 90612,
            888: 90638,
            889: 90652,
            890: 90680,
            891: 90736,
            892: 90750,
            893: 90848,
            894: 90876,
            895: 90884,
            896: 90888,
            897: 90896,
            898: 90910,
            899: 90912,
            900: 90940,
            901: 90944,
            902: 91000,
            903: 91014,
            904: 91020,
            905: 91032,
            906: 91056,
            907: 91070,
            908: 91086,
            909: 91100,
            910: 91106,
            911: 91108,
            912: 91112,
            913: 91126,
            914: 91150,
            915: 91164,
            916: 91192,
            917: 91248,
            918: 91262,
            919: 91360,
            920: 91388,
            921: 91584,
            922: 91640,
            923: 91664,
            924: 91678,
            925: 91680,
            926: 91708,
            927: 91712,
            928: 91768,
            929: 91888,
            930: 91928,
            931: 91952,
            932: 91966,
            933: 92000,
            934: 92028,
            935: 92046,
            936: 92060,
            937: 92088,
            938: 92098,
            939: 92100,
            940: 92104,
            941: 92112,
            942: 92126,
            943: 92134,
            944: 92140,
            945: 92188,
            946: 92216,
            947: 92272,
            948: 92384,
            949: 92412,
            950: 92608,
            951: 92664,
            952: 93168,
            953: 93200,
            954: 93214,
            955: 93216,
            956: 93244,
            957: 93248,
            958: 93304,
            959: 93424,
            960: 93664,
            961: 93720,
            962: 93744,
            963: 93758,
            964: 93792,
            965: 93820,
            966: 93888,
            967: 93944,
            968: 93980,
            969: 94008,
            970: 94064,
            971: 94078,
            972: 94084,
            973: 94088,
            974: 94096,
            975: 94110,
            976: 94112,
            977: 94140,
            978: 94150,
            979: 94156,
            980: 94168,
            981: 94246,
            982: 94252,
            983: 94278,
            984: 94284,
            985: 94296,
            986: 94318,
            987: 94342,
            988: 94348,
            989: 94360,
            990: 94384,
            991: 94398,
            992: 94414,
            993: 94428,
            994: 94440,
            995: 94470,
            996: 94476,
            997: 94488,
            998: 94512,
            999: 94526,
            1000: 94560,
            1001: 94588,
            1002: 94606,
            1003: 94620,
            1004: 94648,
            1005: 94658,
            1006: 94660,
            1007: 94664,
            1008: 94672,
            1009: 94686,
            1010: 94694,
            1011: 94700,
            1012: 94714,
            1013: 94726,
            1014: 94732,
            1015: 94744,
            1016: 94768,
            1017: 94782,
            1018: 94816,
            1019: 94844,
            1020: 94912,
            1021: 94968,
            1022: 94990,
            1023: 95004,
            1024: 95032,
            1025: 95088,
            1026: 95102,
            1027: 95112,
            1028: 95120,
            1029: 95134,
            1030: 95136,
            1031: 95164,
            1032: 95180,
            1033: 95192,
            1034: 95214,
            1035: 95218,
            1036: 95220,
            1037: 95244,
            1038: 95256,
            1039: 95280,
            1040: 95294,
            1041: 95328,
            1042: 95356,
            1043: 95424,
            1044: 95480,
            1045: 95728,
            1046: 95758,
            1047: 95772,
            1048: 95800,
            1049: 95856,
            1050: 95870,
            1051: 95968,
            1052: 95996,
            1053: 96008,
            1054: 96016,
            1055: 96030,
            1056: 96032,
            1057: 96060,
            1058: 96064,
            1059: 96120,
            1060: 96152,
            1061: 96176,
            1062: 96190,
            1063: 96220,
            1064: 96226,
            1065: 96228,
            1066: 96232,
            1067: 96290,
            1068: 96292,
            1069: 96296,
            1070: 96310,
            1071: 96322,
            1072: 96324,
            1073: 96328,
            1074: 96336,
            1075: 96350,
            1076: 96358,
            1077: 96364,
            1078: 96386,
            1079: 96388,
            1080: 96392,
            1081: 96400,
            1082: 96414,
            1083: 96416,
            1084: 96444,
            1085: 96454,
            1086: 96460,
            1087: 96472,
            1088: 96494,
            1089: 96498,
            1090: 96500,
            1091: 96514,
            1092: 96516,
            1093: 96520,
            1094: 96528,
            1095: 96542,
            1096: 96544,
            1097: 96572,
            1098: 96576,
            1099: 96632,
            1100: 96646,
            1101: 96652,
            1102: 96664,
            1103: 96688,
            1104: 96702,
            1105: 96718,
            1106: 96732,
            1107: 96738,
            1108: 96740,
            1109: 96744,
            1110: 96758,
            1111: 96772,
            1112: 96776,
            1113: 96784,
            1114: 96798,
            1115: 96800,
            1116: 96828,
            1117: 96832,
            1118: 96888,
            1119: 97008,
            1120: 97030,
            1121: 97036,
            1122: 97048,
            1123: 97072,
            1124: 97086,
            1125: 97120,
            1126: 97148,
            1127: 97166,
            1128: 97180,
            1129: 97208,
            1130: 97220,
            1131: 97224,
            1132: 97232,
            1133: 97246,
            1134: 97254,
            1135: 97260,
            1136: 97326,
            1137: 97330,
            1138: 97332,
            1139: 97358,
            1140: 97372,
            1141: 97378,
            1142: 97380,
            1143: 97384,
            1144: 97398,
            1145: 97422,
            1146: 97436,
            1147: 97464,
            1148: 97474,
            1149: 97476,
            1150: 97480,
            1151: 97488,
            1152: 97502,
            1153: 97510,
            1154: 97516,
            1155: 97550,
            1156: 97564,
            1157: 97592,
            1158: 97648,
            1159: 97666,
            1160: 97668,
            1161: 97672,
            1162: 97680,
            1163: 97694,
            1164: 97696,
            1165: 97724,
            1166: 97734,
            1167: 97740,
            1168: 97752,
            1169: 97774,
            1170: 97830,
            1171: 97836,
            1172: 97850,
            1173: 97862,
            1174: 97868,
            1175: 97880,
            1176: 97902,
            1177: 97906,
            1178: 97908,
            1179: 97926,
            1180: 97932,
            1181: 97944,
            1182: 97968,
            1183: 97998,
            1184: 98012,
            1185: 98018,
            1186: 98020,
            1187: 98024,
            1188: 98038,
            1189: 98618,
            1190: 98674,
            1191: 98676,
            1192: 98838,
            1193: 98854,
            1194: 98874,
            1195: 98892,
            1196: 98904,
            1197: 98926,
            1198: 98930,
            1199: 98932,
            1200: 98968,
            1201: 99006,
            1202: 99042,
            1203: 99044,
            1204: 99048,
            1205: 99062,
            1206: 99166,
            1207: 99194,
            1208: 99246,
            1209: 99286,
            1210: 99350,
            1211: 99366,
            1212: 99372,
            1213: 99386,
            1214: 99398,
            1215: 99416,
            1216: 99438,
            1217: 99442,
            1218: 99444,
            1219: 99462,
            1220: 99504,
            1221: 99518,
            1222: 99534,
            1223: 99548,
            1224: 99554,
            1225: 99556,
            1226: 99560,
            1227: 99574,
            1228: 99590,
            1229: 99596,
            1230: 99608,
            1231: 99632,
            1232: 99646,
            1233: 99680,
            1234: 99708,
            1235: 99726,
            1236: 99740,
            1237: 99768,
            1238: 99778,
            1239: 99780,
            1240: 99784,
            1241: 99792,
            1242: 99806,
            1243: 99814,
            1244: 99820,
            1245: 99834,
            1246: 99858,
            1247: 99860,
            1248: 99874,
            1249: 99880,
            1250: 99894,
            1251: 99906,
            1252: 99920,
            1253: 99934,
            1254: 99962,
            1255: 99970,
            1256: 99972,
            1257: 99976,
            1258: 99984,
            1259: 99998,
            1260: 100000,
            1261: 100028,
            1262: 100038,
            1263: 100044,
            1264: 100056,
            1265: 100078,
            1266: 100082,
            1267: 100084,
            1268: 100142,
            1269: 100174,
            1270: 100188,
            1271: 100246,
            1272: 100262,
            1273: 100268,
            1274: 100306,
            1275: 100308,
            1276: 100390,
            1277: 100396,
            1278: 100410,
            1279: 100422,
            1280: 100428,
            1281: 100440,
            1282: 100462,
            1283: 100466,
            1284: 100468,
            1285: 100486,
            1286: 100504,
            1287: 100528,
            1288: 100542,
            1289: 100558,
            1290: 100572,
            1291: 100578,
            1292: 100580,
            1293: 100584,
            1294: 100598,
            1295: 100620,
            1296: 100656,
            1297: 100670,
            1298: 100704,
            1299: 100732,
            1300: 100750,
            1301: 100792,
            1302: 100802,
            1303: 100808,
            1304: 100816,
            1305: 100830,
            1306: 100838,
            1307: 100844,
            1308: 100858,
            1309: 100888,
            1310: 100912,
            1311: 100926,
            1312: 100960,
            1313: 100988,
            1314: 101056,
            1315: 101112,
            1316: 101148,
            1317: 101176,
            1318: 101232,
            1319: 101246,
            1320: 101250,
            1321: 101252,
            1322: 101256,
            1323: 101264,
            1324: 101278,
            1325: 101280,
            1326: 101308,
            1327: 101318,
            1328: 101324,
            1329: 101336,
            1330: 101358,
            1331: 101362,
            1332: 101364,
            1333: 101410,
            1334: 101412,
            1335: 101416,
            1336: 101430,
            1337: 101442,
            1338: 101448,
            1339: 101456,
            1340: 101470,
            1341: 101478,
            1342: 101498,
            1343: 101506,
            1344: 101508,
            1345: 101520,
            1346: 101534,
            1347: 101536,
            1348: 101564,
            1349: 101580,
            1350: 101618,
            1351: 101620,
            1352: 101636,
            1353: 101640,
            1354: 101648,
            1355: 101662,
            1356: 101664,
            1357: 101692,
            1358: 101696,
            1359: 101752,
            1360: 101766,
            1361: 101784,
            1362: 101838,
            1363: 101858,
            1364: 101860,
            1365: 101864,
            1366: 101934,
            1367: 101938,
            1368: 101940,
            1369: 101966,
            1370: 101980,
            1371: 101986,
            1372: 101988,
            1373: 101992,
            1374: 102030,
            1375: 102044,
            1376: 102072,
            1377: 102082,
            1378: 102084,
            1379: 102088,
            1380: 102096,
            1381: 102138,
            1382: 102166,
            1383: 102182,
            1384: 102188,
            1385: 102214,
            1386: 102220,
            1387: 102232,
            1388: 102254,
            1389: 102282,
            1390: 102290,
            1391: 102292,
            1392: 102306,
            1393: 102308,
            1394: 102312,
            1395: 102326,
            1396: 102444,
            1397: 102458,
            1398: 102470,
            1399: 102476,
            1400: 102488,
            1401: 102514,
            1402: 102516,
            1403: 102534,
            1404: 102552,
            1405: 102576,
            1406: 102590,
            1407: 102606,
            1408: 102620,
            1409: 102626,
            1410: 102632,
            1411: 102646,
            1412: 102662,
            1413: 102668,
            1414: 102704,
            1415: 102718,
            1416: 102752,
            1417: 102780,
            1418: 102798,
            1419: 102812,
            1420: 102840,
            1421: 102850,
            1422: 102856,
            1423: 102864,
            1424: 102878,
            1425: 102886,
            1426: 102892,
            1427: 102906,
            1428: 102936,
            1429: 102974,
            1430: 103008,
            1431: 103036,
            1432: 103104,
            1433: 103160,
            1434: 103224,
            1435: 103280,
            1436: 103294,
            1437: 103298,
            1438: 103300,
            1439: 103312,
            1440: 103326,
            1441: 103328,
            1442: 103356,
            1443: 103366,
            1444: 103372,
            1445: 103384,
            1446: 103406,
            1447: 103410,
            1448: 103412,
            1449: 103472,
            1450: 103486,
            1451: 103520,
            1452: 103548,
            1453: 103616,
            1454: 103672,
            1455: 103920,
            1456: 103992,
            1457: 104048,
            1458: 104062,
            1459: 104160,
            1460: 104188,
            1461: 104194,
            1462: 104196,
            1463: 104200,
            1464: 104208,
            1465: 104224,
            1466: 104252,
            1467: 104256,
            1468: 104312,
            1469: 104326,
            1470: 104332,
            1471: 104344,
            1472: 104368,
            1473: 104382,
            1474: 104398,
            1475: 104412,
            1476: 104418,
            1477: 104420,
            1478: 104424,
            1479: 104482,
            1480: 104484,
            1481: 104514,
            1482: 104520,
            1483: 104528,
            1484: 104542,
            1485: 104550,
            1486: 104570,
            1487: 104578,
            1488: 104580,
            1489: 104592,
            1490: 104606,
            1491: 104608,
            1492: 104636,
            1493: 104652,
            1494: 104690,
            1495: 104692,
            1496: 104706,
            1497: 104712,
            1498: 104734,
            1499: 104736,
            1500: 104764,
            1501: 104768,
            1502: 104824,
            1503: 104838,
            1504: 104856,
            1505: 104910,
            1506: 104930,
            1507: 104932,
            1508: 104936,
            1509: 104968,
            1510: 104976,
            1511: 104990,
            1512: 104992,
            1513: 105020,
            1514: 105024,
            1515: 105080,
            1516: 105200,
            1517: 105240,
            1518: 105278,
            1519: 105312,
            1520: 105372,
            1521: 105410,
            1522: 105412,
            1523: 105416,
            1524: 105424,
            1525: 105446,
            1526: 105518,
            1527: 105524,
            1528: 105550,
            1529: 105564,
            1530: 105570,
            1531: 105572,
            1532: 105576,
            1533: 105614,
            1534: 105628,
            1535: 105656,
            1536: 105666,
            1537: 105672,
            1538: 105680,
            1539: 105702,
            1540: 105722,
            1541: 105742,
            1542: 105756,
            1543: 105784,
            1544: 105840,
            1545: 105854,
            1546: 105858,
            1547: 105860,
            1548: 105864,
            1549: 105872,
            1550: 105888,
            1551: 105932,
            1552: 105970,
            1553: 105972,
            1554: 106006,
            1555: 106022,
            1556: 106028,
            1557: 106054,
            1558: 106060,
            1559: 106072,
            1560: 106100,
            1561: 106118,
            1562: 106124,
            1563: 106136,
            1564: 106160,
            1565: 106174,
            1566: 106190,
            1567: 106210,
            1568: 106212,
            1569: 106216,
            1570: 106250,
            1571: 106258,
            1572: 106260,
            1573: 106274,
            1574: 106276,
            1575: 106280,
            1576: 106306,
            1577: 106308,
            1578: 106312,
            1579: 106320,
            1580: 106334,
            1581: 106348,
            1582: 106394,
            1583: 106414,
            1584: 106418,
            1585: 106420,
            1586: 106566,
            1587: 106572,
            1588: 106610,
            1589: 106612,
            1590: 106630,
            1591: 106636,
            1592: 106648,
            1593: 106672,
            1594: 106686,
            1595: 106722,
            1596: 106724,
            1597: 106728,
            1598: 106742,
            1599: 106758,
            1600: 106764,
            1601: 106776,
            1602: 106800,
            1603: 106814,
            1604: 106848,
            1605: 106876,
            1606: 106894,
            1607: 106908,
            1608: 106936,
            1609: 106946,
            1610: 106948,
            1611: 106952,
            1612: 106960,
            1613: 106974,
            1614: 106982,
            1615: 106988,
            1616: 107032,
            1617: 107056,
            1618: 107070,
            1619: 107104,
            1620: 107132,
            1621: 107200,
            1622: 107256,
            1623: 107292,
            1624: 107320,
            1625: 107376,
            1626: 107390,
            1627: 107394,
            1628: 107396,
            1629: 107400,
            1630: 107408,
            1631: 107422,
            1632: 107424,
            1633: 107452,
            1634: 107462,
            1635: 107468,
            1636: 107480,
            1637: 107502,
            1638: 107506,
            1639: 107508,
            1640: 107544,
            1641: 107568,
            1642: 107582,
            1643: 107616,
            1644: 107644,
            1645: 107712,
            1646: 107768,
            1647: 108016,
            1648: 108060,
            1649: 108088,
            1650: 108144,
            1651: 108158,
            1652: 108256,
            1653: 108284,
            1654: 108290,
            1655: 108292,
            1656: 108296,
            1657: 108304,
            1658: 108318,
            1659: 108320,
            1660: 108348,
            1661: 108352,
            1662: 108408,
            1663: 108422,
            1664: 108428,
            1665: 108440,
            1666: 108464,
            1667: 108478,
            1668: 108494,
            1669: 108508,
            1670: 108514,
            1671: 108516,
            1672: 108520,
            1673: 108592,
            1674: 108640,
            1675: 108668,
            1676: 108736,
            1677: 108792,
            1678: 109040,
            1679: 109536,
            1680: 109680,
            1681: 109694,
            1682: 109792,
            1683: 109820,
            1684: 110016,
            1685: 110072,
            1686: 110084,
            1687: 110088,
            1688: 110096,
            1689: 110112,
            1690: 110140,
            1691: 110144,
            1692: 110200,
            1693: 110320,
            1694: 110342,
            1695: 110348,
            1696: 110360,
            1697: 110384,
            1698: 110398,
            1699: 110432,
            1700: 110460,
            1701: 110478,
            1702: 110492,
            1703: 110520,
            1704: 110532,
            1705: 110536,
            1706: 110544,
            1707: 110558,
            1708: 110658,
            1709: 110686,
            1710: 110714,
            1711: 110722,
            1712: 110724,
            1713: 110728,
            1714: 110736,
            1715: 110750,
            1716: 110752,
            1717: 110780,
            1718: 110796,
            1719: 110834,
            1720: 110836,
            1721: 110850,
            1722: 110852,
            1723: 110856,
            1724: 110864,
            1725: 110878,
            1726: 110880,
            1727: 110908,
            1728: 110912,
            1729: 110968,
            1730: 110982,
            1731: 111000,
            1732: 111054,
            1733: 111074,
            1734: 111076,
            1735: 111080,
            1736: 111108,
            1737: 111112,
            1738: 111120,
            1739: 111134,
            1740: 111136,
            1741: 111164,
            1742: 111168,
            1743: 111224,
            1744: 111344,
            1745: 111372,
            1746: 111422,
            1747: 111456,
            1748: 111516,
            1749: 111554,
            1750: 111556,
            1751: 111560,
            1752: 111568,
            1753: 111590,
            1754: 111632,
            1755: 111646,
            1756: 111648,
            1757: 111676,
            1758: 111680,
            1759: 111736,
            1760: 111856,
            1761: 112096,
            1762: 112152,
            1763: 112224,
            1764: 112252,
            1765: 112320,
            1766: 112440,
            1767: 112514,
            1768: 112516,
            1769: 112520,
            1770: 112528,
            1771: 112542,
            1772: 112544,
            1773: 112588,
            1774: 112686,
            1775: 112718,
            1776: 112732,
            1777: 112782,
            1778: 112796,
            1779: 112824,
            1780: 112834,
            1781: 112836,
            1782: 112840,
            1783: 112848,
            1784: 112870,
            1785: 112890,
            1786: 112910,
            1787: 112924,
            1788: 112952,
            1789: 113008,
            1790: 113022,
            1791: 113026,
            1792: 113028,
            1793: 113032,
            1794: 113040,
            1795: 113054,
            1796: 113056,
            1797: 113100,
            1798: 113138,
            1799: 113140,
            1800: 113166,
            1801: 113180,
            1802: 113208,
            1803: 113264,
            1804: 113278,
            1805: 113376,
            1806: 113404,
            1807: 113416,
            1808: 113424,
            1809: 113440,
            1810: 113468,
            1811: 113472,
            1812: 113560,
            1813: 113614,
            1814: 113634,
            1815: 113636,
            1816: 113640,
            1817: 113686,
            1818: 113702,
            1819: 113708,
            1820: 113734,
            1821: 113740,
            1822: 113752,
            1823: 113778,
            1824: 113780,
            1825: 113798,
            1826: 113804,
            1827: 113816,
            1828: 113840,
            1829: 113854,
            1830: 113870,
            1831: 113890,
            1832: 113892,
            1833: 113896,
            1834: 113926,
            1835: 113932,
            1836: 113944,
            1837: 113968,
            1838: 113982,
            1839: 114016,
            1840: 114044,
            1841: 114076,
            1842: 114114,
            1843: 114116,
            1844: 114120,
            1845: 114128,
            1846: 114150,
            1847: 114170,
            1848: 114194,
            1849: 114196,
            1850: 114210,
            1851: 114212,
            1852: 114216,
            1853: 114242,
            1854: 114244,
            1855: 114248,
            1856: 114256,
            1857: 114270,
            1858: 114278,
            1859: 114306,
            1860: 114308,
            1861: 114312,
            1862: 114320,
            1863: 114334,
            1864: 114336,
            1865: 114364,
            1866: 114380,
            1867: 114420,
            1868: 114458,
            1869: 114478,
            1870: 114482,
            1871: 114484,
            1872: 114510,
            1873: 114524,
            1874: 114530,
            1875: 114532,
            1876: 114536,
            1877: 114842,
            1878: 114866,
            1879: 114868,
            1880: 114970,
            1881: 114994,
            1882: 114996,
            1883: 115042,
            1884: 115044,
            1885: 115048,
            1886: 115062,
            1887: 115130,
            1888: 115226,
            1889: 115250,
            1890: 115252,
            1891: 115278,
            1892: 115292,
            1893: 115298,
            1894: 115300,
            1895: 115304,
            1896: 115318,
            1897: 115342,
            1898: 115394,
            1899: 115396,
            1900: 115400,
            1901: 115408,
            1902: 115422,
            1903: 115430,
            1904: 115436,
            1905: 115450,
            1906: 115478,
            1907: 115494,
            1908: 115514,
            1909: 115526,
            1910: 115532,
            1911: 115570,
            1912: 115572,
            1913: 115738,
            1914: 115758,
            1915: 115762,
            1916: 115764,
            1917: 115790,
            1918: 115804,
            1919: 115810,
            1920: 115812,
            1921: 115816,
            1922: 115830,
            1923: 115854,
            1924: 115868,
            1925: 115896,
            1926: 115906,
            1927: 115912,
            1928: 115920,
            1929: 115934,
            1930: 115942,
            1931: 115948,
            1932: 115962,
            1933: 115996,
            1934: 116024,
            1935: 116080,
            1936: 116094,
            1937: 116098,
            1938: 116100,
            1939: 116104,
            1940: 116112,
            1941: 116126,
            1942: 116128,
            1943: 116156,
            1944: 116166,
            1945: 116172,
            1946: 116184,
            1947: 116206,
            1948: 116210,
            1949: 116212,
            1950: 116246,
            1951: 116262,
            1952: 116268,
            1953: 116282,
            1954: 116294,
            1955: 116300,
            1956: 116312,
            1957: 116334,
            1958: 116338,
            1959: 116340,
            1960: 116358,
            1961: 116364,
            1962: 116376,
            1963: 116400,
            1964: 116414,
            1965: 116430,
            1966: 116444,
            1967: 116450,
            1968: 116452,
            1969: 116456,
            1970: 116498,
            1971: 116500,
            1972: 116514,
            1973: 116520,
            1974: 116534,
            1975: 116546,
            1976: 116548,
            1977: 116552,
            1978: 116560,
            1979: 116574,
            1980: 116582,
            1981: 116588,
            1982: 116602,
            1983: 116654,
            1984: 116694,
            1985: 116714,
            1986: 116762,
            1987: 116782,
            1988: 116786,
            1989: 116788,
            1990: 116814,
            1991: 116828,
            1992: 116834,
            1993: 116836,
            1994: 116840,
            1995: 116854,
            1996: 116878,
            1997: 116892,
            1998: 116920,
            1999: 116930,
            2000: 116936,
            2001: 116944,
            2002: 116958,
            2003: 116966,
            2004: 116972,
            2005: 116986,
            2006: 117006,
            2007: 117048,
            2008: 117104,
            2009: 117118,
            2010: 117122,
            2011: 117124,
            2012: 117136,
            2013: 117150,
            2014: 117152,
            2015: 117180,
            2016: 117190,
            2017: 117196,
            2018: 117208,
            2019: 117230,
            2020: 117234,
            2021: 117236,
            2022: 117304,
            2023: 117360,
            2024: 117374,
            2025: 117472,
            2026: 117500,
            2027: 117506,
            2028: 117508,
            2029: 117512,
            2030: 117520,
            2031: 117536,
            2032: 117564,
            2033: 117568,
            2034: 117624,
            2035: 117638,
            2036: 117644,
            2037: 117656,
            2038: 117680,
            2039: 117694,
            2040: 117710,
            2041: 117724,
            2042: 117730,
            2043: 117732,
            2044: 117736,
            2045: 117750,
            2046: 117782,
            2047: 117798,
            2048: 117804,
            2049: 117818,
            2050: 117830,
            2051: 117848,
            2052: 117874,
            2053: 117876,
            2054: 117894,
            2055: 117936,
            2056: 117950,
            2057: 117966,
            2058: 117986,
            2059: 117988,
            2060: 117992,
            2061: 118022,
            2062: 118028,
            2063: 118040,
            2064: 118064,
            2065: 118078,
            2066: 118112,
            2067: 118140,
            2068: 118172,
            2069: 118210,
            2070: 118212,
            2071: 118216,
            2072: 118224,
            2073: 118238,
            2074: 118246,
            2075: 118266,
            2076: 118306,
            2077: 118312,
            2078: 118338,
            2079: 118352,
            2080: 118366,
            2081: 118374,
            2082: 118394,
            2083: 118402,
            2084: 118404,
            2085: 118408,
            2086: 118416,
            2087: 118430,
            2088: 118432,
            2089: 118460,
            2090: 118476,
            2091: 118514,
            2092: 118516,
            2093: 118574,
            2094: 118578,
            2095: 118580,
            2096: 118606,
            2097: 118620,
            2098: 118626,
            2099: 118628,
            2100: 118632,
            2101: 118678,
            2102: 118694,
            2103: 118700,
            2104: 118730,
            2105: 118738,
            2106: 118740,
            2107: 118830,
            2108: 118834,
            2109: 118836,
            2110: 118862,
            2111: 118876,
            2112: 118882,
            2113: 118884,
            2114: 118888,
            2115: 118902,
            2116: 118926,
            2117: 118940,
            2118: 118968,
            2119: 118978,
            2120: 118980,
            2121: 118984,
            2122: 118992,
            2123: 119006,
            2124: 119014,
            2125: 119020,
            2126: 119034,
            2127: 119068,
            2128: 119096,
            2129: 119152,
            2130: 119166,
            2131: 119170,
            2132: 119172,
            2133: 119176,
            2134: 119184,
            2135: 119198,
            2136: 119200,
            2137: 119228,
            2138: 119238,
            2139: 119244,
            2140: 119256,
            2141: 119278,
            2142: 119282,
            2143: 119284,
            2144: 119324,
            2145: 119352,
            2146: 119408,
            2147: 119422,
            2148: 119520,
            2149: 119548,
            2150: 119554,
            2151: 119556,
            2152: 119560,
            2153: 119568,
            2154: 119582,
            2155: 119584,
            2156: 119612,
            2157: 119616,
            2158: 119672,
            2159: 119686,
            2160: 119692,
            2161: 119704,
            2162: 119728,
            2163: 119742,
            2164: 119758,
            2165: 119772,
            2166: 119778,
            2167: 119780,
            2168: 119784,
            2169: 119798,
            2170: 119920,
            2171: 119934,
            2172: 120032,
            2173: 120060,
            2174: 120256,
            2175: 120312,
            2176: 120324,
            2177: 120328,
            2178: 120336,
            2179: 120352,
            2180: 120384,
            2181: 120440,
            2182: 120560,
            2183: 120582,
            2184: 120588,
            2185: 120600,
            2186: 120624,
            2187: 120638,
            2188: 120672,
            2189: 120700,
            2190: 120718,
            2191: 120732,
            2192: 120760,
            2193: 120770,
            2194: 120772,
            2195: 120776,
            2196: 120784,
            2197: 120798,
            2198: 120806,
            2199: 120812,
            2200: 120870,
            2201: 120876,
            2202: 120890,
            2203: 120902,
            2204: 120908,
            2205: 120920,
            2206: 120946,
            2207: 120948,
            2208: 120966,
            2209: 120972,
            2210: 120984,
            2211: 121008,
            2212: 121022,
            2213: 121038,
            2214: 121058,
            2215: 121060,
            2216: 121064,
            2217: 121078,
            2218: 121100,
            2219: 121112,
            2220: 121136,
            2221: 121150,
            2222: 121184,
            2223: 121212,
            2224: 121244,
            2225: 121282,
            2226: 121284,
            2227: 121288,
            2228: 121296,
            2229: 121318,
            2230: 121338,
            2231: 121356,
            2232: 121368,
            2233: 121392,
            2234: 121406,
            2235: 121440,
            2236: 121468,
            2237: 121536,
            2238: 121592,
            2239: 121656,
            2240: 121730,
            2241: 121732,
            2242: 121736,
            2243: 121744,
            2244: 121758,
            2245: 121760,
            2246: 121804,
            2247: 121842,
            2248: 121844,
            2249: 121890,
            2250: 121922,
            2251: 121924,
            2252: 121928,
            2253: 121936,
            2254: 121950,
            2255: 121958,
            2256: 121978,
            2257: 121986,
            2258: 121988,
            2259: 121992,
            2260: 122000,
            2261: 122014,
            2262: 122016,
            2263: 122044,
            2264: 122060,
            2265: 122098,
            2266: 122100,
            2267: 122116,
            2268: 122120,
            2269: 122128,
            2270: 122142,
            2271: 122144,
            2272: 122172,
            2273: 122176,
            2274: 122232,
            2275: 122246,
            2276: 122264,
            2277: 122318,
            2278: 122338,
            2279: 122340,
            2280: 122344,
            2281: 122414,
            2282: 122418,
            2283: 122420,
            2284: 122446,
            2285: 122460,
            2286: 122466,
            2287: 122468,
            2288: 122472,
            2289: 122510,
            2290: 122524,
            2291: 122552,
            2292: 122562,
            2293: 122564,
            2294: 122568,
            2295: 122576,
            2296: 122598,
            2297: 122618,
            2298: 122646,
            2299: 122662,
            2300: 122668,
            2301: 122694,
            2302: 122700,
            2303: 122712,
            2304: 122738,
            2305: 122740,
            2306: 122762,
            2307: 122770,
            2308: 122772,
            2309: 122786,
            2310: 122788,
            2311: 122792,
            2312: 123018,
            2313: 123026,
            2314: 123028,
            2315: 123042,
            2316: 123044,
            2317: 123048,
            2318: 123062,
            2319: 123098,
            2320: 123146,
            2321: 123154,
            2322: 123156,
            2323: 123170,
            2324: 123172,
            2325: 123176,
            2326: 123190,
            2327: 123202,
            2328: 123204,
            2329: 123208,
            2330: 123216,
            2331: 123238,
            2332: 123244,
            2333: 123258,
            2334: 123290,
            2335: 123314,
            2336: 123316,
            2337: 123402,
            2338: 123410,
            2339: 123412,
            2340: 123426,
            2341: 123428,
            2342: 123432,
            2343: 123446,
            2344: 123458,
            2345: 123464,
            2346: 123472,
            2347: 123486,
            2348: 123494,
            2349: 123500,
            2350: 123514,
            2351: 123522,
            2352: 123524,
            2353: 123528,
            2354: 123536,
            2355: 123552,
            2356: 123580,
            2357: 123590,
            2358: 123596,
            2359: 123608,
            2360: 123630,
            2361: 123634,
            2362: 123636,
            2363: 123674,
            2364: 123698,
            2365: 123700,
            2366: 123740,
            2367: 123746,
            2368: 123748,
            2369: 123752,
            2370: 123834,
            2371: 123914,
            2372: 123922,
            2373: 123924,
            2374: 123938,
            2375: 123944,
            2376: 123958,
            2377: 123970,
            2378: 123976,
            2379: 123984,
            2380: 123998,
            2381: 124006,
            2382: 124012,
            2383: 124026,
            2384: 124034,
            2385: 124036,
            2386: 124048,
            2387: 124062,
            2388: 124064,
            2389: 124092,
            2390: 124102,
            2391: 124108,
            2392: 124120,
            2393: 124142,
            2394: 124146,
            2395: 124148,
            2396: 124162,
            2397: 124164,
            2398: 124168,
            2399: 124176,
            2400: 124190,
            2401: 124192,
            2402: 124220,
            2403: 124224,
            2404: 124280,
            2405: 124294,
            2406: 124300,
            2407: 124312,
            2408: 124336,
            2409: 124350,
            2410: 124366,
            2411: 124380,
            2412: 124386,
            2413: 124388,
            2414: 124392,
            2415: 124406,
            2416: 124442,
            2417: 124462,
            2418: 124466,
            2419: 124468,
            2420: 124494,
            2421: 124508,
            2422: 124514,
            2423: 124520,
            2424: 124558,
            2425: 124572,
            2426: 124600,
            2427: 124610,
            2428: 124612,
            2429: 124616,
            2430: 124624,
            2431: 124646,
            2432: 124666,
            2433: 124694,
            2434: 124710,
            2435: 124716,
            2436: 124730,
            2437: 124742,
            2438: 124748,
            2439: 124760,
            2440: 124786,
            2441: 124788,
            2442: 124818,
            2443: 124820,
            2444: 124834,
            2445: 124836,
            2446: 124840,
            2447: 124854,
            2448: 124946,
            2449: 124948,
            2450: 124962,
            2451: 124964,
            2452: 124968,
            2453: 124982,
            2454: 124994,
            2455: 124996,
            2456: 125000,
            2457: 125008,
            2458: 125022,
            2459: 125030,
            2460: 125036,
            2461: 125050,
            2462: 125058,
            2463: 125060,
            2464: 125064,
            2465: 125072,
            2466: 125086,
            2467: 125088,
            2468: 125116,
            2469: 125126,
            2470: 125132,
            2471: 125144,
            2472: 125166,
            2473: 125170,
            2474: 125172,
            2475: 125186,
            2476: 125188,
            2477: 125192,
            2478: 125200,
            2479: 125216,
            2480: 125244,
            2481: 125248,
            2482: 125304,
            2483: 125318,
            2484: 125324,
            2485: 125336,
            2486: 125360,
            2487: 125374,
            2488: 125390,
            2489: 125404,
            2490: 125410,
            2491: 125412,
            2492: 125416,
            2493: 125430,
            2494: 125444,
            2495: 125448,
            2496: 125456,
            2497: 125472,
            2498: 125504,
            2499: 125560,
            2500: 125680,
            2501: 125702,
            2502: 125708,
            2503: 125720,
            2504: 125744,
            2505: 125758,
            2506: 125792,
            2507: 125820,
            2508: 125838,
            2509: 125852,
            2510: 125880,
            2511: 125890,
            2512: 125892,
            2513: 125896,
            2514: 125904,
            2515: 125918,
            2516: 125926,
            2517: 125932,
            2518: 125978,
            2519: 125998,
            2520: 126002,
            2521: 126004,
            2522: 126030,
            2523: 126044,
            2524: 126050,
            2525: 126052,
            2526: 126056,
            2527: 126094,
            2528: 126108,
            2529: 126136,
            2530: 126146,
            2531: 126148,
            2532: 126152,
            2533: 126160,
            2534: 126182,
            2535: 126202,
            2536: 126222,
            2537: 126236,
            2538: 126264,
            2539: 126320,
            2540: 126334,
            2541: 126338,
            2542: 126340,
            2543: 126344,
            2544: 126352,
            2545: 126366,
            2546: 126368,
            2547: 126412,
            2548: 126450,
            2549: 126452,
            2550: 126486,
            2551: 126502,
            2552: 126508,
            2553: 126522,
            2554: 126534,
            2555: 126540,
            2556: 126552,
            2557: 126574,
            2558: 126578,
            2559: 126580,
            2560: 126598,
            2561: 126604,
            2562: 126616,
            2563: 126640,
            2564: 126654,
            2565: 126670,
            2566: 126684,
            2567: 126690,
            2568: 126692,
            2569: 126696,
            2570: 126738,
            2571: 126754,
            2572: 126756,
            2573: 126760,
            2574: 126774,
            2575: 126786,
            2576: 126788,
            2577: 126792,
            2578: 126800,
            2579: 126814,
            2580: 126822,
            2581: 126828,
            2582: 126842,
            2583: 126894,
            2584: 126898,
            2585: 126900,
            2586: 126934,
            2587: 127126,
            2588: 127142,
            2589: 127148,
            2590: 127162,
            2591: 127178,
            2592: 127186,
            2593: 127188,
            2594: 127254,
            2595: 127270,
            2596: 127276,
            2597: 127290,
            2598: 127302,
            2599: 127308,
            2600: 127320,
            2601: 127342,
            2602: 127346,
            2603: 127348,
            2604: 127370,
            2605: 127378,
            2606: 127380,
            2607: 127394,
            2608: 127396,
            2609: 127400,
            2610: 127450,
            2611: 127510,
            2612: 127526,
            2613: 127532,
            2614: 127546,
            2615: 127558,
            2616: 127576,
            2617: 127598,
            2618: 127602,
            2619: 127604,
            2620: 127622,
            2621: 127628,
            2622: 127640,
            2623: 127664,
            2624: 127678,
            2625: 127694,
            2626: 127708,
            2627: 127714,
            2628: 127716,
            2629: 127720,
            2630: 127734,
            2631: 127754,
            2632: 127762,
            2633: 127764,
            2634: 127778,
            2635: 127784,
            2636: 127810,
            2637: 127812,
            2638: 127816,
            2639: 127824,
            2640: 127838,
            2641: 127846,
            2642: 127866,
            2643: 127898,
            2644: 127918,
            2645: 127922,
            2646: 127924,
            2647: 128022,
            2648: 128038,
            2649: 128044,
            2650: 128058,
            2651: 128070,
            2652: 128076,
            2653: 128088,
            2654: 128110,
            2655: 128114,
            2656: 128116,
            2657: 128134,
            2658: 128140,
            2659: 128152,
            2660: 128176,
            2661: 128190,
            2662: 128206,
            2663: 128220,
            2664: 128226,
            2665: 128228,
            2666: 128232,
            2667: 128246,
            2668: 128262,
            2669: 128268,
            2670: 128280,
            2671: 128304,
            2672: 128318,
            2673: 128352,
            2674: 128380,
            2675: 128398,
            2676: 128412,
            2677: 128440,
            2678: 128450,
            2679: 128452,
            2680: 128456,
            2681: 128464,
            2682: 128478,
            2683: 128486,
            2684: 128492,
            2685: 128506,
            2686: 128522,
            2687: 128530,
            2688: 128532,
            2689: 128546,
            2690: 128548,
            2691: 128552,
            2692: 128566,
            2693: 128578,
            2694: 128580,
            2695: 128584,
            2696: 128592,
            2697: 128606,
            2698: 128614,
            2699: 128634,
            2700: 128642,
            2701: 128644,
            2702: 128648,
            2703: 128656,
            2704: 128670,
            2705: 128672,
            2706: 128700,
            2707: 128716,
            2708: 128754,
            2709: 128756,
            2710: 128794,
            2711: 128814,
            2712: 128818,
            2713: 128820,
            2714: 128846,
            2715: 128860,
            2716: 128866,
            2717: 128868,
            2718: 128872,
            2719: 128886,
            2720: 128918,
            2721: 128934,
            2722: 128940,
            2723: 128954,
            2724: 128978,
            2725: 128980,
            2726: 129178,
            2727: 129198,
            2728: 129202,
            2729: 129204,
            2730: 129238,
            2731: 129258,
            2732: 129306,
            2733: 129326,
            2734: 129330,
            2735: 129332,
            2736: 129358,
            2737: 129372,
            2738: 129378,
            2739: 129380,
            2740: 129384,
            2741: 129398,
            2742: 129430,
            2743: 129446,
            2744: 129452,
            2745: 129466,
            2746: 129482,
            2747: 129490,
            2748: 129492,
            2749: 129562,
            2750: 129582,
            2751: 129586,
            2752: 129588,
            2753: 129614,
            2754: 129628,
            2755: 129634,
            2756: 129636,
            2757: 129640,
            2758: 129654,
            2759: 129678,
            2760: 129692,
            2761: 129720,
            2762: 129730,
            2763: 129732,
            2764: 129736,
            2765: 129744,
            2766: 129758,
            2767: 129766,
            2768: 129772,
            2769: 129814,
            2770: 129830,
            2771: 129836,
            2772: 129850,
            2773: 129862,
            2774: 129868,
            2775: 129880,
            2776: 129902,
            2777: 129906,
            2778: 129908,
            2779: 129930,
            2780: 129938,
            2781: 129940,
            2782: 129954,
            2783: 129956,
            2784: 129960,
            2785: 129974,
            2786: 130010,
          }[e],
          n = r & 1,
          i = 0;
        i < 8;
        i++
      ) {
        for (var a = 0; (r & 1) === n; ) {
          a += 1;
          r >>= 1;
        }
        n = r & 1;
        if (!t.RATIOS_TABLE[e]) {
          t.RATIOS_TABLE[e] = new Array(8);
        }
        t.RATIOS_TABLE[e][8 - i - 1] = Math.fround(a / 17);
      }
    this.bSymbolTableReady = true;
  };
  t.getDecodedValue = function (e) {
    var r = t.getDecodedCodewordValue(t.sampleBitCounts(e));
    return r !== -1 ? r : t.getClosestDecodedValue(e);
  };
  t.sampleBitCounts = function (e) {
    for (var r = re.sum(e), n = new Int32Array(8), i = 0, a = 0, o = 0; o < 17; o++) {
      var s = r / 34 + (o * r) / 17;
      if (a + e[i] <= s) {
        a += e[i];
        i++;
      }
      n[i]++;
    }
    return n;
  };
  t.getDecodedCodewordValue = function (e) {
    var r = t.getBitValue(e);
    return te.getCodeword(r) === -1 ? -1 : r;
  };
  t.getBitValue = function (e) {
    for (var r = 0, n = 0; n < e.length; n++) for (var i = 0; i < e[n]; i++) r = (r << 1) | (n % 2 === 0 ? 1 : 0);
    return Math.trunc(r);
  };
  t.getClosestDecodedValue = function (e) {
    var r = re.sum(e);
    var n = new Array(8);
    if (r > 1) for (var i = 0; i < n.length; i++) n[i] = Math.fround(e[i] / r);
    var a = 9007199254740991;
    var o = -1;
    if (!this.bSymbolTableReady) {
      t.initialize();
    }
    for (var s = 0; s < t.RATIOS_TABLE.length; s++) {
      for (var c = 0, l = t.RATIOS_TABLE[s], f = 0; f < 8; f++) {
        var u = Math.fround(l[f] - n[f]);
        c += Math.fround(u * u);
        if (c >= a) break;
      }
      if (c < a) {
        a = c;
        o = {
          0: 66142,
          1: 66170,
          2: 66206,
          3: 66236,
          4: 66290,
          5: 66292,
          6: 66350,
          7: 66382,
          8: 66396,
          9: 66454,
          10: 66470,
          11: 66476,
          12: 66594,
          13: 66600,
          14: 66614,
          15: 66626,
          16: 66628,
          17: 66632,
          18: 66640,
          19: 66654,
          20: 66662,
          21: 66668,
          22: 66682,
          23: 66690,
          24: 66718,
          25: 66720,
          26: 66748,
          27: 66758,
          28: 66776,
          29: 66798,
          30: 66802,
          31: 66804,
          32: 66820,
          33: 66824,
          34: 66832,
          35: 66846,
          36: 66848,
          37: 66876,
          38: 66880,
          39: 66936,
          40: 66950,
          41: 66956,
          42: 66968,
          43: 66992,
          44: 67006,
          45: 67022,
          46: 67036,
          47: 67042,
          48: 67044,
          49: 67048,
          50: 67062,
          51: 67118,
          52: 67150,
          53: 67164,
          54: 67214,
          55: 67228,
          56: 67256,
          57: 67294,
          58: 67322,
          59: 67350,
          60: 67366,
          61: 67372,
          62: 67398,
          63: 67404,
          64: 67416,
          65: 67438,
          66: 67474,
          67: 67476,
          68: 67490,
          69: 67492,
          70: 67496,
          71: 67510,
          72: 67618,
          73: 67624,
          74: 67650,
          75: 67656,
          76: 67664,
          77: 67678,
          78: 67686,
          79: 67692,
          80: 67706,
          81: 67714,
          82: 67716,
          83: 67728,
          84: 67742,
          85: 67744,
          86: 67772,
          87: 67782,
          88: 67788,
          89: 67800,
          90: 67822,
          91: 67826,
          92: 67828,
          93: 67842,
          94: 67848,
          95: 67870,
          96: 67872,
          97: 67900,
          98: 67904,
          99: 67960,
          100: 67974,
          101: 67992,
          102: 68016,
          103: 68030,
          104: 68046,
          105: 68060,
          106: 68066,
          107: 68068,
          108: 68072,
          109: 68086,
          110: 68104,
          111: 68112,
          112: 68126,
          113: 68128,
          114: 68156,
          115: 68160,
          116: 68216,
          117: 68336,
          118: 68358,
          119: 68364,
          120: 68376,
          121: 68400,
          122: 68414,
          123: 68448,
          124: 68476,
          125: 68494,
          126: 68508,
          127: 68536,
          128: 68546,
          129: 68548,
          130: 68552,
          131: 68560,
          132: 68574,
          133: 68582,
          134: 68588,
          135: 68654,
          136: 68686,
          137: 68700,
          138: 68706,
          139: 68708,
          140: 68712,
          141: 68726,
          142: 68750,
          143: 68764,
          144: 68792,
          145: 68802,
          146: 68804,
          147: 68808,
          148: 68816,
          149: 68830,
          150: 68838,
          151: 68844,
          152: 68858,
          153: 68878,
          154: 68892,
          155: 68920,
          156: 68976,
          157: 68990,
          158: 68994,
          159: 68996,
          160: 69000,
          161: 69008,
          162: 69022,
          163: 69024,
          164: 69052,
          165: 69062,
          166: 69068,
          167: 69080,
          168: 69102,
          169: 69106,
          170: 69108,
          171: 69142,
          172: 69158,
          173: 69164,
          174: 69190,
          175: 69208,
          176: 69230,
          177: 69254,
          178: 69260,
          179: 69272,
          180: 69296,
          181: 69310,
          182: 69326,
          183: 69340,
          184: 69386,
          185: 69394,
          186: 69396,
          187: 69410,
          188: 69416,
          189: 69430,
          190: 69442,
          191: 69444,
          192: 69448,
          193: 69456,
          194: 69470,
          195: 69478,
          196: 69484,
          197: 69554,
          198: 69556,
          199: 69666,
          200: 69672,
          201: 69698,
          202: 69704,
          203: 69712,
          204: 69726,
          205: 69754,
          206: 69762,
          207: 69764,
          208: 69776,
          209: 69790,
          210: 69792,
          211: 69820,
          212: 69830,
          213: 69836,
          214: 69848,
          215: 69870,
          216: 69874,
          217: 69876,
          218: 69890,
          219: 69918,
          220: 69920,
          221: 69948,
          222: 69952,
          223: 70008,
          224: 70022,
          225: 70040,
          226: 70064,
          227: 70078,
          228: 70094,
          229: 70108,
          230: 70114,
          231: 70116,
          232: 70120,
          233: 70134,
          234: 70152,
          235: 70174,
          236: 70176,
          237: 70264,
          238: 70384,
          239: 70412,
          240: 70448,
          241: 70462,
          242: 70496,
          243: 70524,
          244: 70542,
          245: 70556,
          246: 70584,
          247: 70594,
          248: 70600,
          249: 70608,
          250: 70622,
          251: 70630,
          252: 70636,
          253: 70664,
          254: 70672,
          255: 70686,
          256: 70688,
          257: 70716,
          258: 70720,
          259: 70776,
          260: 70896,
          261: 71136,
          262: 71180,
          263: 71192,
          264: 71216,
          265: 71230,
          266: 71264,
          267: 71292,
          268: 71360,
          269: 71416,
          270: 71452,
          271: 71480,
          272: 71536,
          273: 71550,
          274: 71554,
          275: 71556,
          276: 71560,
          277: 71568,
          278: 71582,
          279: 71584,
          280: 71612,
          281: 71622,
          282: 71628,
          283: 71640,
          284: 71662,
          285: 71726,
          286: 71732,
          287: 71758,
          288: 71772,
          289: 71778,
          290: 71780,
          291: 71784,
          292: 71798,
          293: 71822,
          294: 71836,
          295: 71864,
          296: 71874,
          297: 71880,
          298: 71888,
          299: 71902,
          300: 71910,
          301: 71916,
          302: 71930,
          303: 71950,
          304: 71964,
          305: 71992,
          306: 72048,
          307: 72062,
          308: 72066,
          309: 72068,
          310: 72080,
          311: 72094,
          312: 72096,
          313: 72124,
          314: 72134,
          315: 72140,
          316: 72152,
          317: 72174,
          318: 72178,
          319: 72180,
          320: 72206,
          321: 72220,
          322: 72248,
          323: 72304,
          324: 72318,
          325: 72416,
          326: 72444,
          327: 72456,
          328: 72464,
          329: 72478,
          330: 72480,
          331: 72508,
          332: 72512,
          333: 72568,
          334: 72588,
          335: 72600,
          336: 72624,
          337: 72638,
          338: 72654,
          339: 72668,
          340: 72674,
          341: 72676,
          342: 72680,
          343: 72694,
          344: 72726,
          345: 72742,
          346: 72748,
          347: 72774,
          348: 72780,
          349: 72792,
          350: 72814,
          351: 72838,
          352: 72856,
          353: 72880,
          354: 72894,
          355: 72910,
          356: 72924,
          357: 72930,
          358: 72932,
          359: 72936,
          360: 72950,
          361: 72966,
          362: 72972,
          363: 72984,
          364: 73008,
          365: 73022,
          366: 73056,
          367: 73084,
          368: 73102,
          369: 73116,
          370: 73144,
          371: 73156,
          372: 73160,
          373: 73168,
          374: 73182,
          375: 73190,
          376: 73196,
          377: 73210,
          378: 73226,
          379: 73234,
          380: 73236,
          381: 73250,
          382: 73252,
          383: 73256,
          384: 73270,
          385: 73282,
          386: 73284,
          387: 73296,
          388: 73310,
          389: 73318,
          390: 73324,
          391: 73346,
          392: 73348,
          393: 73352,
          394: 73360,
          395: 73374,
          396: 73376,
          397: 73404,
          398: 73414,
          399: 73420,
          400: 73432,
          401: 73454,
          402: 73498,
          403: 73518,
          404: 73522,
          405: 73524,
          406: 73550,
          407: 73564,
          408: 73570,
          409: 73572,
          410: 73576,
          411: 73590,
          412: 73800,
          413: 73822,
          414: 73858,
          415: 73860,
          416: 73872,
          417: 73886,
          418: 73888,
          419: 73916,
          420: 73944,
          421: 73970,
          422: 73972,
          423: 73992,
          424: 74014,
          425: 74016,
          426: 74044,
          427: 74048,
          428: 74104,
          429: 74118,
          430: 74136,
          431: 74160,
          432: 74174,
          433: 74210,
          434: 74212,
          435: 74216,
          436: 74230,
          437: 74244,
          438: 74256,
          439: 74270,
          440: 74272,
          441: 74360,
          442: 74480,
          443: 74502,
          444: 74508,
          445: 74544,
          446: 74558,
          447: 74592,
          448: 74620,
          449: 74638,
          450: 74652,
          451: 74680,
          452: 74690,
          453: 74696,
          454: 74704,
          455: 74726,
          456: 74732,
          457: 74782,
          458: 74784,
          459: 74812,
          460: 74992,
          461: 75232,
          462: 75288,
          463: 75326,
          464: 75360,
          465: 75388,
          466: 75456,
          467: 75512,
          468: 75576,
          469: 75632,
          470: 75646,
          471: 75650,
          472: 75652,
          473: 75664,
          474: 75678,
          475: 75680,
          476: 75708,
          477: 75718,
          478: 75724,
          479: 75736,
          480: 75758,
          481: 75808,
          482: 75836,
          483: 75840,
          484: 75896,
          485: 76016,
          486: 76256,
          487: 76736,
          488: 76824,
          489: 76848,
          490: 76862,
          491: 76896,
          492: 76924,
          493: 76992,
          494: 77048,
          495: 77296,
          496: 77340,
          497: 77368,
          498: 77424,
          499: 77438,
          500: 77536,
          501: 77564,
          502: 77572,
          503: 77576,
          504: 77584,
          505: 77600,
          506: 77628,
          507: 77632,
          508: 77688,
          509: 77702,
          510: 77708,
          511: 77720,
          512: 77744,
          513: 77758,
          514: 77774,
          515: 77788,
          516: 77870,
          517: 77902,
          518: 77916,
          519: 77922,
          520: 77928,
          521: 77966,
          522: 77980,
          523: 78008,
          524: 78018,
          525: 78024,
          526: 78032,
          527: 78046,
          528: 78060,
          529: 78074,
          530: 78094,
          531: 78136,
          532: 78192,
          533: 78206,
          534: 78210,
          535: 78212,
          536: 78224,
          537: 78238,
          538: 78240,
          539: 78268,
          540: 78278,
          541: 78284,
          542: 78296,
          543: 78322,
          544: 78324,
          545: 78350,
          546: 78364,
          547: 78448,
          548: 78462,
          549: 78560,
          550: 78588,
          551: 78600,
          552: 78622,
          553: 78624,
          554: 78652,
          555: 78656,
          556: 78712,
          557: 78726,
          558: 78744,
          559: 78768,
          560: 78782,
          561: 78798,
          562: 78812,
          563: 78818,
          564: 78820,
          565: 78824,
          566: 78838,
          567: 78862,
          568: 78876,
          569: 78904,
          570: 78960,
          571: 78974,
          572: 79072,
          573: 79100,
          574: 79296,
          575: 79352,
          576: 79368,
          577: 79376,
          578: 79390,
          579: 79392,
          580: 79420,
          581: 79424,
          582: 79480,
          583: 79600,
          584: 79628,
          585: 79640,
          586: 79664,
          587: 79678,
          588: 79712,
          589: 79740,
          590: 79772,
          591: 79800,
          592: 79810,
          593: 79812,
          594: 79816,
          595: 79824,
          596: 79838,
          597: 79846,
          598: 79852,
          599: 79894,
          600: 79910,
          601: 79916,
          602: 79942,
          603: 79948,
          604: 79960,
          605: 79982,
          606: 79988,
          607: 80006,
          608: 80024,
          609: 80048,
          610: 80062,
          611: 80078,
          612: 80092,
          613: 80098,
          614: 80100,
          615: 80104,
          616: 80134,
          617: 80140,
          618: 80176,
          619: 80190,
          620: 80224,
          621: 80252,
          622: 80270,
          623: 80284,
          624: 80312,
          625: 80328,
          626: 80336,
          627: 80350,
          628: 80358,
          629: 80364,
          630: 80378,
          631: 80390,
          632: 80396,
          633: 80408,
          634: 80432,
          635: 80446,
          636: 80480,
          637: 80508,
          638: 80576,
          639: 80632,
          640: 80654,
          641: 80668,
          642: 80696,
          643: 80752,
          644: 80766,
          645: 80776,
          646: 80784,
          647: 80798,
          648: 80800,
          649: 80828,
          650: 80844,
          651: 80856,
          652: 80878,
          653: 80882,
          654: 80884,
          655: 80914,
          656: 80916,
          657: 80930,
          658: 80932,
          659: 80936,
          660: 80950,
          661: 80962,
          662: 80968,
          663: 80976,
          664: 80990,
          665: 80998,
          666: 81004,
          667: 81026,
          668: 81028,
          669: 81040,
          670: 81054,
          671: 81056,
          672: 81084,
          673: 81094,
          674: 81100,
          675: 81112,
          676: 81134,
          677: 81154,
          678: 81156,
          679: 81160,
          680: 81168,
          681: 81182,
          682: 81184,
          683: 81212,
          684: 81216,
          685: 81272,
          686: 81286,
          687: 81292,
          688: 81304,
          689: 81328,
          690: 81342,
          691: 81358,
          692: 81372,
          693: 81380,
          694: 81384,
          695: 81398,
          696: 81434,
          697: 81454,
          698: 81458,
          699: 81460,
          700: 81486,
          701: 81500,
          702: 81506,
          703: 81508,
          704: 81512,
          705: 81526,
          706: 81550,
          707: 81564,
          708: 81592,
          709: 81602,
          710: 81604,
          711: 81608,
          712: 81616,
          713: 81630,
          714: 81638,
          715: 81644,
          716: 81702,
          717: 81708,
          718: 81722,
          719: 81734,
          720: 81740,
          721: 81752,
          722: 81774,
          723: 81778,
          724: 81780,
          725: 82050,
          726: 82078,
          727: 82080,
          728: 82108,
          729: 82180,
          730: 82184,
          731: 82192,
          732: 82206,
          733: 82208,
          734: 82236,
          735: 82240,
          736: 82296,
          737: 82316,
          738: 82328,
          739: 82352,
          740: 82366,
          741: 82402,
          742: 82404,
          743: 82408,
          744: 82440,
          745: 82448,
          746: 82462,
          747: 82464,
          748: 82492,
          749: 82496,
          750: 82552,
          751: 82672,
          752: 82694,
          753: 82700,
          754: 82712,
          755: 82736,
          756: 82750,
          757: 82784,
          758: 82812,
          759: 82830,
          760: 82882,
          761: 82884,
          762: 82888,
          763: 82896,
          764: 82918,
          765: 82924,
          766: 82952,
          767: 82960,
          768: 82974,
          769: 82976,
          770: 83004,
          771: 83008,
          772: 83064,
          773: 83184,
          774: 83424,
          775: 83468,
          776: 83480,
          777: 83504,
          778: 83518,
          779: 83552,
          780: 83580,
          781: 83648,
          782: 83704,
          783: 83740,
          784: 83768,
          785: 83824,
          786: 83838,
          787: 83842,
          788: 83844,
          789: 83848,
          790: 83856,
          791: 83872,
          792: 83900,
          793: 83910,
          794: 83916,
          795: 83928,
          796: 83950,
          797: 83984,
          798: 84000,
          799: 84028,
          800: 84032,
          801: 84088,
          802: 84208,
          803: 84448,
          804: 84928,
          805: 85040,
          806: 85054,
          807: 85088,
          808: 85116,
          809: 85184,
          810: 85240,
          811: 85488,
          812: 85560,
          813: 85616,
          814: 85630,
          815: 85728,
          816: 85756,
          817: 85764,
          818: 85768,
          819: 85776,
          820: 85790,
          821: 85792,
          822: 85820,
          823: 85824,
          824: 85880,
          825: 85894,
          826: 85900,
          827: 85912,
          828: 85936,
          829: 85966,
          830: 85980,
          831: 86048,
          832: 86080,
          833: 86136,
          834: 86256,
          835: 86496,
          836: 86976,
          837: 88160,
          838: 88188,
          839: 88256,
          840: 88312,
          841: 88560,
          842: 89056,
          843: 89200,
          844: 89214,
          845: 89312,
          846: 89340,
          847: 89536,
          848: 89592,
          849: 89608,
          850: 89616,
          851: 89632,
          852: 89664,
          853: 89720,
          854: 89840,
          855: 89868,
          856: 89880,
          857: 89904,
          858: 89952,
          859: 89980,
          860: 89998,
          861: 90012,
          862: 90040,
          863: 90190,
          864: 90204,
          865: 90254,
          866: 90268,
          867: 90296,
          868: 90306,
          869: 90308,
          870: 90312,
          871: 90334,
          872: 90382,
          873: 90396,
          874: 90424,
          875: 90480,
          876: 90494,
          877: 90500,
          878: 90504,
          879: 90512,
          880: 90526,
          881: 90528,
          882: 90556,
          883: 90566,
          884: 90572,
          885: 90584,
          886: 90610,
          887: 90612,
          888: 90638,
          889: 90652,
          890: 90680,
          891: 90736,
          892: 90750,
          893: 90848,
          894: 90876,
          895: 90884,
          896: 90888,
          897: 90896,
          898: 90910,
          899: 90912,
          900: 90940,
          901: 90944,
          902: 91000,
          903: 91014,
          904: 91020,
          905: 91032,
          906: 91056,
          907: 91070,
          908: 91086,
          909: 91100,
          910: 91106,
          911: 91108,
          912: 91112,
          913: 91126,
          914: 91150,
          915: 91164,
          916: 91192,
          917: 91248,
          918: 91262,
          919: 91360,
          920: 91388,
          921: 91584,
          922: 91640,
          923: 91664,
          924: 91678,
          925: 91680,
          926: 91708,
          927: 91712,
          928: 91768,
          929: 91888,
          930: 91928,
          931: 91952,
          932: 91966,
          933: 92000,
          934: 92028,
          935: 92046,
          936: 92060,
          937: 92088,
          938: 92098,
          939: 92100,
          940: 92104,
          941: 92112,
          942: 92126,
          943: 92134,
          944: 92140,
          945: 92188,
          946: 92216,
          947: 92272,
          948: 92384,
          949: 92412,
          950: 92608,
          951: 92664,
          952: 93168,
          953: 93200,
          954: 93214,
          955: 93216,
          956: 93244,
          957: 93248,
          958: 93304,
          959: 93424,
          960: 93664,
          961: 93720,
          962: 93744,
          963: 93758,
          964: 93792,
          965: 93820,
          966: 93888,
          967: 93944,
          968: 93980,
          969: 94008,
          970: 94064,
          971: 94078,
          972: 94084,
          973: 94088,
          974: 94096,
          975: 94110,
          976: 94112,
          977: 94140,
          978: 94150,
          979: 94156,
          980: 94168,
          981: 94246,
          982: 94252,
          983: 94278,
          984: 94284,
          985: 94296,
          986: 94318,
          987: 94342,
          988: 94348,
          989: 94360,
          990: 94384,
          991: 94398,
          992: 94414,
          993: 94428,
          994: 94440,
          995: 94470,
          996: 94476,
          997: 94488,
          998: 94512,
          999: 94526,
          1000: 94560,
          1001: 94588,
          1002: 94606,
          1003: 94620,
          1004: 94648,
          1005: 94658,
          1006: 94660,
          1007: 94664,
          1008: 94672,
          1009: 94686,
          1010: 94694,
          1011: 94700,
          1012: 94714,
          1013: 94726,
          1014: 94732,
          1015: 94744,
          1016: 94768,
          1017: 94782,
          1018: 94816,
          1019: 94844,
          1020: 94912,
          1021: 94968,
          1022: 94990,
          1023: 95004,
          1024: 95032,
          1025: 95088,
          1026: 95102,
          1027: 95112,
          1028: 95120,
          1029: 95134,
          1030: 95136,
          1031: 95164,
          1032: 95180,
          1033: 95192,
          1034: 95214,
          1035: 95218,
          1036: 95220,
          1037: 95244,
          1038: 95256,
          1039: 95280,
          1040: 95294,
          1041: 95328,
          1042: 95356,
          1043: 95424,
          1044: 95480,
          1045: 95728,
          1046: 95758,
          1047: 95772,
          1048: 95800,
          1049: 95856,
          1050: 95870,
          1051: 95968,
          1052: 95996,
          1053: 96008,
          1054: 96016,
          1055: 96030,
          1056: 96032,
          1057: 96060,
          1058: 96064,
          1059: 96120,
          1060: 96152,
          1061: 96176,
          1062: 96190,
          1063: 96220,
          1064: 96226,
          1065: 96228,
          1066: 96232,
          1067: 96290,
          1068: 96292,
          1069: 96296,
          1070: 96310,
          1071: 96322,
          1072: 96324,
          1073: 96328,
          1074: 96336,
          1075: 96350,
          1076: 96358,
          1077: 96364,
          1078: 96386,
          1079: 96388,
          1080: 96392,
          1081: 96400,
          1082: 96414,
          1083: 96416,
          1084: 96444,
          1085: 96454,
          1086: 96460,
          1087: 96472,
          1088: 96494,
          1089: 96498,
          1090: 96500,
          1091: 96514,
          1092: 96516,
          1093: 96520,
          1094: 96528,
          1095: 96542,
          1096: 96544,
          1097: 96572,
          1098: 96576,
          1099: 96632,
          1100: 96646,
          1101: 96652,
          1102: 96664,
          1103: 96688,
          1104: 96702,
          1105: 96718,
          1106: 96732,
          1107: 96738,
          1108: 96740,
          1109: 96744,
          1110: 96758,
          1111: 96772,
          1112: 96776,
          1113: 96784,
          1114: 96798,
          1115: 96800,
          1116: 96828,
          1117: 96832,
          1118: 96888,
          1119: 97008,
          1120: 97030,
          1121: 97036,
          1122: 97048,
          1123: 97072,
          1124: 97086,
          1125: 97120,
          1126: 97148,
          1127: 97166,
          1128: 97180,
          1129: 97208,
          1130: 97220,
          1131: 97224,
          1132: 97232,
          1133: 97246,
          1134: 97254,
          1135: 97260,
          1136: 97326,
          1137: 97330,
          1138: 97332,
          1139: 97358,
          1140: 97372,
          1141: 97378,
          1142: 97380,
          1143: 97384,
          1144: 97398,
          1145: 97422,
          1146: 97436,
          1147: 97464,
          1148: 97474,
          1149: 97476,
          1150: 97480,
          1151: 97488,
          1152: 97502,
          1153: 97510,
          1154: 97516,
          1155: 97550,
          1156: 97564,
          1157: 97592,
          1158: 97648,
          1159: 97666,
          1160: 97668,
          1161: 97672,
          1162: 97680,
          1163: 97694,
          1164: 97696,
          1165: 97724,
          1166: 97734,
          1167: 97740,
          1168: 97752,
          1169: 97774,
          1170: 97830,
          1171: 97836,
          1172: 97850,
          1173: 97862,
          1174: 97868,
          1175: 97880,
          1176: 97902,
          1177: 97906,
          1178: 97908,
          1179: 97926,
          1180: 97932,
          1181: 97944,
          1182: 97968,
          1183: 97998,
          1184: 98012,
          1185: 98018,
          1186: 98020,
          1187: 98024,
          1188: 98038,
          1189: 98618,
          1190: 98674,
          1191: 98676,
          1192: 98838,
          1193: 98854,
          1194: 98874,
          1195: 98892,
          1196: 98904,
          1197: 98926,
          1198: 98930,
          1199: 98932,
          1200: 98968,
          1201: 99006,
          1202: 99042,
          1203: 99044,
          1204: 99048,
          1205: 99062,
          1206: 99166,
          1207: 99194,
          1208: 99246,
          1209: 99286,
          1210: 99350,
          1211: 99366,
          1212: 99372,
          1213: 99386,
          1214: 99398,
          1215: 99416,
          1216: 99438,
          1217: 99442,
          1218: 99444,
          1219: 99462,
          1220: 99504,
          1221: 99518,
          1222: 99534,
          1223: 99548,
          1224: 99554,
          1225: 99556,
          1226: 99560,
          1227: 99574,
          1228: 99590,
          1229: 99596,
          1230: 99608,
          1231: 99632,
          1232: 99646,
          1233: 99680,
          1234: 99708,
          1235: 99726,
          1236: 99740,
          1237: 99768,
          1238: 99778,
          1239: 99780,
          1240: 99784,
          1241: 99792,
          1242: 99806,
          1243: 99814,
          1244: 99820,
          1245: 99834,
          1246: 99858,
          1247: 99860,
          1248: 99874,
          1249: 99880,
          1250: 99894,
          1251: 99906,
          1252: 99920,
          1253: 99934,
          1254: 99962,
          1255: 99970,
          1256: 99972,
          1257: 99976,
          1258: 99984,
          1259: 99998,
          1260: 100000,
          1261: 100028,
          1262: 100038,
          1263: 100044,
          1264: 100056,
          1265: 100078,
          1266: 100082,
          1267: 100084,
          1268: 100142,
          1269: 100174,
          1270: 100188,
          1271: 100246,
          1272: 100262,
          1273: 100268,
          1274: 100306,
          1275: 100308,
          1276: 100390,
          1277: 100396,
          1278: 100410,
          1279: 100422,
          1280: 100428,
          1281: 100440,
          1282: 100462,
          1283: 100466,
          1284: 100468,
          1285: 100486,
          1286: 100504,
          1287: 100528,
          1288: 100542,
          1289: 100558,
          1290: 100572,
          1291: 100578,
          1292: 100580,
          1293: 100584,
          1294: 100598,
          1295: 100620,
          1296: 100656,
          1297: 100670,
          1298: 100704,
          1299: 100732,
          1300: 100750,
          1301: 100792,
          1302: 100802,
          1303: 100808,
          1304: 100816,
          1305: 100830,
          1306: 100838,
          1307: 100844,
          1308: 100858,
          1309: 100888,
          1310: 100912,
          1311: 100926,
          1312: 100960,
          1313: 100988,
          1314: 101056,
          1315: 101112,
          1316: 101148,
          1317: 101176,
          1318: 101232,
          1319: 101246,
          1320: 101250,
          1321: 101252,
          1322: 101256,
          1323: 101264,
          1324: 101278,
          1325: 101280,
          1326: 101308,
          1327: 101318,
          1328: 101324,
          1329: 101336,
          1330: 101358,
          1331: 101362,
          1332: 101364,
          1333: 101410,
          1334: 101412,
          1335: 101416,
          1336: 101430,
          1337: 101442,
          1338: 101448,
          1339: 101456,
          1340: 101470,
          1341: 101478,
          1342: 101498,
          1343: 101506,
          1344: 101508,
          1345: 101520,
          1346: 101534,
          1347: 101536,
          1348: 101564,
          1349: 101580,
          1350: 101618,
          1351: 101620,
          1352: 101636,
          1353: 101640,
          1354: 101648,
          1355: 101662,
          1356: 101664,
          1357: 101692,
          1358: 101696,
          1359: 101752,
          1360: 101766,
          1361: 101784,
          1362: 101838,
          1363: 101858,
          1364: 101860,
          1365: 101864,
          1366: 101934,
          1367: 101938,
          1368: 101940,
          1369: 101966,
          1370: 101980,
          1371: 101986,
          1372: 101988,
          1373: 101992,
          1374: 102030,
          1375: 102044,
          1376: 102072,
          1377: 102082,
          1378: 102084,
          1379: 102088,
          1380: 102096,
          1381: 102138,
          1382: 102166,
          1383: 102182,
          1384: 102188,
          1385: 102214,
          1386: 102220,
          1387: 102232,
          1388: 102254,
          1389: 102282,
          1390: 102290,
          1391: 102292,
          1392: 102306,
          1393: 102308,
          1394: 102312,
          1395: 102326,
          1396: 102444,
          1397: 102458,
          1398: 102470,
          1399: 102476,
          1400: 102488,
          1401: 102514,
          1402: 102516,
          1403: 102534,
          1404: 102552,
          1405: 102576,
          1406: 102590,
          1407: 102606,
          1408: 102620,
          1409: 102626,
          1410: 102632,
          1411: 102646,
          1412: 102662,
          1413: 102668,
          1414: 102704,
          1415: 102718,
          1416: 102752,
          1417: 102780,
          1418: 102798,
          1419: 102812,
          1420: 102840,
          1421: 102850,
          1422: 102856,
          1423: 102864,
          1424: 102878,
          1425: 102886,
          1426: 102892,
          1427: 102906,
          1428: 102936,
          1429: 102974,
          1430: 103008,
          1431: 103036,
          1432: 103104,
          1433: 103160,
          1434: 103224,
          1435: 103280,
          1436: 103294,
          1437: 103298,
          1438: 103300,
          1439: 103312,
          1440: 103326,
          1441: 103328,
          1442: 103356,
          1443: 103366,
          1444: 103372,
          1445: 103384,
          1446: 103406,
          1447: 103410,
          1448: 103412,
          1449: 103472,
          1450: 103486,
          1451: 103520,
          1452: 103548,
          1453: 103616,
          1454: 103672,
          1455: 103920,
          1456: 103992,
          1457: 104048,
          1458: 104062,
          1459: 104160,
          1460: 104188,
          1461: 104194,
          1462: 104196,
          1463: 104200,
          1464: 104208,
          1465: 104224,
          1466: 104252,
          1467: 104256,
          1468: 104312,
          1469: 104326,
          1470: 104332,
          1471: 104344,
          1472: 104368,
          1473: 104382,
          1474: 104398,
          1475: 104412,
          1476: 104418,
          1477: 104420,
          1478: 104424,
          1479: 104482,
          1480: 104484,
          1481: 104514,
          1482: 104520,
          1483: 104528,
          1484: 104542,
          1485: 104550,
          1486: 104570,
          1487: 104578,
          1488: 104580,
          1489: 104592,
          1490: 104606,
          1491: 104608,
          1492: 104636,
          1493: 104652,
          1494: 104690,
          1495: 104692,
          1496: 104706,
          1497: 104712,
          1498: 104734,
          1499: 104736,
          1500: 104764,
          1501: 104768,
          1502: 104824,
          1503: 104838,
          1504: 104856,
          1505: 104910,
          1506: 104930,
          1507: 104932,
          1508: 104936,
          1509: 104968,
          1510: 104976,
          1511: 104990,
          1512: 104992,
          1513: 105020,
          1514: 105024,
          1515: 105080,
          1516: 105200,
          1517: 105240,
          1518: 105278,
          1519: 105312,
          1520: 105372,
          1521: 105410,
          1522: 105412,
          1523: 105416,
          1524: 105424,
          1525: 105446,
          1526: 105518,
          1527: 105524,
          1528: 105550,
          1529: 105564,
          1530: 105570,
          1531: 105572,
          1532: 105576,
          1533: 105614,
          1534: 105628,
          1535: 105656,
          1536: 105666,
          1537: 105672,
          1538: 105680,
          1539: 105702,
          1540: 105722,
          1541: 105742,
          1542: 105756,
          1543: 105784,
          1544: 105840,
          1545: 105854,
          1546: 105858,
          1547: 105860,
          1548: 105864,
          1549: 105872,
          1550: 105888,
          1551: 105932,
          1552: 105970,
          1553: 105972,
          1554: 106006,
          1555: 106022,
          1556: 106028,
          1557: 106054,
          1558: 106060,
          1559: 106072,
          1560: 106100,
          1561: 106118,
          1562: 106124,
          1563: 106136,
          1564: 106160,
          1565: 106174,
          1566: 106190,
          1567: 106210,
          1568: 106212,
          1569: 106216,
          1570: 106250,
          1571: 106258,
          1572: 106260,
          1573: 106274,
          1574: 106276,
          1575: 106280,
          1576: 106306,
          1577: 106308,
          1578: 106312,
          1579: 106320,
          1580: 106334,
          1581: 106348,
          1582: 106394,
          1583: 106414,
          1584: 106418,
          1585: 106420,
          1586: 106566,
          1587: 106572,
          1588: 106610,
          1589: 106612,
          1590: 106630,
          1591: 106636,
          1592: 106648,
          1593: 106672,
          1594: 106686,
          1595: 106722,
          1596: 106724,
          1597: 106728,
          1598: 106742,
          1599: 106758,
          1600: 106764,
          1601: 106776,
          1602: 106800,
          1603: 106814,
          1604: 106848,
          1605: 106876,
          1606: 106894,
          1607: 106908,
          1608: 106936,
          1609: 106946,
          1610: 106948,
          1611: 106952,
          1612: 106960,
          1613: 106974,
          1614: 106982,
          1615: 106988,
          1616: 107032,
          1617: 107056,
          1618: 107070,
          1619: 107104,
          1620: 107132,
          1621: 107200,
          1622: 107256,
          1623: 107292,
          1624: 107320,
          1625: 107376,
          1626: 107390,
          1627: 107394,
          1628: 107396,
          1629: 107400,
          1630: 107408,
          1631: 107422,
          1632: 107424,
          1633: 107452,
          1634: 107462,
          1635: 107468,
          1636: 107480,
          1637: 107502,
          1638: 107506,
          1639: 107508,
          1640: 107544,
          1641: 107568,
          1642: 107582,
          1643: 107616,
          1644: 107644,
          1645: 107712,
          1646: 107768,
          1647: 108016,
          1648: 108060,
          1649: 108088,
          1650: 108144,
          1651: 108158,
          1652: 108256,
          1653: 108284,
          1654: 108290,
          1655: 108292,
          1656: 108296,
          1657: 108304,
          1658: 108318,
          1659: 108320,
          1660: 108348,
          1661: 108352,
          1662: 108408,
          1663: 108422,
          1664: 108428,
          1665: 108440,
          1666: 108464,
          1667: 108478,
          1668: 108494,
          1669: 108508,
          1670: 108514,
          1671: 108516,
          1672: 108520,
          1673: 108592,
          1674: 108640,
          1675: 108668,
          1676: 108736,
          1677: 108792,
          1678: 109040,
          1679: 109536,
          1680: 109680,
          1681: 109694,
          1682: 109792,
          1683: 109820,
          1684: 110016,
          1685: 110072,
          1686: 110084,
          1687: 110088,
          1688: 110096,
          1689: 110112,
          1690: 110140,
          1691: 110144,
          1692: 110200,
          1693: 110320,
          1694: 110342,
          1695: 110348,
          1696: 110360,
          1697: 110384,
          1698: 110398,
          1699: 110432,
          1700: 110460,
          1701: 110478,
          1702: 110492,
          1703: 110520,
          1704: 110532,
          1705: 110536,
          1706: 110544,
          1707: 110558,
          1708: 110658,
          1709: 110686,
          1710: 110714,
          1711: 110722,
          1712: 110724,
          1713: 110728,
          1714: 110736,
          1715: 110750,
          1716: 110752,
          1717: 110780,
          1718: 110796,
          1719: 110834,
          1720: 110836,
          1721: 110850,
          1722: 110852,
          1723: 110856,
          1724: 110864,
          1725: 110878,
          1726: 110880,
          1727: 110908,
          1728: 110912,
          1729: 110968,
          1730: 110982,
          1731: 111000,
          1732: 111054,
          1733: 111074,
          1734: 111076,
          1735: 111080,
          1736: 111108,
          1737: 111112,
          1738: 111120,
          1739: 111134,
          1740: 111136,
          1741: 111164,
          1742: 111168,
          1743: 111224,
          1744: 111344,
          1745: 111372,
          1746: 111422,
          1747: 111456,
          1748: 111516,
          1749: 111554,
          1750: 111556,
          1751: 111560,
          1752: 111568,
          1753: 111590,
          1754: 111632,
          1755: 111646,
          1756: 111648,
          1757: 111676,
          1758: 111680,
          1759: 111736,
          1760: 111856,
          1761: 112096,
          1762: 112152,
          1763: 112224,
          1764: 112252,
          1765: 112320,
          1766: 112440,
          1767: 112514,
          1768: 112516,
          1769: 112520,
          1770: 112528,
          1771: 112542,
          1772: 112544,
          1773: 112588,
          1774: 112686,
          1775: 112718,
          1776: 112732,
          1777: 112782,
          1778: 112796,
          1779: 112824,
          1780: 112834,
          1781: 112836,
          1782: 112840,
          1783: 112848,
          1784: 112870,
          1785: 112890,
          1786: 112910,
          1787: 112924,
          1788: 112952,
          1789: 113008,
          1790: 113022,
          1791: 113026,
          1792: 113028,
          1793: 113032,
          1794: 113040,
          1795: 113054,
          1796: 113056,
          1797: 113100,
          1798: 113138,
          1799: 113140,
          1800: 113166,
          1801: 113180,
          1802: 113208,
          1803: 113264,
          1804: 113278,
          1805: 113376,
          1806: 113404,
          1807: 113416,
          1808: 113424,
          1809: 113440,
          1810: 113468,
          1811: 113472,
          1812: 113560,
          1813: 113614,
          1814: 113634,
          1815: 113636,
          1816: 113640,
          1817: 113686,
          1818: 113702,
          1819: 113708,
          1820: 113734,
          1821: 113740,
          1822: 113752,
          1823: 113778,
          1824: 113780,
          1825: 113798,
          1826: 113804,
          1827: 113816,
          1828: 113840,
          1829: 113854,
          1830: 113870,
          1831: 113890,
          1832: 113892,
          1833: 113896,
          1834: 113926,
          1835: 113932,
          1836: 113944,
          1837: 113968,
          1838: 113982,
          1839: 114016,
          1840: 114044,
          1841: 114076,
          1842: 114114,
          1843: 114116,
          1844: 114120,
          1845: 114128,
          1846: 114150,
          1847: 114170,
          1848: 114194,
          1849: 114196,
          1850: 114210,
          1851: 114212,
          1852: 114216,
          1853: 114242,
          1854: 114244,
          1855: 114248,
          1856: 114256,
          1857: 114270,
          1858: 114278,
          1859: 114306,
          1860: 114308,
          1861: 114312,
          1862: 114320,
          1863: 114334,
          1864: 114336,
          1865: 114364,
          1866: 114380,
          1867: 114420,
          1868: 114458,
          1869: 114478,
          1870: 114482,
          1871: 114484,
          1872: 114510,
          1873: 114524,
          1874: 114530,
          1875: 114532,
          1876: 114536,
          1877: 114842,
          1878: 114866,
          1879: 114868,
          1880: 114970,
          1881: 114994,
          1882: 114996,
          1883: 115042,
          1884: 115044,
          1885: 115048,
          1886: 115062,
          1887: 115130,
          1888: 115226,
          1889: 115250,
          1890: 115252,
          1891: 115278,
          1892: 115292,
          1893: 115298,
          1894: 115300,
          1895: 115304,
          1896: 115318,
          1897: 115342,
          1898: 115394,
          1899: 115396,
          1900: 115400,
          1901: 115408,
          1902: 115422,
          1903: 115430,
          1904: 115436,
          1905: 115450,
          1906: 115478,
          1907: 115494,
          1908: 115514,
          1909: 115526,
          1910: 115532,
          1911: 115570,
          1912: 115572,
          1913: 115738,
          1914: 115758,
          1915: 115762,
          1916: 115764,
          1917: 115790,
          1918: 115804,
          1919: 115810,
          1920: 115812,
          1921: 115816,
          1922: 115830,
          1923: 115854,
          1924: 115868,
          1925: 115896,
          1926: 115906,
          1927: 115912,
          1928: 115920,
          1929: 115934,
          1930: 115942,
          1931: 115948,
          1932: 115962,
          1933: 115996,
          1934: 116024,
          1935: 116080,
          1936: 116094,
          1937: 116098,
          1938: 116100,
          1939: 116104,
          1940: 116112,
          1941: 116126,
          1942: 116128,
          1943: 116156,
          1944: 116166,
          1945: 116172,
          1946: 116184,
          1947: 116206,
          1948: 116210,
          1949: 116212,
          1950: 116246,
          1951: 116262,
          1952: 116268,
          1953: 116282,
          1954: 116294,
          1955: 116300,
          1956: 116312,
          1957: 116334,
          1958: 116338,
          1959: 116340,
          1960: 116358,
          1961: 116364,
          1962: 116376,
          1963: 116400,
          1964: 116414,
          1965: 116430,
          1966: 116444,
          1967: 116450,
          1968: 116452,
          1969: 116456,
          1970: 116498,
          1971: 116500,
          1972: 116514,
          1973: 116520,
          1974: 116534,
          1975: 116546,
          1976: 116548,
          1977: 116552,
          1978: 116560,
          1979: 116574,
          1980: 116582,
          1981: 116588,
          1982: 116602,
          1983: 116654,
          1984: 116694,
          1985: 116714,
          1986: 116762,
          1987: 116782,
          1988: 116786,
          1989: 116788,
          1990: 116814,
          1991: 116828,
          1992: 116834,
          1993: 116836,
          1994: 116840,
          1995: 116854,
          1996: 116878,
          1997: 116892,
          1998: 116920,
          1999: 116930,
          2000: 116936,
          2001: 116944,
          2002: 116958,
          2003: 116966,
          2004: 116972,
          2005: 116986,
          2006: 117006,
          2007: 117048,
          2008: 117104,
          2009: 117118,
          2010: 117122,
          2011: 117124,
          2012: 117136,
          2013: 117150,
          2014: 117152,
          2015: 117180,
          2016: 117190,
          2017: 117196,
          2018: 117208,
          2019: 117230,
          2020: 117234,
          2021: 117236,
          2022: 117304,
          2023: 117360,
          2024: 117374,
          2025: 117472,
          2026: 117500,
          2027: 117506,
          2028: 117508,
          2029: 117512,
          2030: 117520,
          2031: 117536,
          2032: 117564,
          2033: 117568,
          2034: 117624,
          2035: 117638,
          2036: 117644,
          2037: 117656,
          2038: 117680,
          2039: 117694,
          2040: 117710,
          2041: 117724,
          2042: 117730,
          2043: 117732,
          2044: 117736,
          2045: 117750,
          2046: 117782,
          2047: 117798,
          2048: 117804,
          2049: 117818,
          2050: 117830,
          2051: 117848,
          2052: 117874,
          2053: 117876,
          2054: 117894,
          2055: 117936,
          2056: 117950,
          2057: 117966,
          2058: 117986,
          2059: 117988,
          2060: 117992,
          2061: 118022,
          2062: 118028,
          2063: 118040,
          2064: 118064,
          2065: 118078,
          2066: 118112,
          2067: 118140,
          2068: 118172,
          2069: 118210,
          2070: 118212,
          2071: 118216,
          2072: 118224,
          2073: 118238,
          2074: 118246,
          2075: 118266,
          2076: 118306,
          2077: 118312,
          2078: 118338,
          2079: 118352,
          2080: 118366,
          2081: 118374,
          2082: 118394,
          2083: 118402,
          2084: 118404,
          2085: 118408,
          2086: 118416,
          2087: 118430,
          2088: 118432,
          2089: 118460,
          2090: 118476,
          2091: 118514,
          2092: 118516,
          2093: 118574,
          2094: 118578,
          2095: 118580,
          2096: 118606,
          2097: 118620,
          2098: 118626,
          2099: 118628,
          2100: 118632,
          2101: 118678,
          2102: 118694,
          2103: 118700,
          2104: 118730,
          2105: 118738,
          2106: 118740,
          2107: 118830,
          2108: 118834,
          2109: 118836,
          2110: 118862,
          2111: 118876,
          2112: 118882,
          2113: 118884,
          2114: 118888,
          2115: 118902,
          2116: 118926,
          2117: 118940,
          2118: 118968,
          2119: 118978,
          2120: 118980,
          2121: 118984,
          2122: 118992,
          2123: 119006,
          2124: 119014,
          2125: 119020,
          2126: 119034,
          2127: 119068,
          2128: 119096,
          2129: 119152,
          2130: 119166,
          2131: 119170,
          2132: 119172,
          2133: 119176,
          2134: 119184,
          2135: 119198,
          2136: 119200,
          2137: 119228,
          2138: 119238,
          2139: 119244,
          2140: 119256,
          2141: 119278,
          2142: 119282,
          2143: 119284,
          2144: 119324,
          2145: 119352,
          2146: 119408,
          2147: 119422,
          2148: 119520,
          2149: 119548,
          2150: 119554,
          2151: 119556,
          2152: 119560,
          2153: 119568,
          2154: 119582,
          2155: 119584,
          2156: 119612,
          2157: 119616,
          2158: 119672,
          2159: 119686,
          2160: 119692,
          2161: 119704,
          2162: 119728,
          2163: 119742,
          2164: 119758,
          2165: 119772,
          2166: 119778,
          2167: 119780,
          2168: 119784,
          2169: 119798,
          2170: 119920,
          2171: 119934,
          2172: 120032,
          2173: 120060,
          2174: 120256,
          2175: 120312,
          2176: 120324,
          2177: 120328,
          2178: 120336,
          2179: 120352,
          2180: 120384,
          2181: 120440,
          2182: 120560,
          2183: 120582,
          2184: 120588,
          2185: 120600,
          2186: 120624,
          2187: 120638,
          2188: 120672,
          2189: 120700,
          2190: 120718,
          2191: 120732,
          2192: 120760,
          2193: 120770,
          2194: 120772,
          2195: 120776,
          2196: 120784,
          2197: 120798,
          2198: 120806,
          2199: 120812,
          2200: 120870,
          2201: 120876,
          2202: 120890,
          2203: 120902,
          2204: 120908,
          2205: 120920,
          2206: 120946,
          2207: 120948,
          2208: 120966,
          2209: 120972,
          2210: 120984,
          2211: 121008,
          2212: 121022,
          2213: 121038,
          2214: 121058,
          2215: 121060,
          2216: 121064,
          2217: 121078,
          2218: 121100,
          2219: 121112,
          2220: 121136,
          2221: 121150,
          2222: 121184,
          2223: 121212,
          2224: 121244,
          2225: 121282,
          2226: 121284,
          2227: 121288,
          2228: 121296,
          2229: 121318,
          2230: 121338,
          2231: 121356,
          2232: 121368,
          2233: 121392,
          2234: 121406,
          2235: 121440,
          2236: 121468,
          2237: 121536,
          2238: 121592,
          2239: 121656,
          2240: 121730,
          2241: 121732,
          2242: 121736,
          2243: 121744,
          2244: 121758,
          2245: 121760,
          2246: 121804,
          2247: 121842,
          2248: 121844,
          2249: 121890,
          2250: 121922,
          2251: 121924,
          2252: 121928,
          2253: 121936,
          2254: 121950,
          2255: 121958,
          2256: 121978,
          2257: 121986,
          2258: 121988,
          2259: 121992,
          2260: 122000,
          2261: 122014,
          2262: 122016,
          2263: 122044,
          2264: 122060,
          2265: 122098,
          2266: 122100,
          2267: 122116,
          2268: 122120,
          2269: 122128,
          2270: 122142,
          2271: 122144,
          2272: 122172,
          2273: 122176,
          2274: 122232,
          2275: 122246,
          2276: 122264,
          2277: 122318,
          2278: 122338,
          2279: 122340,
          2280: 122344,
          2281: 122414,
          2282: 122418,
          2283: 122420,
          2284: 122446,
          2285: 122460,
          2286: 122466,
          2287: 122468,
          2288: 122472,
          2289: 122510,
          2290: 122524,
          2291: 122552,
          2292: 122562,
          2293: 122564,
          2294: 122568,
          2295: 122576,
          2296: 122598,
          2297: 122618,
          2298: 122646,
          2299: 122662,
          2300: 122668,
          2301: 122694,
          2302: 122700,
          2303: 122712,
          2304: 122738,
          2305: 122740,
          2306: 122762,
          2307: 122770,
          2308: 122772,
          2309: 122786,
          2310: 122788,
          2311: 122792,
          2312: 123018,
          2313: 123026,
          2314: 123028,
          2315: 123042,
          2316: 123044,
          2317: 123048,
          2318: 123062,
          2319: 123098,
          2320: 123146,
          2321: 123154,
          2322: 123156,
          2323: 123170,
          2324: 123172,
          2325: 123176,
          2326: 123190,
          2327: 123202,
          2328: 123204,
          2329: 123208,
          2330: 123216,
          2331: 123238,
          2332: 123244,
          2333: 123258,
          2334: 123290,
          2335: 123314,
          2336: 123316,
          2337: 123402,
          2338: 123410,
          2339: 123412,
          2340: 123426,
          2341: 123428,
          2342: 123432,
          2343: 123446,
          2344: 123458,
          2345: 123464,
          2346: 123472,
          2347: 123486,
          2348: 123494,
          2349: 123500,
          2350: 123514,
          2351: 123522,
          2352: 123524,
          2353: 123528,
          2354: 123536,
          2355: 123552,
          2356: 123580,
          2357: 123590,
          2358: 123596,
          2359: 123608,
          2360: 123630,
          2361: 123634,
          2362: 123636,
          2363: 123674,
          2364: 123698,
          2365: 123700,
          2366: 123740,
          2367: 123746,
          2368: 123748,
          2369: 123752,
          2370: 123834,
          2371: 123914,
          2372: 123922,
          2373: 123924,
          2374: 123938,
          2375: 123944,
          2376: 123958,
          2377: 123970,
          2378: 123976,
          2379: 123984,
          2380: 123998,
          2381: 124006,
          2382: 124012,
          2383: 124026,
          2384: 124034,
          2385: 124036,
          2386: 124048,
          2387: 124062,
          2388: 124064,
          2389: 124092,
          2390: 124102,
          2391: 124108,
          2392: 124120,
          2393: 124142,
          2394: 124146,
          2395: 124148,
          2396: 124162,
          2397: 124164,
          2398: 124168,
          2399: 124176,
          2400: 124190,
          2401: 124192,
          2402: 124220,
          2403: 124224,
          2404: 124280,
          2405: 124294,
          2406: 124300,
          2407: 124312,
          2408: 124336,
          2409: 124350,
          2410: 124366,
          2411: 124380,
          2412: 124386,
          2413: 124388,
          2414: 124392,
          2415: 124406,
          2416: 124442,
          2417: 124462,
          2418: 124466,
          2419: 124468,
          2420: 124494,
          2421: 124508,
          2422: 124514,
          2423: 124520,
          2424: 124558,
          2425: 124572,
          2426: 124600,
          2427: 124610,
          2428: 124612,
          2429: 124616,
          2430: 124624,
          2431: 124646,
          2432: 124666,
          2433: 124694,
          2434: 124710,
          2435: 124716,
          2436: 124730,
          2437: 124742,
          2438: 124748,
          2439: 124760,
          2440: 124786,
          2441: 124788,
          2442: 124818,
          2443: 124820,
          2444: 124834,
          2445: 124836,
          2446: 124840,
          2447: 124854,
          2448: 124946,
          2449: 124948,
          2450: 124962,
          2451: 124964,
          2452: 124968,
          2453: 124982,
          2454: 124994,
          2455: 124996,
          2456: 125000,
          2457: 125008,
          2458: 125022,
          2459: 125030,
          2460: 125036,
          2461: 125050,
          2462: 125058,
          2463: 125060,
          2464: 125064,
          2465: 125072,
          2466: 125086,
          2467: 125088,
          2468: 125116,
          2469: 125126,
          2470: 125132,
          2471: 125144,
          2472: 125166,
          2473: 125170,
          2474: 125172,
          2475: 125186,
          2476: 125188,
          2477: 125192,
          2478: 125200,
          2479: 125216,
          2480: 125244,
          2481: 125248,
          2482: 125304,
          2483: 125318,
          2484: 125324,
          2485: 125336,
          2486: 125360,
          2487: 125374,
          2488: 125390,
          2489: 125404,
          2490: 125410,
          2491: 125412,
          2492: 125416,
          2493: 125430,
          2494: 125444,
          2495: 125448,
          2496: 125456,
          2497: 125472,
          2498: 125504,
          2499: 125560,
          2500: 125680,
          2501: 125702,
          2502: 125708,
          2503: 125720,
          2504: 125744,
          2505: 125758,
          2506: 125792,
          2507: 125820,
          2508: 125838,
          2509: 125852,
          2510: 125880,
          2511: 125890,
          2512: 125892,
          2513: 125896,
          2514: 125904,
          2515: 125918,
          2516: 125926,
          2517: 125932,
          2518: 125978,
          2519: 125998,
          2520: 126002,
          2521: 126004,
          2522: 126030,
          2523: 126044,
          2524: 126050,
          2525: 126052,
          2526: 126056,
          2527: 126094,
          2528: 126108,
          2529: 126136,
          2530: 126146,
          2531: 126148,
          2532: 126152,
          2533: 126160,
          2534: 126182,
          2535: 126202,
          2536: 126222,
          2537: 126236,
          2538: 126264,
          2539: 126320,
          2540: 126334,
          2541: 126338,
          2542: 126340,
          2543: 126344,
          2544: 126352,
          2545: 126366,
          2546: 126368,
          2547: 126412,
          2548: 126450,
          2549: 126452,
          2550: 126486,
          2551: 126502,
          2552: 126508,
          2553: 126522,
          2554: 126534,
          2555: 126540,
          2556: 126552,
          2557: 126574,
          2558: 126578,
          2559: 126580,
          2560: 126598,
          2561: 126604,
          2562: 126616,
          2563: 126640,
          2564: 126654,
          2565: 126670,
          2566: 126684,
          2567: 126690,
          2568: 126692,
          2569: 126696,
          2570: 126738,
          2571: 126754,
          2572: 126756,
          2573: 126760,
          2574: 126774,
          2575: 126786,
          2576: 126788,
          2577: 126792,
          2578: 126800,
          2579: 126814,
          2580: 126822,
          2581: 126828,
          2582: 126842,
          2583: 126894,
          2584: 126898,
          2585: 126900,
          2586: 126934,
          2587: 127126,
          2588: 127142,
          2589: 127148,
          2590: 127162,
          2591: 127178,
          2592: 127186,
          2593: 127188,
          2594: 127254,
          2595: 127270,
          2596: 127276,
          2597: 127290,
          2598: 127302,
          2599: 127308,
          2600: 127320,
          2601: 127342,
          2602: 127346,
          2603: 127348,
          2604: 127370,
          2605: 127378,
          2606: 127380,
          2607: 127394,
          2608: 127396,
          2609: 127400,
          2610: 127450,
          2611: 127510,
          2612: 127526,
          2613: 127532,
          2614: 127546,
          2615: 127558,
          2616: 127576,
          2617: 127598,
          2618: 127602,
          2619: 127604,
          2620: 127622,
          2621: 127628,
          2622: 127640,
          2623: 127664,
          2624: 127678,
          2625: 127694,
          2626: 127708,
          2627: 127714,
          2628: 127716,
          2629: 127720,
          2630: 127734,
          2631: 127754,
          2632: 127762,
          2633: 127764,
          2634: 127778,
          2635: 127784,
          2636: 127810,
          2637: 127812,
          2638: 127816,
          2639: 127824,
          2640: 127838,
          2641: 127846,
          2642: 127866,
          2643: 127898,
          2644: 127918,
          2645: 127922,
          2646: 127924,
          2647: 128022,
          2648: 128038,
          2649: 128044,
          2650: 128058,
          2651: 128070,
          2652: 128076,
          2653: 128088,
          2654: 128110,
          2655: 128114,
          2656: 128116,
          2657: 128134,
          2658: 128140,
          2659: 128152,
          2660: 128176,
          2661: 128190,
          2662: 128206,
          2663: 128220,
          2664: 128226,
          2665: 128228,
          2666: 128232,
          2667: 128246,
          2668: 128262,
          2669: 128268,
          2670: 128280,
          2671: 128304,
          2672: 128318,
          2673: 128352,
          2674: 128380,
          2675: 128398,
          2676: 128412,
          2677: 128440,
          2678: 128450,
          2679: 128452,
          2680: 128456,
          2681: 128464,
          2682: 128478,
          2683: 128486,
          2684: 128492,
          2685: 128506,
          2686: 128522,
          2687: 128530,
          2688: 128532,
          2689: 128546,
          2690: 128548,
          2691: 128552,
          2692: 128566,
          2693: 128578,
          2694: 128580,
          2695: 128584,
          2696: 128592,
          2697: 128606,
          2698: 128614,
          2699: 128634,
          2700: 128642,
          2701: 128644,
          2702: 128648,
          2703: 128656,
          2704: 128670,
          2705: 128672,
          2706: 128700,
          2707: 128716,
          2708: 128754,
          2709: 128756,
          2710: 128794,
          2711: 128814,
          2712: 128818,
          2713: 128820,
          2714: 128846,
          2715: 128860,
          2716: 128866,
          2717: 128868,
          2718: 128872,
          2719: 128886,
          2720: 128918,
          2721: 128934,
          2722: 128940,
          2723: 128954,
          2724: 128978,
          2725: 128980,
          2726: 129178,
          2727: 129198,
          2728: 129202,
          2729: 129204,
          2730: 129238,
          2731: 129258,
          2732: 129306,
          2733: 129326,
          2734: 129330,
          2735: 129332,
          2736: 129358,
          2737: 129372,
          2738: 129378,
          2739: 129380,
          2740: 129384,
          2741: 129398,
          2742: 129430,
          2743: 129446,
          2744: 129452,
          2745: 129466,
          2746: 129482,
          2747: 129490,
          2748: 129492,
          2749: 129562,
          2750: 129582,
          2751: 129586,
          2752: 129588,
          2753: 129614,
          2754: 129628,
          2755: 129634,
          2756: 129636,
          2757: 129640,
          2758: 129654,
          2759: 129678,
          2760: 129692,
          2761: 129720,
          2762: 129730,
          2763: 129732,
          2764: 129736,
          2765: 129744,
          2766: 129758,
          2767: 129766,
          2768: 129772,
          2769: 129814,
          2770: 129830,
          2771: 129836,
          2772: 129850,
          2773: 129862,
          2774: 129868,
          2775: 129880,
          2776: 129902,
          2777: 129906,
          2778: 129908,
          2779: 129930,
          2780: 129938,
          2781: 129940,
          2782: 129954,
          2783: 129956,
          2784: 129960,
          2785: 129974,
          2786: 130010,
        }[s];
      }
    }
    return o;
  };
  t.bSymbolTableReady = false;
  t.RATIOS_TABLE = new Array(
    {
      0: 66142,
      1: 66170,
      2: 66206,
      3: 66236,
      4: 66290,
      5: 66292,
      6: 66350,
      7: 66382,
      8: 66396,
      9: 66454,
      10: 66470,
      11: 66476,
      12: 66594,
      13: 66600,
      14: 66614,
      15: 66626,
      16: 66628,
      17: 66632,
      18: 66640,
      19: 66654,
      20: 66662,
      21: 66668,
      22: 66682,
      23: 66690,
      24: 66718,
      25: 66720,
      26: 66748,
      27: 66758,
      28: 66776,
      29: 66798,
      30: 66802,
      31: 66804,
      32: 66820,
      33: 66824,
      34: 66832,
      35: 66846,
      36: 66848,
      37: 66876,
      38: 66880,
      39: 66936,
      40: 66950,
      41: 66956,
      42: 66968,
      43: 66992,
      44: 67006,
      45: 67022,
      46: 67036,
      47: 67042,
      48: 67044,
      49: 67048,
      50: 67062,
      51: 67118,
      52: 67150,
      53: 67164,
      54: 67214,
      55: 67228,
      56: 67256,
      57: 67294,
      58: 67322,
      59: 67350,
      60: 67366,
      61: 67372,
      62: 67398,
      63: 67404,
      64: 67416,
      65: 67438,
      66: 67474,
      67: 67476,
      68: 67490,
      69: 67492,
      70: 67496,
      71: 67510,
      72: 67618,
      73: 67624,
      74: 67650,
      75: 67656,
      76: 67664,
      77: 67678,
      78: 67686,
      79: 67692,
      80: 67706,
      81: 67714,
      82: 67716,
      83: 67728,
      84: 67742,
      85: 67744,
      86: 67772,
      87: 67782,
      88: 67788,
      89: 67800,
      90: 67822,
      91: 67826,
      92: 67828,
      93: 67842,
      94: 67848,
      95: 67870,
      96: 67872,
      97: 67900,
      98: 67904,
      99: 67960,
      100: 67974,
      101: 67992,
      102: 68016,
      103: 68030,
      104: 68046,
      105: 68060,
      106: 68066,
      107: 68068,
      108: 68072,
      109: 68086,
      110: 68104,
      111: 68112,
      112: 68126,
      113: 68128,
      114: 68156,
      115: 68160,
      116: 68216,
      117: 68336,
      118: 68358,
      119: 68364,
      120: 68376,
      121: 68400,
      122: 68414,
      123: 68448,
      124: 68476,
      125: 68494,
      126: 68508,
      127: 68536,
      128: 68546,
      129: 68548,
      130: 68552,
      131: 68560,
      132: 68574,
      133: 68582,
      134: 68588,
      135: 68654,
      136: 68686,
      137: 68700,
      138: 68706,
      139: 68708,
      140: 68712,
      141: 68726,
      142: 68750,
      143: 68764,
      144: 68792,
      145: 68802,
      146: 68804,
      147: 68808,
      148: 68816,
      149: 68830,
      150: 68838,
      151: 68844,
      152: 68858,
      153: 68878,
      154: 68892,
      155: 68920,
      156: 68976,
      157: 68990,
      158: 68994,
      159: 68996,
      160: 69000,
      161: 69008,
      162: 69022,
      163: 69024,
      164: 69052,
      165: 69062,
      166: 69068,
      167: 69080,
      168: 69102,
      169: 69106,
      170: 69108,
      171: 69142,
      172: 69158,
      173: 69164,
      174: 69190,
      175: 69208,
      176: 69230,
      177: 69254,
      178: 69260,
      179: 69272,
      180: 69296,
      181: 69310,
      182: 69326,
      183: 69340,
      184: 69386,
      185: 69394,
      186: 69396,
      187: 69410,
      188: 69416,
      189: 69430,
      190: 69442,
      191: 69444,
      192: 69448,
      193: 69456,
      194: 69470,
      195: 69478,
      196: 69484,
      197: 69554,
      198: 69556,
      199: 69666,
      200: 69672,
      201: 69698,
      202: 69704,
      203: 69712,
      204: 69726,
      205: 69754,
      206: 69762,
      207: 69764,
      208: 69776,
      209: 69790,
      210: 69792,
      211: 69820,
      212: 69830,
      213: 69836,
      214: 69848,
      215: 69870,
      216: 69874,
      217: 69876,
      218: 69890,
      219: 69918,
      220: 69920,
      221: 69948,
      222: 69952,
      223: 70008,
      224: 70022,
      225: 70040,
      226: 70064,
      227: 70078,
      228: 70094,
      229: 70108,
      230: 70114,
      231: 70116,
      232: 70120,
      233: 70134,
      234: 70152,
      235: 70174,
      236: 70176,
      237: 70264,
      238: 70384,
      239: 70412,
      240: 70448,
      241: 70462,
      242: 70496,
      243: 70524,
      244: 70542,
      245: 70556,
      246: 70584,
      247: 70594,
      248: 70600,
      249: 70608,
      250: 70622,
      251: 70630,
      252: 70636,
      253: 70664,
      254: 70672,
      255: 70686,
      256: 70688,
      257: 70716,
      258: 70720,
      259: 70776,
      260: 70896,
      261: 71136,
      262: 71180,
      263: 71192,
      264: 71216,
      265: 71230,
      266: 71264,
      267: 71292,
      268: 71360,
      269: 71416,
      270: 71452,
      271: 71480,
      272: 71536,
      273: 71550,
      274: 71554,
      275: 71556,
      276: 71560,
      277: 71568,
      278: 71582,
      279: 71584,
      280: 71612,
      281: 71622,
      282: 71628,
      283: 71640,
      284: 71662,
      285: 71726,
      286: 71732,
      287: 71758,
      288: 71772,
      289: 71778,
      290: 71780,
      291: 71784,
      292: 71798,
      293: 71822,
      294: 71836,
      295: 71864,
      296: 71874,
      297: 71880,
      298: 71888,
      299: 71902,
      300: 71910,
      301: 71916,
      302: 71930,
      303: 71950,
      304: 71964,
      305: 71992,
      306: 72048,
      307: 72062,
      308: 72066,
      309: 72068,
      310: 72080,
      311: 72094,
      312: 72096,
      313: 72124,
      314: 72134,
      315: 72140,
      316: 72152,
      317: 72174,
      318: 72178,
      319: 72180,
      320: 72206,
      321: 72220,
      322: 72248,
      323: 72304,
      324: 72318,
      325: 72416,
      326: 72444,
      327: 72456,
      328: 72464,
      329: 72478,
      330: 72480,
      331: 72508,
      332: 72512,
      333: 72568,
      334: 72588,
      335: 72600,
      336: 72624,
      337: 72638,
      338: 72654,
      339: 72668,
      340: 72674,
      341: 72676,
      342: 72680,
      343: 72694,
      344: 72726,
      345: 72742,
      346: 72748,
      347: 72774,
      348: 72780,
      349: 72792,
      350: 72814,
      351: 72838,
      352: 72856,
      353: 72880,
      354: 72894,
      355: 72910,
      356: 72924,
      357: 72930,
      358: 72932,
      359: 72936,
      360: 72950,
      361: 72966,
      362: 72972,
      363: 72984,
      364: 73008,
      365: 73022,
      366: 73056,
      367: 73084,
      368: 73102,
      369: 73116,
      370: 73144,
      371: 73156,
      372: 73160,
      373: 73168,
      374: 73182,
      375: 73190,
      376: 73196,
      377: 73210,
      378: 73226,
      379: 73234,
      380: 73236,
      381: 73250,
      382: 73252,
      383: 73256,
      384: 73270,
      385: 73282,
      386: 73284,
      387: 73296,
      388: 73310,
      389: 73318,
      390: 73324,
      391: 73346,
      392: 73348,
      393: 73352,
      394: 73360,
      395: 73374,
      396: 73376,
      397: 73404,
      398: 73414,
      399: 73420,
      400: 73432,
      401: 73454,
      402: 73498,
      403: 73518,
      404: 73522,
      405: 73524,
      406: 73550,
      407: 73564,
      408: 73570,
      409: 73572,
      410: 73576,
      411: 73590,
      412: 73800,
      413: 73822,
      414: 73858,
      415: 73860,
      416: 73872,
      417: 73886,
      418: 73888,
      419: 73916,
      420: 73944,
      421: 73970,
      422: 73972,
      423: 73992,
      424: 74014,
      425: 74016,
      426: 74044,
      427: 74048,
      428: 74104,
      429: 74118,
      430: 74136,
      431: 74160,
      432: 74174,
      433: 74210,
      434: 74212,
      435: 74216,
      436: 74230,
      437: 74244,
      438: 74256,
      439: 74270,
      440: 74272,
      441: 74360,
      442: 74480,
      443: 74502,
      444: 74508,
      445: 74544,
      446: 74558,
      447: 74592,
      448: 74620,
      449: 74638,
      450: 74652,
      451: 74680,
      452: 74690,
      453: 74696,
      454: 74704,
      455: 74726,
      456: 74732,
      457: 74782,
      458: 74784,
      459: 74812,
      460: 74992,
      461: 75232,
      462: 75288,
      463: 75326,
      464: 75360,
      465: 75388,
      466: 75456,
      467: 75512,
      468: 75576,
      469: 75632,
      470: 75646,
      471: 75650,
      472: 75652,
      473: 75664,
      474: 75678,
      475: 75680,
      476: 75708,
      477: 75718,
      478: 75724,
      479: 75736,
      480: 75758,
      481: 75808,
      482: 75836,
      483: 75840,
      484: 75896,
      485: 76016,
      486: 76256,
      487: 76736,
      488: 76824,
      489: 76848,
      490: 76862,
      491: 76896,
      492: 76924,
      493: 76992,
      494: 77048,
      495: 77296,
      496: 77340,
      497: 77368,
      498: 77424,
      499: 77438,
      500: 77536,
      501: 77564,
      502: 77572,
      503: 77576,
      504: 77584,
      505: 77600,
      506: 77628,
      507: 77632,
      508: 77688,
      509: 77702,
      510: 77708,
      511: 77720,
      512: 77744,
      513: 77758,
      514: 77774,
      515: 77788,
      516: 77870,
      517: 77902,
      518: 77916,
      519: 77922,
      520: 77928,
      521: 77966,
      522: 77980,
      523: 78008,
      524: 78018,
      525: 78024,
      526: 78032,
      527: 78046,
      528: 78060,
      529: 78074,
      530: 78094,
      531: 78136,
      532: 78192,
      533: 78206,
      534: 78210,
      535: 78212,
      536: 78224,
      537: 78238,
      538: 78240,
      539: 78268,
      540: 78278,
      541: 78284,
      542: 78296,
      543: 78322,
      544: 78324,
      545: 78350,
      546: 78364,
      547: 78448,
      548: 78462,
      549: 78560,
      550: 78588,
      551: 78600,
      552: 78622,
      553: 78624,
      554: 78652,
      555: 78656,
      556: 78712,
      557: 78726,
      558: 78744,
      559: 78768,
      560: 78782,
      561: 78798,
      562: 78812,
      563: 78818,
      564: 78820,
      565: 78824,
      566: 78838,
      567: 78862,
      568: 78876,
      569: 78904,
      570: 78960,
      571: 78974,
      572: 79072,
      573: 79100,
      574: 79296,
      575: 79352,
      576: 79368,
      577: 79376,
      578: 79390,
      579: 79392,
      580: 79420,
      581: 79424,
      582: 79480,
      583: 79600,
      584: 79628,
      585: 79640,
      586: 79664,
      587: 79678,
      588: 79712,
      589: 79740,
      590: 79772,
      591: 79800,
      592: 79810,
      593: 79812,
      594: 79816,
      595: 79824,
      596: 79838,
      597: 79846,
      598: 79852,
      599: 79894,
      600: 79910,
      601: 79916,
      602: 79942,
      603: 79948,
      604: 79960,
      605: 79982,
      606: 79988,
      607: 80006,
      608: 80024,
      609: 80048,
      610: 80062,
      611: 80078,
      612: 80092,
      613: 80098,
      614: 80100,
      615: 80104,
      616: 80134,
      617: 80140,
      618: 80176,
      619: 80190,
      620: 80224,
      621: 80252,
      622: 80270,
      623: 80284,
      624: 80312,
      625: 80328,
      626: 80336,
      627: 80350,
      628: 80358,
      629: 80364,
      630: 80378,
      631: 80390,
      632: 80396,
      633: 80408,
      634: 80432,
      635: 80446,
      636: 80480,
      637: 80508,
      638: 80576,
      639: 80632,
      640: 80654,
      641: 80668,
      642: 80696,
      643: 80752,
      644: 80766,
      645: 80776,
      646: 80784,
      647: 80798,
      648: 80800,
      649: 80828,
      650: 80844,
      651: 80856,
      652: 80878,
      653: 80882,
      654: 80884,
      655: 80914,
      656: 80916,
      657: 80930,
      658: 80932,
      659: 80936,
      660: 80950,
      661: 80962,
      662: 80968,
      663: 80976,
      664: 80990,
      665: 80998,
      666: 81004,
      667: 81026,
      668: 81028,
      669: 81040,
      670: 81054,
      671: 81056,
      672: 81084,
      673: 81094,
      674: 81100,
      675: 81112,
      676: 81134,
      677: 81154,
      678: 81156,
      679: 81160,
      680: 81168,
      681: 81182,
      682: 81184,
      683: 81212,
      684: 81216,
      685: 81272,
      686: 81286,
      687: 81292,
      688: 81304,
      689: 81328,
      690: 81342,
      691: 81358,
      692: 81372,
      693: 81380,
      694: 81384,
      695: 81398,
      696: 81434,
      697: 81454,
      698: 81458,
      699: 81460,
      700: 81486,
      701: 81500,
      702: 81506,
      703: 81508,
      704: 81512,
      705: 81526,
      706: 81550,
      707: 81564,
      708: 81592,
      709: 81602,
      710: 81604,
      711: 81608,
      712: 81616,
      713: 81630,
      714: 81638,
      715: 81644,
      716: 81702,
      717: 81708,
      718: 81722,
      719: 81734,
      720: 81740,
      721: 81752,
      722: 81774,
      723: 81778,
      724: 81780,
      725: 82050,
      726: 82078,
      727: 82080,
      728: 82108,
      729: 82180,
      730: 82184,
      731: 82192,
      732: 82206,
      733: 82208,
      734: 82236,
      735: 82240,
      736: 82296,
      737: 82316,
      738: 82328,
      739: 82352,
      740: 82366,
      741: 82402,
      742: 82404,
      743: 82408,
      744: 82440,
      745: 82448,
      746: 82462,
      747: 82464,
      748: 82492,
      749: 82496,
      750: 82552,
      751: 82672,
      752: 82694,
      753: 82700,
      754: 82712,
      755: 82736,
      756: 82750,
      757: 82784,
      758: 82812,
      759: 82830,
      760: 82882,
      761: 82884,
      762: 82888,
      763: 82896,
      764: 82918,
      765: 82924,
      766: 82952,
      767: 82960,
      768: 82974,
      769: 82976,
      770: 83004,
      771: 83008,
      772: 83064,
      773: 83184,
      774: 83424,
      775: 83468,
      776: 83480,
      777: 83504,
      778: 83518,
      779: 83552,
      780: 83580,
      781: 83648,
      782: 83704,
      783: 83740,
      784: 83768,
      785: 83824,
      786: 83838,
      787: 83842,
      788: 83844,
      789: 83848,
      790: 83856,
      791: 83872,
      792: 83900,
      793: 83910,
      794: 83916,
      795: 83928,
      796: 83950,
      797: 83984,
      798: 84000,
      799: 84028,
      800: 84032,
      801: 84088,
      802: 84208,
      803: 84448,
      804: 84928,
      805: 85040,
      806: 85054,
      807: 85088,
      808: 85116,
      809: 85184,
      810: 85240,
      811: 85488,
      812: 85560,
      813: 85616,
      814: 85630,
      815: 85728,
      816: 85756,
      817: 85764,
      818: 85768,
      819: 85776,
      820: 85790,
      821: 85792,
      822: 85820,
      823: 85824,
      824: 85880,
      825: 85894,
      826: 85900,
      827: 85912,
      828: 85936,
      829: 85966,
      830: 85980,
      831: 86048,
      832: 86080,
      833: 86136,
      834: 86256,
      835: 86496,
      836: 86976,
      837: 88160,
      838: 88188,
      839: 88256,
      840: 88312,
      841: 88560,
      842: 89056,
      843: 89200,
      844: 89214,
      845: 89312,
      846: 89340,
      847: 89536,
      848: 89592,
      849: 89608,
      850: 89616,
      851: 89632,
      852: 89664,
      853: 89720,
      854: 89840,
      855: 89868,
      856: 89880,
      857: 89904,
      858: 89952,
      859: 89980,
      860: 89998,
      861: 90012,
      862: 90040,
      863: 90190,
      864: 90204,
      865: 90254,
      866: 90268,
      867: 90296,
      868: 90306,
      869: 90308,
      870: 90312,
      871: 90334,
      872: 90382,
      873: 90396,
      874: 90424,
      875: 90480,
      876: 90494,
      877: 90500,
      878: 90504,
      879: 90512,
      880: 90526,
      881: 90528,
      882: 90556,
      883: 90566,
      884: 90572,
      885: 90584,
      886: 90610,
      887: 90612,
      888: 90638,
      889: 90652,
      890: 90680,
      891: 90736,
      892: 90750,
      893: 90848,
      894: 90876,
      895: 90884,
      896: 90888,
      897: 90896,
      898: 90910,
      899: 90912,
      900: 90940,
      901: 90944,
      902: 91000,
      903: 91014,
      904: 91020,
      905: 91032,
      906: 91056,
      907: 91070,
      908: 91086,
      909: 91100,
      910: 91106,
      911: 91108,
      912: 91112,
      913: 91126,
      914: 91150,
      915: 91164,
      916: 91192,
      917: 91248,
      918: 91262,
      919: 91360,
      920: 91388,
      921: 91584,
      922: 91640,
      923: 91664,
      924: 91678,
      925: 91680,
      926: 91708,
      927: 91712,
      928: 91768,
      929: 91888,
      930: 91928,
      931: 91952,
      932: 91966,
      933: 92000,
      934: 92028,
      935: 92046,
      936: 92060,
      937: 92088,
      938: 92098,
      939: 92100,
      940: 92104,
      941: 92112,
      942: 92126,
      943: 92134,
      944: 92140,
      945: 92188,
      946: 92216,
      947: 92272,
      948: 92384,
      949: 92412,
      950: 92608,
      951: 92664,
      952: 93168,
      953: 93200,
      954: 93214,
      955: 93216,
      956: 93244,
      957: 93248,
      958: 93304,
      959: 93424,
      960: 93664,
      961: 93720,
      962: 93744,
      963: 93758,
      964: 93792,
      965: 93820,
      966: 93888,
      967: 93944,
      968: 93980,
      969: 94008,
      970: 94064,
      971: 94078,
      972: 94084,
      973: 94088,
      974: 94096,
      975: 94110,
      976: 94112,
      977: 94140,
      978: 94150,
      979: 94156,
      980: 94168,
      981: 94246,
      982: 94252,
      983: 94278,
      984: 94284,
      985: 94296,
      986: 94318,
      987: 94342,
      988: 94348,
      989: 94360,
      990: 94384,
      991: 94398,
      992: 94414,
      993: 94428,
      994: 94440,
      995: 94470,
      996: 94476,
      997: 94488,
      998: 94512,
      999: 94526,
      1000: 94560,
      1001: 94588,
      1002: 94606,
      1003: 94620,
      1004: 94648,
      1005: 94658,
      1006: 94660,
      1007: 94664,
      1008: 94672,
      1009: 94686,
      1010: 94694,
      1011: 94700,
      1012: 94714,
      1013: 94726,
      1014: 94732,
      1015: 94744,
      1016: 94768,
      1017: 94782,
      1018: 94816,
      1019: 94844,
      1020: 94912,
      1021: 94968,
      1022: 94990,
      1023: 95004,
      1024: 95032,
      1025: 95088,
      1026: 95102,
      1027: 95112,
      1028: 95120,
      1029: 95134,
      1030: 95136,
      1031: 95164,
      1032: 95180,
      1033: 95192,
      1034: 95214,
      1035: 95218,
      1036: 95220,
      1037: 95244,
      1038: 95256,
      1039: 95280,
      1040: 95294,
      1041: 95328,
      1042: 95356,
      1043: 95424,
      1044: 95480,
      1045: 95728,
      1046: 95758,
      1047: 95772,
      1048: 95800,
      1049: 95856,
      1050: 95870,
      1051: 95968,
      1052: 95996,
      1053: 96008,
      1054: 96016,
      1055: 96030,
      1056: 96032,
      1057: 96060,
      1058: 96064,
      1059: 96120,
      1060: 96152,
      1061: 96176,
      1062: 96190,
      1063: 96220,
      1064: 96226,
      1065: 96228,
      1066: 96232,
      1067: 96290,
      1068: 96292,
      1069: 96296,
      1070: 96310,
      1071: 96322,
      1072: 96324,
      1073: 96328,
      1074: 96336,
      1075: 96350,
      1076: 96358,
      1077: 96364,
      1078: 96386,
      1079: 96388,
      1080: 96392,
      1081: 96400,
      1082: 96414,
      1083: 96416,
      1084: 96444,
      1085: 96454,
      1086: 96460,
      1087: 96472,
      1088: 96494,
      1089: 96498,
      1090: 96500,
      1091: 96514,
      1092: 96516,
      1093: 96520,
      1094: 96528,
      1095: 96542,
      1096: 96544,
      1097: 96572,
      1098: 96576,
      1099: 96632,
      1100: 96646,
      1101: 96652,
      1102: 96664,
      1103: 96688,
      1104: 96702,
      1105: 96718,
      1106: 96732,
      1107: 96738,
      1108: 96740,
      1109: 96744,
      1110: 96758,
      1111: 96772,
      1112: 96776,
      1113: 96784,
      1114: 96798,
      1115: 96800,
      1116: 96828,
      1117: 96832,
      1118: 96888,
      1119: 97008,
      1120: 97030,
      1121: 97036,
      1122: 97048,
      1123: 97072,
      1124: 97086,
      1125: 97120,
      1126: 97148,
      1127: 97166,
      1128: 97180,
      1129: 97208,
      1130: 97220,
      1131: 97224,
      1132: 97232,
      1133: 97246,
      1134: 97254,
      1135: 97260,
      1136: 97326,
      1137: 97330,
      1138: 97332,
      1139: 97358,
      1140: 97372,
      1141: 97378,
      1142: 97380,
      1143: 97384,
      1144: 97398,
      1145: 97422,
      1146: 97436,
      1147: 97464,
      1148: 97474,
      1149: 97476,
      1150: 97480,
      1151: 97488,
      1152: 97502,
      1153: 97510,
      1154: 97516,
      1155: 97550,
      1156: 97564,
      1157: 97592,
      1158: 97648,
      1159: 97666,
      1160: 97668,
      1161: 97672,
      1162: 97680,
      1163: 97694,
      1164: 97696,
      1165: 97724,
      1166: 97734,
      1167: 97740,
      1168: 97752,
      1169: 97774,
      1170: 97830,
      1171: 97836,
      1172: 97850,
      1173: 97862,
      1174: 97868,
      1175: 97880,
      1176: 97902,
      1177: 97906,
      1178: 97908,
      1179: 97926,
      1180: 97932,
      1181: 97944,
      1182: 97968,
      1183: 97998,
      1184: 98012,
      1185: 98018,
      1186: 98020,
      1187: 98024,
      1188: 98038,
      1189: 98618,
      1190: 98674,
      1191: 98676,
      1192: 98838,
      1193: 98854,
      1194: 98874,
      1195: 98892,
      1196: 98904,
      1197: 98926,
      1198: 98930,
      1199: 98932,
      1200: 98968,
      1201: 99006,
      1202: 99042,
      1203: 99044,
      1204: 99048,
      1205: 99062,
      1206: 99166,
      1207: 99194,
      1208: 99246,
      1209: 99286,
      1210: 99350,
      1211: 99366,
      1212: 99372,
      1213: 99386,
      1214: 99398,
      1215: 99416,
      1216: 99438,
      1217: 99442,
      1218: 99444,
      1219: 99462,
      1220: 99504,
      1221: 99518,
      1222: 99534,
      1223: 99548,
      1224: 99554,
      1225: 99556,
      1226: 99560,
      1227: 99574,
      1228: 99590,
      1229: 99596,
      1230: 99608,
      1231: 99632,
      1232: 99646,
      1233: 99680,
      1234: 99708,
      1235: 99726,
      1236: 99740,
      1237: 99768,
      1238: 99778,
      1239: 99780,
      1240: 99784,
      1241: 99792,
      1242: 99806,
      1243: 99814,
      1244: 99820,
      1245: 99834,
      1246: 99858,
      1247: 99860,
      1248: 99874,
      1249: 99880,
      1250: 99894,
      1251: 99906,
      1252: 99920,
      1253: 99934,
      1254: 99962,
      1255: 99970,
      1256: 99972,
      1257: 99976,
      1258: 99984,
      1259: 99998,
      1260: 100000,
      1261: 100028,
      1262: 100038,
      1263: 100044,
      1264: 100056,
      1265: 100078,
      1266: 100082,
      1267: 100084,
      1268: 100142,
      1269: 100174,
      1270: 100188,
      1271: 100246,
      1272: 100262,
      1273: 100268,
      1274: 100306,
      1275: 100308,
      1276: 100390,
      1277: 100396,
      1278: 100410,
      1279: 100422,
      1280: 100428,
      1281: 100440,
      1282: 100462,
      1283: 100466,
      1284: 100468,
      1285: 100486,
      1286: 100504,
      1287: 100528,
      1288: 100542,
      1289: 100558,
      1290: 100572,
      1291: 100578,
      1292: 100580,
      1293: 100584,
      1294: 100598,
      1295: 100620,
      1296: 100656,
      1297: 100670,
      1298: 100704,
      1299: 100732,
      1300: 100750,
      1301: 100792,
      1302: 100802,
      1303: 100808,
      1304: 100816,
      1305: 100830,
      1306: 100838,
      1307: 100844,
      1308: 100858,
      1309: 100888,
      1310: 100912,
      1311: 100926,
      1312: 100960,
      1313: 100988,
      1314: 101056,
      1315: 101112,
      1316: 101148,
      1317: 101176,
      1318: 101232,
      1319: 101246,
      1320: 101250,
      1321: 101252,
      1322: 101256,
      1323: 101264,
      1324: 101278,
      1325: 101280,
      1326: 101308,
      1327: 101318,
      1328: 101324,
      1329: 101336,
      1330: 101358,
      1331: 101362,
      1332: 101364,
      1333: 101410,
      1334: 101412,
      1335: 101416,
      1336: 101430,
      1337: 101442,
      1338: 101448,
      1339: 101456,
      1340: 101470,
      1341: 101478,
      1342: 101498,
      1343: 101506,
      1344: 101508,
      1345: 101520,
      1346: 101534,
      1347: 101536,
      1348: 101564,
      1349: 101580,
      1350: 101618,
      1351: 101620,
      1352: 101636,
      1353: 101640,
      1354: 101648,
      1355: 101662,
      1356: 101664,
      1357: 101692,
      1358: 101696,
      1359: 101752,
      1360: 101766,
      1361: 101784,
      1362: 101838,
      1363: 101858,
      1364: 101860,
      1365: 101864,
      1366: 101934,
      1367: 101938,
      1368: 101940,
      1369: 101966,
      1370: 101980,
      1371: 101986,
      1372: 101988,
      1373: 101992,
      1374: 102030,
      1375: 102044,
      1376: 102072,
      1377: 102082,
      1378: 102084,
      1379: 102088,
      1380: 102096,
      1381: 102138,
      1382: 102166,
      1383: 102182,
      1384: 102188,
      1385: 102214,
      1386: 102220,
      1387: 102232,
      1388: 102254,
      1389: 102282,
      1390: 102290,
      1391: 102292,
      1392: 102306,
      1393: 102308,
      1394: 102312,
      1395: 102326,
      1396: 102444,
      1397: 102458,
      1398: 102470,
      1399: 102476,
      1400: 102488,
      1401: 102514,
      1402: 102516,
      1403: 102534,
      1404: 102552,
      1405: 102576,
      1406: 102590,
      1407: 102606,
      1408: 102620,
      1409: 102626,
      1410: 102632,
      1411: 102646,
      1412: 102662,
      1413: 102668,
      1414: 102704,
      1415: 102718,
      1416: 102752,
      1417: 102780,
      1418: 102798,
      1419: 102812,
      1420: 102840,
      1421: 102850,
      1422: 102856,
      1423: 102864,
      1424: 102878,
      1425: 102886,
      1426: 102892,
      1427: 102906,
      1428: 102936,
      1429: 102974,
      1430: 103008,
      1431: 103036,
      1432: 103104,
      1433: 103160,
      1434: 103224,
      1435: 103280,
      1436: 103294,
      1437: 103298,
      1438: 103300,
      1439: 103312,
      1440: 103326,
      1441: 103328,
      1442: 103356,
      1443: 103366,
      1444: 103372,
      1445: 103384,
      1446: 103406,
      1447: 103410,
      1448: 103412,
      1449: 103472,
      1450: 103486,
      1451: 103520,
      1452: 103548,
      1453: 103616,
      1454: 103672,
      1455: 103920,
      1456: 103992,
      1457: 104048,
      1458: 104062,
      1459: 104160,
      1460: 104188,
      1461: 104194,
      1462: 104196,
      1463: 104200,
      1464: 104208,
      1465: 104224,
      1466: 104252,
      1467: 104256,
      1468: 104312,
      1469: 104326,
      1470: 104332,
      1471: 104344,
      1472: 104368,
      1473: 104382,
      1474: 104398,
      1475: 104412,
      1476: 104418,
      1477: 104420,
      1478: 104424,
      1479: 104482,
      1480: 104484,
      1481: 104514,
      1482: 104520,
      1483: 104528,
      1484: 104542,
      1485: 104550,
      1486: 104570,
      1487: 104578,
      1488: 104580,
      1489: 104592,
      1490: 104606,
      1491: 104608,
      1492: 104636,
      1493: 104652,
      1494: 104690,
      1495: 104692,
      1496: 104706,
      1497: 104712,
      1498: 104734,
      1499: 104736,
      1500: 104764,
      1501: 104768,
      1502: 104824,
      1503: 104838,
      1504: 104856,
      1505: 104910,
      1506: 104930,
      1507: 104932,
      1508: 104936,
      1509: 104968,
      1510: 104976,
      1511: 104990,
      1512: 104992,
      1513: 105020,
      1514: 105024,
      1515: 105080,
      1516: 105200,
      1517: 105240,
      1518: 105278,
      1519: 105312,
      1520: 105372,
      1521: 105410,
      1522: 105412,
      1523: 105416,
      1524: 105424,
      1525: 105446,
      1526: 105518,
      1527: 105524,
      1528: 105550,
      1529: 105564,
      1530: 105570,
      1531: 105572,
      1532: 105576,
      1533: 105614,
      1534: 105628,
      1535: 105656,
      1536: 105666,
      1537: 105672,
      1538: 105680,
      1539: 105702,
      1540: 105722,
      1541: 105742,
      1542: 105756,
      1543: 105784,
      1544: 105840,
      1545: 105854,
      1546: 105858,
      1547: 105860,
      1548: 105864,
      1549: 105872,
      1550: 105888,
      1551: 105932,
      1552: 105970,
      1553: 105972,
      1554: 106006,
      1555: 106022,
      1556: 106028,
      1557: 106054,
      1558: 106060,
      1559: 106072,
      1560: 106100,
      1561: 106118,
      1562: 106124,
      1563: 106136,
      1564: 106160,
      1565: 106174,
      1566: 106190,
      1567: 106210,
      1568: 106212,
      1569: 106216,
      1570: 106250,
      1571: 106258,
      1572: 106260,
      1573: 106274,
      1574: 106276,
      1575: 106280,
      1576: 106306,
      1577: 106308,
      1578: 106312,
      1579: 106320,
      1580: 106334,
      1581: 106348,
      1582: 106394,
      1583: 106414,
      1584: 106418,
      1585: 106420,
      1586: 106566,
      1587: 106572,
      1588: 106610,
      1589: 106612,
      1590: 106630,
      1591: 106636,
      1592: 106648,
      1593: 106672,
      1594: 106686,
      1595: 106722,
      1596: 106724,
      1597: 106728,
      1598: 106742,
      1599: 106758,
      1600: 106764,
      1601: 106776,
      1602: 106800,
      1603: 106814,
      1604: 106848,
      1605: 106876,
      1606: 106894,
      1607: 106908,
      1608: 106936,
      1609: 106946,
      1610: 106948,
      1611: 106952,
      1612: 106960,
      1613: 106974,
      1614: 106982,
      1615: 106988,
      1616: 107032,
      1617: 107056,
      1618: 107070,
      1619: 107104,
      1620: 107132,
      1621: 107200,
      1622: 107256,
      1623: 107292,
      1624: 107320,
      1625: 107376,
      1626: 107390,
      1627: 107394,
      1628: 107396,
      1629: 107400,
      1630: 107408,
      1631: 107422,
      1632: 107424,
      1633: 107452,
      1634: 107462,
      1635: 107468,
      1636: 107480,
      1637: 107502,
      1638: 107506,
      1639: 107508,
      1640: 107544,
      1641: 107568,
      1642: 107582,
      1643: 107616,
      1644: 107644,
      1645: 107712,
      1646: 107768,
      1647: 108016,
      1648: 108060,
      1649: 108088,
      1650: 108144,
      1651: 108158,
      1652: 108256,
      1653: 108284,
      1654: 108290,
      1655: 108292,
      1656: 108296,
      1657: 108304,
      1658: 108318,
      1659: 108320,
      1660: 108348,
      1661: 108352,
      1662: 108408,
      1663: 108422,
      1664: 108428,
      1665: 108440,
      1666: 108464,
      1667: 108478,
      1668: 108494,
      1669: 108508,
      1670: 108514,
      1671: 108516,
      1672: 108520,
      1673: 108592,
      1674: 108640,
      1675: 108668,
      1676: 108736,
      1677: 108792,
      1678: 109040,
      1679: 109536,
      1680: 109680,
      1681: 109694,
      1682: 109792,
      1683: 109820,
      1684: 110016,
      1685: 110072,
      1686: 110084,
      1687: 110088,
      1688: 110096,
      1689: 110112,
      1690: 110140,
      1691: 110144,
      1692: 110200,
      1693: 110320,
      1694: 110342,
      1695: 110348,
      1696: 110360,
      1697: 110384,
      1698: 110398,
      1699: 110432,
      1700: 110460,
      1701: 110478,
      1702: 110492,
      1703: 110520,
      1704: 110532,
      1705: 110536,
      1706: 110544,
      1707: 110558,
      1708: 110658,
      1709: 110686,
      1710: 110714,
      1711: 110722,
      1712: 110724,
      1713: 110728,
      1714: 110736,
      1715: 110750,
      1716: 110752,
      1717: 110780,
      1718: 110796,
      1719: 110834,
      1720: 110836,
      1721: 110850,
      1722: 110852,
      1723: 110856,
      1724: 110864,
      1725: 110878,
      1726: 110880,
      1727: 110908,
      1728: 110912,
      1729: 110968,
      1730: 110982,
      1731: 111000,
      1732: 111054,
      1733: 111074,
      1734: 111076,
      1735: 111080,
      1736: 111108,
      1737: 111112,
      1738: 111120,
      1739: 111134,
      1740: 111136,
      1741: 111164,
      1742: 111168,
      1743: 111224,
      1744: 111344,
      1745: 111372,
      1746: 111422,
      1747: 111456,
      1748: 111516,
      1749: 111554,
      1750: 111556,
      1751: 111560,
      1752: 111568,
      1753: 111590,
      1754: 111632,
      1755: 111646,
      1756: 111648,
      1757: 111676,
      1758: 111680,
      1759: 111736,
      1760: 111856,
      1761: 112096,
      1762: 112152,
      1763: 112224,
      1764: 112252,
      1765: 112320,
      1766: 112440,
      1767: 112514,
      1768: 112516,
      1769: 112520,
      1770: 112528,
      1771: 112542,
      1772: 112544,
      1773: 112588,
      1774: 112686,
      1775: 112718,
      1776: 112732,
      1777: 112782,
      1778: 112796,
      1779: 112824,
      1780: 112834,
      1781: 112836,
      1782: 112840,
      1783: 112848,
      1784: 112870,
      1785: 112890,
      1786: 112910,
      1787: 112924,
      1788: 112952,
      1789: 113008,
      1790: 113022,
      1791: 113026,
      1792: 113028,
      1793: 113032,
      1794: 113040,
      1795: 113054,
      1796: 113056,
      1797: 113100,
      1798: 113138,
      1799: 113140,
      1800: 113166,
      1801: 113180,
      1802: 113208,
      1803: 113264,
      1804: 113278,
      1805: 113376,
      1806: 113404,
      1807: 113416,
      1808: 113424,
      1809: 113440,
      1810: 113468,
      1811: 113472,
      1812: 113560,
      1813: 113614,
      1814: 113634,
      1815: 113636,
      1816: 113640,
      1817: 113686,
      1818: 113702,
      1819: 113708,
      1820: 113734,
      1821: 113740,
      1822: 113752,
      1823: 113778,
      1824: 113780,
      1825: 113798,
      1826: 113804,
      1827: 113816,
      1828: 113840,
      1829: 113854,
      1830: 113870,
      1831: 113890,
      1832: 113892,
      1833: 113896,
      1834: 113926,
      1835: 113932,
      1836: 113944,
      1837: 113968,
      1838: 113982,
      1839: 114016,
      1840: 114044,
      1841: 114076,
      1842: 114114,
      1843: 114116,
      1844: 114120,
      1845: 114128,
      1846: 114150,
      1847: 114170,
      1848: 114194,
      1849: 114196,
      1850: 114210,
      1851: 114212,
      1852: 114216,
      1853: 114242,
      1854: 114244,
      1855: 114248,
      1856: 114256,
      1857: 114270,
      1858: 114278,
      1859: 114306,
      1860: 114308,
      1861: 114312,
      1862: 114320,
      1863: 114334,
      1864: 114336,
      1865: 114364,
      1866: 114380,
      1867: 114420,
      1868: 114458,
      1869: 114478,
      1870: 114482,
      1871: 114484,
      1872: 114510,
      1873: 114524,
      1874: 114530,
      1875: 114532,
      1876: 114536,
      1877: 114842,
      1878: 114866,
      1879: 114868,
      1880: 114970,
      1881: 114994,
      1882: 114996,
      1883: 115042,
      1884: 115044,
      1885: 115048,
      1886: 115062,
      1887: 115130,
      1888: 115226,
      1889: 115250,
      1890: 115252,
      1891: 115278,
      1892: 115292,
      1893: 115298,
      1894: 115300,
      1895: 115304,
      1896: 115318,
      1897: 115342,
      1898: 115394,
      1899: 115396,
      1900: 115400,
      1901: 115408,
      1902: 115422,
      1903: 115430,
      1904: 115436,
      1905: 115450,
      1906: 115478,
      1907: 115494,
      1908: 115514,
      1909: 115526,
      1910: 115532,
      1911: 115570,
      1912: 115572,
      1913: 115738,
      1914: 115758,
      1915: 115762,
      1916: 115764,
      1917: 115790,
      1918: 115804,
      1919: 115810,
      1920: 115812,
      1921: 115816,
      1922: 115830,
      1923: 115854,
      1924: 115868,
      1925: 115896,
      1926: 115906,
      1927: 115912,
      1928: 115920,
      1929: 115934,
      1930: 115942,
      1931: 115948,
      1932: 115962,
      1933: 115996,
      1934: 116024,
      1935: 116080,
      1936: 116094,
      1937: 116098,
      1938: 116100,
      1939: 116104,
      1940: 116112,
      1941: 116126,
      1942: 116128,
      1943: 116156,
      1944: 116166,
      1945: 116172,
      1946: 116184,
      1947: 116206,
      1948: 116210,
      1949: 116212,
      1950: 116246,
      1951: 116262,
      1952: 116268,
      1953: 116282,
      1954: 116294,
      1955: 116300,
      1956: 116312,
      1957: 116334,
      1958: 116338,
      1959: 116340,
      1960: 116358,
      1961: 116364,
      1962: 116376,
      1963: 116400,
      1964: 116414,
      1965: 116430,
      1966: 116444,
      1967: 116450,
      1968: 116452,
      1969: 116456,
      1970: 116498,
      1971: 116500,
      1972: 116514,
      1973: 116520,
      1974: 116534,
      1975: 116546,
      1976: 116548,
      1977: 116552,
      1978: 116560,
      1979: 116574,
      1980: 116582,
      1981: 116588,
      1982: 116602,
      1983: 116654,
      1984: 116694,
      1985: 116714,
      1986: 116762,
      1987: 116782,
      1988: 116786,
      1989: 116788,
      1990: 116814,
      1991: 116828,
      1992: 116834,
      1993: 116836,
      1994: 116840,
      1995: 116854,
      1996: 116878,
      1997: 116892,
      1998: 116920,
      1999: 116930,
      2000: 116936,
      2001: 116944,
      2002: 116958,
      2003: 116966,
      2004: 116972,
      2005: 116986,
      2006: 117006,
      2007: 117048,
      2008: 117104,
      2009: 117118,
      2010: 117122,
      2011: 117124,
      2012: 117136,
      2013: 117150,
      2014: 117152,
      2015: 117180,
      2016: 117190,
      2017: 117196,
      2018: 117208,
      2019: 117230,
      2020: 117234,
      2021: 117236,
      2022: 117304,
      2023: 117360,
      2024: 117374,
      2025: 117472,
      2026: 117500,
      2027: 117506,
      2028: 117508,
      2029: 117512,
      2030: 117520,
      2031: 117536,
      2032: 117564,
      2033: 117568,
      2034: 117624,
      2035: 117638,
      2036: 117644,
      2037: 117656,
      2038: 117680,
      2039: 117694,
      2040: 117710,
      2041: 117724,
      2042: 117730,
      2043: 117732,
      2044: 117736,
      2045: 117750,
      2046: 117782,
      2047: 117798,
      2048: 117804,
      2049: 117818,
      2050: 117830,
      2051: 117848,
      2052: 117874,
      2053: 117876,
      2054: 117894,
      2055: 117936,
      2056: 117950,
      2057: 117966,
      2058: 117986,
      2059: 117988,
      2060: 117992,
      2061: 118022,
      2062: 118028,
      2063: 118040,
      2064: 118064,
      2065: 118078,
      2066: 118112,
      2067: 118140,
      2068: 118172,
      2069: 118210,
      2070: 118212,
      2071: 118216,
      2072: 118224,
      2073: 118238,
      2074: 118246,
      2075: 118266,
      2076: 118306,
      2077: 118312,
      2078: 118338,
      2079: 118352,
      2080: 118366,
      2081: 118374,
      2082: 118394,
      2083: 118402,
      2084: 118404,
      2085: 118408,
      2086: 118416,
      2087: 118430,
      2088: 118432,
      2089: 118460,
      2090: 118476,
      2091: 118514,
      2092: 118516,
      2093: 118574,
      2094: 118578,
      2095: 118580,
      2096: 118606,
      2097: 118620,
      2098: 118626,
      2099: 118628,
      2100: 118632,
      2101: 118678,
      2102: 118694,
      2103: 118700,
      2104: 118730,
      2105: 118738,
      2106: 118740,
      2107: 118830,
      2108: 118834,
      2109: 118836,
      2110: 118862,
      2111: 118876,
      2112: 118882,
      2113: 118884,
      2114: 118888,
      2115: 118902,
      2116: 118926,
      2117: 118940,
      2118: 118968,
      2119: 118978,
      2120: 118980,
      2121: 118984,
      2122: 118992,
      2123: 119006,
      2124: 119014,
      2125: 119020,
      2126: 119034,
      2127: 119068,
      2128: 119096,
      2129: 119152,
      2130: 119166,
      2131: 119170,
      2132: 119172,
      2133: 119176,
      2134: 119184,
      2135: 119198,
      2136: 119200,
      2137: 119228,
      2138: 119238,
      2139: 119244,
      2140: 119256,
      2141: 119278,
      2142: 119282,
      2143: 119284,
      2144: 119324,
      2145: 119352,
      2146: 119408,
      2147: 119422,
      2148: 119520,
      2149: 119548,
      2150: 119554,
      2151: 119556,
      2152: 119560,
      2153: 119568,
      2154: 119582,
      2155: 119584,
      2156: 119612,
      2157: 119616,
      2158: 119672,
      2159: 119686,
      2160: 119692,
      2161: 119704,
      2162: 119728,
      2163: 119742,
      2164: 119758,
      2165: 119772,
      2166: 119778,
      2167: 119780,
      2168: 119784,
      2169: 119798,
      2170: 119920,
      2171: 119934,
      2172: 120032,
      2173: 120060,
      2174: 120256,
      2175: 120312,
      2176: 120324,
      2177: 120328,
      2178: 120336,
      2179: 120352,
      2180: 120384,
      2181: 120440,
      2182: 120560,
      2183: 120582,
      2184: 120588,
      2185: 120600,
      2186: 120624,
      2187: 120638,
      2188: 120672,
      2189: 120700,
      2190: 120718,
      2191: 120732,
      2192: 120760,
      2193: 120770,
      2194: 120772,
      2195: 120776,
      2196: 120784,
      2197: 120798,
      2198: 120806,
      2199: 120812,
      2200: 120870,
      2201: 120876,
      2202: 120890,
      2203: 120902,
      2204: 120908,
      2205: 120920,
      2206: 120946,
      2207: 120948,
      2208: 120966,
      2209: 120972,
      2210: 120984,
      2211: 121008,
      2212: 121022,
      2213: 121038,
      2214: 121058,
      2215: 121060,
      2216: 121064,
      2217: 121078,
      2218: 121100,
      2219: 121112,
      2220: 121136,
      2221: 121150,
      2222: 121184,
      2223: 121212,
      2224: 121244,
      2225: 121282,
      2226: 121284,
      2227: 121288,
      2228: 121296,
      2229: 121318,
      2230: 121338,
      2231: 121356,
      2232: 121368,
      2233: 121392,
      2234: 121406,
      2235: 121440,
      2236: 121468,
      2237: 121536,
      2238: 121592,
      2239: 121656,
      2240: 121730,
      2241: 121732,
      2242: 121736,
      2243: 121744,
      2244: 121758,
      2245: 121760,
      2246: 121804,
      2247: 121842,
      2248: 121844,
      2249: 121890,
      2250: 121922,
      2251: 121924,
      2252: 121928,
      2253: 121936,
      2254: 121950,
      2255: 121958,
      2256: 121978,
      2257: 121986,
      2258: 121988,
      2259: 121992,
      2260: 122000,
      2261: 122014,
      2262: 122016,
      2263: 122044,
      2264: 122060,
      2265: 122098,
      2266: 122100,
      2267: 122116,
      2268: 122120,
      2269: 122128,
      2270: 122142,
      2271: 122144,
      2272: 122172,
      2273: 122176,
      2274: 122232,
      2275: 122246,
      2276: 122264,
      2277: 122318,
      2278: 122338,
      2279: 122340,
      2280: 122344,
      2281: 122414,
      2282: 122418,
      2283: 122420,
      2284: 122446,
      2285: 122460,
      2286: 122466,
      2287: 122468,
      2288: 122472,
      2289: 122510,
      2290: 122524,
      2291: 122552,
      2292: 122562,
      2293: 122564,
      2294: 122568,
      2295: 122576,
      2296: 122598,
      2297: 122618,
      2298: 122646,
      2299: 122662,
      2300: 122668,
      2301: 122694,
      2302: 122700,
      2303: 122712,
      2304: 122738,
      2305: 122740,
      2306: 122762,
      2307: 122770,
      2308: 122772,
      2309: 122786,
      2310: 122788,
      2311: 122792,
      2312: 123018,
      2313: 123026,
      2314: 123028,
      2315: 123042,
      2316: 123044,
      2317: 123048,
      2318: 123062,
      2319: 123098,
      2320: 123146,
      2321: 123154,
      2322: 123156,
      2323: 123170,
      2324: 123172,
      2325: 123176,
      2326: 123190,
      2327: 123202,
      2328: 123204,
      2329: 123208,
      2330: 123216,
      2331: 123238,
      2332: 123244,
      2333: 123258,
      2334: 123290,
      2335: 123314,
      2336: 123316,
      2337: 123402,
      2338: 123410,
      2339: 123412,
      2340: 123426,
      2341: 123428,
      2342: 123432,
      2343: 123446,
      2344: 123458,
      2345: 123464,
      2346: 123472,
      2347: 123486,
      2348: 123494,
      2349: 123500,
      2350: 123514,
      2351: 123522,
      2352: 123524,
      2353: 123528,
      2354: 123536,
      2355: 123552,
      2356: 123580,
      2357: 123590,
      2358: 123596,
      2359: 123608,
      2360: 123630,
      2361: 123634,
      2362: 123636,
      2363: 123674,
      2364: 123698,
      2365: 123700,
      2366: 123740,
      2367: 123746,
      2368: 123748,
      2369: 123752,
      2370: 123834,
      2371: 123914,
      2372: 123922,
      2373: 123924,
      2374: 123938,
      2375: 123944,
      2376: 123958,
      2377: 123970,
      2378: 123976,
      2379: 123984,
      2380: 123998,
      2381: 124006,
      2382: 124012,
      2383: 124026,
      2384: 124034,
      2385: 124036,
      2386: 124048,
      2387: 124062,
      2388: 124064,
      2389: 124092,
      2390: 124102,
      2391: 124108,
      2392: 124120,
      2393: 124142,
      2394: 124146,
      2395: 124148,
      2396: 124162,
      2397: 124164,
      2398: 124168,
      2399: 124176,
      2400: 124190,
      2401: 124192,
      2402: 124220,
      2403: 124224,
      2404: 124280,
      2405: 124294,
      2406: 124300,
      2407: 124312,
      2408: 124336,
      2409: 124350,
      2410: 124366,
      2411: 124380,
      2412: 124386,
      2413: 124388,
      2414: 124392,
      2415: 124406,
      2416: 124442,
      2417: 124462,
      2418: 124466,
      2419: 124468,
      2420: 124494,
      2421: 124508,
      2422: 124514,
      2423: 124520,
      2424: 124558,
      2425: 124572,
      2426: 124600,
      2427: 124610,
      2428: 124612,
      2429: 124616,
      2430: 124624,
      2431: 124646,
      2432: 124666,
      2433: 124694,
      2434: 124710,
      2435: 124716,
      2436: 124730,
      2437: 124742,
      2438: 124748,
      2439: 124760,
      2440: 124786,
      2441: 124788,
      2442: 124818,
      2443: 124820,
      2444: 124834,
      2445: 124836,
      2446: 124840,
      2447: 124854,
      2448: 124946,
      2449: 124948,
      2450: 124962,
      2451: 124964,
      2452: 124968,
      2453: 124982,
      2454: 124994,
      2455: 124996,
      2456: 125000,
      2457: 125008,
      2458: 125022,
      2459: 125030,
      2460: 125036,
      2461: 125050,
      2462: 125058,
      2463: 125060,
      2464: 125064,
      2465: 125072,
      2466: 125086,
      2467: 125088,
      2468: 125116,
      2469: 125126,
      2470: 125132,
      2471: 125144,
      2472: 125166,
      2473: 125170,
      2474: 125172,
      2475: 125186,
      2476: 125188,
      2477: 125192,
      2478: 125200,
      2479: 125216,
      2480: 125244,
      2481: 125248,
      2482: 125304,
      2483: 125318,
      2484: 125324,
      2485: 125336,
      2486: 125360,
      2487: 125374,
      2488: 125390,
      2489: 125404,
      2490: 125410,
      2491: 125412,
      2492: 125416,
      2493: 125430,
      2494: 125444,
      2495: 125448,
      2496: 125456,
      2497: 125472,
      2498: 125504,
      2499: 125560,
      2500: 125680,
      2501: 125702,
      2502: 125708,
      2503: 125720,
      2504: 125744,
      2505: 125758,
      2506: 125792,
      2507: 125820,
      2508: 125838,
      2509: 125852,
      2510: 125880,
      2511: 125890,
      2512: 125892,
      2513: 125896,
      2514: 125904,
      2515: 125918,
      2516: 125926,
      2517: 125932,
      2518: 125978,
      2519: 125998,
      2520: 126002,
      2521: 126004,
      2522: 126030,
      2523: 126044,
      2524: 126050,
      2525: 126052,
      2526: 126056,
      2527: 126094,
      2528: 126108,
      2529: 126136,
      2530: 126146,
      2531: 126148,
      2532: 126152,
      2533: 126160,
      2534: 126182,
      2535: 126202,
      2536: 126222,
      2537: 126236,
      2538: 126264,
      2539: 126320,
      2540: 126334,
      2541: 126338,
      2542: 126340,
      2543: 126344,
      2544: 126352,
      2545: 126366,
      2546: 126368,
      2547: 126412,
      2548: 126450,
      2549: 126452,
      2550: 126486,
      2551: 126502,
      2552: 126508,
      2553: 126522,
      2554: 126534,
      2555: 126540,
      2556: 126552,
      2557: 126574,
      2558: 126578,
      2559: 126580,
      2560: 126598,
      2561: 126604,
      2562: 126616,
      2563: 126640,
      2564: 126654,
      2565: 126670,
      2566: 126684,
      2567: 126690,
      2568: 126692,
      2569: 126696,
      2570: 126738,
      2571: 126754,
      2572: 126756,
      2573: 126760,
      2574: 126774,
      2575: 126786,
      2576: 126788,
      2577: 126792,
      2578: 126800,
      2579: 126814,
      2580: 126822,
      2581: 126828,
      2582: 126842,
      2583: 126894,
      2584: 126898,
      2585: 126900,
      2586: 126934,
      2587: 127126,
      2588: 127142,
      2589: 127148,
      2590: 127162,
      2591: 127178,
      2592: 127186,
      2593: 127188,
      2594: 127254,
      2595: 127270,
      2596: 127276,
      2597: 127290,
      2598: 127302,
      2599: 127308,
      2600: 127320,
      2601: 127342,
      2602: 127346,
      2603: 127348,
      2604: 127370,
      2605: 127378,
      2606: 127380,
      2607: 127394,
      2608: 127396,
      2609: 127400,
      2610: 127450,
      2611: 127510,
      2612: 127526,
      2613: 127532,
      2614: 127546,
      2615: 127558,
      2616: 127576,
      2617: 127598,
      2618: 127602,
      2619: 127604,
      2620: 127622,
      2621: 127628,
      2622: 127640,
      2623: 127664,
      2624: 127678,
      2625: 127694,
      2626: 127708,
      2627: 127714,
      2628: 127716,
      2629: 127720,
      2630: 127734,
      2631: 127754,
      2632: 127762,
      2633: 127764,
      2634: 127778,
      2635: 127784,
      2636: 127810,
      2637: 127812,
      2638: 127816,
      2639: 127824,
      2640: 127838,
      2641: 127846,
      2642: 127866,
      2643: 127898,
      2644: 127918,
      2645: 127922,
      2646: 127924,
      2647: 128022,
      2648: 128038,
      2649: 128044,
      2650: 128058,
      2651: 128070,
      2652: 128076,
      2653: 128088,
      2654: 128110,
      2655: 128114,
      2656: 128116,
      2657: 128134,
      2658: 128140,
      2659: 128152,
      2660: 128176,
      2661: 128190,
      2662: 128206,
      2663: 128220,
      2664: 128226,
      2665: 128228,
      2666: 128232,
      2667: 128246,
      2668: 128262,
      2669: 128268,
      2670: 128280,
      2671: 128304,
      2672: 128318,
      2673: 128352,
      2674: 128380,
      2675: 128398,
      2676: 128412,
      2677: 128440,
      2678: 128450,
      2679: 128452,
      2680: 128456,
      2681: 128464,
      2682: 128478,
      2683: 128486,
      2684: 128492,
      2685: 128506,
      2686: 128522,
      2687: 128530,
      2688: 128532,
      2689: 128546,
      2690: 128548,
      2691: 128552,
      2692: 128566,
      2693: 128578,
      2694: 128580,
      2695: 128584,
      2696: 128592,
      2697: 128606,
      2698: 128614,
      2699: 128634,
      2700: 128642,
      2701: 128644,
      2702: 128648,
      2703: 128656,
      2704: 128670,
      2705: 128672,
      2706: 128700,
      2707: 128716,
      2708: 128754,
      2709: 128756,
      2710: 128794,
      2711: 128814,
      2712: 128818,
      2713: 128820,
      2714: 128846,
      2715: 128860,
      2716: 128866,
      2717: 128868,
      2718: 128872,
      2719: 128886,
      2720: 128918,
      2721: 128934,
      2722: 128940,
      2723: 128954,
      2724: 128978,
      2725: 128980,
      2726: 129178,
      2727: 129198,
      2728: 129202,
      2729: 129204,
      2730: 129238,
      2731: 129258,
      2732: 129306,
      2733: 129326,
      2734: 129330,
      2735: 129332,
      2736: 129358,
      2737: 129372,
      2738: 129378,
      2739: 129380,
      2740: 129384,
      2741: 129398,
      2742: 129430,
      2743: 129446,
      2744: 129452,
      2745: 129466,
      2746: 129482,
      2747: 129490,
      2748: 129492,
      2749: 129562,
      2750: 129582,
      2751: 129586,
      2752: 129588,
      2753: 129614,
      2754: 129628,
      2755: 129634,
      2756: 129636,
      2757: 129640,
      2758: 129654,
      2759: 129678,
      2760: 129692,
      2761: 129720,
      2762: 129730,
      2763: 129732,
      2764: 129736,
      2765: 129744,
      2766: 129758,
      2767: 129766,
      2768: 129772,
      2769: 129814,
      2770: 129830,
      2771: 129836,
      2772: 129850,
      2773: 129862,
      2774: 129868,
      2775: 129880,
      2776: 129902,
      2777: 129906,
      2778: 129908,
      2779: 129930,
      2780: 129938,
      2781: 129940,
      2782: 129954,
      2783: 129956,
      2784: 129960,
      2785: 129974,
      2786: 130010,
    }.length,
  ).map(function (e) {
    return new Array(8);
  });
  return t;
})();
var Hh = (function () {
  function t() {
    this.segmentCount = -1;
    this.fileSize = -1;
    this.timestamp = -1;
    this.checksum = -1;
  }
  t.prototype.getSegmentIndex = function () {
    return this.segmentIndex;
  };
  t.prototype.setSegmentIndex = function (e) {
    this.segmentIndex = e;
  };
  t.prototype.getFileId = function () {
    return this.fileId;
  };
  t.prototype.setFileId = function (e) {
    this.fileId = e;
  };
  t.prototype.getOptionalData = function () {
    return this.optionalData;
  };
  t.prototype.setOptionalData = function (e) {
    this.optionalData = e;
  };
  t.prototype.isLastSegment = function () {
    return this.lastSegment;
  };
  t.prototype.setLastSegment = function (e) {
    this.lastSegment = e;
  };
  t.prototype.getSegmentCount = function () {
    return this.segmentCount;
  };
  t.prototype.setSegmentCount = function (e) {
    this.segmentCount = e;
  };
  t.prototype.getSender = function () {
    return this.sender || null;
  };
  t.prototype.setSender = function (e) {
    this.sender = e;
  };
  t.prototype.getAddressee = function () {
    return this.addressee || null;
  };
  t.prototype.setAddressee = function (e) {
    this.addressee = e;
  };
  t.prototype.getFileName = function () {
    return this.fileName;
  };
  t.prototype.setFileName = function (e) {
    this.fileName = e;
  };
  t.prototype.getFileSize = function () {
    return this.fileSize;
  };
  t.prototype.setFileSize = function (e) {
    this.fileSize = e;
  };
  t.prototype.getChecksum = function () {
    return this.checksum;
  };
  t.prototype.setChecksum = function (e) {
    this.checksum = e;
  };
  t.prototype.getTimestamp = function () {
    return this.timestamp;
  };
  t.prototype.setTimestamp = function (e) {
    this.timestamp = e;
  };
  return t;
})();
var za = (function () {
  function t() {}
  t.parseLong = function (e, r) {
    if (r === void 0) {
      r = void 0;
    }
    return parseInt(e, r);
  };
  return t;
})();
var Xh = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var zh = (function (t) {
  Xh(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.kind = 'NullPointerException';
  return e;
})(Ke);
var jh = (function () {
  function t() {}
  t.prototype.writeBytes = function (e) {
    this.writeBytesOffset(e, 0, e.length);
  };
  t.prototype.writeBytesOffset = function (e, r, n) {
    if (e == null) throw new zh();
    if (r < 0 || r > e.length || n < 0 || r + n > e.length || r + n < 0) throw new $i();
    if (n === 0) return;
    for (var i = 0; i < n; i++) this.write(e[r + i]);
  };
  t.prototype.flush = function () {};
  t.prototype.close = function () {};
  return t;
})();
var Wh = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var $h = (function (t) {
  Wh(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  return e;
})(Ke);
var Jh = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var qh = (function (t) {
  Jh(e, t);
  function e(r) {
    if (r === void 0) {
      r = 32;
    }
    var n = t() || this;
    n.count = 0;
    if (r < 0) throw new z('Negative initial size: ' + r);
    n.buf = new Uint8Array(r);
    return n;
  }
  e.prototype.ensureCapacity = function (r) {
    if (r - this.buf.length > 0) {
      this.grow(r);
    }
  };
  e.prototype.grow = function (r) {
    var n = this.buf.length;
    var i = this.buf.length << 1;
    if (i - r < 0) {
      i = r;
    }
    if (i < 0) {
      if (r < 0) throw new $h();
      i = 9007199254740991;
    }
    this.buf = Te.copyOfUint8Array(this.buf, i);
  };
  e.prototype.write = function (r) {
    this.ensureCapacity(this.count + 1);
    this.buf[this.count] = r;
    this.count += 1;
  };
  e.prototype.writeBytesOffset = function (r, n, i) {
    if (n < 0 || n > r.length || i < 0 || n + i - r.length > 0) throw new $i();
    this.ensureCapacity(this.count + i);
    ue.arraycopy(r, n, this.buf, this.count, i);
    this.count += i;
  };
  e.prototype.writeTo = function (r) {
    r.writeBytesOffset(this.buf, 0, this.count);
  };
  e.prototype.reset = function () {
    this.count = 0;
  };
  e.prototype.toByteArray = function () {
    return Te.copyOfUint8Array(this.buf, this.count);
  };
  e.prototype.size = function () {
    return this.count;
  };
  e.prototype.toString = function (r) {
    return r ? (typeof r == 'string' ? this.toString_string(r) : this.toString_number(r)) : this.toString_void();
  };
  e.prototype.toString_void = function () {
    return new String(this.buf).toString();
  };
  e.prototype.toString_string = function (r) {
    return new String(this.buf).toString();
  };
  e.prototype.toString_number = function (r) {
    return new String(this.buf).toString();
  };
  e.prototype.close = function () {};
  return e;
})(jh);
var fe;
(function (t) {
  t[(t.ALPHA = 0)] = 'ALPHA';
  t[(t.LOWER = 1)] = 'LOWER';
  t[(t.MIXED = 2)] = 'MIXED';
  t[(t.PUNCT = 3)] = 'PUNCT';
  t[(t.ALPHA_SHIFT = 4)] = 'ALPHA_SHIFT';
  t[(t.PUNCT_SHIFT = 5)] = 'PUNCT_SHIFT';
})(fe || (fe = {}));
function Ss() {
  if (typeof window < 'u') return window.BigInt || null;
  if (typeof global < 'u') return global.BigInt || null;
  if (typeof self < 'u') return self.BigInt || null;
  throw new Error("Can't search globals for BigInt!");
}
var Xr;
function Ot(t) {
  if (typeof Xr > 'u') {
    Xr = Ss();
  }
  if (Xr === null) throw new Error('BigInt is not supported!');
  return Xr(t);
}
function Yh() {
  var t = [];
  t[0] = Ot(1);
  var e = Ot(900);
  t[1] = e;
  for (var r = 2; r < 16; r++) t[r] = t[r - 1] * e;
  return t;
}
var Kh = (function () {
  function t() {}
  t.decode = function (e, r) {
    var n = new K('');
    var i = Ie.ISO8859_1;
    n.enableDecoding(Ie.ISO8859_1);
    for (var a = 1, o = e[a++], s = new Hh(); a < e[0]; ) {
      switch (o) {
        case t.TEXT_COMPACTION_MODE_LATCH:
          a = t.textCompaction(e, a, n);
          break;
        case t.BYTE_COMPACTION_MODE_LATCH:
        case t.BYTE_COMPACTION_MODE_LATCH_6:
          a = t.byteCompaction(o, e, Ie.ISO8859_1, a, n);
          break;
        case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
          n.append(e[a++]);
          break;
        case t.NUMERIC_COMPACTION_MODE_LATCH:
          a = t.numericCompaction(e, a, n);
          break;
        case t.ECI_CHARSET:
          Ie.getCharacterSetECIByValue(e[a++]);
          break;
        case t.ECI_GENERAL_PURPOSE:
          a += 2;
          break;
        case t.ECI_USER_DEFINED:
          a++;
          break;
        case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
          a = t.decodeMacroBlock(e, a, s);
          break;
        case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
        case t.MACRO_PDF417_TERMINATOR:
          throw new M();
        default:
          {
            a--;
            a = t.textCompaction(e, a, n);
          }
          break;
      }
      if (a < e.length) o = e[a++];
      else throw M.getFormatInstance();
    }
    if (n.length() === 0) throw M.getFormatInstance();
    var c = new Pn(null, n.toString(), null, r);
    c.setOther(s);
    return c;
  };
  t.decodeMacroBlock = function (e, r, n) {
    if (r + t.NUMBER_OF_SEQUENCE_CODEWORDS > e[0]) throw M.getFormatInstance();
    for (var i = new Int32Array(t.NUMBER_OF_SEQUENCE_CODEWORDS), a = 0; a < t.NUMBER_OF_SEQUENCE_CODEWORDS; a++, r++)
      i[a] = e[r];
    n.setSegmentIndex(Z.parseInt(t.decodeBase900toBase10(i, t.NUMBER_OF_SEQUENCE_CODEWORDS)));
    var o = new K();
    r = t.textCompaction(e, r, o);
    n.setFileId(o.toString());
    var s = -1;
    for (e[r] === t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD && (s = r + 1); r < e[0]; )
      switch (e[r]) {
        case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
          switch ((r++, e[r])) {
            case t.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME:
              var c = new K();
              {
                r = t.textCompaction(e, r + 1, c);
                n.setFileName(c.toString());
              }
              break;
            case t.MACRO_PDF417_OPTIONAL_FIELD_SENDER:
              var l = new K();
              {
                r = t.textCompaction(e, r + 1, l);
                n.setSender(l.toString());
              }
              break;
            case t.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE:
              var f = new K();
              {
                r = t.textCompaction(e, r + 1, f);
                n.setAddressee(f.toString());
              }
              break;
            case t.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT:
              var u = new K();
              {
                r = t.numericCompaction(e, r + 1, u);
                n.setSegmentCount(Z.parseInt(u.toString()));
              }
              break;
            case t.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP:
              var h = new K();
              {
                r = t.numericCompaction(e, r + 1, h);
                n.setTimestamp(za.parseLong(h.toString()));
              }
              break;
            case t.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM:
              var d = new K();
              {
                r = t.numericCompaction(e, r + 1, d);
                n.setChecksum(Z.parseInt(d.toString()));
              }
              break;
            case t.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE:
              var p = new K();
              {
                r = t.numericCompaction(e, r + 1, p);
                n.setFileSize(za.parseLong(p.toString()));
              }
              break;
            default:
              throw M.getFormatInstance();
          }
          break;
        case t.MACRO_PDF417_TERMINATOR:
          {
            r++;
            n.setLastSegment(true);
          }
          break;
        default:
          throw M.getFormatInstance();
      }
    if (s !== -1) {
      var v = r - s;
      if (n.isLastSegment()) {
        v--;
      }
      n.setOptionalData(Te.copyOfRange(e, s, s + v));
    }
    return r;
  };
  t.textCompaction = function (e, r, n) {
    for (
      var i = new Int32Array((e[0] - r) * 2), a = new Int32Array((e[0] - r) * 2), o = 0, s = false;
      r < e[0] && !s;

    ) {
      var c = e[r++];
      if (c < t.TEXT_COMPACTION_MODE_LATCH) {
        i[o] = c / 30;
        i[o + 1] = c % 30;
        o += 2;
      } else
        switch (c) {
          case t.TEXT_COMPACTION_MODE_LATCH:
            i[o++] = t.TEXT_COMPACTION_MODE_LATCH;
            break;
          case t.BYTE_COMPACTION_MODE_LATCH:
          case t.BYTE_COMPACTION_MODE_LATCH_6:
          case t.NUMERIC_COMPACTION_MODE_LATCH:
          case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
          case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
          case t.MACRO_PDF417_TERMINATOR:
            {
              r--;
              s = true;
            }
            break;
          case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
            {
              i[o] = t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE;
              c = e[r++];
              a[o] = c;
              o++;
            }
            break;
        }
    }
    t.decodeTextCompaction(i, a, o, n);
    return r;
  };
  t.decodeTextCompaction = function (e, r, n, i) {
    for (var a = fe.ALPHA, o = fe.ALPHA, s = 0; s < n; ) {
      var c = e[s];
      var l = '';
      switch (a) {
        case fe.ALPHA:
          if (e[s] < 26) l = String.fromCharCode(65 + e[s]);
          else
            switch (e[s]) {
              case 26:
                l = ' ';
                break;
              case t.LL:
                a = fe.LOWER;
                break;
              case t.ML:
                a = fe.MIXED;
                break;
              case t.PS:
                {
                  o = a;
                  a = fe.PUNCT_SHIFT;
                }
                break;
              case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                i.append(r[s]);
                break;
              case t.TEXT_COMPACTION_MODE_LATCH:
                a = fe.ALPHA;
                break;
            }
          break;
        case fe.LOWER:
          if (e[s] < 26) l = String.fromCharCode(97 + e[s]);
          else
            switch (e[s]) {
              case 26:
                l = ' ';
                break;
              case t.AS:
                {
                  o = a;
                  a = fe.ALPHA_SHIFT;
                }
                break;
              case t.ML:
                a = fe.MIXED;
                break;
              case t.PS:
                {
                  o = a;
                  a = fe.PUNCT_SHIFT;
                }
                break;
              case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                i.append(r[s]);
                break;
              case t.TEXT_COMPACTION_MODE_LATCH:
                a = fe.ALPHA;
                break;
            }
          break;
        case fe.MIXED:
          if (e[s] < t.PL) l = t.MIXED_CHARS[e[s]];
          else
            switch (e[s]) {
              case t.PL:
                a = fe.PUNCT;
                break;
              case 26:
                l = ' ';
                break;
              case t.LL:
                a = fe.LOWER;
                break;
              case t.AL:
                a = fe.ALPHA;
                break;
              case t.PS:
                {
                  o = a;
                  a = fe.PUNCT_SHIFT;
                }
                break;
              case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                i.append(r[s]);
                break;
              case t.TEXT_COMPACTION_MODE_LATCH:
                a = fe.ALPHA;
                break;
            }
          break;
        case fe.PUNCT:
          if (e[s] < t.PAL) l = t.PUNCT_CHARS[e[s]];
          else
            switch (e[s]) {
              case t.PAL:
                a = fe.ALPHA;
                break;
              case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                i.append(r[s]);
                break;
              case t.TEXT_COMPACTION_MODE_LATCH:
                a = fe.ALPHA;
                break;
            }
          break;
        case fe.ALPHA_SHIFT:
          {
            a = o;
            if (e[s] < 26) l = String.fromCharCode(65 + e[s]);
            else
              switch (e[s]) {
                case 26:
                  l = ' ';
                  break;
                case t.TEXT_COMPACTION_MODE_LATCH:
                  a = fe.ALPHA;
                  break;
              }
          }
          break;
        case fe.PUNCT_SHIFT:
          {
            a = o;
            if (e[s] < t.PAL) l = t.PUNCT_CHARS[e[s]];
            else
              switch (e[s]) {
                case t.PAL:
                  a = fe.ALPHA;
                  break;
                case t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
                  i.append(r[s]);
                  break;
                case t.TEXT_COMPACTION_MODE_LATCH:
                  a = fe.ALPHA;
                  break;
              }
          }
          break;
      }
      if (l !== '') {
        i.append(l);
      }
      s++;
    }
  };
  t.byteCompaction = function (e, r, n, i, a) {
    var o = new qh();
    var s = 0;
    var c = 0;
    var l = false;
    switch (e) {
      case t.BYTE_COMPACTION_MODE_LATCH:
        for (var f = new Int32Array(6), u = r[i++]; i < r[0] && !l; )
          switch (((f[s++] = u), (c = 900 * c + u), (u = r[i++]), u)) {
            case t.TEXT_COMPACTION_MODE_LATCH:
            case t.BYTE_COMPACTION_MODE_LATCH:
            case t.NUMERIC_COMPACTION_MODE_LATCH:
            case t.BYTE_COMPACTION_MODE_LATCH_6:
            case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
            case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
            case t.MACRO_PDF417_TERMINATOR:
              {
                i--;
                l = true;
              }
              break;
            default:
              if (s % 5 === 0 && s > 0) {
                for (var h = 0; h < 6; ++h) o.write(Number(Ot(c) >> Ot(8 * (5 - h))));
                c = 0;
                s = 0;
              }
              break;
          }
        if (i === r[0] && u < t.TEXT_COMPACTION_MODE_LATCH) {
          f[s++] = u;
        }
        for (var d = 0; d < s; d++) o.write(f[d]);
        break;
      case t.BYTE_COMPACTION_MODE_LATCH_6:
        for (; i < r[0] && !l; ) {
          var p = r[i++];
          if (r[i++] < t.TEXT_COMPACTION_MODE_LATCH) {
            s++;
            c = 900 * c + r[i++];
          } else
            switch (r[i++]) {
              case t.TEXT_COMPACTION_MODE_LATCH:
              case t.BYTE_COMPACTION_MODE_LATCH:
              case t.NUMERIC_COMPACTION_MODE_LATCH:
              case t.BYTE_COMPACTION_MODE_LATCH_6:
              case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
              case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
              case t.MACRO_PDF417_TERMINATOR:
                {
                  i--;
                  l = true;
                }
                break;
            }
          if (s % 5 === 0 && s > 0) {
            for (var h = 0; h < 6; ++h) o.write(Number(Ot(c) >> Ot(8 * (5 - h))));
            c = 0;
            s = 0;
          }
        }
        break;
    }
    a.append(ut.decode(o.toByteArray(), n));
    return i;
  };
  t.numericCompaction = function (e, r, n) {
    for (var i = 0, a = false, o = new Int32Array(t.MAX_NUMERIC_CODEWORDS); r < e[0] && !a; ) {
      var s = e[r++];
      if (r === e[0]) {
        a = true;
      }
      if (e[r++] < t.TEXT_COMPACTION_MODE_LATCH) {
        o[i] = e[r++];
        i++;
      } else
        switch (e[r++]) {
          case t.TEXT_COMPACTION_MODE_LATCH:
          case t.BYTE_COMPACTION_MODE_LATCH:
          case t.BYTE_COMPACTION_MODE_LATCH_6:
          case t.BEGIN_MACRO_PDF417_CONTROL_BLOCK:
          case t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
          case t.MACRO_PDF417_TERMINATOR:
            {
              r--;
              a = true;
            }
            break;
        }
      if ((i % t.MAX_NUMERIC_CODEWORDS === 0 || e[r++] === t.NUMERIC_COMPACTION_MODE_LATCH || a) && i > 0) {
        n.append(t.decodeBase900toBase10(o, i));
        i = 0;
      }
    }
    return r;
  };
  t.decodeBase900toBase10 = function (e, r) {
    for (var n = Ot(0), i = 0; i < r; i++) n += t.EXP900[r - i - 1] * Ot(e[i]);
    var a = n.toString();
    if (a.charAt(0) !== '1') throw new M();
    return a.substring(1);
  };
  t.TEXT_COMPACTION_MODE_LATCH = 900;
  t.BYTE_COMPACTION_MODE_LATCH = 901;
  t.NUMERIC_COMPACTION_MODE_LATCH = 902;
  t.BYTE_COMPACTION_MODE_LATCH_6 = 924;
  t.ECI_USER_DEFINED = 925;
  t.ECI_GENERAL_PURPOSE = 926;
  t.ECI_CHARSET = 927;
  t.BEGIN_MACRO_PDF417_CONTROL_BLOCK = 928;
  t.BEGIN_MACRO_PDF417_OPTIONAL_FIELD = 923;
  t.MACRO_PDF417_TERMINATOR = 922;
  t.MODE_SHIFT_TO_BYTE_COMPACTION_MODE = 913;
  t.MAX_NUMERIC_CODEWORDS = 15;
  t.MACRO_PDF417_OPTIONAL_FIELD_FILE_NAME = 0;
  t.MACRO_PDF417_OPTIONAL_FIELD_SEGMENT_COUNT = 1;
  t.MACRO_PDF417_OPTIONAL_FIELD_TIME_STAMP = 2;
  t.MACRO_PDF417_OPTIONAL_FIELD_SENDER = 3;
  t.MACRO_PDF417_OPTIONAL_FIELD_ADDRESSEE = 4;
  t.MACRO_PDF417_OPTIONAL_FIELD_FILE_SIZE = 5;
  t.MACRO_PDF417_OPTIONAL_FIELD_CHECKSUM = 6;
  t.PL = 25;
  t.LL = 27;
  t.AS = 27;
  t.ML = 28;
  t.AL = 28;
  t.PS = 29;
  t.PAL = 29;
  t.PUNCT_CHARS = `;<>@[\\]_\`~!\r	,:
-.$/"|*()?{}'`;
  t.MIXED_CHARS = '0123456789&\r\t,:#-.$/+%*=^';
  t.EXP900 = Ss() ? Yh() : [];
  t.NUMBER_OF_SEQUENCE_CODEWORDS = 2;
  return t;
})();
var _r = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Zh = (function () {
  function t() {}
  t.decode = function (e, r, n, i, a, o, s) {
    for (var c = new ci(e, r, n, i, a), l = null, f = null, u, h = true; ; h = false) {
      if (r != null) {
        l = t.getRowIndicatorColumn(e, c, r, true, o, s);
      }
      if (i != null) {
        f = t.getRowIndicatorColumn(e, c, i, false, o, s);
      }
      u = t.merge(l, f);
      if (u == null) throw I.getNotFoundInstance();
      var d = u.getBoundingBox();
      if (h && d != null && (d.getMinY() < c.getMinY() || d.getMaxY() > c.getMaxY())) c = d;
      else break;
    }
    u.setBoundingBox(c);
    var p = u.getBarcodeColumnCount() + 1;
    u.setDetectionResultColumn(0, l);
    u.setDetectionResultColumn(p, f);
    for (var v = l != null, g = 1; g <= p; g++) {
      var _ = v ? g : p - g;
      if (u.getDetectionResultColumn(_) === void 0) {
        var y = void 0;
        _ === 0 || _ === p ? (y = new Xa(c, _ === 0)) : (y = new Cs(c));
        u.setDetectionResultColumn(_, y);
        for (var x = -1, w = x, C = c.getMinY(); C <= c.getMaxY(); C++) {
          x = t.getStartColumn(u, _, C, v);
          if (x < 0 || x > c.getMaxX()) {
            if (w === -1) continue;
            x = w;
          }
          var S = t.detectCodeword(e, c.getMinX(), c.getMaxX(), v, x, C, o, s);
          if (S != null) {
            y.setCodeword(C, S);
            w = x;
            o = Math.min(o, S.getWidth());
            s = Math.max(s, S.getWidth());
          }
        }
      }
    }
    return t.createDecoderResult(u);
  };
  t.merge = function (e, r) {
    if (e == null && r == null) return null;
    var n = t.getBarcodeMetadata(e, r);
    if (n == null) return null;
    var i = ci.merge(t.adjustBoundingBox(e), t.adjustBoundingBox(r));
    return new Uh(n, i);
  };
  t.adjustBoundingBox = function (e) {
    var r;
    var n;
    if (e == null) return null;
    var i = e.getRowHeights();
    if (i == null) return null;
    var a = t.getMax(i);
    var o = 0;
    try {
      for (var s = _r(i), c = s.next(); !c.done; c = s.next()) {
        var l = c.value;
        o += a - c.value;
        if (c.value > 0) break;
      }
    } catch (d) {
      r = { error: d };
    } finally {
      try {
        if (c && !c.done && (n = s.return)) {
          n.call(s);
        }
      } finally {
        if (r) throw r.error;
      }
    }
    for (var f = e.getCodewords(), u = 0; o > 0 && f[u] == null; u++) o--;
    for (var h = 0, u = i.length - 1; u >= 0 && ((h += a - i[u]), !(i[u] > 0)); u--);
    for (var u = f.length - 1; h > 0 && f[u] == null; u--) h--;
    return e.getBoundingBox().addMissingRows(o, h, e.isLeft());
  };
  t.getMax = function (e) {
    var r;
    var n;
    var i = -1;
    try {
      for (var a = _r(e), o = a.next(); !o.done; o = a.next()) {
        var s = o.value;
        i = Math.max(i, o.value);
      }
    } catch (c) {
      r = { error: c };
    } finally {
      try {
        if (o && !o.done && (n = a.return)) {
          n.call(a);
        }
      } finally {
        if (r) throw r.error;
      }
    }
    return i;
  };
  t.getBarcodeMetadata = function (e, r) {
    var n;
    if (e == null || (n = e.getBarcodeMetadata()) == null) return r == null ? null : r.getBarcodeMetadata();
    var i;
    return r == null || (i = r.getBarcodeMetadata()) == null
      ? n
      : n.getColumnCount() !== i.getColumnCount() &&
          n.getErrorCorrectionLevel() !== i.getErrorCorrectionLevel() &&
          n.getRowCount() !== i.getRowCount()
        ? null
        : n;
  };
  t.getRowIndicatorColumn = function (e, r, n, i, a, o) {
    for (var s = new Xa(r, i), c = 0; c < 2; c++)
      for (
        var l = c === 0 ? 1 : -1, f = Math.trunc(Math.trunc(n.getX())), u = Math.trunc(Math.trunc(n.getY()));
        u <= r.getMaxY() && u >= r.getMinY();
        u += l
      ) {
        var h = t.detectCodeword(e, 0, e.getWidth(), i, f, u, a, o);
        if (h != null) {
          s.setCodeword(u, h);
          i ? (f = h.getStartX()) : (f = h.getEndX());
        }
      }
    return s;
  };
  t.adjustCodewordCount = function (e, r) {
    var n = r[0][1];
    var i = r[0][1].getValue();
    var a = e.getBarcodeColumnCount() * e.getBarcodeRowCount() - t.getNumberOfECCodeWords(e.getBarcodeECLevel());
    if (i.length === 0) {
      if (a < 1 || a > 928) throw I.getNotFoundInstance();
      r[0][1].setValue(a);
    } else if (i[0] !== a) {
      r[0][1].setValue(a);
    }
  };
  t.createDecoderResult = function (e) {
    var r = t.createBarcodeMatrix(e);
    t.adjustCodewordCount(e, r);
    for (
      var n = new Array(),
        i = new Int32Array(e.getBarcodeRowCount() * e.getBarcodeColumnCount()),
        a = [],
        o = new Array(),
        s = 0;
      s < e.getBarcodeRowCount();
      s++
    )
      for (var c = 0; c < e.getBarcodeColumnCount(); c++) {
        var l = r[s][c + 1].getValue();
        var f = s * e.getBarcodeColumnCount() + c;
        l.length === 0 ? n.push(f) : l.length === 1 ? (i[f] = l[0]) : (o.push(f), a.push(l));
      }
    for (var u = new Array(a.length), h = 0; h < u.length; h++) u[h] = a[h];
    return t.createDecoderResultFromAmbiguousValues(e.getBarcodeECLevel(), i, te.toIntArray(n), te.toIntArray(o), u);
  };
  t.createDecoderResultFromAmbiguousValues = function (e, r, n, i, a) {
    for (var o = new Int32Array(i.length), s = 100; s-- > 0; ) {
      for (var c = 0; c < o.length; c++) r[i[c]] = a[c][o[c]];
      try {
        return t.decodeCodewords(r, e, n);
      } catch (f) {
        var l = f instanceof Me;
        if (!l) throw f;
      }
      if (o.length === 0) throw Me.getChecksumInstance();
      for (var c = 0; c < o.length; c++)
        if (o[c] < a[c].length - 1) {
          o[c]++;
          break;
        } else {
          o[c] = 0;
          if (c === o.length - 1) throw Me.getChecksumInstance();
        }
    }
    throw Me.getChecksumInstance();
  };
  t.createBarcodeMatrix = function (e) {
    for (
      var r,
        n,
        i,
        a,
        o = Array.from({ length: e.getBarcodeRowCount() }, function () {
          return new Array(e.getBarcodeColumnCount() + 2);
        }),
        s = 0;
      s < o.length;
      s++
    )
      for (var c = 0; c < o[s].length; c++) o[s][c] = new wr();
    var l = 0;
    try {
      for (var f = _r(e.getDetectionResultColumns()), u = f.next(); !u.done; u = f.next()) {
        var h = u.value;
        if (u.value != null)
          try {
            for (var d = ((i = void 0), _r(u.value.getCodewords())), p = d.next(); !p.done; p = d.next()) {
              var v = p.value;
              if (p.value != null) {
                var g = p.value.getRowNumber();
                if (g >= 0) {
                  if (g >= o.length) continue;
                  o[g][l].setValue(p.value.getValue());
                }
              }
            }
          } catch (_) {
            i = { error: _ };
          } finally {
            try {
              if (p && !p.done && (a = d.return)) {
                a.call(d);
              }
            } finally {
              if (i) throw i.error;
            }
          }
        l++;
      }
    } catch (_) {
      r = { error: _ };
    } finally {
      try {
        if (u && !u.done && (n = f.return)) {
          n.call(f);
        }
      } finally {
        if (r) throw r.error;
      }
    }
    return o;
  };
  t.isValidBarcodeColumn = function (e, r) {
    return r >= 0 && r <= e.getBarcodeColumnCount() + 1;
  };
  t.getStartColumn = function (e, r, n, i) {
    var a;
    var o;
    var s = i ? 1 : -1;
    var c = null;
    if (t.isValidBarcodeColumn(e, r - s)) {
      c = e.getDetectionResultColumn(r - s).getCodeword(n);
    }
    if (c != null) return i ? c.getEndX() : c.getStartX();
    c = e.getDetectionResultColumn(r).getCodewordNearby(n);
    if (c != null) return i ? c.getStartX() : c.getEndX();
    if (t.isValidBarcodeColumn(e, r - s)) {
      c = e.getDetectionResultColumn(r - s).getCodewordNearby(n);
    }
    if (c != null) return i ? c.getEndX() : c.getStartX();
    for (var l = 0; t.isValidBarcodeColumn(e, r - s); ) {
      r -= s;
      try {
        for (
          var f = ((a = void 0), _r(e.getDetectionResultColumn(r).getCodewords())), u = f.next();
          !u.done;
          u = f.next()
        ) {
          var h = u.value;
          if (u.value != null)
            return (i ? u.value.getEndX() : u.value.getStartX()) + s * l * (u.value.getEndX() - u.value.getStartX());
        }
      } catch (d) {
        a = { error: d };
      } finally {
        try {
          if (u && !u.done && (o = f.return)) {
            o.call(f);
          }
        } finally {
          if (a) throw a.error;
        }
      }
      l++;
    }
    return i ? e.getBoundingBox().getMinX() : e.getBoundingBox().getMaxX();
  };
  t.detectCodeword = function (e, r, n, i, a, o, s, c) {
    a = t.adjustCodewordStartColumn(e, r, n, i, a, o);
    var l = t.getModuleBitCount(e, r, n, i, a, o);
    if (l == null) return null;
    var f;
    var u = re.sum(l);
    if (i) f = a + u;
    else {
      for (var h = 0; h < l.length / 2; h++) {
        var d = l[h];
        l[h] = l[l.length - 1 - h];
        l[l.length - 1 - h] = l[h];
      }
      f = a;
      a = f - u;
    }
    if (!t.checkCodewordSkew(u, s, c)) return null;
    var p = Gh.getDecodedValue(l);
    var v = te.getCodeword(p);
    return v === -1 ? null : new Vh(a, f, t.getCodewordBucketNumber(p), v);
  };
  t.getModuleBitCount = function (e, r, n, i, a, o) {
    for (var s = a, c = new Int32Array(8), l = 0, f = i ? 1 : -1, u = i; (i ? s < n : s >= r) && l < c.length; )
      e.get(s, o) === u ? (c[l]++, (s += f)) : (l++, (u = !u));
    return l === c.length || (s === (i ? n : r) && l === c.length - 1) ? c : null;
  };
  t.getNumberOfECCodeWords = function (e) {
    return 2 << e;
  };
  t.adjustCodewordStartColumn = function (e, r, n, i, a, o) {
    for (var s = a, c = i ? -1 : 1, l = 0; l < 2; l++) {
      for (; (i ? s >= r : s < n) && i === e.get(s, o); ) {
        if (Math.abs(a - s) > t.CODEWORD_SKEW_SIZE) return a;
        s += c;
      }
      c = -c;
      i = !i;
    }
    return s;
  };
  t.checkCodewordSkew = function (e, r, n) {
    return r - t.CODEWORD_SKEW_SIZE <= e && e <= n + t.CODEWORD_SKEW_SIZE;
  };
  t.decodeCodewords = function (e, r, n) {
    if (e.length === 0) throw M.getFormatInstance();
    var i = 1 << (r + 1);
    var a = t.correctErrors(e, n, i);
    t.verifyCodewordCount(e, i);
    var o = Kh.decode(e, '' + r);
    o.setErrorsCorrected(a);
    o.setErasures(n.length);
    return o;
  };
  t.correctErrors = function (e, r, n) {
    if ((r != null && r.length > n / 2 + t.MAX_ERRORS) || n < 0 || n > t.MAX_EC_CODEWORDS)
      throw Me.getChecksumInstance();
    return t.errorCorrection.decode(e, n, r);
  };
  t.verifyCodewordCount = function (e, r) {
    if (e.length < 4) throw M.getFormatInstance();
    var n = e[0];
    if (e[0] > e.length) throw M.getFormatInstance();
    if (e[0] === 0)
      if (r < e.length) e[0] = e.length - r;
      else throw M.getFormatInstance();
  };
  t.getBitCountForCodeword = function (e) {
    for (var r = new Int32Array(8), n = 0, i = r.length - 1; !((e & 1) !== n && ((n = e & 1), i--, i < 0)); ) {
      r[i]++;
      e >>= 1;
    }
    return r;
  };
  t.getCodewordBucketNumber = function (e) {
    return e instanceof Int32Array
      ? this.getCodewordBucketNumber_Int32Array(e)
      : this.getCodewordBucketNumber_number(e);
  };
  t.getCodewordBucketNumber_number = function (e) {
    return t.getCodewordBucketNumber(t.getBitCountForCodeword(e));
  };
  t.getCodewordBucketNumber_Int32Array = function (e) {
    return (e[0] - e[2] + e[4] - e[6] + 9) % 9;
  };
  t.toString = function (e) {
    for (var r = new Zi(), n = 0; n < e.length; n++) {
      r.format('Row %2d: ', n);
      for (var i = 0; i < e[n].length; i++) {
        var a = e[n][i];
        e[n][i].getValue().length === 0
          ? r.format('        ', null)
          : r.format('%4d(%2d)', e[n][i].getValue()[0], e[n][i].getConfidence(e[n][i].getValue()[0]));
      }
      r.format('%n');
    }
    return r.toString();
  };
  t.CODEWORD_SKEW_SIZE = 2;
  t.MAX_ERRORS = 3;
  t.MAX_EC_CODEWORDS = 512;
  t.errorCorrection = new Rh();
  return t;
})();
var Qh = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var li = (function () {
  function t() {}
  t.prototype.decode = function (e, r) {
    if (r === void 0) {
      r = null;
    }
    var n = t.decode(e, r, false);
    if (n == null || n.length === 0 || n[0] == null) throw I.getNotFoundInstance();
    return n[0];
  };
  t.prototype.decodeMultiple = function (e, r) {
    if (r === void 0) {
      r = null;
    }
    try {
      return t.decode(e, r, true);
    } catch (n) {
      throw n instanceof M || n instanceof Me ? I.getNotFoundInstance() : n;
    }
  };
  t.decode = function (e, r, n) {
    var i;
    var a;
    var o = new Array();
    var s = Ih.detectMultiple(e, r, n);
    try {
      for (var c = Qh(s.getPoints()), l = c.next(); !l.done; l = c.next()) {
        var f = l.value;
        var u = Zh.decode(
          s.getBits(),
          l.value[4],
          l.value[5],
          l.value[6],
          l.value[7],
          t.getMinCodewordWidth(l.value),
          t.getMaxCodewordWidth(l.value),
        );
        var h = new je(u.getText(), u.getRawBytes(), void 0, l.value, ei.PDF_417);
        h.putMetadata(ti.ERROR_CORRECTION_LEVEL, u.getECLevel());
        var d = u.getOther();
        if (d != null) {
          h.putMetadata(ti.PDF417_EXTRA_METADATA, d);
        }
        o.push(h);
      }
    } catch (p) {
      i = { error: p };
    } finally {
      try {
        if (l && !l.done && (a = c.return)) {
          a.call(c);
        }
      } finally {
        if (i) throw i.error;
      }
    }
    return o.map(function (p) {
      return p;
    });
  };
  t.getMaxWidth = function (e, r) {
    return e == null || r == null ? 0 : Math.trunc(Math.abs(e.getX() - r.getX()));
  };
  t.getMinWidth = function (e, r) {
    return e == null || r == null ? 9007199254740991 : Math.trunc(Math.abs(e.getX() - r.getX()));
  };
  t.getMaxCodewordWidth = function (e) {
    return Math.floor(
      Math.max(
        Math.max(t.getMaxWidth(e[0], e[4]), (t.getMaxWidth(e[6], e[2]) * 17) / 18),
        Math.max(t.getMaxWidth(e[1], e[5]), (t.getMaxWidth(e[7], e[3]) * 17) / 18),
      ),
    );
  };
  t.getMinCodewordWidth = function (e) {
    return Math.floor(
      Math.min(
        Math.min(t.getMinWidth(e[0], e[4]), (t.getMinWidth(e[6], e[2]) * 17) / 18),
        Math.min(t.getMinWidth(e[1], e[5]), (t.getMinWidth(e[7], e[3]) * 17) / 18),
      ),
    );
  };
  t.prototype.reset = function () {};
  return t;
})();
var ed = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var ja = (function (t) {
  ed(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.kind = 'ReaderException';
  return e;
})(Ke);
var Wa = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var td = (function () {
  function t() {}
  t.prototype.decode = function (e, r) {
    this.setHints(r);
    return this.decodeInternal(e);
  };
  t.prototype.decodeWithState = function (e) {
    if (this.readers === null || this.readers === void 0) {
      this.setHints(null);
    }
    return this.decodeInternal(e);
  };
  t.prototype.setHints = function (e) {
    this.hints = e;
    var r = e != null && e.get(Qn.TRY_HARDER) !== void 0;
    var n = e == null ? null : e.get(Qn.POSSIBLE_FORMATS);
    var i = new Array();
    if (n != null) {
      var a = n.some(function (o) {
        return (
          o === ei.UPC_A ||
          o === ei.UPC_E ||
          o === ei.EAN_13 ||
          o === ei.EAN_8 ||
          o === ei.CODABAR ||
          o === ei.CODE_39 ||
          o === ei.CODE_93 ||
          o === ei.CODE_128 ||
          o === ei.ITF ||
          o === ei.RSS_14 ||
          o === ei.RSS_EXPANDED
        );
      });
      if (a && !r) {
        i.push(new yr(e));
      }
      if (n.includes(ei.QR_CODE)) {
        i.push(new si());
      }
      if (n.includes(ei.DATA_MATRIX)) {
        i.push(new oi());
      }
      if (n.includes(ei.AZTEC)) {
        i.push(new ii());
      }
      if (n.includes(ei.PDF_417)) {
        i.push(new li());
      }
      if (a && r) {
        i.push(new yr(e));
      }
    }
    if (i.length === 0) {
      if (!r) {
        i.push(new yr(e));
      }
      i.push(new si());
      i.push(new oi());
      i.push(new ii());
      i.push(new li());
      if (r) {
        i.push(new yr(e));
      }
    }
    this.readers = i;
  };
  t.prototype.reset = function () {
    var e;
    var r;
    if (this.readers !== null)
      try {
        for (var n = Wa(this.readers), i = n.next(); !i.done; i = n.next()) {
          var a = i.value;
          i.value.reset();
        }
      } catch (o) {
        e = { error: o };
      } finally {
        try {
          if (i && !i.done && (r = n.return)) {
            r.call(n);
          }
        } finally {
          if (e) throw e.error;
        }
      }
  };
  t.prototype.decodeInternal = function (e) {
    var r;
    var n;
    if (this.readers === null) throw new ja('No readers where selected, nothing can be read.');
    try {
      for (var i = Wa(this.readers), a = i.next(); !a.done; a = i.next()) {
        var o = a.value;
        try {
          return a.value.decode(e, this.hints);
        } catch (s) {
          if (s instanceof ja) continue;
        }
      }
    } catch (s) {
      r = { error: s };
    } finally {
      try {
        if (a && !a.done && (n = i.return)) {
          n.call(i);
        }
      } finally {
        if (r) throw r.error;
      }
    }
    throw new I('No MultiFormat Readers were able to detect the code.');
  };
  return t;
})();
var rd = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var nd = (function (t) {
  rd(e, t);
  function e(r, n) {
    if (r === void 0) {
      r = null;
    }
    if (n === void 0) {
      n = 500;
    }
    var i = this;
    var a = new td();
    a.setHints(r);
    i = t(a, n) || this;
    return i;
  }
  e.prototype.decodeBitmap = function (r) {
    return this.reader.decodeWithState(r);
  };
  return e;
})(vr);
var id = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
(function (t) {
  id(e, t);
  function e(r) {
    if (r === void 0) {
      r = 500;
    }
    return t(new li(), r) || this;
  }
  return e;
})(vr);
var ad = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
(function (t) {
  ad(e, t);
  function e(r) {
    if (r === void 0) {
      r = 500;
    }
    return t(new si(), r) || this;
  }
  return e;
})(vr);
var fi;
(function (t) {
  t[(t.ERROR_CORRECTION = 0)] = 'ERROR_CORRECTION';
  t[(t.CHARACTER_SET = 1)] = 'CHARACTER_SET';
  t[(t.DATA_MATRIX_SHAPE = 2)] = 'DATA_MATRIX_SHAPE';
  t[(t.DATA_MATRIX_COMPACT = 3)] = 'DATA_MATRIX_COMPACT';
  t[(t.MIN_SIZE = 4)] = 'MIN_SIZE';
  t[(t.MAX_SIZE = 5)] = 'MAX_SIZE';
  t[(t.MARGIN = 6)] = 'MARGIN';
  t[(t.PDF417_COMPACT = 7)] = 'PDF417_COMPACT';
  t[(t.PDF417_COMPACTION = 8)] = 'PDF417_COMPACTION';
  t[(t.PDF417_DIMENSIONS = 9)] = 'PDF417_DIMENSIONS';
  t[(t.AZTEC_LAYERS = 10)] = 'AZTEC_LAYERS';
  t[(t.QR_VERSION = 11)] = 'QR_VERSION';
  t[(t.GS1_FORMAT = 12)] = 'GS1_FORMAT';
  t[(t.FORCE_C40 = 13)] = 'FORCE_C40';
})(fi || (fi = {}));
const zr = fi;
var As = (function () {
  function t(e) {
    this.field = e;
    this.cachedGenerators = [];
    this.cachedGenerators.push(new Lt(e, Int32Array.from([1])));
  }
  t.prototype.buildGenerator = function (e) {
    var r = this.cachedGenerators;
    if (e >= r.length)
      for (var n = r[r.length - 1], i = this.field, a = r.length; a <= e; a++) {
        var o = n.multiply(new Lt(i, Int32Array.from([1, i.exp(a - 1 + i.getGeneratorBase())])));
        r.push(o);
        n = o;
      }
    return r[e];
  };
  t.prototype.encode = function (e, r) {
    if (r === 0) throw new z('No error correction bytes');
    var n = e.length - r;
    if (n <= 0) throw new z('No data bytes provided');
    var i = this.buildGenerator(r);
    var a = new Int32Array(n);
    ue.arraycopy(e, 0, a, 0, n);
    var o = new Lt(this.field, a);
    o = o.multiplyByMonomial(r, 1);
    for (var s = o.divide(i)[1], c = s.getCoefficients(), l = r - c.length, f = 0; f < l; f++) e[n + f] = 0;
    ue.arraycopy(c, 0, e, n + l, c.length);
  };
  return t;
})();
var Er = (function () {
  function t() {}
  t.applyMaskPenaltyRule1 = function (e) {
    return t.applyMaskPenaltyRule1Internal(e, true) + t.applyMaskPenaltyRule1Internal(e, false);
  };
  t.applyMaskPenaltyRule2 = function (e) {
    for (var r = 0, n = e.getArray(), i = e.getWidth(), a = e.getHeight(), o = 0; o < a - 1; o++)
      for (var s = n[o], c = 0; c < i - 1; c++) {
        var l = s[c];
        if (s[c] === s[c + 1] && s[c] === n[o + 1][c] && s[c] === n[o + 1][c + 1]) {
          r++;
        }
      }
    return t.N2 * r;
  };
  t.applyMaskPenaltyRule3 = function (e) {
    for (var r = 0, n = e.getArray(), i = e.getWidth(), a = e.getHeight(), o = 0; o < a; o++)
      for (var s = 0; s < i; s++) {
        var c = n[o];
        if (
          s + 6 < i &&
          n[o][s] === 1 &&
          n[o][s + 1] === 0 &&
          n[o][s + 2] === 1 &&
          n[o][s + 3] === 1 &&
          n[o][s + 4] === 1 &&
          n[o][s + 5] === 0 &&
          n[o][s + 6] === 1 &&
          (t.isWhiteHorizontal(n[o], s - 4, s) || t.isWhiteHorizontal(n[o], s + 7, s + 11))
        ) {
          r++;
        }
        if (
          o + 6 < a &&
          n[o][s] === 1 &&
          n[o + 1][s] === 0 &&
          n[o + 2][s] === 1 &&
          n[o + 3][s] === 1 &&
          n[o + 4][s] === 1 &&
          n[o + 5][s] === 0 &&
          n[o + 6][s] === 1 &&
          (t.isWhiteVertical(n, s, o - 4, o) || t.isWhiteVertical(n, s, o + 7, o + 11))
        ) {
          r++;
        }
      }
    return r * t.N3;
  };
  t.isWhiteHorizontal = function (e, r, n) {
    r = Math.max(r, 0);
    n = Math.min(n, e.length);
    for (var i = r; i < n; i++) if (e[i] === 1) return false;
    return true;
  };
  t.isWhiteVertical = function (e, r, n, i) {
    n = Math.max(n, 0);
    i = Math.min(i, e.length);
    for (var a = n; a < i; a++) if (e[a][r] === 1) return false;
    return true;
  };
  t.applyMaskPenaltyRule4 = function (e) {
    for (var r = 0, n = e.getArray(), i = e.getWidth(), a = e.getHeight(), o = 0; o < a; o++)
      for (var s = n[o], c = 0; c < i; c++)
        if (s[c] === 1) {
          r++;
        }
    var l = e.getHeight() * e.getWidth();
    var f = Math.floor((Math.abs(r * 2 - l) * 10) / l);
    return f * t.N4;
  };
  t.getDataMaskBit = function (e, r, n) {
    var i;
    var a;
    switch (e) {
      case 0:
        i = (n + r) & 1;
        break;
      case 1:
        i = n & 1;
        break;
      case 2:
        i = r % 3;
        break;
      case 3:
        i = (n + r) % 3;
        break;
      case 4:
        i = (Math.floor(n / 2) + Math.floor(r / 3)) & 1;
        break;
      case 5:
        {
          a = n * r;
          i = (a & 1) + (a % 3);
        }
        break;
      case 6:
        {
          a = n * r;
          i = ((a & 1) + (a % 3)) & 1;
        }
        break;
      case 7:
        {
          a = n * r;
          i = ((a % 3) + ((n + r) & 1)) & 1;
        }
        break;
      default:
        throw new z('Invalid mask pattern: ' + e);
    }
    return i === 0;
  };
  t.applyMaskPenaltyRule1Internal = function (e, r) {
    for (
      var n = 0, i = r ? e.getHeight() : e.getWidth(), a = r ? e.getWidth() : e.getHeight(), o = e.getArray(), s = 0;
      s < i;
      s++
    ) {
      for (var c = 0, l = -1, f = 0; f < a; f++) {
        var u = r ? o[s][f] : o[f][s];
        u === l ? c++ : (c >= 5 && (n += t.N1 + (c - 5)), (c = 1), (l = u));
      }
      if (c >= 5) {
        n += t.N1 + (c - 5);
      }
    }
    return n;
  };
  t.N1 = 3;
  t.N2 = 3;
  t.N3 = 40;
  t.N4 = 10;
  return t;
})();
var od = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var sd = (function () {
  function t(e, r) {
    this.width = e;
    this.height = r;
    for (var n = new Array(r), i = 0; i !== r; i++) n[i] = new Uint8Array(e);
    this.bytes = n;
  }
  t.prototype.getHeight = function () {
    return this.height;
  };
  t.prototype.getWidth = function () {
    return this.width;
  };
  t.prototype.get = function (e, r) {
    return this.bytes[r][e];
  };
  t.prototype.getArray = function () {
    return this.bytes;
  };
  t.prototype.setNumber = function (e, r, n) {
    this.bytes[r][e] = n;
  };
  t.prototype.setBoolean = function (e, r, n) {
    this.bytes[r][e] = n ? 1 : 0;
  };
  t.prototype.clear = function (e) {
    var r;
    var n;
    try {
      for (var i = od(this.bytes), a = i.next(); !a.done; a = i.next()) {
        var o = a.value;
        Te.fill(a.value, e);
      }
    } catch (s) {
      r = { error: s };
    } finally {
      try {
        if (a && !a.done && (n = i.return)) {
          n.call(i);
        }
      } finally {
        if (r) throw r.error;
      }
    }
  };
  t.prototype.equals = function (e) {
    if (!(e instanceof t)) return false;
    var r = e;
    if (this.width !== e.width || this.height !== e.height) return false;
    for (var n = 0, i = this.height; n < i; ++n)
      for (var a = this.bytes[n], o = e.bytes[n], s = 0, c = this.width; s < c; ++s) if (a[s] !== o[s]) return false;
    return true;
  };
  t.prototype.toString = function () {
    for (var e = new K(), r = 0, n = this.height; r < n; ++r) {
      for (var i = this.bytes[r], a = 0, o = this.width; a < o; ++a)
        switch (i[a]) {
          case 0:
            e.append(' 0');
            break;
          case 1:
            e.append(' 1');
            break;
          default:
            e.append('  ');
            break;
        }
      e.append(`
`);
    }
    return e.toString();
  };
  return t;
})();
var ui = (function () {
  function t() {
    this.maskPattern = -1;
  }
  t.prototype.getMode = function () {
    return this.mode;
  };
  t.prototype.getECLevel = function () {
    return this.ecLevel;
  };
  t.prototype.getVersion = function () {
    return this.version;
  };
  t.prototype.getMaskPattern = function () {
    return this.maskPattern;
  };
  t.prototype.getMatrix = function () {
    return this.matrix;
  };
  t.prototype.toString = function () {
    var e = new K();
    e.append(`<<
`);
    e.append(' mode: ');
    e.append(this.mode ? this.mode.toString() : 'null');
    e.append(`
 ecLevel: `);
    e.append(this.ecLevel ? this.ecLevel.toString() : 'null');
    e.append(`
 version: `);
    e.append(this.version ? this.version.toString() : 'null');
    e.append(`
 maskPattern: `);
    e.append(this.maskPattern.toString());
    this.matrix
      ? (e.append(`
 matrix:
`),
        e.append(this.matrix.toString()))
      : e.append(`
 matrix: null
`);
    e.append(`>>
`);
    return e.toString();
  };
  t.prototype.setMode = function (e) {
    this.mode = e;
  };
  t.prototype.setECLevel = function (e) {
    this.ecLevel = e;
  };
  t.prototype.setVersion = function (e) {
    this.version = e;
  };
  t.prototype.setMaskPattern = function (e) {
    this.maskPattern = e;
  };
  t.prototype.setMatrix = function (e) {
    this.matrix = e;
  };
  t.isValidMaskPattern = function (e) {
    return e >= 0 && e < t.NUM_MASK_PATTERNS;
  };
  t.NUM_MASK_PATTERNS = 8;
  return t;
})();
var cd = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var he = (function (t) {
  cd(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.kind = 'WriterException';
  return e;
})(Ke);
var $a = (function () {
  function t() {}
  t.clearMatrix = function (e) {
    e.clear(255);
  };
  t.buildMatrix = function (e, r, n, i, a) {
    t.clearMatrix(a);
    t.embedBasicPatterns(n, a);
    t.embedTypeInfo(r, i, a);
    t.maybeEmbedVersionInfo(n, a);
    t.embedDataBits(e, i, a);
  };
  t.embedBasicPatterns = function (e, r) {
    t.embedPositionDetectionPatternsAndSeparators(r);
    t.embedDarkDotAtLeftBottomCorner(r);
    t.maybeEmbedPositionAdjustmentPatterns(e, r);
    t.embedTimingPatterns(r);
  };
  t.embedTypeInfo = function (e, r, n) {
    var i = new ke();
    t.makeTypeInfoBits(e, r, i);
    for (var a = 0, o = i.getSize(); a < o; ++a) {
      var s = i.get(i.getSize() - 1 - a);
      var c = t.TYPE_INFO_COORDINATES[a];
      var l = t.TYPE_INFO_COORDINATES[a][0];
      var f = t.TYPE_INFO_COORDINATES[a][1];
      n.setBoolean(t.TYPE_INFO_COORDINATES[a][0], t.TYPE_INFO_COORDINATES[a][1], s);
      if (a < 8) {
        var u = n.getWidth() - a - 1;
        var h = 8;
        n.setBoolean(u, 8, s);
      } else {
        var u = 8;
        var h = n.getHeight() - 7 + (a - 8);
        n.setBoolean(8, h, s);
      }
    }
  };
  t.maybeEmbedVersionInfo = function (e, r) {
    if (!(e.getVersionNumber() < 7)) {
      var n = new ke();
      t.makeVersionInfoBits(e, n);
      for (var i = 17, a = 0; a < 6; ++a)
        for (var o = 0; o < 3; ++o) {
          var s = n.get(i);
          i--;
          r.setBoolean(a, r.getHeight() - 11 + o, s);
          r.setBoolean(r.getHeight() - 11 + o, a, s);
        }
    }
  };
  t.embedDataBits = function (e, r, n) {
    for (var i = 0, a = -1, o = n.getWidth() - 1, s = n.getHeight() - 1; o > 0; ) {
      for (o === 6 && (o -= 1); s >= 0 && s < n.getHeight(); ) {
        for (var c = 0; c < 2; ++c) {
          var l = o - c;
          if (t.isEmpty(n.get(l, s))) {
            var f = void 0;
            i < e.getSize() ? ((f = e.get(i)), ++i) : (f = false);
            if (r !== 255 && Er.getDataMaskBit(r, l, s)) {
              f = !f;
            }
            n.setBoolean(l, s, f);
          }
        }
        s += a;
      }
      a = -a;
      s += a;
      o -= 2;
    }
    if (i !== e.getSize()) throw new he('Not all bits consumed: ' + i + '/' + e.getSize());
  };
  t.findMSBSet = function (e) {
    return 32 - Z.numberOfLeadingZeros(e);
  };
  t.calculateBCHCode = function (e, r) {
    if (r === 0) throw new z('0 polynomial');
    var n = t.findMSBSet(r);
    for (e <<= n - 1; t.findMSBSet(e) >= n; ) e ^= r << (t.findMSBSet(e) - n);
    return e;
  };
  t.makeTypeInfoBits = function (e, r, n) {
    if (!ui.isValidMaskPattern(r)) throw new he('Invalid mask pattern');
    var i = (e.getBits() << 3) | r;
    n.appendBits(i, 5);
    var a = t.calculateBCHCode(i, t.TYPE_INFO_POLY);
    n.appendBits(a, 10);
    var o = new ke();
    o.appendBits(t.TYPE_INFO_MASK_PATTERN, 15);
    n.xor(o);
    if (n.getSize() !== 15) throw new he('should not happen but we got: ' + n.getSize());
  };
  t.makeVersionInfoBits = function (e, r) {
    r.appendBits(e.getVersionNumber(), 6);
    var n = t.calculateBCHCode(e.getVersionNumber(), t.VERSION_INFO_POLY);
    r.appendBits(n, 12);
    if (r.getSize() !== 18) throw new he('should not happen but we got: ' + r.getSize());
  };
  t.isEmpty = function (e) {
    return e === 255;
  };
  t.embedTimingPatterns = function (e) {
    for (var r = 8; r < e.getWidth() - 8; ++r) {
      var n = (r + 1) % 2;
      if (t.isEmpty(e.get(r, 6))) {
        e.setNumber(r, 6, n);
      }
      if (t.isEmpty(e.get(6, r))) {
        e.setNumber(6, r, n);
      }
    }
  };
  t.embedDarkDotAtLeftBottomCorner = function (e) {
    if (e.get(8, e.getHeight() - 8) === 0) throw new he();
    e.setNumber(8, e.getHeight() - 8, 1);
  };
  t.embedHorizontalSeparationPattern = function (e, r, n) {
    for (var i = 0; i < 8; ++i) {
      if (!t.isEmpty(n.get(e + i, r))) throw new he();
      n.setNumber(e + i, r, 0);
    }
  };
  t.embedVerticalSeparationPattern = function (e, r, n) {
    for (var i = 0; i < 7; ++i) {
      if (!t.isEmpty(n.get(e, r + i))) throw new he();
      n.setNumber(e, r + i, 0);
    }
  };
  t.embedPositionAdjustmentPattern = function (e, r, n) {
    for (var i = 0; i < 5; ++i)
      for (var a = t.POSITION_ADJUSTMENT_PATTERN[i], o = 0; o < 5; ++o) n.setNumber(e + o, r + i, a[o]);
  };
  t.embedPositionDetectionPattern = function (e, r, n) {
    for (var i = 0; i < 7; ++i)
      for (var a = t.POSITION_DETECTION_PATTERN[i], o = 0; o < 7; ++o) n.setNumber(e + o, r + i, a[o]);
  };
  t.embedPositionDetectionPatternsAndSeparators = function (e) {
    var r = t.POSITION_DETECTION_PATTERN[0].length;
    t.embedPositionDetectionPattern(0, 0, e);
    t.embedPositionDetectionPattern(e.getWidth() - t.POSITION_DETECTION_PATTERN[0].length, 0, e);
    t.embedPositionDetectionPattern(0, e.getWidth() - t.POSITION_DETECTION_PATTERN[0].length, e);
    var n = 8;
    t.embedHorizontalSeparationPattern(0, 7, e);
    t.embedHorizontalSeparationPattern(e.getWidth() - 8, 7, e);
    t.embedHorizontalSeparationPattern(0, e.getWidth() - 8, e);
    var i = 7;
    t.embedVerticalSeparationPattern(7, 0, e);
    t.embedVerticalSeparationPattern(e.getHeight() - 7 - 1, 0, e);
    t.embedVerticalSeparationPattern(7, e.getHeight() - 7, e);
  };
  t.maybeEmbedPositionAdjustmentPatterns = function (e, r) {
    if (!(e.getVersionNumber() < 2))
      for (
        var n = e.getVersionNumber() - 1, i = t.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[n], a = 0, o = i.length;
        a !== o;
        a++
      ) {
        var s = i[a];
        if (i[a] >= 0)
          for (var c = 0; c !== o; c++) {
            var l = i[c];
            if (i[c] >= 0 && t.isEmpty(r.get(i[c], i[a]))) {
              t.embedPositionAdjustmentPattern(i[c] - 2, i[a] - 2, r);
            }
          }
      }
  };
  t.POSITION_DETECTION_PATTERN = Array.from([
    Int32Array.from([1, 1, 1, 1, 1, 1, 1]),
    Int32Array.from([1, 0, 0, 0, 0, 0, 1]),
    Int32Array.from([1, 0, 1, 1, 1, 0, 1]),
    Int32Array.from([1, 0, 1, 1, 1, 0, 1]),
    Int32Array.from([1, 0, 1, 1, 1, 0, 1]),
    Int32Array.from([1, 0, 0, 0, 0, 0, 1]),
    Int32Array.from([1, 1, 1, 1, 1, 1, 1]),
  ]);
  t.POSITION_ADJUSTMENT_PATTERN = Array.from([
    Int32Array.from([1, 1, 1, 1, 1]),
    Int32Array.from([1, 0, 0, 0, 1]),
    Int32Array.from([1, 0, 1, 0, 1]),
    Int32Array.from([1, 0, 0, 0, 1]),
    Int32Array.from([1, 1, 1, 1, 1]),
  ]);
  t.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE = Array.from([
    Int32Array.from([-1, -1, -1, -1, -1, -1, -1]),
    Int32Array.from([6, 18, -1, -1, -1, -1, -1]),
    Int32Array.from([6, 22, -1, -1, -1, -1, -1]),
    Int32Array.from([6, 26, -1, -1, -1, -1, -1]),
    Int32Array.from([6, 30, -1, -1, -1, -1, -1]),
    Int32Array.from([6, 34, -1, -1, -1, -1, -1]),
    Int32Array.from([6, 22, 38, -1, -1, -1, -1]),
    Int32Array.from([6, 24, 42, -1, -1, -1, -1]),
    Int32Array.from([6, 26, 46, -1, -1, -1, -1]),
    Int32Array.from([6, 28, 50, -1, -1, -1, -1]),
    Int32Array.from([6, 30, 54, -1, -1, -1, -1]),
    Int32Array.from([6, 32, 58, -1, -1, -1, -1]),
    Int32Array.from([6, 34, 62, -1, -1, -1, -1]),
    Int32Array.from([6, 26, 46, 66, -1, -1, -1]),
    Int32Array.from([6, 26, 48, 70, -1, -1, -1]),
    Int32Array.from([6, 26, 50, 74, -1, -1, -1]),
    Int32Array.from([6, 30, 54, 78, -1, -1, -1]),
    Int32Array.from([6, 30, 56, 82, -1, -1, -1]),
    Int32Array.from([6, 30, 58, 86, -1, -1, -1]),
    Int32Array.from([6, 34, 62, 90, -1, -1, -1]),
    Int32Array.from([6, 28, 50, 72, 94, -1, -1]),
    Int32Array.from([6, 26, 50, 74, 98, -1, -1]),
    Int32Array.from([6, 30, 54, 78, 102, -1, -1]),
    Int32Array.from([6, 28, 54, 80, 106, -1, -1]),
    Int32Array.from([6, 32, 58, 84, 110, -1, -1]),
    Int32Array.from([6, 30, 58, 86, 114, -1, -1]),
    Int32Array.from([6, 34, 62, 90, 118, -1, -1]),
    Int32Array.from([6, 26, 50, 74, 98, 122, -1]),
    Int32Array.from([6, 30, 54, 78, 102, 126, -1]),
    Int32Array.from([6, 26, 52, 78, 104, 130, -1]),
    Int32Array.from([6, 30, 56, 82, 108, 134, -1]),
    Int32Array.from([6, 34, 60, 86, 112, 138, -1]),
    Int32Array.from([6, 30, 58, 86, 114, 142, -1]),
    Int32Array.from([6, 34, 62, 90, 118, 146, -1]),
    Int32Array.from([6, 30, 54, 78, 102, 126, 150]),
    Int32Array.from([6, 24, 50, 76, 102, 128, 154]),
    Int32Array.from([6, 28, 54, 80, 106, 132, 158]),
    Int32Array.from([6, 32, 58, 84, 110, 136, 162]),
    Int32Array.from([6, 26, 54, 82, 110, 138, 166]),
    Int32Array.from([6, 30, 58, 86, 114, 142, 170]),
  ]);
  t.TYPE_INFO_COORDINATES = Array.from([
    Int32Array.from([8, 0]),
    Int32Array.from([8, 1]),
    Int32Array.from([8, 2]),
    Int32Array.from([8, 3]),
    Int32Array.from([8, 4]),
    Int32Array.from([8, 5]),
    Int32Array.from([8, 7]),
    Int32Array.from([8, 8]),
    Int32Array.from([7, 8]),
    Int32Array.from([5, 8]),
    Int32Array.from([4, 8]),
    Int32Array.from([3, 8]),
    Int32Array.from([2, 8]),
    Int32Array.from([1, 8]),
    Int32Array.from([0, 8]),
  ]);
  t.VERSION_INFO_POLY = 7973;
  t.TYPE_INFO_POLY = 1335;
  t.TYPE_INFO_MASK_PATTERN = 21522;
  return t;
})();
var ld = (function () {
  function t(e, r) {
    this.dataBytes = e;
    this.errorCorrectionBytes = r;
  }
  t.prototype.getDataBytes = function () {
    return this.dataBytes;
  };
  t.prototype.getErrorCorrectionBytes = function () {
    return this.errorCorrectionBytes;
  };
  return t;
})();
var Ja = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
(function () {
  function t() {}
  t.calculateMaskPenalty = function (e) {
    return (
      Er.applyMaskPenaltyRule1(e) +
      Er.applyMaskPenaltyRule2(e) +
      Er.applyMaskPenaltyRule3(e) +
      Er.applyMaskPenaltyRule4(e)
    );
  };
  t.encode = function (e, r, n) {
    if (n === void 0) {
      n = null;
    }
    var i = t.DEFAULT_BYTE_MODE_ENCODING;
    var a = n !== null && n.get(fi.CHARACTER_SET) !== void 0;
    if (a) {
      i = n.get(fi.CHARACTER_SET).toString();
    }
    var o = this.chooseMode(e, i);
    var s = new ke();
    if (o === de.BYTE && (a || t.DEFAULT_BYTE_MODE_ENCODING !== i)) {
      var c = Ie.getCharacterSetECIByName(i);
      if (c !== void 0) {
        this.appendECI(c, s);
      }
    }
    this.appendModeInfo(o, s);
    var l = new ke();
    this.appendBytes(e, o, l, i);
    var f;
    if (n !== null && n.get(fi.QR_VERSION) !== void 0) {
      var u = Number.parseInt(n.get(fi.QR_VERSION).toString(), 10);
      f = Jt.getVersionForNumber(u);
      var h = this.calculateBitsNeeded(o, s, l, f);
      if (!this.willFit(h, f, r)) throw new he('Data too big for requested version');
    } else f = this.recommendVersion(r, o, s, l);
    var d = new ke();
    d.appendBitArray(s);
    var p = o === de.BYTE ? l.getSizeInBytes() : e.length;
    this.appendLengthInfo(p, f, o, d);
    d.appendBitArray(l);
    var v = f.getECBlocksForLevel(r);
    var g = f.getTotalCodewords() - v.getTotalECCodewords();
    this.terminateBits(g, d);
    var _ = this.interleaveWithECBytes(d, f.getTotalCodewords(), g, v.getNumBlocks());
    var y = new ui();
    y.setECLevel(r);
    y.setMode(o);
    y.setVersion(f);
    var x = f.getDimensionForVersion();
    var w = new sd(x, x);
    var C = this.chooseMaskPattern(_, r, f, w);
    y.setMaskPattern(C);
    $a.buildMatrix(_, r, f, C, w);
    y.setMatrix(w);
    return y;
  };
  t.recommendVersion = function (e, r, n, i) {
    var a = this.calculateBitsNeeded(r, n, i, Jt.getVersionForNumber(1));
    var o = this.chooseVersion(a, e);
    var s = this.calculateBitsNeeded(r, n, i, o);
    return this.chooseVersion(s, e);
  };
  t.calculateBitsNeeded = function (e, r, n, i) {
    return r.getSize() + e.getCharacterCountBits(i) + n.getSize();
  };
  t.getAlphanumericCode = function (e) {
    return e < t.ALPHANUMERIC_TABLE.length ? t.ALPHANUMERIC_TABLE[e] : -1;
  };
  t.chooseMode = function (e, r) {
    if (r === void 0) {
      r = null;
    }
    if (Ie.SJIS.getName() === r && this.isOnlyDoubleByteKanji(e)) return de.KANJI;
    for (var n = false, i = false, a = 0, o = e.length; a < o; ++a) {
      var s = e.charAt(a);
      if (t.isDigit(s)) n = true;
      else if (this.getAlphanumericCode(s.charCodeAt(0)) !== -1) i = true;
      else return de.BYTE;
    }
    return i ? de.ALPHANUMERIC : n ? de.NUMERIC : de.BYTE;
  };
  t.isOnlyDoubleByteKanji = function (e) {
    var r;
    try {
      r = ut.encode(e, Ie.SJIS);
    } catch {
      return false;
    }
    var n = r.length;
    if (r.length % 2 !== 0) return false;
    for (var i = 0; i < r.length; i += 2) {
      var a = r[i] & 255;
      if ((a < 129 || a > 159) && (a < 224 || a > 235)) return false;
    }
    return true;
  };
  t.chooseMaskPattern = function (e, r, n, i) {
    for (var a = Number.MAX_SAFE_INTEGER, o = -1, s = 0; s < 8; s++) {
      $a.buildMatrix(e, r, n, s, i);
      var c = this.calculateMaskPenalty(i);
      if (c < a) {
        a = c;
        o = s;
      }
    }
    return o;
  };
  t.chooseVersion = function (e, r) {
    for (var n = 1; n <= 40; n++) {
      var i = Jt.getVersionForNumber(n);
      if (t.willFit(e, i, r)) return i;
    }
    throw new he('Data too big');
  };
  t.willFit = function (e, r, n) {
    var i = r.getTotalCodewords();
    var a = r.getECBlocksForLevel(n);
    var o = a.getTotalECCodewords();
    var s = i - o;
    var c = (e + 7) / 8;
    return s >= c;
  };
  t.terminateBits = function (e, r) {
    var n = e * 8;
    if (r.getSize() > n) throw new he('data bits cannot fit in the QR Code' + r.getSize() + ' > ' + n);
    for (var i = 0; i < 4 && r.getSize() < n; ++i) r.appendBit(false);
    var a = r.getSize() & 7;
    if (a > 0) for (var i = a; i < 8; i++) r.appendBit(false);
    for (var o = e - r.getSizeInBytes(), i = 0; i < o; ++i) r.appendBits((i & 1) === 0 ? 236 : 17, 8);
    if (r.getSize() !== n) throw new he('Bits size does not equal capacity');
  };
  t.getNumDataBytesAndNumECBytesForBlockID = function (e, r, n, i, a, o) {
    if (i >= n) throw new he('Block ID too large');
    var s = e % n;
    var c = n - s;
    var l = Math.floor(e / n);
    var f = l + 1;
    var u = Math.floor(r / n);
    var h = u + 1;
    var d = l - u;
    var p = f - h;
    if (d !== p) throw new he('EC bytes mismatch');
    if (n !== c + s) throw new he('RS blocks mismatch');
    if (e !== (u + d) * c + (h + p) * s) throw new he('Total bytes mismatch');
    i < c ? ((a[0] = u), (o[0] = d)) : ((a[0] = h), (o[0] = p));
  };
  t.interleaveWithECBytes = function (e, r, n, i) {
    var a;
    var o;
    var s;
    var c;
    if (e.getSizeInBytes() !== n) throw new he('Number of bits and data bytes does not match');
    for (var l = 0, f = 0, u = 0, h = new Array(), d = 0; d < i; ++d) {
      var p = new Int32Array(1);
      var v = new Int32Array(1);
      t.getNumDataBytesAndNumECBytesForBlockID(r, n, i, d, p, v);
      var g = p[0];
      var _ = new Uint8Array(p[0]);
      e.toBytes(8 * l, _, 0, p[0]);
      var y = t.generateECBytes(_, 0);
      h.push(new ld(_, y));
      f = Math.max(f, p[0]);
      u = Math.max(u, y.length);
      l += p[0];
    }
    if (n !== l) throw new he('Data bytes does not match offset');
    for (var x = new ke(), d = 0; d < f; ++d)
      try {
        for (var w = ((a = void 0), Ja(h)), C = w.next(); !C.done; C = w.next()) {
          var S = C.value;
          var _ = C.value.getDataBytes();
          if (d < _.length) {
            x.appendBits(_[d], 8);
          }
        }
      } catch (R) {
        a = { error: R };
      } finally {
        try {
          if (C && !C.done && (o = w.return)) {
            o.call(w);
          }
        } finally {
          if (a) throw a.error;
        }
      }
    for (var d = 0; d < u; ++d)
      try {
        for (var T = ((s = void 0), Ja(h)), D = T.next(); !D.done; D = T.next()) {
          var S = D.value;
          var y = D.value.getErrorCorrectionBytes();
          if (d < y.length) {
            x.appendBits(y[d], 8);
          }
        }
      } catch (R) {
        s = { error: R };
      } finally {
        try {
          if (D && !D.done && (c = T.return)) {
            c.call(T);
          }
        } finally {
          if (s) throw s.error;
        }
      }
    if (r !== x.getSizeInBytes()) throw new he('Interleaving error: ' + r + ' and ' + x.getSizeInBytes() + ' differ.');
    return x;
  };
  t.generateECBytes = function (e, r) {
    for (var n = e.length, i = new Int32Array(n + r), a = 0; a < n; a++) i[a] = e[a] & 255;
    new As(et.QR_CODE_FIELD_256).encode(i, r);
    for (var o = new Uint8Array(r), a = 0; a < r; a++) o[a] = i[n + a];
    return o;
  };
  t.appendModeInfo = function (e, r) {
    r.appendBits(e.getBits(), 4);
  };
  t.appendLengthInfo = function (e, r, n, i) {
    var a = n.getCharacterCountBits(r);
    if (e >= 1 << a) throw new he(e + ' is bigger than ' + ((1 << a) - 1));
    i.appendBits(e, a);
  };
  t.appendBytes = function (e, r, n, i) {
    switch (r) {
      case de.NUMERIC:
        t.appendNumericBytes(e, n);
        break;
      case de.ALPHANUMERIC:
        t.appendAlphanumericBytes(e, n);
        break;
      case de.BYTE:
        t.append8BitBytes(e, n, i);
        break;
      case de.KANJI:
        t.appendKanjiBytes(e, n);
        break;
      default:
        throw new he('Invalid mode: ' + r);
    }
  };
  t.getDigit = function (e) {
    return e.charCodeAt(0) - 48;
  };
  t.isDigit = function (e) {
    var r = t.getDigit(e);
    return r >= 0 && r <= 9;
  };
  t.appendNumericBytes = function (e, r) {
    for (var n = e.length, i = 0; i < n; ) {
      var a = t.getDigit(e.charAt(i));
      if (i + 2 < n) {
        var o = t.getDigit(e.charAt(i + 1));
        var s = t.getDigit(e.charAt(i + 2));
        r.appendBits(a * 100 + o * 10 + s, 10);
        i += 3;
      } else if (i + 1 < n) {
        var o = t.getDigit(e.charAt(i + 1));
        r.appendBits(a * 10 + o, 7);
        i += 2;
      } else {
        r.appendBits(a, 4);
        i++;
      }
    }
  };
  t.appendAlphanumericBytes = function (e, r) {
    for (var n = e.length, i = 0; i < n; ) {
      var a = t.getAlphanumericCode(e.charCodeAt(i));
      if (a === -1) throw new he();
      if (i + 1 < n) {
        var o = t.getAlphanumericCode(e.charCodeAt(i + 1));
        if (o === -1) throw new he();
        r.appendBits(a * 45 + o, 11);
        i += 2;
      } else {
        r.appendBits(a, 6);
        i++;
      }
    }
  };
  t.append8BitBytes = function (e, r, n) {
    var i;
    try {
      i = ut.encode(e, n);
    } catch (c) {
      throw new he(c);
    }
    for (var a = 0, o = i.length; a !== o; a++) {
      var s = i[a];
      r.appendBits(i[a], 8);
    }
  };
  t.appendKanjiBytes = function (e, r) {
    var n;
    try {
      n = ut.encode(e, Ie.SJIS);
    } catch (u) {
      throw new he(u);
    }
    for (var i = n.length, a = 0; a < i; a += 2) {
      var o = n[a] & 255;
      var s = n[a + 1] & 255;
      var c = ((o << 8) & 4294967295) | s;
      var l = -1;
      c >= 33088 && c <= 40956 ? (l = c - 33088) : c >= 57408 && c <= 60351 && (l = c - 49472);
      if (l === -1) throw new he('Invalid byte sequence');
      var f = (l >> 8) * 192 + (l & 255);
      r.appendBits(f, 13);
    }
  };
  t.appendECI = function (e, r) {
    r.appendBits(de.ECI.getBits(), 4);
    r.appendBits(e.getValue(), 8);
  };
  t.ALPHANUMERIC_TABLE = Int32Array.from([
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, 36, -1, -1, -1, 37, 38, -1, -1, -1, -1, 39, 40, -1, 41, 42, 43, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 44, -1,
    -1, -1, -1, -1, -1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33,
    34, 35, -1, -1, -1, -1, -1,
  ]);
  t.DEFAULT_BYTE_MODE_ENCODING = Ie.UTF8.getName();
  return t;
})();
var fd = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
(function (t) {
  fd(e, t);
  function e(r, n, i, a, o, s, c, l) {
    var f = t(s, c) || this;
    f.yuvData = r;
    f.dataWidth = n;
    f.dataHeight = i;
    f.left = a;
    f.top = o;
    if (a + s > n || o + c > i) throw new z('Crop rectangle does not fit within image data.');
    if (l) {
      f.reverseHorizontal(s, c);
    }
    return f;
  }
  e.prototype.getRow = function (r, n) {
    if (r < 0 || r >= this.getHeight()) throw new z('Requested row is outside the image: ' + r);
    var i = this.getWidth();
    if (n == null || n.length < i) {
      n = new Uint8ClampedArray(i);
    }
    var a = (r + this.top) * this.dataWidth + this.left;
    ue.arraycopy(this.yuvData, a, n, 0, i);
    return n;
  };
  e.prototype.getMatrix = function () {
    var r = this.getWidth();
    var n = this.getHeight();
    if (r === this.dataWidth && n === this.dataHeight) return this.yuvData;
    var i = r * n;
    var a = new Uint8ClampedArray(i);
    var o = this.top * this.dataWidth + this.left;
    if (r === this.dataWidth) {
      ue.arraycopy(this.yuvData, o, a, 0, i);
      return a;
    }
    for (var s = 0; s < n; s++) {
      var c = s * r;
      ue.arraycopy(this.yuvData, o, a, c, r);
      o += this.dataWidth;
    }
    return a;
  };
  e.prototype.isCropSupported = function () {
    return true;
  };
  e.prototype.crop = function (r, n, i, a) {
    return new e(this.yuvData, this.dataWidth, this.dataHeight, this.left + r, this.top + n, i, a, false);
  };
  e.prototype.renderThumbnail = function () {
    for (
      var r = this.getWidth() / e.THUMBNAIL_SCALE_FACTOR,
        n = this.getHeight() / e.THUMBNAIL_SCALE_FACTOR,
        i = new Int32Array(r * n),
        a = this.yuvData,
        o = this.top * this.dataWidth + this.left,
        s = 0;
      s < n;
      s++
    ) {
      for (var c = s * r, l = 0; l < r; l++) {
        var f = a[o + l * e.THUMBNAIL_SCALE_FACTOR] & 255;
        i[c + l] = 4278190080 | (f * 65793);
      }
      o += this.dataWidth * e.THUMBNAIL_SCALE_FACTOR;
    }
    return i;
  };
  e.prototype.getThumbnailWidth = function () {
    return this.getWidth() / e.THUMBNAIL_SCALE_FACTOR;
  };
  e.prototype.getThumbnailHeight = function () {
    return this.getHeight() / e.THUMBNAIL_SCALE_FACTOR;
  };
  e.prototype.reverseHorizontal = function (r, n) {
    for (var i = this.yuvData, a = 0, o = this.top * this.dataWidth + this.left; a < n; a++, o += this.dataWidth)
      for (var s = o + r / 2, c = o, l = o + r - 1; c < s; c++, l--) {
        var f = i[c];
        i[c] = i[l];
        i[l] = i[c];
      }
  };
  e.prototype.invert = function () {
    return new Ji(this);
  };
  e.THUMBNAIL_SCALE_FACTOR = 2;
  return e;
})(Rn);
var ud = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
(function (t) {
  ud(e, t);
  function e(r, n, i, a, o, s, c) {
    var l = t(n, i) || this;
    l.dataWidth = a;
    l.dataHeight = o;
    l.left = s;
    l.top = c;
    if (r.BYTES_PER_ELEMENT === 4) {
      for (var f = n * i, u = new Uint8ClampedArray(f), h = 0; h < f; h++) {
        var d = r[h];
        var p = (r[h] >> 16) & 255;
        var v = (r[h] >> 7) & 510;
        var g = r[h] & 255;
        u[h] = ((p + v + g) / 4) & 255;
      }
      l.luminances = u;
    } else l.luminances = r;
    if (a === void 0) {
      l.dataWidth = n;
    }
    if (o === void 0) {
      l.dataHeight = i;
    }
    if (s === void 0) {
      l.left = 0;
    }
    if (c === void 0) {
      l.top = 0;
    }
    if (l.left + n > l.dataWidth || l.top + i > l.dataHeight)
      throw new z('Crop rectangle does not fit within image data.');
    return l;
  }
  e.prototype.getRow = function (r, n) {
    if (r < 0 || r >= this.getHeight()) throw new z('Requested row is outside the image: ' + r);
    var i = this.getWidth();
    if (n == null || n.length < i) {
      n = new Uint8ClampedArray(i);
    }
    var a = (r + this.top) * this.dataWidth + this.left;
    ue.arraycopy(this.luminances, a, n, 0, i);
    return n;
  };
  e.prototype.getMatrix = function () {
    var r = this.getWidth();
    var n = this.getHeight();
    if (r === this.dataWidth && n === this.dataHeight) return this.luminances;
    var i = r * n;
    var a = new Uint8ClampedArray(i);
    var o = this.top * this.dataWidth + this.left;
    if (r === this.dataWidth) {
      ue.arraycopy(this.luminances, o, a, 0, i);
      return a;
    }
    for (var s = 0; s < n; s++) {
      var c = s * r;
      ue.arraycopy(this.luminances, o, a, c, r);
      o += this.dataWidth;
    }
    return a;
  };
  e.prototype.isCropSupported = function () {
    return true;
  };
  e.prototype.crop = function (r, n, i, a) {
    return new e(this.luminances, i, a, this.dataWidth, this.dataHeight, this.left + r, this.top + n);
  };
  e.prototype.invert = function () {
    return new Ji(this);
  };
  return e;
})(Rn);
var hd = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var dd = (function (t) {
  hd(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.forName = function (r) {
    return this.getCharacterSetECIByName(r);
  };
  return e;
})(Ie);
var pd = (function () {
  function t() {}
  t.ISO_8859_1 = Ie.ISO8859_1;
  return t;
})();
var hi;
var vd = 301;
var gd = function (t, e) {
  for (var r = 1, n = 0; n < 255; n++) {
    e[n] = r;
    t[r] = n;
    r *= 2;
    if (r >= 256) {
      r ^= 301;
    }
  }
  return {
    LOG: t,
    ALOG: e,
  };
};
{
  hi = gd([], []);
  hi.LOG;
}
hi.ALOG;
var qa;
(function (t) {
  t[(t.FORCE_NONE = 0)] = 'FORCE_NONE';
  t[(t.FORCE_SQUARE = 1)] = 'FORCE_SQUARE';
  t[(t.FORCE_RECTANGLE = 2)] = 'FORCE_RECTANGLE';
})(qa || (qa = {}));
var Ya = 129;
var Is = 230;
var _d = 231;
var md = 235;
var xd = 236;
var yd = 237;
var wd = 238;
var Ed = 239;
var Cd = 240;
var Xn = 254;
var Sd = 254;
var Ka = '[)>\x1E05\x1D';
var Za = '[)>\x1E06\x1D';
var Qa = '\x1E\x04';
var le = 0;
var Le = 1;
var Je = 2;
var Se = 3;
var Re = 4;
var He = 5;
var Ad = (function () {
  function t() {}
  t.prototype.getEncodingMode = function () {
    return le;
  };
  t.prototype.encode = function (e) {
    var r = gt.determineConsecutiveDigitCount(e.getMessage(), e.pos);
    if (r >= 2) {
      e.writeCodeword(this.encodeASCIIDigits(e.getMessage().charCodeAt(e.pos), e.getMessage().charCodeAt(e.pos + 1)));
      e.pos += 2;
    } else {
      var n = e.getCurrentChar();
      var i = gt.lookAheadTest(e.getMessage(), e.pos, this.getEncodingMode());
      if (i !== this.getEncodingMode())
        switch (i) {
          case He:
            {
              e.writeCodeword(231);
              e.signalEncoderChange(He);
            }
            return;
          case Le:
            {
              e.writeCodeword(230);
              e.signalEncoderChange(Le);
            }
            return;
          case Se:
            {
              e.writeCodeword(238);
              e.signalEncoderChange(Se);
            }
            break;
          case Je:
            {
              e.writeCodeword(239);
              e.signalEncoderChange(Je);
            }
            break;
          case Re:
            {
              e.writeCodeword(240);
              e.signalEncoderChange(Re);
            }
            break;
          default:
            throw new Error('Illegal mode: ' + i);
        }
      else
        gt.isExtendedASCII(n)
          ? (e.writeCodeword(235), e.writeCodeword(n - 128 + 1), e.pos++)
          : (e.writeCodeword(n + 1), e.pos++);
    }
  };
  t.prototype.encodeASCIIDigits = function (e, r) {
    if (gt.isDigit(e) && gt.isDigit(r)) {
      var n = (e - 48) * 10 + (r - 48);
      return n + 130;
    }
    throw new Error('not digits: ' + e + r);
  };
  return t;
})();
var Id = (function () {
  function t() {}
  t.prototype.getEncodingMode = function () {
    return He;
  };
  t.prototype.encode = function (e) {
    var r = new K();
    for (r.append(0); e.hasMoreCharacters(); ) {
      var n = e.getCurrentChar();
      r.append(n);
      e.pos++;
      var i = gt.lookAheadTest(e.getMessage(), e.pos, this.getEncodingMode());
      if (i !== this.getEncodingMode()) {
        e.signalEncoderChange(le);
        break;
      }
    }
    var a = r.length() - 1;
    var o = 1;
    var s = e.getCodewordCount() + a + 1;
    e.updateSymbolInfo(s);
    var c = e.getSymbolInfo().getDataCapacity() - s > 0;
    if (e.hasMoreCharacters() || c)
      if (a <= 249) r.setCharAt(0, ee.getCharAt(a));
      else if (a <= 1555) {
        r.setCharAt(0, ee.getCharAt(Math.floor(a / 250) + 249));
        r.insert(1, ee.getCharAt(a % 250));
      } else throw new Error('Message length not in valid ranges: ' + a);
    for (var l = 0, n = r.length(); l < n; l++)
      e.writeCodeword(this.randomize255State(r.charAt(l).charCodeAt(0), e.getCodewordCount() + 1));
  };
  t.prototype.randomize255State = function (e, r) {
    var n = ((149 * r) % 255) + 1;
    var i = e + n;
    return i <= 255 ? i : i - 256;
  };
  return t;
})();
var Qi = (function () {
  function t() {}
  t.prototype.getEncodingMode = function () {
    return Le;
  };
  t.prototype.encodeMaximal = function (e) {
    for (var r = new K(), n = 0, i = e.pos, a = 0; e.hasMoreCharacters(); ) {
      var o = e.getCurrentChar();
      e.pos++;
      n = this.encodeChar(o, r);
      if (r.length() % 3 === 0) {
        i = e.pos;
        a = r.length();
      }
    }
    if (a !== r.length()) {
      var s = Math.floor((r.length() / 3) * 2);
      var c = Math.floor(e.getCodewordCount() + s + 1);
      e.updateSymbolInfo(c);
      var l = e.getSymbolInfo().getDataCapacity() - c;
      var f = Math.floor(r.length() % 3);
      if ((f === 2 && l !== 2) || (f === 1 && (n > 3 || l !== 1))) {
        e.pos = i;
      }
    }
    if (r.length() > 0) {
      e.writeCodeword(230);
    }
    this.handleEOD(e, r);
  };
  t.prototype.encode = function (e) {
    for (var r = new K(); e.hasMoreCharacters(); ) {
      var n = e.getCurrentChar();
      e.pos++;
      var i = this.encodeChar(n, r);
      var a = Math.floor(r.length() / 3) * 2;
      var o = e.getCodewordCount() + a;
      e.updateSymbolInfo(o);
      var s = e.getSymbolInfo().getDataCapacity() - o;
      if (!e.hasMoreCharacters()) {
        var c = new K();
        for (
          r.length() % 3 === 2 && s !== 2 && (i = this.backtrackOneCharacter(e, r, c, i));
          r.length() % 3 === 1 && (i > 3 || s !== 1);

        )
          i = this.backtrackOneCharacter(e, r, c, i);
        break;
      }
      var l = r.length();
      if (l % 3 === 0) {
        var f = gt.lookAheadTest(e.getMessage(), e.pos, this.getEncodingMode());
        if (f !== this.getEncodingMode()) {
          e.signalEncoderChange(le);
          break;
        }
      }
    }
    this.handleEOD(e, r);
  };
  t.prototype.backtrackOneCharacter = function (e, r, n, i) {
    var a = r.length();
    var o = r.toString().substring(0, a - i);
    r.setLengthToZero();
    r.append(o);
    e.pos--;
    var s = e.getCurrentChar();
    i = this.encodeChar(s, n);
    e.resetSymbolInfo();
    return i;
  };
  t.prototype.writeNextTriplet = function (e, r) {
    e.writeCodewords(this.encodeToCodewords(r.toString()));
    var n = r.toString().substring(3);
    r.setLengthToZero();
    r.append(n);
  };
  t.prototype.handleEOD = function (e, r) {
    var n = Math.floor((r.length() / 3) * 2);
    var i = r.length() % 3;
    var a = e.getCodewordCount() + n;
    e.updateSymbolInfo(a);
    var o = e.getSymbolInfo().getDataCapacity() - a;
    if (i === 2) {
      for (r.append('\0'); r.length() >= 3; ) this.writeNextTriplet(e, r);
      if (e.hasMoreCharacters()) {
        e.writeCodeword(254);
      }
    } else if (o === 1 && i === 1) {
      for (; r.length() >= 3; ) this.writeNextTriplet(e, r);
      if (e.hasMoreCharacters()) {
        e.writeCodeword(254);
      }
      e.pos--;
    } else if (i === 0) {
      for (; r.length() >= 3; ) this.writeNextTriplet(e, r);
      if (o > 0 || e.hasMoreCharacters()) {
        e.writeCodeword(254);
      }
    } else throw new Error('Unexpected case. Please report!');
    e.signalEncoderChange(le);
  };
  t.prototype.encodeChar = function (e, r) {
    if (e === 32) {
      r.append(3);
      return 1;
    }
    if (e >= 48 && e <= 57) {
      r.append(e - 48 + 4);
      return 1;
    }
    if (e >= 65 && e <= 90) {
      r.append(e - 65 + 14);
      return 1;
    }
    if (e < 32) {
      r.append(0);
      r.append(e);
      return 2;
    }
    if (e <= 47) {
      r.append(1);
      r.append(e - 33);
      return 2;
    }
    if (e <= 64) {
      r.append(1);
      r.append(e - 58 + 15);
      return 2;
    }
    if (e <= 95) {
      r.append(1);
      r.append(e - 91 + 22);
      return 2;
    }
    if (e <= 127) {
      r.append(2);
      r.append(e - 96);
      return 2;
    }
    r.append('1\x1E');
    var n = 2;
    n += this.encodeChar(e - 128, r);
    return n;
  };
  t.prototype.encodeToCodewords = function (e) {
    var r = 1600 * e.charCodeAt(0) + 40 * e.charCodeAt(1) + e.charCodeAt(2) + 1;
    var n = r / 256;
    var i = r % 256;
    var a = new K();
    a.append(n);
    a.append(i);
    return a.toString();
  };
  return t;
})();
var Td = (function () {
  function t() {}
  t.prototype.getEncodingMode = function () {
    return Re;
  };
  t.prototype.encode = function (e) {
    for (var r = new K(); e.hasMoreCharacters(); ) {
      var n = e.getCurrentChar();
      this.encodeChar(n, r);
      e.pos++;
      var i = r.length();
      if (i >= 4) {
        e.writeCodewords(this.encodeToCodewords(r.toString()));
        var a = r.toString().substring(4);
        r.setLengthToZero();
        r.append(a);
        var o = gt.lookAheadTest(e.getMessage(), e.pos, this.getEncodingMode());
        if (o !== this.getEncodingMode()) {
          e.signalEncoderChange(le);
          break;
        }
      }
    }
    r.append(ee.getCharAt(31));
    this.handleEOD(e, r);
  };
  t.prototype.handleEOD = function (e, r) {
    try {
      var n = r.length();
      if (n === 0) return;
      if (n === 1) {
        e.updateSymbolInfo();
        var i = e.getSymbolInfo().getDataCapacity() - e.getCodewordCount();
        var a = e.getRemainingCharacters();
        if (a > i) {
          e.updateSymbolInfo(e.getCodewordCount() + 1);
          i = e.getSymbolInfo().getDataCapacity() - e.getCodewordCount();
        }
        if (a <= i && i <= 2) return;
      }
      if (n > 4) throw new Error('Count must not exceed 4');
      var o = n - 1;
      var s = this.encodeToCodewords(r.toString());
      var c = !e.hasMoreCharacters();
      var l = c && o <= 2;
      if (o <= 2) {
        e.updateSymbolInfo(e.getCodewordCount() + o);
        var i = e.getSymbolInfo().getDataCapacity() - e.getCodewordCount();
        if (i >= 3) {
          l = false;
          e.updateSymbolInfo(e.getCodewordCount() + s.length);
        }
      }
      l ? (e.resetSymbolInfo(), (e.pos -= o)) : e.writeCodewords(s);
    } finally {
      e.signalEncoderChange(le);
    }
  };
  t.prototype.encodeChar = function (e, r) {
    e >= 32 && e <= 63
      ? r.append(e)
      : e >= 64 && e <= 94
        ? r.append(ee.getCharAt(e - 64))
        : gt.illegalCharacter(ee.getCharAt(e));
  };
  t.prototype.encodeToCodewords = function (e) {
    var r = e.length;
    if (e.length === 0) throw new Error('StringBuilder must not be empty');
    var n = e.charAt(0).charCodeAt(0);
    var i = e.length >= 2 ? e.charAt(1).charCodeAt(0) : 0;
    var a = e.length >= 3 ? e.charAt(2).charCodeAt(0) : 0;
    var o = e.length >= 4 ? e.charAt(3).charCodeAt(0) : 0;
    var s = (n << 18) + (i << 12) + (a << 6) + o;
    var c = (s >> 16) & 255;
    var l = (s >> 8) & 255;
    var f = s & 255;
    var u = new K();
    u.append(c);
    if (e.length >= 2) {
      u.append(l);
    }
    if (e.length >= 3) {
      u.append(f);
    }
    return u.toString();
  };
  return t;
})();
var bd = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Nd = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var ae = (function () {
  function t(e, r, n, i, a, o, s, c) {
    if (s === void 0) {
      s = 0;
    }
    if (c === void 0) {
      c = 0;
    }
    this.rectangular = e;
    this.dataCapacity = r;
    this.errorCodewords = n;
    this.matrixWidth = i;
    this.matrixHeight = a;
    this.dataRegions = o;
    this.rsBlockData = s;
    this.rsBlockError = c;
  }
  t.lookup = function (e, r, n, i, a) {
    var o;
    var s;
    if (r === void 0) {
      r = 0;
    }
    if (n === void 0) {
      n = null;
    }
    if (i === void 0) {
      i = null;
    }
    if (a === void 0) {
      a = true;
    }
    try {
      for (var c = Nd(Dd), l = c.next(); !l.done; l = c.next()) {
        var f = l.value;
        if (
          !(r === 1 && l.value.rectangular) &&
          !(r === 2 && !l.value.rectangular) &&
          !(n != null && (l.value.getSymbolWidth() < n.getWidth() || l.value.getSymbolHeight() < n.getHeight())) &&
          !(i != null && (l.value.getSymbolWidth() > i.getWidth() || l.value.getSymbolHeight() > i.getHeight())) &&
          e <= l.value.dataCapacity
        )
          return l.value;
      }
    } catch (u) {
      o = { error: u };
    } finally {
      try {
        if (l && !l.done && (s = c.return)) {
          s.call(c);
        }
      } finally {
        if (o) throw o.error;
      }
    }
    if (a) throw new Error("Can't find a symbol arrangement that matches the message. Data codewords: " + e);
    return null;
  };
  t.prototype.getHorizontalDataRegions = function () {
    switch (this.dataRegions) {
      case 1:
        return 1;
      case 2:
      case 4:
        return 2;
      case 16:
        return 4;
      case 36:
        return 6;
      default:
        throw new Error('Cannot handle this number of data regions');
    }
  };
  t.prototype.getVerticalDataRegions = function () {
    switch (this.dataRegions) {
      case 1:
      case 2:
        return 1;
      case 4:
        return 2;
      case 16:
        return 4;
      case 36:
        return 6;
      default:
        throw new Error('Cannot handle this number of data regions');
    }
  };
  t.prototype.getSymbolDataWidth = function () {
    return this.getHorizontalDataRegions() * this.matrixWidth;
  };
  t.prototype.getSymbolDataHeight = function () {
    return this.getVerticalDataRegions() * this.matrixHeight;
  };
  t.prototype.getSymbolWidth = function () {
    return this.getSymbolDataWidth() + this.getHorizontalDataRegions() * 2;
  };
  t.prototype.getSymbolHeight = function () {
    return this.getSymbolDataHeight() + this.getVerticalDataRegions() * 2;
  };
  t.prototype.getCodewordCount = function () {
    return this.dataCapacity + this.errorCodewords;
  };
  t.prototype.getInterleavedBlockCount = function () {
    return this.rsBlockData ? this.dataCapacity / this.rsBlockData : 1;
  };
  t.prototype.getDataCapacity = function () {
    return this.dataCapacity;
  };
  t.prototype.getErrorCodewords = function () {
    return this.errorCodewords;
  };
  t.prototype.getDataLengthForInterleavedBlock = function (e) {
    return this.rsBlockData;
  };
  t.prototype.getErrorLengthForInterleavedBlock = function (e) {
    return this.rsBlockError;
  };
  return t;
})();
var Od = (function (t) {
  bd(e, t);
  function e() {
    return t(false, 1558, 620, 22, 22, 36, -1, 62) || this;
  }
  e.prototype.getInterleavedBlockCount = function () {
    return 10;
  };
  e.prototype.getDataLengthForInterleavedBlock = function (r) {
    return r <= 8 ? 156 : 155;
  };
  return e;
})(ae);
var Dd = [
  new ae(false, 3, 5, 8, 8, 1),
  new ae(false, 5, 7, 10, 10, 1),
  new ae(true, 5, 7, 16, 6, 1),
  new ae(false, 8, 10, 12, 12, 1),
  new ae(true, 10, 11, 14, 6, 2),
  new ae(false, 12, 12, 14, 14, 1),
  new ae(true, 16, 14, 24, 10, 1),
  new ae(false, 18, 14, 16, 16, 1),
  new ae(false, 22, 18, 18, 18, 1),
  new ae(true, 22, 18, 16, 10, 2),
  new ae(false, 30, 20, 20, 20, 1),
  new ae(true, 32, 24, 16, 14, 2),
  new ae(false, 36, 24, 22, 22, 1),
  new ae(false, 44, 28, 24, 24, 1),
  new ae(true, 49, 28, 22, 14, 2),
  new ae(false, 62, 36, 14, 14, 4),
  new ae(false, 86, 42, 16, 16, 4),
  new ae(false, 114, 48, 18, 18, 4),
  new ae(false, 144, 56, 20, 20, 4),
  new ae(false, 174, 68, 22, 22, 4),
  new ae(false, 204, 84, 24, 24, 4, 102, 42),
  new ae(false, 280, 112, 14, 14, 16, 140, 56),
  new ae(false, 368, 144, 16, 16, 16, 92, 36),
  new ae(false, 456, 192, 18, 18, 16, 114, 48),
  new ae(false, 576, 224, 20, 20, 16, 144, 56),
  new ae(false, 696, 272, 22, 22, 16, 174, 68),
  new ae(false, 816, 336, 24, 24, 16, 136, 56),
  new ae(false, 1050, 408, 18, 18, 36, 175, 68),
  new ae(false, 1304, 496, 20, 20, 36, 163, 62),
  new Od(),
];
var Rd = (function () {
  function t(e) {
    this.msg = e;
    this.pos = 0;
    this.skipAtEnd = 0;
    for (
      var r = e.split('').map(function (s) {
          return s.charCodeAt(0);
        }),
        n = new K(),
        i = 0,
        a = r.length;
      i < a;
      i++
    ) {
      var o = String.fromCharCode(r[i] & 255);
      if (o === '?' && e.charAt(i) !== '?') throw new Error('Message contains characters outside ISO-8859-1 encoding.');
      n.append(o);
    }
    this.msg = n.toString();
    this.shape = 0;
    this.codewords = new K();
    this.newEncoding = -1;
  }
  t.prototype.setSymbolShape = function (e) {
    this.shape = e;
  };
  t.prototype.setSizeConstraints = function (e, r) {
    this.minSize = e;
    this.maxSize = r;
  };
  t.prototype.getMessage = function () {
    return this.msg;
  };
  t.prototype.setSkipAtEnd = function (e) {
    this.skipAtEnd = e;
  };
  t.prototype.getCurrentChar = function () {
    return this.msg.charCodeAt(this.pos);
  };
  t.prototype.getCurrent = function () {
    return this.msg.charCodeAt(this.pos);
  };
  t.prototype.getCodewords = function () {
    return this.codewords;
  };
  t.prototype.writeCodewords = function (e) {
    this.codewords.append(e);
  };
  t.prototype.writeCodeword = function (e) {
    this.codewords.append(e);
  };
  t.prototype.getCodewordCount = function () {
    return this.codewords.length();
  };
  t.prototype.getNewEncoding = function () {
    return this.newEncoding;
  };
  t.prototype.signalEncoderChange = function (e) {
    this.newEncoding = e;
  };
  t.prototype.resetEncoderSignal = function () {
    this.newEncoding = -1;
  };
  t.prototype.hasMoreCharacters = function () {
    return this.pos < this.getTotalMessageCharCount();
  };
  t.prototype.getTotalMessageCharCount = function () {
    return this.msg.length - this.skipAtEnd;
  };
  t.prototype.getRemainingCharacters = function () {
    return this.getTotalMessageCharCount() - this.pos;
  };
  t.prototype.getSymbolInfo = function () {
    return this.symbolInfo;
  };
  t.prototype.updateSymbolInfo = function (e) {
    if (e === void 0) {
      e = this.getCodewordCount();
    }
    if (this.symbolInfo == null || e > this.symbolInfo.getDataCapacity()) {
      this.symbolInfo = ae.lookup(e, this.shape, this.minSize, this.maxSize, true);
    }
  };
  t.prototype.resetSymbolInfo = function () {
    this.symbolInfo = null;
  };
  return t;
})();
var Pd = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Md = (function (t) {
  Pd(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.prototype.getEncodingMode = function () {
    return Se;
  };
  e.prototype.encode = function (r) {
    for (var n = new K(); r.hasMoreCharacters(); ) {
      var i = r.getCurrentChar();
      r.pos++;
      this.encodeChar(i, n);
      var a = n.length();
      if (a % 3 === 0) {
        this.writeNextTriplet(r, n);
        var o = gt.lookAheadTest(r.getMessage(), r.pos, this.getEncodingMode());
        if (o !== this.getEncodingMode()) {
          r.signalEncoderChange(le);
          break;
        }
      }
    }
    this.handleEOD(r, n);
  };
  e.prototype.encodeChar = function (r, n) {
    switch (r) {
      case 13:
        n.append(0);
        break;
      case 42:
        n.append(1);
        break;
      case 62:
        n.append(2);
        break;
      case 32:
        n.append(3);
        break;
      default:
        r >= 48 && r <= 57
          ? n.append(r - 48 + 4)
          : r >= 65 && r <= 90
            ? n.append(r - 65 + 14)
            : gt.illegalCharacter(ee.getCharAt(r));
        break;
    }
    return 1;
  };
  e.prototype.handleEOD = function (r, n) {
    r.updateSymbolInfo();
    var i = r.getSymbolInfo().getDataCapacity() - r.getCodewordCount();
    var a = n.length();
    r.pos -= a;
    if (r.getRemainingCharacters() > 1 || i > 1 || r.getRemainingCharacters() !== i) {
      r.writeCodeword(254);
    }
    if (r.getNewEncoding() < 0) {
      r.signalEncoderChange(le);
    }
  };
  return e;
})(Qi);
var kd = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var Bd = (function (t) {
  kd(e, t);
  function e() {
    return (t !== null && t()) || this;
  }
  e.prototype.getEncodingMode = function () {
    return Je;
  };
  e.prototype.encodeChar = function (r, n) {
    if (r === 32) {
      n.append(3);
      return 1;
    }
    if (r >= 48 && r <= 57) {
      n.append(r - 48 + 4);
      return 1;
    }
    if (r >= 97 && r <= 122) {
      n.append(r - 97 + 14);
      return 1;
    }
    if (r < 32) {
      n.append(0);
      n.append(r);
      return 2;
    }
    if (r <= 47) {
      n.append(1);
      n.append(r - 33);
      return 2;
    }
    if (r <= 64) {
      n.append(1);
      n.append(r - 58 + 15);
      return 2;
    }
    if (r >= 91 && r <= 95) {
      n.append(1);
      n.append(r - 91 + 22);
      return 2;
    }
    if (r === 96) {
      n.append(2);
      n.append(0);
      return 2;
    }
    if (r <= 90) {
      n.append(2);
      n.append(r - 65 + 1);
      return 2;
    }
    if (r <= 127) {
      n.append(2);
      n.append(r - 123 + 27);
      return 2;
    }
    n.append('1\x1E');
    var i = 2;
    i += this.encodeChar(r - 128, n);
    return i;
  };
  return e;
})(Qi);
var gt = (function () {
  function t() {}
  t.randomize253State = function (e) {
    var r = ((149 * e) % 253) + 1;
    var n = 129 + r;
    return n <= 254 ? n : n - 254;
  };
  t.encodeHighLevel = function (e, r, n, i, a) {
    if (r === void 0) {
      r = 0;
    }
    if (n === void 0) {
      n = null;
    }
    if (i === void 0) {
      i = null;
    }
    if (a === void 0) {
      a = false;
    }
    var o = new Qi();
    var s = [new Ad(), o, new Bd(), new Md(), new Td(), new Id()];
    var c = new Rd(e);
    c.setSymbolShape(r);
    c.setSizeConstraints(n, i);
    e.startsWith('[)>\x1E05\x1D') && e.endsWith('\x1E\x04')
      ? (c.writeCodeword(236), c.setSkipAtEnd(2), (c.pos += 7))
      : e.startsWith('[)>\x1E06\x1D') &&
        e.endsWith('\x1E\x04') &&
        (c.writeCodeword(237), c.setSkipAtEnd(2), (c.pos += 7));
    var l = le;
    for (a && (o.encodeMaximal(c), (l = c.getNewEncoding()), c.resetEncoderSignal()); c.hasMoreCharacters(); ) {
      s[l].encode(c);
      if (c.getNewEncoding() >= 0) {
        l = c.getNewEncoding();
        c.resetEncoderSignal();
      }
    }
    var f = c.getCodewordCount();
    c.updateSymbolInfo();
    var u = c.getSymbolInfo().getDataCapacity();
    if (f < u && l !== le && l !== He && l !== Re) {
      c.writeCodeword('þ');
    }
    var h = c.getCodewords();
    for (h.length() < u && h.append(129); h.length() < u; ) h.append(this.randomize253State(h.length() + 1));
    return c.getCodewords().toString();
  };
  t.lookAheadTest = function (e, r, n) {
    var i = this.lookAheadTestIntern(e, r, n);
    if (n === Se && i === Se) {
      for (var a = Math.min(r + 3, e.length), o = r; o < a; o++) if (!this.isNativeX12(e.charCodeAt(o))) return le;
    } else if (n === Re && i === Re) {
      for (var a = Math.min(r + 4, e.length), o = r; o < a; o++) if (!this.isNativeEDIFACT(e.charCodeAt(o))) return le;
    }
    return i;
  };
  t.lookAheadTestIntern = function (e, r, n) {
    if (r >= e.length) return n;
    var i;
    n === le ? (i = [0, 1, 1, 1, 1, 1.25]) : ((i = [1, 2, 2, 2, 2, 2.25]), (i[n] = 0));
    for (var a = 0, o = new Uint8Array(6), s = []; ; ) {
      if (r + a === e.length) {
        Te.fill(o, 0);
        Te.fill(s, 0);
        var c = this.findMinimums(i, s, 9007199254740991, o);
        var l = this.getMinimumCount(o);
        if (s[le] === c) return le;
        if (l === 1) {
          if (o[He] > 0) return He;
          if (o[Re] > 0) return Re;
          if (o[Je] > 0) return Je;
          if (o[Se] > 0) return Se;
        }
        return Le;
      }
      var f = e.charCodeAt(r + a);
      a++;
      this.isDigit(f)
        ? (i[le] += 0.5)
        : this.isExtendedASCII(f)
          ? ((i[le] = Math.ceil(i[le])), (i[le] += 2))
          : ((i[le] = Math.ceil(i[le])), i[le]++);
      this.isNativeC40(f)
        ? (i[Le] += 0.6666666666666666)
        : this.isExtendedASCII(f)
          ? (i[Le] += 2.6666666666666665)
          : (i[Le] += 1.3333333333333333);
      this.isNativeText(f)
        ? (i[Je] += 0.6666666666666666)
        : this.isExtendedASCII(f)
          ? (i[Je] += 2.6666666666666665)
          : (i[Je] += 1.3333333333333333);
      this.isNativeX12(f)
        ? (i[Se] += 0.6666666666666666)
        : this.isExtendedASCII(f)
          ? (i[Se] += 4.333333333333333)
          : (i[Se] += 3.3333333333333335);
      this.isNativeEDIFACT(f) ? (i[Re] += 0.75) : this.isExtendedASCII(f) ? (i[Re] += 4.25) : (i[Re] += 3.25);
      this.isSpecialB256(f) ? (i[He] += 4) : i[He]++;
      if (a >= 4) {
        Te.fill(o, 0);
        Te.fill(s, 0);
        this.findMinimums(i, s, 9007199254740991, o);
        if (s[le] < this.min(s[He], s[Le], s[Je], s[Se], s[Re])) return le;
        if (s[He] < s[le] || s[He] + 1 < this.min(s[Le], s[Je], s[Se], s[Re])) return He;
        if (s[Re] + 1 < this.min(s[He], s[Le], s[Je], s[Se], s[le])) return Re;
        if (s[Je] + 1 < this.min(s[He], s[Le], s[Re], s[Se], s[le])) return Je;
        if (s[Se] + 1 < this.min(s[He], s[Le], s[Re], s[Je], s[le])) return Se;
        if (s[Le] + 1 < this.min(s[le], s[He], s[Re], s[Je])) {
          if (s[Le] < s[Se]) return Le;
          if (s[Le] === s[Se]) {
            for (var u = r + a + 1; u < e.length; ) {
              var h = e.charCodeAt(u);
              if (this.isX12TermSep(h)) return Se;
              if (!this.isNativeX12(h)) break;
              u++;
            }
            return Le;
          }
        }
      }
    }
  };
  t.min = function (e, r, n, i, a) {
    var o = Math.min(e, Math.min(r, Math.min(n, i)));
    return a === void 0 ? o : Math.min(o, a);
  };
  t.findMinimums = function (e, r, n, i) {
    for (var a = 0; a < 6; a++) {
      var o = (r[a] = Math.ceil(e[a]));
      if (n > o) {
        n = o;
        Te.fill(i, 0);
      }
      if (n === o) {
        i[a] = i[a] + 1;
      }
    }
    return n;
  };
  t.getMinimumCount = function (e) {
    for (var r = 0, n = 0; n < 6; n++) r += e[n];
    return r || 0;
  };
  t.isDigit = function (e) {
    return e >= 48 && e <= 57;
  };
  t.isExtendedASCII = function (e) {
    return e >= 128 && e <= 255;
  };
  t.isNativeC40 = function (e) {
    return e === 32 || (e >= 48 && e <= 57) || (e >= 65 && e <= 90);
  };
  t.isNativeText = function (e) {
    return e === 32 || (e >= 48 && e <= 57) || (e >= 97 && e <= 122);
  };
  t.isNativeX12 = function (e) {
    return this.isX12TermSep(e) || e === 32 || (e >= 48 && e <= 57) || (e >= 65 && e <= 90);
  };
  t.isX12TermSep = function (e) {
    return e === 13 || e === 42 || e === 62;
  };
  t.isNativeEDIFACT = function (e) {
    return e >= 32 && e <= 94;
  };
  t.isSpecialB256 = function (e) {
    return false;
  };
  t.determineConsecutiveDigitCount = function (e, r) {
    if (r === void 0) {
      r = 0;
    }
    for (var n = e.length, i = r; i < n && this.isDigit(e.charCodeAt(i)); ) i++;
    return i - r;
  };
  t.illegalCharacter = function (e) {
    var r = Z.toHexString(e.charCodeAt(0));
    throw ((r = '0000'.substring(0, 4 - r.length) + r), new Error('Illegal character: ' + e + ' (0x' + r + ')'));
  };
  return t;
})();
var zn = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var eo = (function () {
  function t(e) {
    this.charset = e;
    this.name = e.name;
  }
  t.prototype.canEncode = function (e) {
    try {
      return ut.encode(e, this.charset) != null;
    } catch {
      return false;
    }
  };
  return t;
})();
var Ld = (function () {
  function t(e, r, n) {
    var i;
    var a;
    var o;
    var s;
    var c;
    var l;
    this.ENCODERS = [
      'IBM437',
      'ISO-8859-2',
      'ISO-8859-3',
      'ISO-8859-4',
      'ISO-8859-5',
      'ISO-8859-6',
      'ISO-8859-7',
      'ISO-8859-8',
      'ISO-8859-9',
      'ISO-8859-10',
      'ISO-8859-11',
      'ISO-8859-13',
      'ISO-8859-14',
      'ISO-8859-15',
      'ISO-8859-16',
      'windows-1250',
      'windows-1251',
      'windows-1252',
      'windows-1256',
      'Shift_JIS',
    ].map(function (O) {
      return new eo(dd.forName(O));
    });
    this.encoders = [];
    var f = [];
    f.push(new eo(pd.ISO_8859_1));
    for (var u = r != null && r.name.startsWith('UTF'), h = 0; h < e.length; h++) {
      var d = false;
      try {
        for (var p = ((i = void 0), zn(f)), v = p.next(); !v.done; v = p.next()) {
          var g = v.value;
          var _ = e.charAt(h);
          var y = _.charCodeAt(0);
          if (y === n || v.value.canEncode(_)) {
            d = true;
            break;
          }
        }
      } catch (O) {
        i = { error: O };
      } finally {
        try {
          if (v && !v.done && (a = p.return)) {
            a.call(p);
          }
        } finally {
          if (i) throw i.error;
        }
      }
      if (!d)
        try {
          for (var x = ((o = void 0), zn(this.ENCODERS)), w = x.next(); !w.done; w = x.next()) {
            var g = w.value;
            if (w.value.canEncode(e.charAt(h))) {
              f.push(w.value);
              d = true;
              break;
            }
          }
        } catch (O) {
          o = { error: O };
        } finally {
          try {
            if (w && !w.done && (s = x.return)) {
              s.call(x);
            }
          } finally {
            if (o) throw o.error;
          }
        }
      if (!d) {
        u = true;
      }
    }
    if (f.length === 1 && !u) this.encoders = [f[0]];
    else {
      this.encoders = [];
      var C = 0;
      try {
        for (var S = zn(f), T = S.next(); !T.done; T = S.next()) {
          var g = T.value;
          this.encoders[C++] = T.value;
        }
      } catch (O) {
        c = { error: O };
      } finally {
        try {
          if (T && !T.done && (l = S.return)) {
            l.call(S);
          }
        } finally {
          if (c) throw c.error;
        }
      }
    }
    var D = -1;
    if (r != null) {
      for (var h = 0; h < this.encoders.length; h++)
        if (this.encoders[h] != null && r.name === this.encoders[h].name) {
          D = h;
          break;
        }
    }
    this.priorityEncoderIndex = D;
  }
  t.prototype.length = function () {
    return this.encoders.length;
  };
  t.prototype.getCharsetName = function (e) {
    if (!(e < this.length())) throw new Error('index must be less than length');
    return this.encoders[e].name;
  };
  t.prototype.getCharset = function (e) {
    if (!(e < this.length())) throw new Error('index must be less than length');
    return this.encoders[e].charset;
  };
  t.prototype.getECIValue = function (e) {
    return this.encoders[e].charset.getValueIdentifier();
  };
  t.prototype.getPriorityEncoderIndex = function () {
    return this.priorityEncoderIndex;
  };
  t.prototype.canEncode = function (e, r) {
    if (!(r < this.length())) throw new Error('index must be less than length');
    return true;
  };
  t.prototype.encode = function (e, r) {
    if (!(r < this.length())) throw new Error('index must be less than length');
    return ut.encode(ee.getCharAt(e), this.encoders[r].name);
  };
  return t;
})();
var Fd = 3;
var Ud = (function () {
  function t(e, r, n) {
    this.fnc1 = n;
    var i = new Ld(e, r, n);
    if (i.length() === 1)
      for (var a = 0; a < this.bytes.length; a++) {
        var o = e.charAt(a).charCodeAt(0);
        this.bytes[a] = o === n ? 1000 : o;
      }
    else this.bytes = this.encodeMinimally(e, i, n);
  }
  t.prototype.getFNC1Character = function () {
    return this.fnc1;
  };
  t.prototype.length = function () {
    return this.bytes.length;
  };
  t.prototype.haveNCharacters = function (e, r) {
    if (e + r - 1 >= this.bytes.length) return false;
    for (var n = 0; n < r; n++) if (this.isECI(e + n)) return false;
    return true;
  };
  t.prototype.charAt = function (e) {
    if (e < 0 || e >= this.length()) throw new Error('' + e);
    if (this.isECI(e)) throw new Error('value at ' + e + ' is not a character but an ECI');
    return this.isFNC1(e) ? this.fnc1 : this.bytes[e];
  };
  t.prototype.subSequence = function (e, r) {
    if (e < 0 || e > r || r > this.length()) throw new Error('' + e);
    for (var n = new K(), i = e; i < r; i++) {
      if (this.isECI(i)) throw new Error('value at ' + i + ' is not a character but an ECI');
      n.append(this.charAt(i));
    }
    return n.toString();
  };
  t.prototype.isECI = function (e) {
    if (e < 0 || e >= this.length()) throw new Error('' + e);
    return this.bytes[e] > 255 && this.bytes[e] <= 999;
  };
  t.prototype.isFNC1 = function (e) {
    if (e < 0 || e >= this.length()) throw new Error('' + e);
    return this.bytes[e] === 1000;
  };
  t.prototype.getECIValue = function (e) {
    if (e < 0 || e >= this.length()) throw new Error('' + e);
    if (!this.isECI(e)) throw new Error('value at ' + e + ' is not an ECI but a character');
    return this.bytes[e] - 256;
  };
  t.prototype.addEdge = function (e, r, n) {
    if (e[r][n.encoderIndex] == null || e[r][n.encoderIndex].cachedTotalSize > n.cachedTotalSize) {
      e[r][n.encoderIndex] = n;
    }
  };
  t.prototype.addEdges = function (e, r, n, i, a, o) {
    var s = e.charAt(i).charCodeAt(0);
    var c = 0;
    var l = r.length();
    if (r.getPriorityEncoderIndex() >= 0 && (s === o || r.canEncode(s, r.getPriorityEncoderIndex()))) {
      c = r.getPriorityEncoderIndex();
      l = c + 1;
    }
    for (var f = c; f < l; f++)
      if (s === o || r.canEncode(s, f)) {
        this.addEdge(n, i + 1, new to(s, r, f, a, o));
      }
  };
  t.prototype.encodeMinimally = function (e, r, n) {
    var i = e.length;
    var a = new to[e.length + 1][r.length()]();
    this.addEdges(e, r, a, 0, null, n);
    for (var o = 1; o <= e.length; o++) {
      for (var s = 0; s < r.length(); s++)
        if (a[o][s] != null && o < e.length) {
          this.addEdges(e, r, a, o, a[o][s], n);
        }
      for (var s = 0; s < r.length(); s++) a[o - 1][s] = null;
    }
    for (var c = -1, l = 9007199254740991, s = 0; s < r.length(); s++)
      if (a[e.length][s] != null) {
        var f = a[e.length][s];
        if (a[e.length][s].cachedTotalSize < l) {
          l = a[e.length][s].cachedTotalSize;
          c = s;
        }
      }
    if (c < 0) throw new Error('Failed to encode "' + e + '"');
    for (var u = [], h = a[e.length][c]; h != null; ) {
      if (h.isFNC1()) u.unshift(1000);
      else for (var d = r.encode(h.c, h.encoderIndex), o = d.length - 1; o >= 0; o--) u.unshift(d[o] & 255);
      var p = h.previous === null ? 0 : h.previous.encoderIndex;
      if (p !== h.encoderIndex) {
        u.unshift(256 + r.getECIValue(h.encoderIndex));
      }
      h = h.previous;
    }
    for (var v = [], o = 0; o < v.length; o++) v[o] = u[o];
    return v;
  };
  return t;
})();
var to = (function () {
  function t(e, r, n, i, a) {
    this.c = e;
    this.encoderSet = r;
    this.encoderIndex = n;
    this.previous = i;
    this.fnc1 = a;
    this.c = e === a ? 1000 : e;
    var o = this.isFNC1() ? 1 : r.encode(e, n).length;
    var s = i === null ? 0 : i.encoderIndex;
    if (s !== n) {
      o += 3;
    }
    if (i != null) {
      o += i.cachedTotalSize;
    }
    this.cachedTotalSize = o;
  }
  t.prototype.isFNC1 = function () {
    return this.c === 1000;
  };
  return t;
})();
var Vd = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var ro;
(function (t) {
  t[(t.ASCII = 0)] = 'ASCII';
  t[(t.C40 = 1)] = 'C40';
  t[(t.TEXT = 2)] = 'TEXT';
  t[(t.X12 = 3)] = 'X12';
  t[(t.EDF = 4)] = 'EDF';
  t[(t.B256 = 5)] = 'B256';
})(ro || (ro = {}));
(function (t) {
  Vd(e, t);
  function e(r, n, i, a, o) {
    var s = t(r, n, i) || this;
    s.shape = a;
    s.macroId = o;
    return s;
  }
  e.prototype.getMacroId = function () {
    return this.macroId;
  };
  e.prototype.getShapeHint = function () {
    return this.shape;
  };
  return e;
})(Ud);
var Gd = (function () {
  function t() {}
  t.prototype.isCompact = function () {
    return this.compact;
  };
  t.prototype.setCompact = function (e) {
    this.compact = e;
  };
  t.prototype.getSize = function () {
    return this.size;
  };
  t.prototype.setSize = function (e) {
    this.size = e;
  };
  t.prototype.getLayers = function () {
    return this.layers;
  };
  t.prototype.setLayers = function (e) {
    this.layers = e;
  };
  t.prototype.getCodeWords = function () {
    return this.codeWords;
  };
  t.prototype.setCodeWords = function (e) {
    this.codeWords = e;
  };
  t.prototype.getMatrix = function () {
    return this.matrix;
  };
  t.prototype.setMatrix = function (e) {
    this.matrix = e;
  };
  return t;
})();
var no = (function () {
  function t() {}
  t.singletonList = function (e) {
    return [e];
  };
  t.min = function (e, r) {
    return e.sort(r)[0];
  };
  return t;
})();
var Hd = (function () {
  function t(e) {
    this.previous = e;
  }
  t.prototype.getPrevious = function () {
    return this.previous;
  };
  return t;
})();
var Xd = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var ea = (function (t) {
  Xd(e, t);
  function e(r, n, i) {
    var a = t(r) || this;
    a.value = n;
    a.bitCount = i;
    return a;
  }
  e.prototype.appendTo = function (r, n) {
    r.appendBits(this.value, this.bitCount);
  };
  e.prototype.add = function (r, n) {
    return new e(this, r, n);
  };
  e.prototype.addBinaryShift = function (r, n) {
    console.warn('addBinaryShift on SimpleToken, this simply returns a copy of this token');
    return new e(this, r, n);
  };
  e.prototype.toString = function () {
    var r = this.value & ((1 << this.bitCount) - 1);
    r |= 1 << this.bitCount;
    return '<' + Z.toBinaryString(r | (1 << this.bitCount)).substring(1) + '>';
  };
  return e;
})(Hd);
var zd = (function () {
  var t = function (e, r) {
    t =
      Object.setPrototypeOf ||
      ({ __proto__: [] } instanceof Array &&
        function (n, i) {
          n.__proto__ = i;
        }) ||
      function (n, i) {
        for (var a in i)
          if (i.hasOwnProperty(a)) {
            n[a] = i[a];
          }
      };
    return t(e, r);
  };
  return function (e, r) {
    t(e, r);
    function n() {
      this.constructor = e;
    }
    e.prototype = r === null ? Object.create(r) : ((n.prototype = r.prototype), new n());
  };
})();
var jd = (function (t) {
  zd(e, t);
  function e(r, n, i) {
    var a = t(r, 0, 0) || this;
    a.binaryShiftStart = n;
    a.binaryShiftByteCount = i;
    return a;
  }
  e.prototype.appendTo = function (r, n) {
    for (var i = 0; i < this.binaryShiftByteCount; i++) {
      if (i === 0 || (i === 31 && this.binaryShiftByteCount <= 62)) {
        r.appendBits(31, 5);
        this.binaryShiftByteCount > 62
          ? r.appendBits(this.binaryShiftByteCount - 31, 16)
          : i === 0
            ? r.appendBits(Math.min(this.binaryShiftByteCount, 31), 5)
            : r.appendBits(this.binaryShiftByteCount - 31, 5);
      }
      r.appendBits(n[this.binaryShiftStart + i], 8);
    }
  };
  e.prototype.addBinaryShift = function (r, n) {
    return new e(this, r, n);
  };
  e.prototype.toString = function () {
    return '<' + this.binaryShiftStart + '::' + (this.binaryShiftStart + this.binaryShiftByteCount - 1) + '>';
  };
  return e;
})(ea);
function Wd(t, e, r) {
  return new jd(t, e, r);
}
function mr(t, e, r) {
  return new ea(t, e, r);
}
var $d = ['UPPER', 'LOWER', 'DIGIT', 'MIXED', 'PUNCT'];
var Ft = 0;
var hn = 1;
var lt = 2;
var Ts = 3;
var mt = 4;
var Jd = new ea(null, 0, 0);
var jn = [
  Int32Array.from([0, 327708, 327710, 327709, 656318]),
  Int32Array.from([590318, 0, 327710, 327709, 656318]),
  Int32Array.from([262158, 590300, 0, 590301, 932798]),
  Int32Array.from([327709, 327708, 656318, 0, 327710]),
  Int32Array.from([327711, 656380, 656382, 656381, 0]),
];
var qd = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
function Yd(t) {
  var e;
  var r;
  try {
    for (var n = qd(t), i = n.next(); !i.done; i = n.next()) {
      var a = i.value;
      Te.fill(i.value, -1);
    }
  } catch (o) {
    e = { error: o };
  } finally {
    try {
      if (i && !i.done && (r = n.return)) {
        r.call(n);
      }
    } finally {
      if (e) throw e.error;
    }
  }
  t[Ft][mt] = 0;
  t[1][mt] = 0;
  t[1][Ft] = 28;
  t[3][mt] = 0;
  t[2][mt] = 0;
  t[2][Ft] = 15;
  return t;
}
var bs = Yd(Te.createInt32Array(6, 6));
var Kd = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var Zd = (function () {
  function t(e, r, n, i) {
    this.token = e;
    this.mode = r;
    this.binaryShiftByteCount = n;
    this.bitCount = i;
  }
  t.prototype.getMode = function () {
    return this.mode;
  };
  t.prototype.getToken = function () {
    return this.token;
  };
  t.prototype.getBinaryShiftByteCount = function () {
    return this.binaryShiftByteCount;
  };
  t.prototype.getBitCount = function () {
    return this.bitCount;
  };
  t.prototype.latchAndAppend = function (e, r) {
    var n = this.bitCount;
    var i = this.token;
    if (e !== this.mode) {
      var a = jn[this.mode][e];
      i = mr(i, jn[this.mode][e] & 65535, jn[this.mode][e] >> 16);
      n += jn[this.mode][e] >> 16;
    }
    var o = e === 2 ? 4 : 5;
    i = mr(i, r, o);
    return new t(i, e, 0, n + o);
  };
  t.prototype.shiftAndAppend = function (e, r) {
    var n = this.token;
    var i = this.mode === 2 ? 4 : 5;
    n = mr(n, bs[this.mode][e], i);
    n = mr(n, r, 5);
    return new t(n, this.mode, 0, this.bitCount + i + 5);
  };
  t.prototype.addBinaryShiftChar = function (e) {
    var r = this.token;
    var n = this.mode;
    var i = this.bitCount;
    if (this.mode === mt || this.mode === 2) {
      var a = jn[n][Ft];
      r = mr(r, jn[n][Ft] & 65535, jn[n][Ft] >> 16);
      i += jn[n][Ft] >> 16;
      n = Ft;
    }
    var o =
      this.binaryShiftByteCount === 0 || this.binaryShiftByteCount === 31
        ? 18
        : this.binaryShiftByteCount === 62
          ? 9
          : 8;
    var s = new t(r, n, this.binaryShiftByteCount + 1, i + o);
    if (s.binaryShiftByteCount === 2078) {
      s = s.endBinaryShift(e + 1);
    }
    return s;
  };
  t.prototype.endBinaryShift = function (e) {
    if (this.binaryShiftByteCount === 0) return this;
    var r = this.token;
    r = Wd(r, e - this.binaryShiftByteCount, this.binaryShiftByteCount);
    return new t(r, this.mode, 0, this.bitCount);
  };
  t.prototype.isBetterThanOrEqualTo = function (e) {
    var r = this.bitCount + (jn[this.mode][e.mode] >> 16);
    this.binaryShiftByteCount < e.binaryShiftByteCount
      ? (r += t.calculateBinaryShiftCost(e) - t.calculateBinaryShiftCost(this))
      : this.binaryShiftByteCount > e.binaryShiftByteCount && e.binaryShiftByteCount > 0 && (r += 10);
    return r <= e.bitCount;
  };
  t.prototype.toBitArray = function (e) {
    for (var r, n, i = [], a = this.endBinaryShift(e.length).token; a !== null; a = a.getPrevious()) i.unshift(a);
    var o = new ke();
    try {
      for (var s = Kd(i), c = s.next(); !c.done; c = s.next()) {
        var l = c.value;
        c.value.appendTo(o, e);
      }
    } catch (f) {
      r = { error: f };
    } finally {
      try {
        if (c && !c.done && (n = s.return)) {
          n.call(s);
        }
      } finally {
        if (r) throw r.error;
      }
    }
    return o;
  };
  t.prototype.toString = function () {
    return ee.format('%s bits=%d bytes=%d', $d[this.mode], this.bitCount, this.binaryShiftByteCount);
  };
  t.calculateBinaryShiftCost = function (e) {
    return e.binaryShiftByteCount > 62 ? 21 : e.binaryShiftByteCount > 31 ? 20 : e.binaryShiftByteCount > 0 ? 10 : 0;
  };
  t.INITIAL_STATE = new t(Jd, Ft, 0, 0);
  return t;
})();
function Qd(t) {
  var e = ee.getCharCode(' ');
  var r = ee.getCharCode('.');
  var n = ee.getCharCode(',');
  t[Ft][e] = 1;
  for (var i = ee.getCharCode('Z'), a = ee.getCharCode('A'), o = a; o <= i; o++) t[Ft][o] = o - a + 2;
  t[1][e] = 1;
  for (var s = ee.getCharCode('z'), c = ee.getCharCode('a'), o = c; o <= s; o++) t[1][o] = o - c + 2;
  t[2][e] = 1;
  for (var l = ee.getCharCode('9'), f = ee.getCharCode('0'), o = f; o <= l; o++) t[2][o] = o - f + 2;
  t[2][n] = 12;
  t[2][r] = 13;
  for (
    var u = [
        '\0',
        ' ',
        '\x01',
        '\x02',
        '\x03',
        '\x04',
        '\x05',
        '\x06',
        '\x07',
        '\b',
        '\t',
        `
`,
        '\x0B',
        '\f',
        '\r',
        '\x1B',
        '\x1C',
        '\x1D',
        '\x1E',
        '\x1F',
        '@',
        '\\',
        '^',
        '_',
        '`',
        '|',
        '~',
        '\x7F',
      ],
      h = 0;
    h < u.length;
    h++
  )
    t[3][ee.getCharCode(u[h])] = h;
  for (
    var d = [
        '\0',
        '\r',
        '\0',
        '\0',
        '\0',
        '\0',
        '!',
        "'",
        '#',
        '$',
        '%',
        '&',
        "'",
        '(',
        ')',
        '*',
        '+',
        ',',
        '-',
        '.',
        '/',
        ':',
        ';',
        '<',
        '=',
        '>',
        '?',
        '[',
        ']',
        '{',
        '}',
      ],
      h = 0;
    h < d.length;
    h++
  )
    if (ee.getCharCode(d[h]) > 0) {
      t[mt][ee.getCharCode(d[h])] = h;
    }
  return t;
}
var Wn = Qd(Te.createInt32Array(5, 256));
var jr = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
var e1 = (function () {
  function t(e) {
    this.text = e;
  }
  t.prototype.encode = function () {
    for (
      var e = ee.getCharCode(' '),
        r = ee.getCharCode(`
`),
        n = no.singletonList(Zd.INITIAL_STATE),
        i = 0;
      i < this.text.length;
      i++
    ) {
      var a = void 0;
      var o = i + 1 < this.text.length ? this.text[i + 1] : 0;
      switch (this.text[i]) {
        case ee.getCharCode('\r'):
          a = o === r ? 2 : 0;
          break;
        case ee.getCharCode('.'):
          a = o === e ? 3 : 0;
          break;
        case ee.getCharCode(','):
          a = o === e ? 4 : 0;
          break;
        case ee.getCharCode(':'):
          a = o === e ? 5 : 0;
          break;
        default:
          a = 0;
      }
      a > 0 ? ((n = t.updateStateListForPair(n, i, a)), i++) : (n = this.updateStateListForChar(n, i));
    }
    var s = no.min(n, function (c, l) {
      return c.getBitCount() - l.getBitCount();
    });
    return s.toBitArray(this.text);
  };
  t.prototype.updateStateListForChar = function (e, r) {
    var n;
    var i;
    var a = [];
    try {
      for (var o = jr(e), s = o.next(); !s.done; s = o.next()) {
        var c = s.value;
        this.updateStateForChar(s.value, r, a);
      }
    } catch (l) {
      n = { error: l };
    } finally {
      try {
        if (s && !s.done && (i = o.return)) {
          i.call(o);
        }
      } finally {
        if (n) throw n.error;
      }
    }
    return t.simplifyStates(a);
  };
  t.prototype.updateStateForChar = function (e, r, n) {
    for (var i = this.text[r] & 255, a = Wn[e.getMode()][i] > 0, o = null, s = 0; s <= mt; s++) {
      var c = Wn[s][i];
      if (Wn[s][i] > 0) {
        if (o == null) {
          o = e.endBinaryShift(r);
        }
        if (!a || s === e.getMode() || s === 2) {
          var l = o.latchAndAppend(s, Wn[s][i]);
          n.push(l);
        }
        if (!a && bs[e.getMode()][s] >= 0) {
          var f = o.shiftAndAppend(s, Wn[s][i]);
          n.push(f);
        }
      }
    }
    if (e.getBinaryShiftByteCount() > 0 || Wn[e.getMode()][i] === 0) {
      var u = e.addBinaryShiftChar(r);
      n.push(u);
    }
  };
  t.updateStateListForPair = function (e, r, n) {
    var i;
    var a;
    var o = [];
    try {
      for (var s = jr(e), c = s.next(); !c.done; c = s.next()) {
        var l = c.value;
        this.updateStateForPair(c.value, r, n, o);
      }
    } catch (f) {
      i = { error: f };
    } finally {
      try {
        if (c && !c.done && (a = s.return)) {
          a.call(s);
        }
      } finally {
        if (i) throw i.error;
      }
    }
    return this.simplifyStates(o);
  };
  t.updateStateForPair = function (e, r, n, i) {
    var a = e.endBinaryShift(r);
    i.push(a.latchAndAppend(mt, n));
    if (e.getMode() !== mt) {
      i.push(a.shiftAndAppend(mt, n));
    }
    if (n === 3 || n === 4) {
      var o = a.latchAndAppend(2, 16 - n).latchAndAppend(2, 1);
      i.push(o);
    }
    if (e.getBinaryShiftByteCount() > 0) {
      var s = e.addBinaryShiftChar(r).addBinaryShiftChar(r + 1);
      i.push(s);
    }
  };
  t.simplifyStates = function (e) {
    var r;
    var n;
    var i;
    var a;
    var o = [];
    try {
      for (var s = jr(e), c = s.next(); !c.done; c = s.next()) {
        var l = c.value;
        var f = true;
        var u = function (g) {
          if (g.isBetterThanOrEqualTo(c.value)) {
            f = false;
            return 'break';
          }
          if (c.value.isBetterThanOrEqualTo(g)) {
            o = o.filter(function (_) {
              return _ !== g;
            });
          }
        };
        try {
          for (var h = ((i = void 0), jr(o)), d = h.next(); !d.done; d = h.next()) {
            var p = d.value;
            var v = u(d.value);
            if (v === 'break') break;
          }
        } catch (g) {
          i = { error: g };
        } finally {
          try {
            if (d && !d.done && (a = h.return)) {
              a.call(h);
            }
          } finally {
            if (i) throw i.error;
          }
        }
        if (f) {
          o.push(c.value);
        }
      }
    } catch (g) {
      r = { error: g };
    } finally {
      try {
        if (c && !c.done && (n = s.return)) {
          n.call(s);
        }
      } finally {
        if (r) throw r.error;
      }
    }
    return o;
  };
  return t;
})();
var t1 = function (t) {
  var e = typeof Symbol == 'function' && Symbol.iterator;
  var r = e && t[e];
  var n = 0;
  if (r) return r.call(t);
  if (t && typeof t.length == 'number')
    return {
      next: function () {
        if (t && n >= t.length) {
          t = void 0;
        }
        return {
          value: t && t[n++],
          done: !t,
        };
      },
    };
  throw new TypeError(e ? 'Object is not iterable.' : 'Symbol.iterator is not defined.');
};
(function () {
  function t() {}
  t.encodeBytes = function (e) {
    return t.encode(e, t.DEFAULT_EC_PERCENT, t.DEFAULT_AZTEC_LAYERS);
  };
  t.encode = function (e, r, n) {
    var i = new e1(e).encode();
    var a = Z.truncDivision(i.getSize() * r, 100) + 11;
    var o = i.getSize() + a;
    var s;
    var c;
    var l;
    var f;
    var u;
    if (n !== t.DEFAULT_AZTEC_LAYERS) {
      s = n < 0;
      c = Math.abs(n);
      if (c > (s ? t.MAX_NB_BITS_COMPACT : t.MAX_NB_BITS)) throw new z(ee.format('Illegal value %s for layers', n));
      l = t.totalBitsInLayer(c, s);
      f = t.WORD_SIZE[c];
      var h = l - (l % f);
      u = t.stuffBits(i, f);
      if (u.getSize() + a > h) throw new z('Data to large for user specified layer');
      if (s && u.getSize() > f * 64) throw new z('Data to large for user specified layer');
    } else {
      f = 0;
      u = null;
      for (var d = 0; ; d++) {
        if (d > t.MAX_NB_BITS) throw new z('Data too large for an Aztec code');
        s = d <= 3;
        c = s ? d + 1 : d;
        l = t.totalBitsInLayer(c, s);
        if (!(o > l)) {
          if (u == null || f !== t.WORD_SIZE[c]) {
            f = t.WORD_SIZE[c];
            u = t.stuffBits(i, f);
          }
          var h = l - (l % f);
          if (!(s && u.getSize() > f * 64) && u.getSize() + a <= h) break;
        }
      }
    }
    var p = t.generateCheckWords(u, l, f);
    var v = u.getSize() / f;
    var g = t.generateModeMessage(s, c, v);
    var _ = (s ? 11 : 14) + c * 4;
    var y = new Int32Array(_);
    var x;
    if (s) {
      x = _;
      for (var d = 0; d < y.length; d++) y[d] = d;
    } else {
      x = _ + 1 + 2 * Z.truncDivision(Z.truncDivision(_, 2) - 1, 15);
      for (var w = Z.truncDivision(_, 2), C = Z.truncDivision(x, 2), d = 0; d < w; d++) {
        var S = d + Z.truncDivision(d, 15);
        y[w - d - 1] = C - S - 1;
        y[w + d] = C + S + 1;
      }
    }
    for (var T = new xt(x), d = 0, D = 0; d < c; d++) {
      for (var O = (c - d) * 4 + (s ? 9 : 12), R = 0; R < O; R++)
        for (var H = R * 2, N = 0; N < 2; N++) {
          if (p.get(D + H + N)) {
            T.set(y[d * 2 + N], y[d * 2 + R]);
          }
          if (p.get(D + O * 2 + H + N)) {
            T.set(y[d * 2 + R], y[_ - 1 - d * 2 - N]);
          }
          if (p.get(D + O * 4 + H + N)) {
            T.set(y[_ - 1 - d * 2 - N], y[_ - 1 - d * 2 - R]);
          }
          if (p.get(D + O * 6 + H + N)) {
            T.set(y[_ - 1 - d * 2 - R], y[d * 2 + N]);
          }
        }
      D += O * 8;
    }
    t.drawModeMessage(T, s, x, g);
    if (s) t.drawBullsEye(T, Z.truncDivision(x, 2), 5);
    else {
      t.drawBullsEye(T, Z.truncDivision(x, 2), 7);
      for (var d = 0, R = 0; d < Z.truncDivision(_, 2) - 1; d += 15, R += 16)
        for (var N = Z.truncDivision(x, 2) & 1; N < x; N += 2) {
          T.set(Z.truncDivision(x, 2) - R, N);
          T.set(Z.truncDivision(x, 2) + R, N);
          T.set(N, Z.truncDivision(x, 2) - R);
          T.set(N, Z.truncDivision(x, 2) + R);
        }
    }
    var k = new Gd();
    k.setCompact(s);
    k.setSize(x);
    k.setLayers(c);
    k.setCodeWords(v);
    k.setMatrix(T);
    return k;
  };
  t.drawBullsEye = function (e, r, n) {
    for (var i = 0; i < n; i += 2)
      for (var a = r - i; a <= r + i; a++) {
        e.set(a, r - i);
        e.set(a, r + i);
        e.set(r - i, a);
        e.set(r + i, a);
      }
    e.set(r - n, r - n);
    e.set(r - n + 1, r - n);
    e.set(r - n, r - n + 1);
    e.set(r + n, r - n);
    e.set(r + n, r - n + 1);
    e.set(r + n, r + n - 1);
  };
  t.generateModeMessage = function (e, r, n) {
    var i = new ke();
    e
      ? (i.appendBits(r - 1, 2), i.appendBits(n - 1, 6), (i = t.generateCheckWords(i, 28, 4)))
      : (i.appendBits(r - 1, 5), i.appendBits(n - 1, 11), (i = t.generateCheckWords(i, 40, 4)));
    return i;
  };
  t.drawModeMessage = function (e, r, n, i) {
    var a = Z.truncDivision(n, 2);
    if (r)
      for (var o = 0; o < 7; o++) {
        var s = a - 3 + o;
        if (i.get(o)) {
          e.set(s, a - 5);
        }
        if (i.get(o + 7)) {
          e.set(a + 5, s);
        }
        if (i.get(20 - o)) {
          e.set(s, a + 5);
        }
        if (i.get(27 - o)) {
          e.set(a - 5, s);
        }
      }
    else
      for (var o = 0; o < 10; o++) {
        var s = a - 5 + o + Z.truncDivision(o, 5);
        if (i.get(o)) {
          e.set(s, a - 7);
        }
        if (i.get(o + 10)) {
          e.set(a + 7, s);
        }
        if (i.get(29 - o)) {
          e.set(s, a + 7);
        }
        if (i.get(39 - o)) {
          e.set(a - 7, s);
        }
      }
  };
  t.generateCheckWords = function (e, r, n) {
    var i;
    var a;
    var o = e.getSize() / n;
    var s = new As(t.getGF(n));
    var c = Z.truncDivision(r, n);
    var l = t.bitsToWords(e, n, c);
    s.encode(l, c - o);
    var f = r % n;
    var u = new ke();
    u.appendBits(0, f);
    try {
      for (var h = t1(Array.from(l)), d = h.next(); !d.done; d = h.next()) {
        var p = d.value;
        u.appendBits(d.value, n);
      }
    } catch (v) {
      i = { error: v };
    } finally {
      try {
        if (d && !d.done && (a = h.return)) {
          a.call(h);
        }
      } finally {
        if (i) throw i.error;
      }
    }
    return u;
  };
  t.bitsToWords = function (e, r, n) {
    var i = new Int32Array(n);
    var a;
    var o;
    for (a = 0, o = e.getSize() / r; a < o; a++) {
      for (var s = 0, c = 0; c < r; c++) s |= e.get(a * r + c) ? 1 << (r - c - 1) : 0;
      i[a] = s;
    }
    return i;
  };
  t.getGF = function (e) {
    switch (e) {
      case 4:
        return et.AZTEC_PARAM;
      case 6:
        return et.AZTEC_DATA_6;
      case 8:
        return et.AZTEC_DATA_8;
      case 10:
        return et.AZTEC_DATA_10;
      case 12:
        return et.AZTEC_DATA_12;
      default:
        throw new z('Unsupported word size ' + e);
    }
  };
  t.stuffBits = function (e, r) {
    for (var n = new ke(), i = e.getSize(), a = (1 << r) - 2, o = 0; o < i; o += r) {
      for (var s = 0, c = 0; c < r; c++)
        if (o + c >= i || e.get(o + c)) {
          s |= 1 << (r - 1 - c);
        }
      (s & a) === a
        ? (n.appendBits(s & a, r), o--)
        : (s & a) === 0
          ? (n.appendBits(s | 1, r), o--)
          : n.appendBits(s, r);
    }
    return n;
  };
  t.totalBitsInLayer = function (e, r) {
    return ((r ? 88 : 112) + 16 * e) * e;
  };
  t.DEFAULT_EC_PERCENT = 33;
  t.DEFAULT_AZTEC_LAYERS = 0;
  t.MAX_NB_BITS = 32;
  t.MAX_NB_BITS_COMPACT = 4;
  t.WORD_SIZE = Int32Array.from([
    4, 6, 6, 8, 8, 8, 8, 8, 8, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 12, 12, 12, 12, 12, 12, 12, 12,
    12, 12,
  ]);
  return t;
})();
const r1 = {
  mixins: [Zs, so, gi],
  components: { headerTemplate: pn },
  data() {
    return {
      loading: true,
      destroyed: false,
      camera: 'auto',
      result: '',
      error: '',
      numDevice: 0,
      videoDevices: '',
      currentDevice: '',
      codeReader: new nd(),
      isMediaStreamAPISupported: navigator && navigator.mediaDevices && 'enumerateDevices' in navigator.mediaDevices,
      blockRequest: false,
      width: '1000px',
    };
  },
  mounted() {
    if (!this.isMediaStreamAPISupported) throw new Ke('Media Stream API is not supported');
    let t = this;
    this.codeReader
      .listVideoInputDevices()
      .then(function (e) {
        t.videoDevices = e;
        t.currentDevice = t.videoDevices[t.numDevice].deviceId;
        t.start();
        t.$refs.scanner.oncanplay = (r) => {
          t.loading = false;
          t.$emit('loaded');
        };
      })
      .catch((e) => {
        this.closeModal();
      });
  },
  beforeUnmount() {
    this.codeReader.reset();
  },
  methods: {
    start() {
      this.codeReader.decodeFromVideoDevice(this.currentDevice, this.$refs.scanner, (t, e) => {
        if (t) {
          this.onDecode(t.text);
        }
      });
    },
    onDecode(t) {
      this.stopCamera();
      axios
        .get('api/interactive_file/links', {
          params: {
            tag: t,
            id: -1,
            objectType: sessionStorage.getItem('qrcodemode'),
          },
        })
        .then((e) => {
          if (e.status === 200) {
            e.data.files.length === 1
              ? this.fileGoToViewer(e.data.files[0], false, null, t)
              : axios
                  .get('api/tags/using_code', { params: { code: t } })
                  .then((r) => {
                    if (r.status === 200) {
                      b.$emit('showPanel', {
                        panelDroite: true,
                        refObjet: r.data.tags.id,
                        typeObject: 'tags',
                      });
                    }
                  })
                  .catch((r) => {
                    this.showCenterToast(
                      this.trans.get('__JSON__.viewer.toast.error.noMatch', { code: t }),
                      'e-toast-danger',
                    );
                  });
          }
          this.closeModal();
        })
        .catch((e) => {
          this.showCenterToast(
            this.trans.get('__JSON__.viewer.toast.error.invalidCode', { code: t }),
            'e-toast-danger',
          );
          this.closeModal();
        });
    },
    changeDevice() {
      let t = (this.numDevice + 1) % this.videoDevices.length;
      if (t !== this.numDevice && this.videoDevices[t] !== void 0) {
        this.numDevice = t;
        this.stopCamera();
        this.currentDevice = this.videoDevices[this.numDevice].deviceId;
        this.start();
      }
    },
    async reload() {
      this.destroyed = true;
      await this.$nextTick();
      this.destroyed = false;
    },
    stopCamera() {
      this.camera = 'off';
      this.destroyed = true;
      this.codeReader.reset();
    },
    closeModal: function () {
      this.stopCamera();
      this.$emit('close');
    },
  },
};
const n1 = { class: 'container' };
const i1 = { class: 'scanner-container' };
function a1(t, e, r, n, i, a) {
  const o = L('headerTemplate');
  const s = L('ejs-dialog');
  P();
  return G('div', null, [
    B(
      s,
      {
        header: 'headerTemplate',
        content: 'templateContent',
        width: i.width,
        showCloseIcon: true,
        allowDragging: true,
        animationSettings: t.animationSettings,
        close: a.closeModal,
        visible: t.visible,
        isModal: t.isModal,
      },
      {
        headerTemplate: W(() => [B(o, { title: t.trans.get('__JSON__.codereader.title') }, null, 8, ['title'])]),
        templateContent: W(() => [
          A('div', null, [
            A('div', n1, [
              A('div', i1, [
                Ue(
                  A(
                    'div',
                    null,
                    [
                      A(
                        'video',
                        {
                          poster: 'data:image/gif,AAAA',
                          ref: 'scanner',
                          onClick: e[0] || (e[0] = (...c) => a.changeDevice && a.changeDevice(...c)),
                        },
                        null,
                        512,
                      ),
                    ],
                    512,
                  ),
                  [[at, !i.loading]],
                ),
                Ue(
                  A(
                    'div',
                    { class: 'loading-indicator' },
                    q(t.trans.get('__JSON__.main.content.loading')) + ' ... ',
                    513,
                  ),
                  [[at, i.loading]],
                ),
              ]),
            ]),
          ]),
        ]),
        _: 1,
      },
      8,
      ['width', 'animationSettings', 'close', 'visible', 'isModal'],
    ),
  ]);
}
const o1 = rt(r1, [
  ['render', a1],
  ['__scopeId', 'data-v-82fc5278'],
]);
const s1 = {
  name: 'cartButton',
  components: { CartSelector: Ks },
  data() {
    return {
      showCartSelector: false,
      carts: [],
      cartsForSelector: [],
      dataToAddToCart: [],
    };
  },
  methods: {
    getCartList() {
      axios
        .get('api/carts')
        .then((t) => {
          this.carts = t.data.carts;
        })
        .catch((t) => {
          console.error(t);
        });
    },
    openCartSidebar() {
      b.$emit('showSidebarType', {
        type: 'cart',
        name: this.trans.get('__JSON__.cart.name'),
        supplementaryData: null,
      });
    },
    showSelector(t) {
      if (t && t.length) {
        this.dataToAddToCart = t;
        let e = t[0].object_type;
        this.cartsForSelector = this.carts.filter(
          (r) =>
            r.api_prefix_type === t[0].object_type || (t[0].object_type === 'assets' && r.api_prefix_type === 'items'),
        );
        t[0].object_type === 'items' || t[0].object_type === 'assets'
          ? axios
              .get('api/items/checkIfActive', {
                params: {
                  itemIds: t.filter((r) => r.object_type === 'items').map((r) => r.object_id),
                  assetIds: t.filter((r) => r.object_type === 'assets').map((r) => r.object_id),
                },
              })
              .then((r) => {
                this.showCartSelector = r.data;
                if (!r.data) {
                  this.showCenterToast(this.trans.get('__JSON__.cart.errors.itemInactive'), 'e-toast-danger');
                }
              })
              .catch((r) => {
                console.error(r);
              })
          : (this.showCartSelector = true);
      }
    },
    closeSelector() {
      this.showCartSelector = false;
    },
    selectCart(t) {
      this.closeSelector();
      if (this.dataToAddToCart && this.dataToAddToCart.length) {
        this.carts.find((r) => r.id == t)
          ? axios
              .post('api/carts/addToCart/' + t, { objects: this.dataToAddToCart })
              .then((r) => {
                this.getCartList();
                b.$emit('updateSidebarCart');
              })
              .catch((r) => {
                console.error(r);
              })
          : axios
              .post('api/carts', {
                name: t,
                objects: this.dataToAddToCart,
              })
              .then((r) => {
                this.getCartList();
                b.$emit('updateSidebarCart');
              })
              .catch((r) => {
                console.error(r);
              });
        this.dataToAddToCart = [];
      }
    },
    updateCartQuantity(t) {
      if (t && t.quantity && t.object_id && t.object_type) {
        axios
          .put('api/carts/updateQuantity', {
            cart_id: this.cartStore.cart_id,
            object_id: t.object_id,
            object_type: t.object_type,
            quantity: t.quantity,
          })
          .then((e) => {})
          .catch((e) => {
            console.error(e);
          });
      }
    },
  },
  mounted() {
    b.$on('showCartSelector', this.showSelector);
    b.$on('updateMenuRightCart', this.getCartList);
    b.$on('updateCartQuantity', this.updateCartQuantity);
    this.getCartList();
  },
  beforeUnmount() {
    b.$off('showCartSelector', this.showSelector);
    b.$off('updateMenuRightCart', this.getCartList);
    b.$off('updateCartQuantity', this.updateCartQuantity);
  },
};
const c1 = {
  class: 'end-header list ps-2',
  id: 'cartButton',
};
const l1 = {
  style: {
    display: 'inline-block',
    position: 'relative',
  },
};
function f1(t, e, r, n, i, a) {
  const o = L('ejs-button');
  const s = L('cart-selector');
  P();
  return G('div', null, [
    A('li', c1, [
      A('div', l1, [
        B(
          o,
          {
            iconCss: 'sf-icon-shopping-cart_01-',
            cssClass: 'horizontal-menubar',
            onClick: a.openCartSidebar,
            style: {
              'box-shadow': 'none',
              'margin-top': '2px',
            },
          },
          null,
          8,
          ['onClick'],
        ),
        Ue(
          A(
            'span',
            { class: 'mt-2 e-badge e-badge-info e-badge-notification e-badge-overlap' },
            q(i.carts.length),
            513,
          ),
          [[at, i.carts.length > 0]],
        ),
      ]),
    ]),
    i.showCartSelector
      ? (P(),
        ge(
          s,
          {
            key: 0,
            carts: i.cartsForSelector,
            onClose: a.closeSelector,
            onSelectCart: a.selectCart,
          },
          null,
          8,
          ['carts', 'onClose', 'onSelectCart'],
        ))
      : j('', true),
  ]);
}
const u1 = rt(s1, [['render', f1]]);
const h1 = {
  mixins: [so, Qs, ec],
  components: {
    CartButton: u1,
    UploadFile: lo,
    QRCodeReader: o1,
    headerTemplate: pn,
  },
  data() {
    return {
      showQrCode: this.mainStore.mixConfig.SHOW_QRCODE,
      valueIndeterminate: 20,
      year: new Date().getFullYear(),
      tagVersion: JSON.parse(sessionStorage.getItem('version')),
      objectPermission: null,
      positionAbout: {
        X: 'right',
        Y: 'Top',
      },
      chunkSize: 5048576,
      userImage: '',
      avatar: '',
      autoUnzip: true,
      autoUpload: false,
      importFromQBv1: false,
      importFromQBv2: false,
      authorizeDuplicateInQbv1: false,
      authorizeDuplicate: false,
      fileTreatmentvalue: 0,
      fileTreatmentvalueTxt: '<span class="text-dark">0%</span>',
      forceNoneUnzip: false,
      importObj: null,
      importValue: 0,
      importValueTxt: '<span class="text-dark">0%</span>',
      isReady: false,
      nbrChunk: 0,
      nbrNotification: 0,
      chunkDone: 0,
      user: JSON.parse(sessionStorage.getItem('user')),
      searchGlobal: false,
      valueSearch: '',
      codereader: false,
      codemode: '',
      accountMenuItem: [
        {
          text: this.trans.get('__JSON__.main.content.profile'),
          id: 'profil',
          iconCss: 'sf-icon-user-login',
        },
        { separator: true },
        {
          text: this.trans.get('__JSON__.main.content.logout'),
          id: 'logout',
          iconCss: 'sf-icon-logout-wf',
        },
        { separator: true },
        {
          text: this.trans.get('__JSON__.main.content.termsOfUse'),
          id: 'termsOfUse',
          iconCss: 'sf-icon-information-wf',
        },
        {
          text: this.trans.get('__JSON__.main.content.privacyRules'),
          id: 'privacyRules',
          iconCss: 'sf-icon-information-wf',
        },
        {
          text: this.trans.get('__JSON__.main.content.gdpr'),
          id: 'gdpr',
          iconCss: 'sf-icon-information-wf',
        },
        {
          text: this.trans.get('__JSON__.version.about'),
          id: 'about',
          iconCss: 'sf-icon-help',
        },
      ],
      qrcodeMenuItem: [
        {
          text: 'Drawe',
          id: 'qrcode_drawe',
          iconCss: 'sf-icon-nodes',
        },
        {
          text: 'Panorama',
          id: 'qrcode_pano',
          iconCss: 'sf-icon-globe-wf',
        },
        {
          text: 'Bim',
          id: 'qrcode_Bim',
          iconCss: 'sf-icon-pyramid--02',
        },
        {
          text: 'DocModule',
          id: 'qrcode_DocModule',
          iconCss: 'sf-icon-file-edit-wf',
        },
      ],
      showImportTreatment: false,
      showZipTreatment: false,
      uploadInProgress: false,
      listProgressions: [],
      listMessages: [],
      echoListen: null,
      termsType: null,
      dialogElement: null,
      isDeletingAllNotifications: false,
      echoStatus: window.__echoStatus || 'unknown',
      hasLoggedWsError: false,
    };
  },
  created() {
    this.user != null
      ? (axios.get('api/users/' + this.user.id).then((t) => {
          if (t.status == 200) {
            let e = t.data.main.user.urlImage;
            this.userImage = t.data.main.user.urlImage;
          }
          b.$emit('refreshTree');
        }),
        (this.avatar = this.user.firstname.substr(0, 1) + '' + this.user.lastname.substr(0, 1)))
      : (this.avatar = 'QB');
  },
  computed: {
    pctData() {
      let t = Math.round((100 * this.chunkDone) / this.nbrChunk);
      if (this.chunkSize == this.nbrChunk) {
        this.uploadInProgress = false;
      }
      return isNaN(t) || !isFinite(t) ? 0 : t;
    },
    avatarStyle() {
      if (this.user && this.user.color && !this.userImage) {
        let t = this.colorCalcul(this.user.color);
        return t.colorBadge + t.colorText;
      } else return '';
    },
  },
  methods: {
    onEchoStatus({ status: t }) {
      if (t === 'error' && !this.hasLoggedWsError) {
        this.showCenterToast(this.trans.get('__JSON__.main.modal.toast.error.echo'), 'e-toast-danger');
        this.hasLoggedWsError = true;
      }
      if (t === 'connected' && this.hasLoggedWsError) {
        this.showCenterToast(this.trans.get('__JSON__.main.modal.toast.success.echo'), 'e-toast-success');
        this.hasLoggedWsError = false;
      }
      if (t === 'connected' && this.hasLoggedWsError) {
        this.hasLoggedWsError = false;
      }
      this.echoStatus = t;
    },
    hide() {
      this.getSyncfusionInstance('dialog', 'hide').hide();
    },
    changeUpload() {
      if (this.forceNoneUnzip) {
        this.autoUnzip = false;
      }
      if (this.importFromQBv2) {
        this.autoUnzip = false;
        this.importFromQBv1 = false;
        this.authorizeDuplicate = false;
      }
      this.importFromQBv1
        ? ((this.autoUnzip = false), (this.importFromQBv2 = false))
        : (this.authorizeDuplicateInQbv1 = false);
      b.$emit('changeUpload', {
        autoUnzip: this.autoUnzip,
        autoUpload: this.autoUpload,
        importFromQBv1: this.importFromQBv1,
        importFromQBv2: this.importFromQBv2,
        authorizeDuplicateInQbv1: this.authorizeDuplicateInQbv1,
        authorizeDuplicate: this.authorizeDuplicate,
      });
    },
    onSelect(t) {
      switch (t.item.id) {
        case 'termsOfUse':
          this.showTermsType('termsOfUse');
          break;
        case 'privacyRules':
          this.showTermsType('privacyRules');
          break;
        case 'gdpr':
          this.showTermsType('rgpd');
          break;
        case 'profil':
          let e = {
            panelDroite: true,
            typeObject: 'users',
            refObjet: this.user.id,
          };
          b.$emit('showPanel', e);
          break;
        case 'logout':
          b.$emit('logoutUser');
          break;
        case 'about':
          this.getSyncfusionInstance('dialog', 'show').show();
          break;
      }
    },
    showTermsType(t) {
      axios
        .get('api/environments/terms/' + t)
        .then((e) => {
          let r = e.data.content;
          let n = '';
          switch (t) {
            case 'termsOfUse':
              n = this.trans.get('__JSON__.main.content.termsOfUse');
              break;
            case 'privacyRules':
              n = this.trans.get('__JSON__.main.content.privacyRules');
              break;
            case 'rgpd':
              n = this.trans.get('__JSON__.main.content.gdpr');
              break;
          }
          this.dialogElement = zt.alert({
            title: n,
            content: e.data.content,
            okButton: {
              text: this.trans.get('__JSON__.main.modal.button.close'),
              click: () => {
                if (this.dialogElement) {
                  this.dialogElement.hide();
                }
              },
            },
            showCloseIcon: true,
            closeOnEscape: true,
            animationSettings: { effect: 'Zoom' },
          });
        })
        .catch((e) => {
          console.error(e);
        });
    },
    research() {
      if (this.valueSearch.length >= 3) {
        let t = {
          name: 'globalSearch',
          params: { search: this.valueSearch },
        };
        this.actionLogsStore.changeGridLogs(t);
        this.$router.push(t).catch((e) => {});
      } else if (this.valueSearch.length !== 0) {
        this.showCenterToast(
          this.trans.get('__JSON__.main.modal.toast.error.searchValue'),
          'e-toast-danger',
          this.trans.get('__JSON__.main.modal.toast.error.searchValueSize', { number: 3 }),
        );
      }
    },
    activeUpload() {
      if (!this.autoUpload) {
        b.$emit('showUpload', true);
      }
    },
    showUpload() {
      b.$emit('showUpload', true);
    },
    directoryMode() {
      b.$emit('directoryMode', true);
    },
    fileMode() {
      b.$emit('fileMode', true);
    },
    changeUserData(t) {
      this.avatar = t.firstname.substr(0, 1) + '' + t.lastname.substr(0, 1);
      this.user.color = t.color;
      this.userImage = t.urlImage;
    },
    notifToMsg(t) {
      let e = t;
      let r = '';
      try {
        e.forEach((n) => {
          switch (n.type) {
            case 'trad':
              r += this.trad(n);
              break;
            case 'brut':
              r += n.txt;
              break;
          }
        });
      } catch (n) {
        console.error(n);
        console.error(e);
      }
      return r;
    },
    trad(t) {
      let e = [];
      if (t.trans.value != null)
        for (const [r, n] of Object.entries(t.trans.value))
          n.type == 'trad' ? (e[r] = this.trans.get('__JSON__.' + n.trans.key)) : (e[r] = n);
      return this.trans.get('__JSON__.' + t.trans.key, e);
    },
    downloadNotification(t, e) {
      if (!this.isDownloading) {
        this.isDownloading = true;
        try {
          this.downloadObject('api/notifications/' + t + '/download', e, null, null, false, true);
        } catch {
          this.showCenterToast(this.trans.get('__JSON__.main.modal.toast.error.download'), 'e-toast-danger');
        } finally {
          this.isDownloading = false;
        }
      }
    },
    deleteNotifForUser(t) {
      let e = JSON.parse(sessionStorage.getItem('user')).id;
      if (t && JSON.parse(sessionStorage.getItem('user')).id) {
        this.listProgressions = this.listProgressions.filter(
          (r) => r.notification.value != 'messageDeletable' || r.notification.id != t,
        );
        this.listMessages = this.listMessages.filter(
          (r) => r.notification.value != 'messageDeletable' || r.notification.id != t,
        );
        axios
          .post('api/notifications/endNotification', {
            notification_id: t,
            user_id: JSON.parse(sessionStorage.getItem('user')).id,
          })
          .catch((r) => {
            console.error(r);
          });
      }
    },
    deleteAllNotifsForUser(t = 'progressions') {
      if (!this.isDeletingAllNotifications) {
        this.isDeletingAllNotifications = true;
        let e = JSON.parse(sessionStorage.getItem('user')).id;
        let r = [];
        t === 'progressions'
          ? ((r = this.listProgressions
              .filter((n) => n.isRunning && n.notification.value === 'messageDeletable')
              .map((n) => n.notification.id)),
            (this.listProgressions = this.listProgressions.filter(
              (n) => n.isRunning && n.notification.value !== 'messageDeletable',
            )))
          : ((r = this.listMessages
              .filter(
                (n) =>
                  n.isRunning && (n.notification.value === 'messageDeletable' || n.notification.value === 'running'),
              )
              .map((n) => n.notification.id)),
            (this.listMessages = this.listMessages.filter(
              (n) => n.isRunning && n.notification.value !== 'messageDeletable' && n.notification.value !== 'running',
            )));
        axios
          .post('api/notifications/endNotifications', {
            notifications_ids: r,
            user_id: JSON.parse(sessionStorage.getItem('user')).id,
          })
          .then((n) => {
            this.isDeletingAllNotifications = false;
          })
          .catch((n) => {
            this.isDeletingAllNotifications = false;
            console.error(n);
          });
      }
    },
    echoListener(t) {
      let e = true;
      let r = this;
      if (
        !(
          t.notification.target &&
          t.notification.target.length &&
          !t.notification.target.includes(JSON.parse(sessionStorage.getItem('user')).id)
        ) &&
        !(t.notification.label && ['quickmaint', 'quicksurvey'].includes(t.notification.label))
      ) {
        switch (t.notification.value) {
          case 'messageDeletable':
            {
              e = true;
              t.notification.text = r.notifToMsg(t.notification.text);
            }
            break;
          case 'running':
            e = true;
            try {
              t.notification.text.forEach((n) => {
                if (n.type === 'suffix') {
                  t.notification.suffix = n.value;
                }
              });
            } catch {}
            t.notification.text = r.notifToMsg(t.notification.text);
            break;
          case 'done':
            {
              e = false;
              t.notification.text = r.notifToMsg(t.notification.text);
            }
            break;
          case 'toast':
            {
              t.notification.text = r.notifToMsg(t.notification.text);
              this.showCenterToast(t.notification.text, t.notification.class);
            }
            return;
          case 'pct':
            {
              t.notification.text.value < 100 ? (e = true) : (e = false);
              t.notification.pct = t.notification.text.value;
              t.notification.percentageProgress = Math.trunc(t.notification.text.value) + '%';
              t.notification.text = r.notifToMsg(t.notification.text.txt);
            }
            break;
          default:
            return;
        }
        if (t.notification.text === 'testEnvironment') {
          b.$emit('testReverbSuccess');
          return;
        }
        if (
          t.notification.text.includes('\\n') ||
          t.notification.text.includes(`
`)
        ) {
          t.notification.hasWrap = true;
          t.notification.text = t.notification.text.replaceAll(
            '\\n',
            `
`,
          );
        }
        t.notification.text = t.notification.text.replaceAll('\\t', '\t');
        e
          ? t.notification.label && ['download', 'message'].includes(t.notification.label)
            ? r.manageArrayNotifications(t, this.listMessages, e)
            : r.manageArrayNotifications(t, this.listProgressions, e)
          : (r.manageArrayNotifications(t, this.listMessages, e),
            r.manageArrayNotifications(t, this.listProgressions, e));
      }
    },
    manageArrayNotifications(t, e, r) {
      let n = e.findIndex((i) => t.notification.text == i.notification.text);
      if (r)
        if (n >= 0) {
          let i = e[n];
          t.uuid = e[n].uuid;
          t.isRunning = true;
          e.splice(n, 1, t);
        } else {
          t.uuid = 'id' + UUID.generate();
          t.isRunning = true;
          e.push(t);
        }
      else if (n >= 0) {
        e.splice(n, 1);
      }
    },
    axiosDownloadProgress(t) {
      this.echoListener(t);
    },
    uploadInProgressEvent(t) {
      t != false
        ? ((this.uploadInProgress = true), (this.chunkDone = t.chunkDone), (this.nbrChunk = t.chunkTotal))
        : ((this.uploadInProgress = false), (this.chunkSize = 0), (this.nbrChunk = 0));
    },
    forceNoneUnzipEvent() {
      this.autoUnzip = false;
      this.forceNoneUnzip = true;
    },
    getAutoUploadAndAutoUnzip() {
      b.$emit('changeUpload', {
        autoUnzip: this.autoUnzip,
        autoUpload: this.autoUpload,
        importFromQBv1: this.importFromQBv1,
        importFromQBv2: this.importFromQBv2,
        authorizeDuplicateInQbv1: this.authorizeDuplicateInQbv1,
        authorizeDuplicate: this.authorizeDuplicate,
      });
    },
    openUploadFileMenu(t) {
      if (t) {
        this.$refs.uploadMenu.toggle();
      }
    },
    uploadReadyEvent(t) {
      t ? (this.isReady = true) : (this.isReady = false);
    },
    onSelectQRCode(t) {
      switch (t.item.id) {
        case 'qrcode_drawe':
          sessionStorage.setItem('qrcodemode', 'drawe');
          break;
        case 'qrcode_pano':
          sessionStorage.setItem('qrcodemode', 'pano');
          break;
        case 'qrcode_Bim':
          sessionStorage.setItem('qrcodemode', 'Bim');
          break;
        case 'qrcode_DocModule':
          sessionStorage.setItem('qrcodemode', 'DocModule');
          break;
      }
      this.codereader = true;
    },
    onClickQRCode(t) {
      this.codereader = true;
    },
  },
  mounted() {
    b.$on('echo:status', this.onEchoStatus);
    if (this.echoStatus === 'error' && !this.hasLoggedWsError) {
      this.showCenterToast(this.trans.get('__JSON__.main.modal.toast.error.echo'), 'e-toast-danger');
      this.hasLoggedWsError = true;
    }
    let t = this;
    this.echoListen = Echo.channel('channel-notification').listen(
      '\\Quickbrain\\Events\\NotificationBroadcast',
      function (e) {
        t.echoListener(e);
      },
    );
    b.$on('axiosDownloadProgress', this.axiosDownloadProgress);
    b.$on('uploadInProgress', this.uploadInProgressEvent);
    b.$on('forceNoneUnzip', this.forceNoneUnzipEvent);
    b.$on('getAutoUploadAndAutoUnzip', this.getAutoUploadAndAutoUnzip);
    b.$on('openUploadFileMenu', this.openUploadFileMenu);
    b.$on('updateMainAvatar', this.changeUserData);
    b.$on('uploadReady', this.uploadReadyEvent);
    axios.get('api/notifications/user/' + this.user.id);
  },
  beforeUnmount() {
    b.$off('echo:status', this.onEchoStatus);
    if (this.echoListen) {
      this.echoListen.stopListening('\\Quickbrain\\Events\\NotificationBroadcast');
    }
    b.$off('axiosDownloadProgress', this.axiosDownloadProgress);
    b.$off('uploadInProgress', this.uploadInProgressEvent);
    b.$off('forceNoneUnzip', this.forceNoneUnzipEvent);
    b.$off('getAutoUploadAndAutoUnzip', this.getAutoUploadAndAutoUnzip);
    b.$off('openUploadFileMenu', this.openUploadFileMenu);
    b.$off('updateMainAvatar', this.changeUserData);
    b.$off('uploadReady', this.uploadReadyEvent);
  },
  provide: { progressbar: [tc] },
};
const d1 = { id: 'uploadTemplate' };
const p1 = { class: 'row ms-4 mt-1' };
const v1 = { class: 'row ms-2 mt-1' };
const g1 = { class: 'col-8' };
const _1 = { class: 'row ms-2 mt-1' };
const m1 = { class: 'col-8' };
const x1 = {
  key: 0,
  class: 'row ms-2 mt-1',
};
const y1 = { class: 'col-8' };
const w1 = {
  key: 1,
  class: 'row ms-2 mt-1',
};
const E1 = { class: 'col-8' };
const C1 = {
  key: 2,
  class: 'row ms-2 mt-1',
};
const S1 = { class: 'col-8' };
const A1 = {
  key: 3,
  class: 'row ms-2 mt-1',
};
const I1 = { class: 'col-8' };
const T1 = { class: 'row ms-2 mt-1 me-2 mb-2' };
const b1 = {
  id: 'browse',
  class: 'col-12',
};
const N1 = { class: 'row ms-4 mt-1' };
const O1 = {
  id: 'notificationTemplate',
  class: 'mb-2',
};
const D1 = {
  key: 0,
  style: { width: '250px' },
};
const R1 = {
  key: 0,
  class: 'row',
};
const P1 = { class: 'mt-2 title-notifications' };
const M1 = {
  class: 'col-12',
  style: { display: 'flex' },
};
const k1 = {
  class: 'col-10 ps-2',
  style: { 'overflow-wrap': 'break-word' },
};
const B1 = {
  key: 0,
  class: 'row',
};
const L1 = {
  class: 'col-12',
  style: { display: 'flex' },
};
const F1 = {
  class: 'col-10 ps-2',
  style: { 'overflow-wrap': 'break-word' },
};
const U1 = ['onClick'];
const V1 = { key: 1 };
const G1 = { class: 'ps-2' };
const H1 = ['onClick'];
const X1 = { class: 'ps-2' };
const z1 = {
  id: 'messageTemplate',
  class: 'mb-2',
};
const j1 = {
  key: 0,
  class: 'row',
};
const W1 = { class: 'mt-2 title-notifications' };
const $1 = {
  class: 'col-12',
  style: { display: 'flex' },
};
const J1 = {
  class: 'col-10 ps-2',
  style: { 'overflow-wrap': 'break-word' },
};
const q1 = {
  class: 'col-2',
  style: { 'text-align': 'center' },
};
const Y1 = {
  key: 1,
  style: { width: '550px' },
};
const K1 = {
  key: 0,
  class: 'mt-1',
};
const Z1 = {
  key: 0,
  class: 'row',
};
const Q1 = {
  class: 'col-12',
  style: { display: 'flex' },
};
const e0 = {
  class: 'col-2 ps-2',
  style: { 'align-content': 'center' },
};
const t0 = ['onClick'];
const r0 = {
  key: 1,
  class: 'iconNotification',
};
const n0 = ['onClick'];
const i0 = {
  key: 3,
  class: 'iconNotification',
};
const a0 = { key: 1 };
const o0 = { class: 'ps-2' };
const s0 = ['onClick'];
const c0 = { class: 'ps-2' };
const l0 = { class: 'horizontal-menu' };
const f0 = { class: 'end-header list support' };
const u0 = { class: 'horizontal-menu' };
const h0 = ['src'];
const d0 = { key: 1 };
const p0 = { class: 'pt-3' };
const v0 = { class: 'pt-1' };
const g0 = { class: 'pt-1' };
const _0 = { class: 'end-header list ps-2' };
const m0 = { class: 'horizontal-menu' };
const x0 = {
  style: {
    display: 'inline-block',
    position: 'relative',
  },
};
const y0 = { class: 'end-header list ps-2' };
const w0 = { class: 'horizontal-menu' };
const E0 = {
  style: {
    display: 'inline-block',
    position: 'relative',
  },
};
const C0 = { class: 'end-header list ps-2' };
const S0 = { class: 'horizontal-menu' };
const A0 = {
  style: {
    display: 'inline-block',
    position: 'relative',
  },
};
const I0 = { class: 'mt-2 e-badge e-badge-info e-badge-notification e-badge-overlap' };
const T0 = {
  key: 1,
  class: 'end-header list ps-2',
};
const b0 = { class: 'horizontal-menu' };
const N0 = {
  style: {
    display: 'inline-block',
    position: 'relative',
  },
};
const O0 = { class: 'end-header list' };
const D0 = { class: 'end-header list' };
const R0 = { class: 'e-input-in-wrap' };
const P0 = { class: 'e-float-input e-input-group e-float-icon-left ps-2 pe-2' };
const M0 = {
  class: 'e-input-in-wrap',
  style: { 'border-color': 'white' },
};
const k0 = { class: 'e-float-text text-white' };
function B0(t, e, r, n, i, a) {
  const o = L('ejs-switch');
  const s = L('ejs-tooltip');
  const c = L('ejs-progressbar');
  const l = L('ejs-dropdownbutton');
  const f = L('headerTemplate');
  const u = L('ejs-button');
  const h = L('ejs-dialog');
  const d = L('cart-button');
  const p = L('ejs-splitbutton');
  const v = L('q-r-code-reader');
  P();
  return G('div', null, [
    A('div', d1, [
      Ue(A('div', null, [A('div', p1, q(t.trans.get('__JSON__.upload.content.wip')), 1)], 512), [[at, !i.isReady]]),
      Ue(
        A(
          'div',
          null,
          [
            Ue(
              A(
                'div',
                null,
                [
                  A('div', v1, [
                    A('span', g1, q(t.trans.get('__JSON__.upload.content.autoUnzip')), 1),
                    B(
                      o,
                      {
                        modelValue: i.autoUnzip,
                        'onUpdate:modelValue': e[0] || (e[0] = (g) => (i.autoUnzip = g)),
                        checked: i.autoUnzip,
                        onChange: a.changeUpload,
                        disabled: i.importFromQBv1 || i.forceNoneUnzip || i.importFromQBv2,
                        class: 'pt-1 col-4',
                      },
                      null,
                      8,
                      ['modelValue', 'checked', 'onChange', 'disabled'],
                    ),
                  ]),
                  A('div', _1, [
                    A('span', m1, q(t.trans.get('__JSON__.upload.content.autoUpload')), 1),
                    B(
                      o,
                      {
                        modelValue: i.autoUpload,
                        'onUpdate:modelValue': e[1] || (e[1] = (g) => (i.autoUpload = g)),
                        checked: i.autoUpload,
                        onChange: a.changeUpload,
                        class: 'pt-1 col-4',
                      },
                      null,
                      8,
                      ['modelValue', 'checked', 'onChange'],
                    ),
                  ]),
                  t.can('authorize duplicate')
                    ? (P(),
                      G('div', x1, [
                        A('span', y1, q(t.trans.get('__JSON__.upload.content.authorizeDuplicate')), 1),
                        B(
                          o,
                          {
                            modelValue: i.authorizeDuplicate,
                            'onUpdate:modelValue': e[2] || (e[2] = (g) => (i.authorizeDuplicate = g)),
                            checked: i.authorizeDuplicate,
                            onChange: a.changeUpload,
                            disabled: i.importFromQBv2,
                            class: 'pt-1 col-4',
                          },
                          null,
                          8,
                          ['modelValue', 'checked', 'onChange', 'disabled'],
                        ),
                      ]))
                    : j('', true),
                  t.can('import', 'QBv1')
                    ? (P(),
                      G('div', w1, [
                        A('span', E1, q(t.trans.get('__JSON__.upload.content.importQBv1')), 1),
                        B(
                          o,
                          {
                            modelValue: i.importFromQBv1,
                            'onUpdate:modelValue': e[3] || (e[3] = (g) => (i.importFromQBv1 = g)),
                            checked: i.importFromQBv1,
                            onChange: a.changeUpload,
                            disabled: i.importFromQBv2,
                            class: 'pt-1 col-4',
                          },
                          null,
                          8,
                          ['modelValue', 'checked', 'onChange', 'disabled'],
                        ),
                      ]))
                    : j('', true),
                  t.can('import', 'QBv1')
                    ? (P(),
                      G('div', C1, [
                        A('span', S1, q(t.trans.get('__JSON__.upload.content.authorizeDuplicateInQbv1')), 1),
                        B(
                          o,
                          {
                            modelValue: i.authorizeDuplicateInQbv1,
                            'onUpdate:modelValue': e[4] || (e[4] = (g) => (i.authorizeDuplicateInQbv1 = g)),
                            checked: i.authorizeDuplicateInQbv1,
                            disabled: !i.importFromQBv1,
                            onChange: a.changeUpload,
                            class: 'pt-1 col-4',
                          },
                          null,
                          8,
                          ['modelValue', 'checked', 'disabled', 'onChange'],
                        ),
                      ]))
                    : j('', true),
                  t.can('import', 'QBv2')
                    ? (P(),
                      G('div', A1, [
                        A('span', I1, q(t.trans.get('__JSON__.upload.content.importQBv2')), 1),
                        B(
                          o,
                          {
                            modelValue: i.importFromQBv2,
                            'onUpdate:modelValue': e[5] || (e[5] = (g) => (i.importFromQBv2 = g)),
                            checked: i.importFromQBv2,
                            disabled: i.importFromQBv1,
                            onChange: a.changeUpload,
                            class: 'pt-1 col-4',
                          },
                          null,
                          8,
                          ['modelValue', 'checked', 'disabled', 'onChange'],
                        ),
                      ]))
                    : j('', true),
                  A('div', T1, [
                    A(
                      'div',
                      {
                        id: 'droparea',
                        onDrop: e[9] || (e[9] = (...g) => a.activeUpload && a.activeUpload(...g)),
                        class: 'uplaoder droparea uploader-custom-drop-browse',
                      },
                      [
                        A('div', b1, [
                          A(
                            'div',
                            {
                              class: 'btn-xs text-white',
                              onClick: e[6] || (e[6] = (...g) => a.showUpload && a.showUpload(...g)),
                            },
                            q(t.trans.get('__JSON__.upload.content.dropFile')),
                            1,
                          ),
                          A(
                            'div',
                            {
                              class: 'pt-2 pb-2 btn-xs text-white clickableText',
                              onClick: e[7] || (e[7] = (...g) => a.fileMode && a.fileMode(...g)),
                            },
                            q(t.trans.get('__JSON__.upload.content.clickToBrowse')),
                            1,
                          ),
                          A(
                            'div',
                            {
                              class: 'btn-xs text-white clickableText',
                              onClick: e[8] || (e[8] = (...g) => a.directoryMode && a.directoryMode(...g)),
                            },
                            q(t.trans.get('__JSON__.upload.content.clickToBrowseFolder')),
                            1,
                          ),
                        ]),
                      ],
                      32,
                    ),
                  ]),
                ],
                512,
              ),
              [[at, !i.uploadInProgress]],
            ),
            Ue(
              A(
                'div',
                { onClick: e[10] || (e[10] = (...g) => a.showUpload && a.showUpload(...g)) },
                [A('div', N1, q(t.trans.get('__JSON__.upload.content.uploadProgress', { number: a.pctData })), 1)],
                512,
              ),
              [[at, i.uploadInProgress]],
            ),
          ],
          512,
        ),
        [[at, i.isReady]],
      ),
    ]),
    A('div', O1, [
      i.listProgressions.length
        ? (P(),
          G('div', D1, [
            i.listProgressions.filter((g) => g.isRunning && g.notification.value === 'messageDeletable').length
              ? (P(),
                G('div', R1, [
                  A('div', P1, [
                    A('div', M1, [
                      A('span', k1, q(t.trans.get('__JSON__.paramsSideBarLeft.notif')), 1),
                      B(
                        s,
                        {
                          content: t.trans.get('__JSON__.notification.content.clearAll'),
                          animation: t.default_SF_Props.animationTooltip,
                        },
                        {
                          default: W(() => [
                            A('span', {
                              class: 'col-2 sf-icon-cross-close',
                              style: {
                                display: 'flex',
                                'align-items': 'center',
                                cursor: 'pointer',
                              },
                              onClick: e[11] || (e[11] = (g) => a.deleteAllNotifsForUser('progressions')),
                            }),
                          ]),
                          _: 1,
                        },
                        8,
                        ['content', 'animation'],
                      ),
                    ]),
                  ]),
                ]))
              : j('', true),
            (P(true),
            G(
              Rt,
              null,
              Sr(
                i.listProgressions,
                (g) => (
                  P(),
                  G(
                    Rt,
                    null,
                    [
                      g.isRunning
                        ? (P(),
                          G(
                            'div',
                            {
                              class: 'mt-1',
                              key: g.uuid,
                            },
                            [
                              g.notification.value == 'messageDeletable'
                                ? (P(),
                                  G('div', B1, [
                                    A('div', L1, [
                                      A('span', F1, q(g.notification.text), 1),
                                      g.notification.deletable
                                        ? (P(),
                                          G(
                                            'span',
                                            {
                                              key: 0,
                                              class: 'col-2 sf-icon-cross-close',
                                              style: {
                                                display: 'flex',
                                                'align-items': 'center',
                                                cursor: 'pointer',
                                              },
                                              onClick: (_) => a.deleteNotifForUser(g.notification.id),
                                            },
                                            null,
                                            8,
                                            U1,
                                          ))
                                        : j('', true),
                                    ]),
                                  ]))
                                : j('', true),
                              g.notification.value == 'running'
                                ? (P(),
                                  G('div', V1, [
                                    A(
                                      'span',
                                      G1,
                                      q(g.notification.text) +
                                        q(g.notification.suffix ? ' : ' + g.notification.suffix : ''),
                                      1,
                                    ),
                                    B(
                                      c,
                                      {
                                        id: g.uuid,
                                        type: 'Linear',
                                        height: '20',
                                        width: '240',
                                        value: i.valueIndeterminate,
                                        isIndeterminate: true,
                                      },
                                      null,
                                      8,
                                      ['id', 'value'],
                                    ),
                                    g.notification.deletable
                                      ? (P(),
                                        G(
                                          'span',
                                          {
                                            key: 0,
                                            class: 'sf-icon-cross-close',
                                            onClick: (_) => a.deleteNotifForUser(g.notification.id),
                                          },
                                          null,
                                          8,
                                          H1,
                                        ))
                                      : j('', true),
                                  ]))
                                : j('', true),
                              g.notification.percentageProgress && g.notification.value == 'pct'
                                ? (P(),
                                  G(
                                    'div',
                                    {
                                      key: 2,
                                      class: ir({ disabledIcon: g.notification.pct === 0 }),
                                    },
                                    [
                                      A(
                                        'span',
                                        X1,
                                        q(g.notification.text) + ' : ' + q(g.notification.percentageProgress),
                                        1,
                                      ),
                                      B(
                                        c,
                                        {
                                          id: g.uuid,
                                          type: 'Linear',
                                          height: '20',
                                          width: '240',
                                          value: g.notification.pct,
                                        },
                                        null,
                                        8,
                                        ['id', 'value'],
                                      ),
                                    ],
                                    2,
                                  ))
                                : j('', true),
                            ],
                          ))
                        : j('', true),
                    ],
                    64,
                  )
                ),
              ),
              256,
            )),
          ]))
        : j('', true),
    ]),
    A('div', z1, [
      i.listMessages.filter(
        (g) => g.isRunning && (g.notification.value == 'messageDeletable' || g.notification.value == 'running'),
      ).length
        ? (P(),
          G('div', j1, [
            A('div', W1, [
              A('div', $1, [
                A('span', J1, q(t.trans.get('__JSON__.paramsSideBarLeft.notif')), 1),
                A('div', q1, [
                  B(
                    s,
                    {
                      content: t.trans.get('__JSON__.notification.content.clearAll'),
                      animation: t.default_SF_Props.animationTooltip,
                    },
                    {
                      default: W(() => [
                        A('span', {
                          class: 'sf-icon-cross-close icon-m-auto',
                          style: {
                            display: 'flex',
                            'align-items': 'center',
                            cursor: 'pointer',
                          },
                          onClick: e[12] || (e[12] = (g) => a.deleteAllNotifsForUser('messages')),
                        }),
                      ]),
                      _: 1,
                    },
                    8,
                    ['content', 'animation'],
                  ),
                ]),
              ]),
            ]),
          ]))
        : j('', true),
      i.listMessages.length
        ? (P(),
          G('div', Y1, [
            (P(true),
            G(
              Rt,
              null,
              Sr(
                i.listMessages,
                (g) => (
                  P(),
                  G(
                    Rt,
                    null,
                    [
                      g.isRunning
                        ? (P(),
                          G('div', K1, [
                            g.notification.value == 'messageDeletable'
                              ? (P(),
                                G('div', Z1, [
                                  A('div', Q1, [
                                    A(
                                      'span',
                                      {
                                        class: 'col-10 ps-2',
                                        style: ra([
                                          { 'overflow-wrap': 'break-word' },
                                          g.notification.hasWrap ? 'white-space: break-spaces' : '',
                                        ]),
                                      },
                                      q(g.notification.text),
                                      5,
                                    ),
                                    A('div', e0, [
                                      g.notification.label === 'download'
                                        ? (P(),
                                          G(
                                            'span',
                                            {
                                              key: 0,
                                              class: 'iconNotification sf-icon-document-download',
                                              style: { cursor: 'pointer' },
                                              onClick: (_) =>
                                                a.downloadNotification(g.notification.id, g.notification.downloadName),
                                            },
                                            null,
                                            8,
                                            t0,
                                          ))
                                        : (P(), G('span', r0)),
                                      g.notification.deletable
                                        ? (P(),
                                          G(
                                            'span',
                                            {
                                              key: 2,
                                              class: 'iconNotification sf-icon-cross-close',
                                              style: { cursor: 'pointer' },
                                              onClick: (_) => a.deleteNotifForUser(g.notification.id),
                                            },
                                            null,
                                            8,
                                            n0,
                                          ))
                                        : (P(), G('span', i0)),
                                    ]),
                                  ]),
                                ]))
                              : j('', true),
                            g.notification.value == 'running'
                              ? (P(),
                                G('div', a0, [
                                  A(
                                    'span',
                                    o0,
                                    q(g.notification.text) +
                                      q(g.notification.suffix ? ' : ' + g.notification.suffix : ''),
                                    1,
                                  ),
                                  B(
                                    c,
                                    {
                                      id: g.uuid,
                                      type: 'Linear',
                                      height: '20',
                                      width: '240',
                                      value: i.valueIndeterminate,
                                      isIndeterminate: true,
                                    },
                                    null,
                                    8,
                                    ['id', 'value'],
                                  ),
                                  g.notification.deletable
                                    ? (P(),
                                      G(
                                        'span',
                                        {
                                          key: 0,
                                          class: 'sf-icon-cross-close',
                                          onClick: (_) => a.deleteNotifForUser(g.notification.id),
                                        },
                                        null,
                                        8,
                                        s0,
                                      ))
                                    : j('', true),
                                ]))
                              : j('', true),
                            g.notification.percentageProgress && g.notification.value == 'pct'
                              ? (P(),
                                G(
                                  'div',
                                  {
                                    key: 2,
                                    class: ir({ disabledIcon: g.notification.pct === 0 }),
                                  },
                                  [
                                    A(
                                      'span',
                                      c0,
                                      q(g.notification.text) + ' : ' + q(g.notification.percentageProgress),
                                      1,
                                    ),
                                    B(
                                      c,
                                      {
                                        id: g.uuid,
                                        type: 'Linear',
                                        height: '20',
                                        width: '240',
                                        value: g.notification.pct,
                                      },
                                      null,
                                      8,
                                      ['id', 'value'],
                                    ),
                                  ],
                                  2,
                                ))
                              : j('', true),
                          ]))
                        : j('', true),
                    ],
                    64,
                  )
                ),
              ),
              256,
            )),
          ]))
        : j('', true),
    ]),
    A('div', l0, [
      A('li', f0, [
        A('div', u0, [
          B(
            l,
            {
              id: 'avatarMain',
              class: 'horizontal-menubar user',
              items: i.accountMenuItem,
              select: a.onSelect,
              style: {
                'padding-top': '0px',
                'padding-bottom': '0px',
              },
            },
            {
              default: W(() => [
                A(
                  'span',
                  {
                    class: 'e-avatar e-avatar-small e-avatar-circle',
                    style: ra([{ border: '3px white solid' }, a.avatarStyle]),
                  },
                  [
                    i.userImage
                      ? (P(),
                        G(
                          'img',
                          {
                            key: 0,
                            class: 'image',
                            src: i.userImage,
                            onError: e[13] || (e[13] = (...g) => t.replaceByDefault && t.replaceByDefault(...g)),
                          },
                          null,
                          40,
                          h0,
                        ))
                      : (P(), G('div', d0, q(i.avatar), 1)),
                  ],
                  4,
                ),
              ]),
              _: 1,
            },
            8,
            ['items', 'select'],
          ),
          B(
            h,
            {
              id: 'dialog',
              header: 'headerTemplate',
              content: 'templateContent',
              position: i.positionAbout,
              width: '250px',
              height: '220px',
              visible: false,
            },
            {
              headerTemplate: W(() => [B(f, { title: 'QUICKBRAIN V2' })]),
              templateContent: W(() => [
                A('div', null, q('@Crazylog 2012-' + i.year), 1),
                A(
                  'div',
                  p0,
                  q(t.trans.get('__JSON__.version.branch')) + ' : ' + q(i.tagVersion ? i.tagVersion.branch : '?'),
                  1,
                ),
                A('div', v0, q(t.trans.get('__JSON__.version.commit')) + ' : ' + q(i.tagVersion.commit), 1),
                A('div', g0, q(t.trans.get('__JSON__.version.tag')) + ' : ' + q(i.tagVersion.tag), 1),
                A('div', null, [
                  B(
                    u,
                    {
                      cssClass: 'e-info',
                      class: 'e-control e-btn e-primary mt-3 float-end',
                      onClick: a.hide,
                    },
                    {
                      default: W(() => [rn(q(t.trans.get('__JSON__.main.modal.button.ok')), 1)]),
                      _: 1,
                    },
                    8,
                    ['onClick'],
                  ),
                ]),
              ]),
              _: 1,
            },
            8,
            ['position'],
          ),
        ]),
      ]),
      A('li', _0, [
        A('div', m0, [
          A('div', x0, [
            B(
              l,
              {
                target: '#notificationTemplate',
                iconCss: 'sf-icon-reminder--02',
                cssClass: 'horizontal-menubar',
                iconPosition: 'Top',
                ref: 'notificationMenu',
              },
              null,
              512,
            ),
            Ue(
              A(
                'span',
                { class: 'mt-2 e-badge e-badge-info e-badge-notification e-badge-overlap' },
                q(i.listProgressions.length),
                513,
              ),
              [[at, i.listProgressions.length]],
            ),
          ]),
        ]),
      ]),
      A('li', y0, [
        A('div', w0, [
          A('div', E0, [
            B(
              l,
              {
                target: '#messageTemplate',
                iconCss: 'sf-icon-message-mail',
                cssClass: 'horizontal-menubar',
                iconPosition: 'Top',
                ref: 'notificationMenu',
              },
              null,
              512,
            ),
            Ue(
              A(
                'span',
                { class: 'mt-2 e-badge e-badge-info e-badge-notification e-badge-overlap' },
                q(i.listMessages.length),
                513,
              ),
              [[at, i.listMessages.length]],
            ),
          ]),
        ]),
      ]),
      A('li', C0, [
        A('div', S0, [
          A('div', A0, [
            B(
              l,
              {
                disabled: !t.can('upload', 'files'),
                target: '#uploadTemplate',
                iconCss: 'sf-icon-document-upload',
                cssClass: 'horizontal-menubar',
                iconPosition: 'Top',
                class: ir({ disabledIcon: !t.can('upload', 'files') }),
                ref: 'uploadMenu',
              },
              null,
              8,
              ['disabled', 'class'],
            ),
            Ue(A('span', I0, [rn(q(a.pctData), 1), e[18] || (e[18] = A('span', null, '%', -1))], 512), [
              [at, a.pctData > 0],
            ]),
          ]),
        ]),
      ]),
      t.can('show carts') ? (P(), ge(d, { key: 0 })) : j('', true),
      i.showQrCode
        ? (P(),
          G('li', T0, [
            A('div', b0, [
              A('div', N0, [
                B(
                  p,
                  {
                    id: 'qrcodeReaderMain',
                    items: i.qrcodeMenuItem,
                    iconCss: 'sf-icon-qr-code---01',
                    cssClass: 'horizontal-menubar',
                    select: a.onSelectQRCode,
                    click: a.onClickQRCode,
                    iconPosition: 'Top',
                  },
                  null,
                  8,
                  ['items', 'select', 'click'],
                ),
              ]),
            ]),
          ]))
        : j('', true),
      A('li', O0, [
        A('div', {
          class: 'sf-icon-search-wf search-icone',
          onClick: e[14] || (e[14] = co((g) => (i.searchGlobal = !i.searchGlobal), ['stop'])),
        }),
      ]),
      A('li', D0, [
        A('div', R0, [
          A('div', P0, [
            A('div', M0, [
              i.searchGlobal
                ? Ue(
                    (P(),
                    G(
                      'input',
                      {
                        key: 0,
                        class: 'e-input text-white horizontal-menu',
                        type: 'text',
                        'onUpdate:modelValue': e[15] || (e[15] = (g) => (i.valueSearch = g)),
                        id: 'input_searchglobal',
                        autocomplete: 'off',
                        onKeyup: e[16] || (e[16] = Gs((...g) => a.research && a.research(...g), ['enter'])),
                        style: {
                          'border-color': 'white',
                          width: '300px',
                        },
                      },
                      null,
                      544,
                    )),
                    [[vi, i.valueSearch]],
                  )
                : j('', true),
              e[19] || (e[19] = A('span', { class: 'e-float-line' }, null, -1)),
              A('label', k0, q(t.trans.get('__JSON__.main.content.globalSearch')), 1),
            ]),
          ]),
        ]),
      ]),
    ]),
    i.codereader
      ? (P(),
        ge(v, {
          key: 0,
          onClose: e[17] || (e[17] = (g) => (i.codereader = false)),
        }))
      : j('', true),
  ]);
}
const L0 = rt(h1, [
  ['render', B0],
  ['__scopeId', 'data-v-b9305a86'],
]);
const F0 = {
  components: { menuRight: L0 },
  data() {
    return {};
  },
};
const U0 = {
  class: 'header-section dock-menu',
  id: 'header',
};
const V0 = {
  class: 'header-list headerFond',
  id: 'listFond',
};
function G0(t, e, r, n, i, a) {
  const o = L('menuRight');
  P();
  return G('div', null, [
    A('div', U0, [
      A('ul', V0, [
        B(o),
        e[0] ||
          (e[0] = A(
            'img',
            {
              src: '/logoHome',
              class: 'img-fluid',
              id: 'logo_quickbrain',
            },
            null,
            -1,
          )),
      ]),
    ]),
  ]);
}
const H0 = rt(F0, [['render', G0]]);
const X0 = {
  data() {
    return { routerKey: UUID.generate() };
  },
  computed: {
    centralPanels() {
      return this.centralPanelsStore.panelDatas;
    },
  },
  watch: {
    centralPanels: {
      immediate: true,
      deep: true,
      handler() {
        this.centralPanelsManager();
        let t = [];
        this.centralPanels.forEach((e) => {
          let r = {
            centralPanelType: e.centralPanelType,
            centralPanelData: { ...e.centralPanelData },
          };
          if (r && r.centralPanelData) {
            r.centralPanelData.draweToDrawe = null;
          }
          t.push(r);
        });
        sessionStorage.setItem('panelDatas', JSON.stringify(t));
      },
    },
  },
  methods: {
    refreshRouterKey() {
      this.routerKey = UUID.generate();
    },
    centralPanelsManager() {
      if (this.centralPanels && this.centralPanels.length) {
        let t = { name: 'centralPanels' };
        this.$router.push(t);
      }
    },
  },
  mounted() {
    if (sessionStorage.getItem('externalSearch')) {
      let t = JSON.parse(sessionStorage.getItem('externalSearch'));
      if (t && t.type === 'centralPanels') {
        this.centralPanelsStore.addingCentralPanels(t.content);
      }
    }
    b.$on('refreshRouterKey', this.refreshRouterKey);
  },
  beforeUnmount() {
    b.$off('refreshRouterKey', this.refreshRouterKey);
  },
};
const z0 = {
  style: {
    position: 'relative',
    'z-index': '2',
  },
};
function j0(t, e, r, n, i, a) {
  const o = L('router-view');
  P();
  return G('div', z0, [(P(), ge(o, { key: i.routerKey }))]);
}
const W0 = rt(X0, [['render', j0]]);
const $0 = {
  mixins: [ic, ac, gi],
  components: {
    PoiActions: nc,
    supplierNomenclature: oc,
    headerTemplate: pn,
  },
  props: { contentDataGrid: { required: true } },
  data() {
    return {
      gridNameForExport: this.trans.get('__JSON__.main.grid.export.gridName.modalShowObjectGrid'),
      width: '1000px',
      animationSettings: { effect: 'None' },
      showLogs: true,
    };
  },
  computed: {
    objectType() {
      if (this.contentDataGrid && this.contentDataGrid.length) {
        let t = this.contentDataGrid[0];
        if (this.contentDataGrid[0]) return this.contentDataGrid[0].api_prefix;
      }
      return null;
    },
    objectColumns() {
      if (this.contentDataGrid && this.contentDataGrid.length) {
        let t = [];
        let e = this.contentDataGrid[0];
        if (this.contentDataGrid[0] && this.contentDataGrid[0].api_prefix)
          switch (this.contentDataGrid[0].api_prefix) {
            case 'pois':
              t = this.poisGridColumns;
              break;
            case 'tasks':
              t = this.tasksGridColumns(false);
              break;
            case 'assets':
              t = [
                {
                  field: 'id',
                  headerText: this.trans.get('__JSON__.model.value.id'),
                  isPrimaryKey: true,
                  type: 'number',
                  filter: this.gridSettings.filterNumber,
                  visible: true,
                },
                {
                  field: 'code',
                  headerText: this.trans.get('__JSON__.model.value.code'),
                  isPrimaryKey: false,
                  type: 'string',
                  filter: this.gridSettings.filterWithoutCheckbox,
                  visible: true,
                },
                {
                  field: 'referenceNames',
                  headerText: this.trans.get('__JSON__.items.value.ref_supplier'),
                  isPrimaryKey: false,
                  type: 'string',
                  filter: this.gridSettings.filterExcel,
                  template: 'templateSupplierReference',
                  visible: true,
                },
                {
                  field: 'supplierNames',
                  headerText: this.trans.get('__JSON__.items.value.supplierDesignation'),
                  isPrimaryKey: false,
                  type: 'string',
                  filter: this.gridSettings.filterExcel,
                  template: 'templateSupplierDesignation',
                  visible: true,
                },
                {
                  field: 'supplierCodes',
                  headerText: this.trans.get('__JSON__.items.value.supplierCode'),
                  isPrimaryKey: false,
                  type: 'string',
                  filter: this.gridSettings.filterExcel,
                  template: 'templateSupplierCode',
                  visible: true,
                },
                {
                  field: 'designation',
                  headerText: this.trans.get('__JSON__.model.value.designation'),
                  isPrimaryKey: false,
                  type: 'string',
                  filter: this.gridSettings.filterWithoutCheckbox,
                  visible: true,
                },
              ];
              break;
          }
        return t;
      } else return [];
    },
  },
  methods: {
    closeModal() {
      this.$refs.modalShowObject.hide();
    },
    callGoToViewerPoi(t) {
      this.fileGoToPoiViewer({ id: t.data.primary_file_id }, t.data);
      this.closeModal();
    },
    onModalClose() {
      this.$emit('close');
    },
    recordDoubleClickOverride(t) {
      if (t.rowData && t.rowData.api_prefix && t.rowData.id) {
        b.$emit('showPanel', {
          panelDroite: true,
          refObjet: t.rowData.id,
          typeObject: t.rowData.api_prefix,
        });
        this.closeModal();
      }
    },
  },
};
function J0(t, e, r, n, i, a) {
  const o = L('headerTemplate');
  const s = L('e-column');
  const c = L('e-columns');
  const l = L('colorValue');
  const f = L('polymorphismeColumn');
  const u = L('polymorphisme-column');
  const h = L('agents-template');
  const d = L('supplier-nomenclature');
  const p = L('poi-actions');
  const v = L('ejs-grid');
  const g = L('ejs-dialog');
  P();
  return G('div', null, [
    B(
      g,
      {
        ref: 'modalShowObject',
        header: 'headerTemplate',
        content: 'templateContent',
        width: i.width,
        showCloseIcon: true,
        allowDragging: true,
        animationSettings: i.animationSettings,
        close: a.onModalClose,
        visible: true,
        isModal: true,
      },
      {
        headerTemplate: W(() => [
          B(o, { title: t.trans.get('__JSON__.main.modal.content.listing') }, null, 8, ['title']),
        ]),
        templateContent: W(() => [
          A('div', null, [
            B(
              v,
              {
                dataSource: r.contentDataGrid,
                id: 'modalShowObjectGrid',
                enablePersistence: false,
                class: 'gridModal',
                created: t.onGridCreate,
                ref: t.gridSettings.ref,
                actionBegin: t.actionBegin,
                actionComplete: t.actionComplete,
                allowExcelExport: t.gridSettings.allowExcelExport,
                allowFiltering: t.gridSettings.allowFiltering,
                allowPaging: t.gridSettings.allowPaging,
                allowReordering: t.gridSettings.allowReordering,
                allowResizing: t.gridSettings.allowResizing,
                allowRowDragAndDrop: false,
                allowSelection: false,
                allowSorting: t.gridSettings.allowSorting,
                clipMode: t.gridSettings.clipMode,
                dataBound: t.dataBound,
                enableHover: t.gridSettings.enableHover,
                filterSettings: t.gridSettings.filterSettings,
                height: t.gridSettings.height,
                pageSettings: t.gridSettings.pageSettings,
                recordDoubleClick: a.recordDoubleClickOverride,
                rowDragStart: t.rowDragStart,
                rowDropSettings: t.gridSettings.rowDropSettings,
                rowHeight: t.gridSettings.rowHeight,
                searchSettings: t.gridSettings.searchSettings,
                selectionSettings: t.gridSettings.selectionSettings,
                showColumnChooser: t.gridSettings.showColumnChooser,
                toolbar: t.gridSettings.toolbar,
                toolbarClick: t.toolbarClick,
              },
              {
                templateType: W(({ data: _ }) => [
                  B(
                    l,
                    {
                      colorObjectName: 'type',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateObject: W(({ data: _ }) => [
                  B(
                    f,
                    {
                      polymorph: 'object',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateTag: W(({ data: _ }) => [
                  B(
                    u,
                    {
                      polymorph: 'tag',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateLocation: W(({ data: _ }) => [
                  B(
                    u,
                    {
                      polymorph: 'location',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateSignalTrigger: W(({ data: _ }) => [
                  B(
                    u,
                    {
                      polymorph: 'signal_trigger_signal',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateStatus: W(({ data: _ }) => [
                  B(
                    l,
                    {
                      colorObjectName: 'status',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templatePriority: W(({ data: _ }) => [
                  B(
                    l,
                    {
                      colorObjectName: 'priority',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateConformity: W(({ data: _ }) => [
                  B(
                    l,
                    {
                      colorObjectName: 'conformity',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateTypology: W(({ data: _ }) => [
                  B(
                    l,
                    {
                      colorObjectName: 'typology',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateMaintenanceLevel: W(({ data: _ }) => [
                  B(
                    l,
                    {
                      colorObjectName: 'maintenance_level',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateResponsible: W(({ data: _ }) => [
                  B(
                    u,
                    {
                      polymorph: 'responsible',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateAgents: W(({ data: _ }) => [
                  B(
                    h,
                    {
                      codeName: 'listAgentCodes',
                      designationName: 'listAgentDesignations',
                      iconName: 'listIcons',
                      background: 'listAgent_color',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateInstruction: W(({ data: _ }) => [
                  B(
                    u,
                    {
                      polymorph: 'instruction',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateMaintenancePlan: W(({ data: _ }) => [
                  B(
                    u,
                    {
                      polymorph: 'maintenance_plan',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templatePlanning: W(({ data: _ }) => [
                  B(
                    u,
                    {
                      polymorph: 'planning',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateSupplierReference: W(({ data: _ }) => [
                  B(
                    d,
                    {
                      manufacturer: 'manufacturerReference',
                      list: 'listReferences',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateSupplierDesignation: W(({ data: _ }) => [
                  B(
                    d,
                    {
                      manufacturer: 'manufacturerDesignation',
                      list: 'listSuppliers',
                      manufacturerColor: 'manufacturerColor',
                      listColor: 'listSuppliersColor',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                templateSupplierCode: W(({ data: _ }) => [
                  B(
                    d,
                    {
                      manufacturer: 'manufacturerCode',
                      list: 'listSuppliersCode',
                      manufacturerColor: 'manufacturerColor',
                      listColor: 'listSuppliersColor',
                      data: _,
                    },
                    null,
                    8,
                    ['data'],
                  ),
                ]),
                poiActions: W(({ data: _ }) => [
                  B(
                    p,
                    {
                      data: _,
                      onlyEye: true,
                      onGoToViewerPoiFromGrid: a.callGoToViewerPoi,
                    },
                    null,
                    8,
                    ['data', 'onGoToViewerPoiFromGrid'],
                  ),
                ]),
                default: W(() => [
                  B(c, null, {
                    default: W(() => [
                      a.objectType === 'pois'
                        ? (P(),
                          ge(s, {
                            key: 0,
                            field: 'actions',
                            headerText: '',
                            template: 'poiActions',
                            allowResizing: false,
                            allowReordering: false,
                            lockColumn: true,
                            allowFiltering: false,
                            clipMode: 'Clip',
                            showInColumnChooser: false,
                            allowSorting: false,
                            textAlign: 'Center',
                          }))
                        : j('', true),
                      (P(true),
                      G(
                        Rt,
                        null,
                        Sr(
                          a.objectColumns,
                          (_, y) => (
                            P(),
                            ge(
                              s,
                              {
                                key: y,
                                field: _.field,
                                headerText: _.headerText,
                                isPrimaryKey: _.isPrimaryKey,
                                type: _.type,
                                filter: _.filter,
                                format: _.format,
                                template: _.template,
                                textAlign: _.textAlign,
                                displayAsCheckBox: _.displayAsCheckBox,
                                width: _.width,
                                visible: _.visible,
                              },
                              null,
                              8,
                              [
                                'field',
                                'headerText',
                                'isPrimaryKey',
                                'type',
                                'filter',
                                'format',
                                'template',
                                'textAlign',
                                'displayAsCheckBox',
                                'width',
                                'visible',
                              ],
                            )
                          ),
                        ),
                        128,
                      )),
                      i.showLogs
                        ? (P(true),
                          G(
                            Rt,
                            { key: 1 },
                            Sr(
                              t.gridSettings.columnsLogs,
                              (_, y) => (
                                P(),
                                ge(
                                  s,
                                  {
                                    key: y,
                                    field: _.field,
                                    type: _.type,
                                    headerText: _.headerText,
                                    filter: _.filter,
                                    format: _.format,
                                    visible: _.visible,
                                  },
                                  null,
                                  8,
                                  ['field', 'type', 'headerText', 'filter', 'format', 'visible'],
                                )
                              ),
                            ),
                            128,
                          ))
                        : j('', true),
                    ]),
                    _: 1,
                  }),
                ]),
                _: 1,
              },
              8,
              [
                'dataSource',
                'created',
                'actionBegin',
                'actionComplete',
                'allowExcelExport',
                'allowFiltering',
                'allowPaging',
                'allowReordering',
                'allowResizing',
                'allowSorting',
                'clipMode',
                'dataBound',
                'enableHover',
                'filterSettings',
                'height',
                'pageSettings',
                'recordDoubleClick',
                'rowDragStart',
                'rowDropSettings',
                'rowHeight',
                'searchSettings',
                'selectionSettings',
                'showColumnChooser',
                'toolbar',
                'toolbarClick',
              ],
            ),
          ]),
        ]),
        _: 1,
      },
      8,
      ['width', 'animationSettings', 'close'],
    ),
  ]);
}
const q0 = rt($0, [['render', J0]]);
const Y0 = {
  components: { headerTemplate: pn },
  props: { selectedCart: { required: true } },
  data() {
    return {
      width: '400px',
      animationSettings: { effect: 'None' },
      fields: {
        text: 'name',
        value: 'id',
      },
    };
  },
  methods: {
    closeModal() {
      this.$emit('close');
    },
    updateCartName() {
      axios
        .put('api/carts/' + this.selectedCart.id, { name: this.selectedCart.name })
        .then((t) => {
          b.$emit('updateSidebarCart');
          b.$emit('updateMenuRightCart');
          this.closeModal();
        })
        .catch((t) => {
          console.error(t);
        });
    },
  },
};
const K0 = { class: 'container' };
const Z0 = { class: 'row' };
const Q0 = { class: 'e-footer-content mt-4' };
function ep(t, e, r, n, i, a) {
  const o = L('headerTemplate');
  const s = L('ejs-button');
  const c = L('ejs-dialog');
  P();
  return G('div', null, [
    B(
      c,
      {
        ref: 'updateNameCart',
        header: 'headerTemplate',
        content: 'templateContent',
        width: i.width,
        showCloseIcon: true,
        allowDragging: true,
        animationSettings: i.animationSettings,
        close: a.closeModal,
        visible: true,
        isModal: true,
      },
      {
        headerTemplate: W(() => [
          B(o, { title: t.trans.get('__JSON__.cart.content.updateNameCart') }, null, 8, ['title']),
        ]),
        templateContent: W(() => [
          A('div', null, [
            A('div', K0, [
              A('div', Z0, [
                Ue(
                  A(
                    'input',
                    {
                      class: 'e-input mb-0',
                      type: 'text',
                      'onUpdate:modelValue': e[0] || (e[0] = (l) => (r.selectedCart.name = l)),
                    },
                    null,
                    512,
                  ),
                  [[vi, r.selectedCart.name, void 0, { lazy: true }]],
                ),
              ]),
            ]),
            A('div', Q0, [
              A('span', null, [
                B(
                  s,
                  {
                    class: 'e-control e-btn sendButton',
                    onClick: a.closeModal,
                  },
                  {
                    default: W(() => [rn(q(t.trans.get('__JSON__.main.modal.button.cancel')), 1)]),
                    _: 1,
                  },
                  8,
                  ['onClick'],
                ),
                B(
                  s,
                  {
                    cssClass: 'e-info',
                    class: 'e-control e-btn e-primary sendButton',
                    onClick: a.updateCartName,
                  },
                  {
                    default: W(() => [rn(q(t.trans.get('__JSON__.main.modal.button.update')), 1)]),
                    _: 1,
                  },
                  8,
                  ['onClick'],
                ),
              ]),
            ]),
          ]),
        ]),
        _: 1,
      },
      8,
      ['width', 'animationSettings', 'close'],
    ),
  ]);
}
const tp = rt(Y0, [['render', ep]]);
const rp = {
  props: {
    checkboxChange: { required: true },
    data: { required: true },
  },
  data() {
    return { cartSelected: false };
  },
  watch: {
    cartSelected() {
      this.checkboxChange({
        cartId: this.data.id,
        selected: this.cartSelected,
      });
    },
  },
};
const np = { class: 'list-wrapper' };
const ip = { class: 'text' };
function ap(t, e, r, n, i, a) {
  P();
  return G('div', np, [
    Ue(
      A(
        'input',
        {
          'onUpdate:modelValue': e[0] || (e[0] = (o) => (i.cartSelected = o)),
          onClick: e[1] || (e[1] = co(() => {}, ['stop'])),
          type: 'checkbox',
          class: 'checkboxCart',
        },
        null,
        512,
      ),
      [[Hs, i.cartSelected]],
    ),
    A(
      'span',
      {
        class: ir([r.data.node_icon, 'e-avatar-cart']),
      },
      null,
      2,
    ),
    A('span', ip, q(r.data.name) + ' : ' + q(r.data.size), 1),
  ]);
}
const op = rt(rp, [
  ['render', ap],
  ['__scopeId', 'data-v-79d84897'],
]);
const sp = {
  components: {
    ModalEditAssets: sc,
    SelectStock: fo,
    cartUpdateName: tp,
    cartTemplateList: op,
  },
  data() {
    return {
      carts: [],
      selectedCartIds: [],
      assets: [],
      cartName: null,
      menuFields: {
        text: 'name',
        iconCss: 'node_icon',
        value: 'id',
      },
      selectedCart: null,
      selectionSettings: { mode: 'Single' },
      showUpdateNameModal: false,
      showSelectStock: false,
      showUpdateAssetsModal: false,
    };
  },
  computed: {
    menuItems() {
      return [
        {
          text: this.trans.get('__JSON__.cart.content.createSupplyMovement'),
          id: 'createSupplyMovementFromCart',
        },
        {
          text: this.trans.get('__JSON__.cart.content.createPurchaseRequest'),
          id: 'createPurchaseRequestFromCart',
        },
        {
          text: this.trans.get('__JSON__.cart.content.updateNameCart'),
          id: 'updateNameCart',
        },
        {
          text: this.trans.get('__JSON__.cart.content.clearCart'),
          id: 'clearCart',
        },
        {
          text: this.trans.get('__JSON__.cart.content.deleteCart'),
          id: 'deleteCart',
        },
      ];
    },
  },
  methods: {
    checkboxChange(t) {
      t.selected
        ? this.selectedCartIds.push(t.cartId)
        : (this.selectedCartIds = this.selectedCartIds.filter((e) => t.cartId !== e));
    },
    getCartsData() {
      axios
        .get('api/carts')
        .then((t) => {
          this.carts = t.data.carts;
        })
        .catch((t) => {
          console.error(t);
        });
    },
    onContextMenuBeforeOpen(t) {
      this.selectedCart = null;
      this.$refs.contextMenuCarts.hideItems(
        ['createSupplyMovementFromCart', 'createPurchaseRequestFromCart', 'updateNameCart', 'clearCart', 'deleteCart'],
        true,
      );
      let e = [];
      if (t && t.event && t.event.target) {
        let r = t.event.target;
        for (; r.parentElement && !(r.id === 'cartSidebar' || r.classList.contains('e-list-item')); )
          r = r.parentElement;
        if (!r.classList.contains('e-list-item')) {
          t.cancel = true;
          return;
        }
        let n = r.dataset.value;
        this.selectedCart = this.carts.find((i) => i.id == r.dataset.value);
        if (this.selectedCart) {
          if (this.selectedCart.api_prefix_type === 'items') {
            if (this.can('create', 'supplyMovement')) {
              e.push('createSupplyMovementFromCart');
            }
            if (this.can('create', 'purchaseRequests')) {
              e.push('createPurchaseRequestFromCart');
            }
          }
          if (this.can('update', 'carts')) {
            e.push('updateNameCart');
          }
          if (this.selectedCart.size > 0 && this.can('update', 'carts')) {
            e.push('clearCart');
          }
          if (this.can('delete', 'carts')) {
            e.push('deleteCart');
          }
        }
      }
      if (!e.length) {
        t.cancel = true;
        return;
      }
      this.$refs.contextMenuCarts.showItems(e, true);
    },
    closeUpdateNameModal() {
      this.showUpdateNameModal = false;
    },
    closeSelectStockModal() {
      this.showSelectStock = false;
    },
    closeUpdateModal() {
      this.showUpdateAssetsModal = false;
    },
    onMenuItemSelect(t) {
      if (this.selectedCart)
        switch (t.item.id) {
          case 'updateNameCart':
            this.showUpdateNameModal = true;
            break;
          case 'clearCart':
            axios
              .post('api/carts/clearCart/' + this.selectedCart.id, {})
              .then((r) => {
                this.getCartsData();
                b.$emit('updateMenuRightCart');
              })
              .catch((r) => {
                console.error(r);
              });
            break;
          case 'deleteCart':
            {
              Pt(document.getElementById('spinnerApp'));
              axios
                .delete('api/carts/' + this.selectedCart.id)
                .then((r) => {
                  Pe(document.getElementById('spinnerApp'));
                  this.getCartsData();
                  b.$emit('updateMenuRightCart');
                  if (this.cartStore.cart_id == this.selectedCart.id) {
                    this.cartStore.removeCartData();
                  }
                })
                .catch((r) => {
                  Pe(document.getElementById('spinnerApp'));
                  console.error(r);
                });
            }
            break;
          case 'createSupplyMovementFromCart':
            this.showSelectStock = true;
            break;
          case 'createPurchaseRequestFromCart':
            Pt(document.getElementById('spinnerApp'));
            let e = [this.selectedCart.id];
            {
              if (this.selectedCartIds.length) {
                e = e.concat(this.selectedCartIds);
              }
              axios
                .post('api/carts/createPurchaseRequest', { cart_ids: e })
                .then((r) => {
                  Pe(document.getElementById('spinnerApp'));
                  this.showCenterToast(
                    this.trans.get('__JSON__.purchaseRequest.toast.success.create'),
                    'e-toast-success',
                  );
                })
                .catch((r) => {
                  Pe(document.getElementById('spinnerApp'));
                  console.error(r);
                });
            }
            break;
        }
    },
    stockSelected(t) {
      this.closeSelectStockModal();
      if (t && this.selectedCart) {
        Pt(document.getElementById('spinnerApp'));
        axios
          .post('api/carts/createMovementFromCart', {
            cart_id: this.selectedCart.id,
            stock_id: t,
          })
          .then((e) => {
            Pe(document.getElementById('spinnerApp'));
            this.assets = e.data.assets;
            this.showCenterToast(
              this.trans.get('__JSON__.cart.toast.success.createMovementFromCart'),
              'e-toast-success',
            );
            this.showUpdateAssetsModal = true;
          })
          .catch((e) => {
            console.error(e);
            Pe(document.getElementById('spinnerApp'));
          });
      }
    },
    selectCart(t) {
      if (t && t.items && t.items.length) {
        let e = t.items[0];
        let r = null;
        switch (t.items[0].api_prefix_type) {
          case 'items':
            r = 'itemGrid';
            break;
        }
        if (r) {
          this.cartStore.addCartData({
            cart_id: t.items[0].id,
            cart_type: t.items[0].api_prefix_type,
          });
          this.$router.push({ name: r });
        }
      }
    },
  },
  mounted() {
    this.getCartsData();
    b.$on('updateSidebarCart', this.getCartsData);
  },
  beforeUnmount() {
    b.$off('updateSidebarCart', this.getCartsData);
  },
};
const cp = { id: 'cartSidebar' };
function lp(t, e, r, n, i, a) {
  const o = L('cartTemplateList');
  const s = L('ejs-listbox');
  const c = L('ejs-contextmenu');
  const l = L('cart-update-name');
  const f = L('select-stock');
  const u = L('modal-edit-assets');
  P();
  return G('div', cp, [
    B(
      s,
      {
        id: 'listCarts',
        dataSource: i.carts,
        fields: i.menuFields,
        selectionSettings: i.selectionSettings,
        allowFiltering: true,
        filterType: 'Contains',
        filterBarPlaceholder: t.trans.get('__JSON__.model.action.search'),
        itemTemplate: 'templateItem',
        height: 'calc(100vh - 180px)',
        onChange: a.selectCart,
      },
      {
        templateItem: W(({ data: h }) => [
          B(
            o,
            {
              data: h,
              checkboxChange: a.checkboxChange,
            },
            null,
            8,
            ['data', 'checkboxChange'],
          ),
        ]),
        _: 1,
      },
      8,
      ['dataSource', 'fields', 'selectionSettings', 'filterBarPlaceholder', 'onChange'],
    ),
    B(
      c,
      {
        ref: 'contextMenuCarts',
        cssClass: 'schedule-context-menu',
        target: '#cartSidebar',
        items: a.menuItems,
        beforeOpen: a.onContextMenuBeforeOpen,
        select: a.onMenuItemSelect,
      },
      null,
      8,
      ['items', 'beforeOpen', 'select'],
    ),
    i.showUpdateNameModal
      ? (P(),
        ge(
          l,
          {
            key: 0,
            selectedCart: i.selectedCart,
            onClose: a.closeUpdateNameModal,
          },
          null,
          8,
          ['selectedCart', 'onClose'],
        ))
      : j('', true),
    i.showSelectStock
      ? (P(),
        ge(
          f,
          {
            key: 1,
            typeStock: 'cartMovement',
            onClose: a.closeSelectStockModal,
            onStockSelected: a.stockSelected,
          },
          null,
          8,
          ['onClose', 'onStockSelected'],
        ))
      : j('', true),
    i.showUpdateAssetsModal
      ? (P(),
        ge(
          u,
          {
            key: 2,
            'list-assets': i.assets,
            canCancelMovement: true,
            onClose: a.closeUpdateModal,
          },
          null,
          8,
          ['list-assets', 'onClose'],
        ))
      : j('', true),
  ]);
}
const fp = rt(sp, [['render', lp]]);
const up = {
  props: {
    eventBus: { required: true },
    listSettings: { required: true },
  },
  data() {
    return { isMounted: false };
  },
  mounted() {
    this.isMounted = true;
  },
  methods: {
    updateSettings() {
      b.$emit(this.eventBus, this.listSettings);
    },
  },
};
const hp = { class: 'settingsContainer' };
const dp = {
  key: 0,
  class: 'settingContainer',
};
const pp = { class: 'mt-2' };
const vp = {
  key: 1,
  class: 'settingContainer',
};
const gp = { class: 'mt-2' };
function _p(t, e, r, n, i, a) {
  const o = L('ejs-multiselect');
  const s = L('ejs-dropdownlist');
  P();
  return G('div', hp, [
    (P(true),
    G(
      Rt,
      null,
      Sr(
        r.listSettings,
        (c) => (
          P(),
          G(
            Rt,
            { key: c.valueName },
            [
              c.type === 'multiple'
                ? (P(),
                  G('div', dp, [
                    A('span', pp, q(c.placeholder), 1),
                    i.isMounted
                      ? (P(),
                        ge(
                          o,
                          {
                            key: 0,
                            width: '100%',
                            mode: 'CheckBox',
                            showClearButton: false,
                            allowFiltering: true,
                            allowCustom: false,
                            onChange: a.updateSettings,
                            modelValue: c.value,
                            'onUpdate:modelValue': (l) => (c.value = l),
                            dataSource: c.dataSource,
                            fields: c.fields,
                            placeholder: c.placeholder,
                          },
                          null,
                          8,
                          ['onChange', 'modelValue', 'onUpdate:modelValue', 'dataSource', 'fields', 'placeholder'],
                        ))
                      : j('', true),
                  ]))
                : j('', true),
              c.type === 'single'
                ? (P(),
                  G('div', vp, [
                    A('span', gp, q(c.placeholder), 1),
                    i.isMounted
                      ? (P(),
                        ge(
                          s,
                          {
                            key: 0,
                            width: '100%',
                            popupWidth: 'fit-content',
                            allowCustom: false,
                            allowFiltering: true,
                            showClearButton: true,
                            onChange: a.updateSettings,
                            modelValue: c.value,
                            'onUpdate:modelValue': (l) => (c.value = l),
                            dataSource: c.dataSource,
                            fields: c.fields,
                            placeholder: c.placeholder,
                          },
                          null,
                          8,
                          ['onChange', 'modelValue', 'onUpdate:modelValue', 'dataSource', 'fields', 'placeholder'],
                        ))
                      : j('', true),
                  ]))
                : j('', true),
            ],
            64,
          )
        ),
      ),
      128,
    )),
  ]);
}
const mp = rt(up, [
  ['render', _p],
  ['__scopeId', 'data-v-c6d6c062'],
]);
const xp = {
  name: 'SideBarRight',
  components: {
    cart: fp,
    settings: mp,
  },
  mounted() {
    b.$on('showSidebarType', this.showSidebarType);
    b.$on('hideSidebar', this.hideSidebar);
  },
  data() {
    return {
      showSidebar: false,
      sideBarType: null,
      supplementaryData: null,
      sidebarTitle: null,
    };
  },
  methods: {
    showSidebarType(t) {
      b.$emit('showPanel', { panelDroite: false });
      this.showSidebar = true;
      this.sideBarType = t.type;
      this.sidebarTitle = t.name;
      this.supplementaryData = t.supplementaryData;
    },
    hideSidebar() {
      this.showSidebar = false;
    },
    confirmDeleteAllCart() {
      this.dialogElement = zt.confirm({
        title: this.trans.get('__JSON__.main.content.confirmation'),
        content: this.trans.get('__JSON__.cart.content.deleteAllCartsConfirmation'),
        okButton: {
          text: this.trans.get('__JSON__.main.modal.button.yes'),
          click: this.deleteAllCarts,
        },
        cancelButton: {
          text: this.trans.get('__JSON__.main.modal.button.cancel'),
          click: this.cancelClick,
        },
        showCloseIcon: true,
        closeOnEscape: true,
        animationSettings: { effect: 'Zoom' },
      });
    },
    cancelClick() {
      if (this.dialogElement) {
        this.dialogElement.hide();
      }
    },
    deleteAllCarts() {
      this.cancelClick();
      Pt(document.getElementById('spinnerApp'));
      axios
        .delete('api/carts/all')
        .then((t) => {
          Pe(document.getElementById('spinnerApp'));
          b.$emit('updateSidebarCart');
          b.$emit('updateMenuRightCart');
          this.cartStore.removeCartData();
        })
        .catch((t) => {
          Pe(document.getElementById('spinnerApp'));
          console.error(t);
        });
    },
    resetFilterSettings() {
      this.sideBarType = null;
      if (
        this.supplementaryData &&
        this.supplementaryData.listSettings &&
        Array.isArray(this.supplementaryData.listSettings)
      ) {
        this.supplementaryData.listSettings.forEach((t) => (t.value = null));
        if (this.supplementaryData.eventBus) {
          b.$emit(this.supplementaryData.eventBus, this.supplementaryData.listSettings);
        }
      }
      this.$nextTick(() => {
        this.sideBarType = 'settings';
      });
    },
  },
  beforeUnmount() {
    b.$off('showSidebarType', this.showSidebarType);
    b.$off('hideSidebar', this.hideSidebar);
  },
};
const yp = { class: 'sidebarRight' };
const wp = {
  style: {
    'margin-left': '15px',
    'margin-top': '15px',
  },
};
const Ep = {
  style: {
    display: 'flex',
    'justify-content': 'space-between',
    'align-items': 'center',
  },
};
const Cp = {
  style: {
    display: 'flex',
    'justify-content': 'center',
    'align-items': 'center',
  },
};
const Sp = {
  key: 0,
  style: {
    'margin-left': '15px',
    'font-weight': 'bold',
    width: '250px',
  },
};
const Ap = { key: 0 };
const Ip = { key: 1 };
function Tp(t, e, r, n, i, a) {
  const o = L('ejs-button');
  const s = L('ejs-tooltip');
  return Ue(
    (P(),
    G(
      'div',
      yp,
      [
        A('div', wp, [
          A('div', Ep, [
            A('div', Cp, [
              B(
                o,
                { onClick: a.hideSidebar },
                {
                  default: W(() => [
                    ...(e[2] ||
                      (e[2] = [
                        A(
                          'svg',
                          {
                            width: '18',
                            height: '18',
                            fill: 'currentColor',
                            class: 'bi bi-arrow-right-short',
                            viewBox: '0 0 16 16',
                          },
                          [
                            A('path', {
                              'fill-rule': 'evenodd',
                              d: 'M4 8a.5.5 0 0 1 .5-.5h5.793L8.146 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708L10.293 8.5H4.5A.5.5 0 0 1 4 8z',
                            }),
                          ],
                          -1,
                        ),
                      ])),
                  ]),
                  _: 1,
                },
                8,
                ['onClick'],
              ),
              i.sidebarTitle ? (P(), G('span', Sp, q(i.sidebarTitle), 1)) : j('', true),
              A('div', null, [
                i.sideBarType === 'cart'
                  ? (P(),
                    G('div', Ap, [
                      B(
                        s,
                        {
                          content: t.trans.get('__JSON__.cart.content.deleteAllCarts'),
                          animation: t.default_SF_Props.animationTooltip,
                        },
                        {
                          default: W(() => [
                            A('span', {
                              class: 'sf-icon-garbage-wf',
                              style: { cursor: 'pointer' },
                              onClick:
                                e[0] || (e[0] = (...c) => a.confirmDeleteAllCart && a.confirmDeleteAllCart(...c)),
                            }),
                          ]),
                          _: 1,
                        },
                        8,
                        ['content', 'animation'],
                      ),
                    ]))
                  : j('', true),
                i.sideBarType === 'settings'
                  ? (P(),
                    G('div', Ip, [
                      B(
                        s,
                        {
                          content: t.trans.get('__JSON__.main.grid.toolbar.resetFilter'),
                          animation: t.default_SF_Props.animationTooltip,
                        },
                        {
                          default: W(() => [
                            A('span', {
                              class: 'sf-icon-filter-05-wf',
                              style: { cursor: 'pointer' },
                              onClick: e[1] || (e[1] = (...c) => a.resetFilterSettings && a.resetFilterSettings(...c)),
                            }),
                          ]),
                          _: 1,
                        },
                        8,
                        ['content', 'animation'],
                      ),
                    ]))
                  : j('', true),
              ]),
            ]),
          ]),
          e[3] || (e[3] = A('hr', { style: { 'margin-right': '15px' } }, null, -1)),
        ]),
        i.showSidebar ? (P(), ge(js(i.sideBarType), Xs(zs({ key: 0 }, i.supplementaryData)), null, 16)) : j('', true),
      ],
      512,
    )),
    [[at, i.showSidebar]],
  );
}
const bp = rt(xp, [
  ['render', Tp],
  ['__scopeId', 'data-v-b0a57333'],
]);
const Np = {
  components: {
    ModalDynamicGrid: uc,
    SelectStock: fo,
    ModalAddTask: fc,
    appDialogNode: cc,
    modalAddEvent: lc,
  },
  data() {
    return {
      authorizedTypeDrop: ['node_infos', 'tags', 'users', 'assets'],
      clickNode: null,
      cutCopyNode: null,
      deleteNode: null,
      dragNode: null,
      fields: {
        dataSource: [],
        id: 'id',
        text: 'name',
        parentID: 'pid',
        hasChildren: 'hasChild',
        iconCss: 'icon',
        expanded: 'expanded',
        model: 'model',
        project: 'project',
        isTree: 'isTree',
        htmlAttributes: 'htmlAttributes',
        tooltip: 'tooltip',
      },
      isCut: false,
      idParent: null,
      isLoadingTree: false,
      hasBackgroundAction: false,
      menuItems: [
        {
          text: this.trans.get('__JSON__.treeView.action.add'),
          id: 'add',
          items: [
            {
              text: this.trans.get('__JSON__.treeView.action.addEvent'),
              id: 'addEvent',
            },
            {
              text: this.trans.get('__JSON__.treeView.action.addTask'),
              id: 'addTask',
            },
          ],
        },
        {
          text: this.trans.get('__JSON__.treeView.action.maintenanceMenu'),
          id: 'maintenanceMenu',
          items: [
            {
              text: this.trans.get('__JSON__.treeView.action.replaceAsset'),
              id: 'replaceAsset',
            },
            {
              text: this.trans.get('__JSON__.treeView.action.sendToRepair'),
              id: 'sendToRepair',
            },
          ],
        },
        {
          text: this.trans.get('__JSON__.treeView.action.maintenanceMenu'),
          id: 'maintenanceMenuBis',
          items: [
            {
              text: this.trans.get('__JSON__.treeView.action.replaceAsset'),
              id: 'replaceAssetBis',
            },
            {
              text: this.trans.get('__JSON__.treeView.action.sendAssetIntoTreeview'),
              id: 'sendAssetIntoTreeview',
            },
          ],
        },
        {
          text: this.trans.get('__JSON__.treeView.action.addToCart'),
          id: 'addToCart',
        },
        { separator: true },
        {
          text: this.trans.get('__JSON__.treeView.action.sort'),
          id: 'sort',
          items: [
            {
              text: this.trans.get('__JSON__.treeView.action.levelOnly'),
              id: 'levelOnly',
              items: [
                {
                  text: this.trans.get('__JSON__.treeView.action.asc'),
                  id: 'asc',
                },
                {
                  text: this.trans.get('__JSON__.treeView.action.desc'),
                  id: 'desc',
                },
              ],
            },
            {
              text: this.trans.get('__JSON__.treeView.action.allLevel'),
              id: 'allLevel',
              items: [
                {
                  text: this.trans.get('__JSON__.treeView.action.asc'),
                  id: 'ascFull',
                },
                {
                  text: this.trans.get('__JSON__.treeView.action.desc'),
                  id: 'descFull',
                },
              ],
            },
          ],
        },
        {
          text: this.trans.get('__JSON__.treeView.action.edit'),
          id: 'edit',
          items: [
            {
              text: this.trans.get('__JSON__.treeView.action.cut'),
              id: 'cut',
            },
            {
              text: this.trans.get('__JSON__.treeView.action.copy'),
              id: 'copy',
            },
            {
              text: this.trans.get('__JSON__.treeView.action.paste'),
              id: 'paste',
            },
            {
              text: this.trans.get('__JSON__.treeView.action.pasteStructure'),
              id: 'pasteStructure',
            },
          ],
        },
        {
          text: this.trans.get('__JSON__.treeView.action.extendSelfAndAllChild'),
          id: 'extendSelfAndAllChild',
        },
        { separator: true },
        {
          text: this.trans.get('__JSON__.treeView.action.addNode'),
          id: 'addNode',
        },
        {
          text: this.trans.get('__JSON__.treeView.action.addTreeView'),
          id: 'addTreeview',
        },
        {
          text: this.trans.get('__JSON__.treeView.action.delete'),
          id: 'delete',
        },
        { separator: true },
        {
          text: this.trans.get('__JSON__.treeView.action.show'),
          id: 'show',
          items: [
            {
              text: this.trans.get('__JSON__.treeView.action.showDocumentationUnder'),
              id: 'showDocumentationUnder',
            },
            {
              text: this.trans.get('__JSON__.treeView.action.showEventsUnder'),
              id: 'showEventsUnder',
            },
            {
              text: this.trans.get('__JSON__.treeView.action.showTasksUnder'),
              id: 'showTasksUnder',
            },
          ],
        },
        {
          text: this.trans.get('__JSON__.treeView.action.goTo'),
          id: 'goto',
          items: [
            {
              text: this.trans.get('__JSON__.treeView.action.placeholderGoTo'),
              id: 'placeholderGoTo',
            },
          ],
        },
      ],
      searchText: '',
      showDialog: false,
      tipPosition: 'TopCenter',
      type: null,
      titleModal: '',
      simpleClickTimeOut: null,
      preventClick: false,
      selectedNode: null,
      hasNodeRightClicked: false,
      hasNodeLeftClicked: false,
      hasCtrlKey: false,
      hasShiftKey: false,
      leftClickTimeout: null,
      rightClickTimeout: null,
      unavailableDropobject: ['files', 'docsheets', 'projects'],
      temporaryNodeIds: [],
      temporaryDroppedData: null,
      backup: [],
      axiosCanceler: null,
      showModalAddEvent: false,
      eventProject_id: null,
      eventModel_type: null,
      eventModel_id: null,
      eventModel_name: null,
      objectForAddTask: null,
      showModalCreateTask: false,
      checkExternalSearch: true,
      showModalSelectAsset: false,
      showSelectStock: false,
      typeStock: 'replaceAsset',
      listAssets: [],
      treeview_lcn: false,
      allowedParents: {
        projects: {
          tags: false,
          docsheets: false,
          files: false,
          users: false,
          locations: false,
          items: false,
        },
        treeviews: {
          tags: true,
          docsheets: true,
          files: true,
          users: true,
          locations: true,
          items: false,
        },
        node_infos: {
          tags: true,
          docsheets: true,
          files: true,
          users: true,
          locations: true,
          items: true,
        },
        tags: {
          tags: true,
          docsheets: true,
          files: true,
          users: false,
          locations: false,
          items: true,
        },
        docsheets: {
          tags: false,
          docsheets: false,
          files: false,
          users: false,
          locations: false,
          items: false,
        },
        files: {
          tags: false,
          docsheets: false,
          files: false,
          users: false,
          locations: false,
          items: false,
        },
        users: {
          tags: false,
          docsheets: true,
          files: true,
          users: true,
          locations: false,
          items: false,
        },
        locations: {
          tags: true,
          docsheets: true,
          files: true,
          users: false,
          locations: true,
          items: false,
        },
        assets: {
          tags: false,
          docsheets: false,
          files: false,
          users: false,
          locations: false,
          items: true,
        },
      },
      partialTreeviewWaiting: [],
    };
  },
  watch: {
    treeview_lcn() {
      let t = this.getTreeviewData();
      this.setDefaultFields(t);
    },
  },
  mounted() {
    this.backup = JSON.parse(JSON.stringify(this.menuItems));
    let t = this;
    Echo.channel('channel-treeview-reload').listen('\\Quickbrain\\Events\\MoveTreeFinishNotification', function (e) {
      t.hasBackgroundAction = false;
      if (e.notification.updateTree)
        if (e.notification.parentIds) {
          let r = e.notification.parentIds.map((i) => (i ? i.toString() : null));
          if (t.getTreeviewData().find((i) => r.includes(i.id.toString()))) {
            r = t.getAllOpenChild(r);
            t.refreshTreeview(r);
          }
        } else t.refreshTreeview([]);
      else if (e.notification.userId == JSON.parse(sessionStorage.getItem('user')).id) {
        t.showCenterToast(t.trans.get('__JSON__.treeView.toast.error.updateTreeview'), 'e-toast-danger');
      }
    });
    Echo.channel('channel-treeview-running').listen('\\Quickbrain\\Events\\MoveTreeRunningNotification', function (e) {
      t.hasBackgroundAction = true;
    });
    b.$on('refreshTree', this.refreshTreeview);
    b.$on('refreshTreeview', this.refreshTreeviewButton);
    b.$on('updateNodeTreeview', this.updateNodeTreeview);
    b.$on('deleteNodeFromUseCase', this.deleteNodeFromUseCase);
    b.$on('deleteNodesFromUseCase', this.deleteNodesFromUseCase);
    b.$on('restoreNodesFromUseCase', this.restoreNodesFromUseCase);
    b.$on('updateNodeTreeviewFromPanel', this.updateNodeTreeviewFromPanel);
    b.$on('searchNodeById', this.searchNodeById);
    b.$on('dropGridFromTree', this.dropGridFromTreeEvent);
  },
  methods: {
    setDefaultFields(t) {
      this.treeview_lcn
        ? (this.fields = {
            dataSource: t,
            id: 'id',
            text: 'lcn_code',
            parentID: 'pid',
            hasChildren: 'hasChild',
            iconCss: 'icon',
            expanded: 'expanded',
            model: 'model',
            project: 'project',
            isTree: 'isTree',
          })
        : (this.fields = {
            dataSource: t,
            id: 'id',
            text: 'name',
            parentID: 'pid',
            hasChildren: 'hasChild',
            iconCss: 'icon',
            expanded: 'expanded',
            model: 'model',
            project: 'project',
            isTree: 'isTree',
          });
    },
    getAllOpenChild(t) {
      let e = t;
      let r = this.$refs.treeviews.ej2Instances.expandedNodes;
      t.forEach((n) => {
        let i = this.getTreeviewData()
          .filter((o) => o.pid == n && this.$refs.treeviews.ej2Instances.expandedNodes.includes(o.id))
          .map((o) => o.id);
        let a = this.getAllOpenChild(i);
        e.push(...a);
      });
      return e;
    },
    closeAllTreeview() {
      if (!this.isLoadingTree && !this.hasBackgroundAction) {
        this.refreshTreeview();
      }
    },
    refreshTreeviewButton() {
      if (!this.isLoadingTree && !this.hasBackgroundAction) {
        this.refreshTreeview(
          this.getExpandedNodes()
            .filter((t) => t.nodable_type !== 'docsheets')
            .map((t) => t.id),
          true,
        );
      }
    },
    getExpandedNodes(t = null) {
      if (!t) {
        t = this.$refs.treeviews.ej2Instances.expandedNodes;
      }
      return this.getTreeviewData()
        .filter((e) => t.includes(e.id.toString()))
        .sort(function (e, r) {
          return e.lft - r.lft;
        });
    },
    refreshTreeview(t = [], e = false) {
      this.deleteNode = null;
      this.clickNode = null;
      this.cutCopyNode = null;
      this.searchText = '';
      let r = 0;
      if (document.getElementById('treeview')) {
        r = document.getElementById('treeview').scrollTop;
      }
      if (!t.length) {
        this.resetTreeview([]);
        t = [null];
      }
      this.getPartialTreeview(t, e, r);
    },
    getTreeInstance() {
      return this.getSyncfusionInstance('treeview', 'getTreeData');
    },
    getTreeviewData() {
      let t = this.getTreeInstance();
      return t ? t.getTreeData() : [];
    },
    makeVisible(t) {
      let e = this.getTreeInstance();
      t = t.toString();
      e.ensureVisible(t);
      this.$nextTick(() => {
        let r = document.querySelectorAll('[data-uid="' + t + '"] > .e-text-content');
        if (r.length) {
          r[0].classList.add('highlightnode');
        }
      });
    },
    makeVisibleBySelection(t, e = true) {
      if (t && t.length) {
        let r = this.getTreeInstance();
        t.forEach((n) => {
          n = n.toString();
          r.ensureVisible(n);
        });
        if (e) {
          this.$nextTick(() => {
            r.selectedNodes = t;
          });
        }
      }
    },
    resetTreeview(t = null) {
      if (!t) {
        t = this.getTreeviewData();
      }
      this.setDefaultFields(t);
    },
    setAndOpenTreeview(t, e, r, n = true) {
      this.resetTreeview();
      this.$nextTick(() => {
        this.setPartialTreeview(t, e, true);
        this.makeVisibleBySelection(r, n);
        this.isLoadingTree = false;
      });
    },
    openAllSubNodes(t) {
      if (t) {
        this.isLoadingTree = true;
        axios
          .get('api/nodes/getAllSubNodes/' + t)
          .then((e) => {
            this.setAndOpenTreeview(e.data.parentIds, e.data.listNodes, e.data.resultIds, false);
          })
          .catch((e) => {
            this.isLoadingTree = false;
            console.error(e);
          });
      }
    },
    searchNodeById(t) {
      if ((t.nodable_id && t.nodable_type) || t.id) {
        this.isLoadingTree = true;
        axios
          .post('api/nodes/searchTreeviewByObject', t)
          .then((e) => {
            this.setAndOpenTreeview(e.data.parentIds, e.data.listNodes, e.data.resultIds);
          })
          .catch((e) => {
            this.isLoadingTree = false;
            console.error(e);
          });
      }
    },
    searchInTreeview() {
      this.searchText && this.searchText !== ''
        ? ((this.isLoadingTree = true),
          axios
            .post('api/nodes/searchTreeview', {
              search: this.searchText,
              treeview_lcn: this.treeview_lcn,
            })
            .then((t) => {
              this.setAndOpenTreeview(t.data.parentIds, t.data.listNodes, t.data.resultIds);
            })
            .catch((t) => {
              this.resetTreeview();
              this.isLoadingTree = false;
              console.error(t);
            }))
        : this.resetTreeview();
    },
    setPartialTreeview(t, e, r, n = false) {
      b.$emit('removeTooltipTreeView');
      t = [...new Set(t.map((s) => s && s.toString()))];
      let i = this.getTreeInstance();
      let a = this.getTreeviewData().map((s) => (s.pid ? s.pid.toString() : null));
      t.forEach((s) => {
        let c = this.getTreeviewData().find((l) => l.id == s);
        if (c && (!r || !a.includes(s))) {
          let l = this.getTreeviewData()
            .filter((f) => f.pid == s)
            .map((f) => f.id.toString());
          i.removeNodes(l);
          c.hasChild = 0;
          i.refreshNode(c);
        }
      });
      let o = [];
      t.forEach((s) => {
        if (
          (this.getTreeviewData().find((l) => l.id == s) || s == null || o.find((l) => l.id == s)) &&
          (!r || !a.includes(s))
        ) {
          e.forEach((l) => {
            if (s == l.pid) {
              l.id = l.id.toString();
              if (!l.lcn_code) {
                l.lcn_code = l.name;
              }
              o.push(l);
            }
          });
        }
      });
      if (o.length) {
        i.addNodes(o);
      }
      if (n) {
        this.$refs.treeviews.ej2Instances.expandedNodes = [...new Set(t)];
      }
      if (
        this.checkExternalSearch &&
        this.mainStore.externalSearch &&
        this.mainStore.externalSearch.content &&
        this.mainStore.externalSearch.columnName === 'treeviewSearch'
      ) {
        this.checkExternalSearch = false;
        this.searchNodeById({ id: this.mainStore.externalSearch.content });
        this.mainStore.removeExternalSearch();
      }
    },
    getPartialTreeview(t, e = false, r = 0) {
      if (this.isLoadingTree) {
        this.partialTreeviewWaiting.push({
          parentIds: t,
          resetTreeview: e,
          scrollValue: r,
        });
        return;
      }
      let n = [...new Set(t.map((i) => i && i.toString()))];
      if (n.length) {
        if (n.includes(null)) {
          this.resetTreeview([]);
        }
        this.isLoadingTree = true;
        axios
          .post('api/nodes/tree', { parentIds: JSON.stringify(n) })
          .then((i) => {
            this.setPartialTreeview(n, i.data, false, e);
            this.isLoadingTree = false;
            if (r > 0 && document.getElementById('treeview')) {
              document.getElementById('treeview').scrollTop = r;
            }
            if (this.partialTreeviewWaiting.length) {
              let a = this.partialTreeviewWaiting.shift();
              this.getPartialTreeview(a.parentIds, a.resetTreeview, a.scrollValue);
            }
          })
          .catch((i) => {
            this.isLoadingTree = false;
            this.showCenterToast(this.trans.get('__JSON__.treeView.toast.error.getTreeview'), 'e-toast-danger');
            if (this.partialTreeviewWaiting.length) {
              let a = this.partialTreeviewWaiting.shift();
              this.getPartialTreeview(a.parentIds, a.resetTreeview, a.scrollValue);
            }
          });
      }
    },
    updateNodeTreeview(t) {
      this.refreshTreeview(t);
    },
    deleteNodeFromUseCase(t) {
      this.axiosDeleteNodes(t);
    },
    deleteNodesFromUseCase(t) {
      this.axiosMassDeleteNodes(t);
    },
    restoreNodesFromUseCase(t) {
      this.axiosMassRestoreNodes(t);
    },
    dropGridFromTreeEvent(t) {
      let e = t.idNode;
      let r = [];
      t.idNode == 'none'
        ? this.$refs.treeviews.ej2Instances.selectedNodes.length &&
          (r = this.$refs.treeviews.ej2Instances.selectedNodes)
        : (r = [t.idNode]);
      r = r.map((o) => o.toString());
      let n = t.selection;
      let i = this.getTreeviewData().filter((o) => r.includes(o.id.toString()));
      if (!i || !i.length) {
        this.showCenterToast(this.trans.get('__JSON__.node.toast.info.selectNodes'), 'e-toast-info');
        return;
      }
      let a = true;
      i.forEach((o) => {
        if (!this.isDestinationNodeOk(o, t.selection[0])) {
          a = false;
        }
      });
      a == true
        ? t.selection.length > 25
          ? ((this.temporaryNodeIds = i.map((o) => o.id)),
            (this.temporaryDroppedData = t.selection),
            (this.dialogElement = zt.confirm({
              title: this.trans.get('__JSON__.main.content.confirmation'),
              content: this.trans.get('__JSON__.treeView.content.addManyElements', { number: t.selection.length }),
              okButton: {
                text: this.trans.get('__JSON__.main.modal.button.ok'),
                click: this.confirmAddToTreeview,
                cssClass: 'e-info',
              },
              cancelButton: {
                text: this.trans.get('__JSON__.main.modal.button.cancel'),
                click: this.cancelClick,
              },
              showCloseIcon: true,
              closeOnEscape: true,
              animationSettings: { effect: 'Zoom' },
            })))
          : this.addSelectedItemsToNode(
              i.map((o) => o.id),
              t.selection,
            )
        : this.showCenterToast(this.trans.get('__JSON__.treeView.toast.error.invalidNode'), 'e-toast-danger');
    },
    updateNodeTreeviewFromPanel(t) {
      this.getTreeviewData()
        .filter((r) => r.nodable_id == t.nodable_id && r.nodable_type == t.nodable_type)
        .forEach((r) => {
          this.$refs.treeviews.refreshNode(r.id.toString(), [{ name: t.name }]);
        });
    },
    confirmAddToTreeview() {
      this.cancelClick();
      this.addSelectedItemsToNode(this.temporaryNodeIds, this.temporaryDroppedData);
    },
    expandNode(t) {
      if (t.isInteracted) {
        if (t.node && t.node.classList) {
          let i = document.getElementsByClassName('e-node-focus');
          for (let a of i) a.classList.remove('e-node-focus');
        }
        let e = t.nodeData.id;
        let r = this.getTreeviewData().find((i) => i.id == t.nodeData.id);
        if (!this.getTreeviewData().find((i) => i.pid == t.nodeData.id)) {
          r.nodable_type == 'docsheets'
            ? this.addDocsheetFiles(t.nodeData.id, t)
            : this.getPartialTreeview([t.nodeData.id]);
        }
      }
    },
    collapseNode(t) {
      if (t.isInteracted && t.node && t.node.classList) {
        let e = document.getElementsByClassName('e-node-focus');
        for (let r of e) r.classList.remove('e-node-focus');
      }
      if (t.event && t.event.tapCount === 2) {
        t.cancel = true;
      }
    },
    addDocsheetFiles(t, e) {
      axios
        .get('api/nodes/children/' + t)
        .then((r) => {
          let n = this.getTreeInstance();
          let i = [];
          r.data.forEach((a) => {
            i.push(a);
          });
          n.addNodes(i, e.nodeData.id);
        })
        .catch((r) => {
          console.error(r);
        });
    },
    addSelectedItemsToNode(t, e, r = false) {
      let n = {
        dropped: e,
        isDnd: r,
        nodeIds: t,
      };
      Pt(document.getElementById('spinnerApp'));
      axios
        .post('api/nodes/add', n)
        .then((i) => {
          Pe(document.getElementById('spinnerApp'));
          this.showCenterToast(this.trans.get('__JSON__.treeView.toast.info.objectBeingAdded'), 'e-toast-info');
        })
        .catch((i) => {
          console.error(i);
          Pe(document.getElementById('spinnerApp'));
          this.showCenterToast(this.trans.get('__JSON__.treeView.toast.error.objectAdded'), 'e-toast-danger');
          this.cancelClick();
        });
    },
    assetSelected(t) {
      if (t && t.length) {
        this.showModalSelectAsset = false;
        this.assetSelectedForReplace = t[0];
        this.assetNodeToReplace.asset_not_in_treeview ? this.replaceAssetNode(null) : (this.showSelectStock = true);
      }
    },
    replaceAssetNode(t) {
      Pt(document.getElementById('spinnerApp'));
      axios
        .post('api/nodes/replaceAssetNode', {
          assetNodeToReplace: this.assetNodeToReplace.id,
          assetForReplace: this.assetSelectedForReplace.id,
          stockDestination: t,
        })
        .then((e) => {
          this.refreshTreeview([this.assetNodeToReplace.pid]);
          Pe(document.getElementById('spinnerApp'));
        })
        .catch((e) => {
          Pe(document.getElementById('spinnerApp'));
          this.showCenterToast(this.trans.get('__JSON__.treeView.toast.error.updateTreeview'), 'e-toast-danger');
        });
    },
    stockSelected(t) {
      switch (((this.showSelectStock = false), this.nodeAction)) {
        case 'replaceAsset':
          if (this.assetNodeToReplace && this.assetSelectedForReplace && t) {
            this.replaceAssetNode(t);
          }
          break;
        case 'sendAssetToRepair':
          axios
            .post('api/nodes/sendAssetToRepair', {
              assetNodeId: this.assetNodeToReplace.id,
              stockDestination: t,
            })
            .then((e) => {
              this.refreshTreeview([this.assetNodeToReplace.pid]);
              Pe(document.getElementById('spinnerApp'));
              this.showCenterToast(this.trans.get('__JSON__.treeView.toast.success.assetSendToRepair'), 'e-toast-info');
            })
            .catch((e) => {
              Pe(document.getElementById('spinnerApp'));
              this.showCenterToast(this.trans.get('__JSON__.treeView.toast.error.updateTreeview'), 'e-toast-danger');
            });
          break;
      }
    },
    manageItems(t, e, r) {
      this.disableEveryItem();
      if (e.length > 1) {
        if (this.can('create', 'nodes')) {
          this.$refs.treeViewMenu.enableItems(['copy'], true, true);
        }
        if (this.can('update', 'nodes')) {
          this.$refs.treeViewMenu.enableItems(['sort', 'edit', 'cut'], true, true);
        }
        if (this.can('delete', 'nodes')) {
          this.$refs.treeViewMenu.enableItems(['delete'], true, true);
        }
        if (this.cutCopyNode !== null && (this.can('create', 'nodes') || this.can('update', 'nodes'))) {
          this.$refs.treeViewMenu.enableItems(['paste', 'pasteStructure'], true, true);
        }
      } else
        switch (r.nodable_type) {
          case 'projects':
            if (this.can('create', 'treeview')) {
              this.$refs.treeViewMenu.enableItems(['addTreeview'], true, true);
            }
            break;
          case 'node_infos':
            {
              r.isTree
                ? (this.can('create', 'nodes') && this.$refs.treeViewMenu.enableItems(['addNode'], true, true),
                  this.can('update', 'nodes') && this.$refs.treeViewMenu.enableItems(['sort'], true, true),
                  this.can('delete', 'nodes') && this.$refs.treeViewMenu.enableItems(['delete'], true, true),
                  this.cutCopyNode !== null &&
                    ((this.can('create', 'nodes') || this.can('update', 'nodes')) &&
                      this.$refs.treeViewMenu.enableItems(['paste', 'pasteStructure'], true, true),
                    this.can('update', 'nodes') && this.$refs.treeViewMenu.enableItems(['edit', 'sort'], true, true)))
                : (this.can('create', 'nodes') && this.$refs.treeViewMenu.enableItems(['addNode', 'copy'], true, true),
                  this.can('update', 'nodes') &&
                    this.$refs.treeViewMenu.enableItems(['sort', 'cut', 'edit'], true, true),
                  this.can('delete', 'nodes') && this.$refs.treeViewMenu.enableItems(['delete'], true, true),
                  this.cutCopyNode !== null &&
                    (this.can('create', 'nodes') || this.can('update', 'nodes')) &&
                    this.$refs.treeViewMenu.enableItems(['paste', 'pasteStructure'], true, true));
              this.$refs.treeViewMenu.enableItems(
                ['show', 'showEventsUnder', 'showDocumentationUnder', 'showTasksUnder', 'extendSelfAndAllChild'],
                true,
                true,
              );
            }
            break;
          case 'files':
            if (!r.isDocsheetFile) {
              if (this.can('create', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['copy'], true, true);
              }
              if (this.can('update', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['cut', 'edit'], true, true);
              }
              if (this.can('delete', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['delete'], true, true);
              }
            }
            break;
          case 'tags':
            {
              this.$refs.treeViewMenu.enableItems(['goto'], false, true);
              if (this.can('create', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['addNode'], true, true);
              }
              if (this.can('create', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['copy'], true, true);
              }
              if (this.can('update', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['sort', 'cut', 'edit'], true, true);
              }
              if (this.can('delete', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['delete'], true, true);
              }
              if (this.cutCopyNode !== null && (this.can('create', 'nodes') || this.can('update', 'nodes'))) {
                this.$refs.treeViewMenu.enableItems(['paste'], true, true);
              }
              if (this.can('create', 'tasks') && this.can('show', 'events')) {
                this.$refs.treeViewMenu.enableItems(['add', 'addTask'], true, true);
              }
              if (this.can('create', 'events')) {
                this.$refs.treeViewMenu.enableItems(['add', 'addEvent'], true, true);
              }
              this.$refs.treeViewMenu.enableItems(
                ['show', 'showEventsUnder', 'showDocumentationUnder', 'showTasksUnder', 'extendSelfAndAllChild'],
                true,
                true,
              );
            }
            break;
          case 'docsheets':
            {
              if (this.can('create', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['copy'], true, true);
              }
              if (this.can('update', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['cut', 'edit'], true, true);
              }
              if (this.can('delete', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['delete'], true, true);
              }
              if (this.can('create', 'tasks') && this.can('show', 'events')) {
                this.$refs.treeViewMenu.enableItems(['add', 'addTask'], true, true);
              }
              if (this.can('create', 'events')) {
                this.$refs.treeViewMenu.enableItems(['add', 'addEvent'], true, true);
              }
            }
            break;
          case 'users':
            {
              if (this.can('create', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['addNode', 'copy'], true, true);
              }
              if (this.can('update', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['sort', 'cut', 'edit'], true, true);
              }
              if (this.can('delete', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['delete'], true, true);
              }
              if (this.cutCopyNode !== null && (this.can('create', 'nodes') || this.can('update', 'nodes'))) {
                this.$refs.treeViewMenu.enableItems(['paste'], true, true);
              }
              this.$refs.treeViewMenu.enableItems(['extendSelfAndAllChild'], true, true);
            }
            break;
          case 'assets':
            {
              if (this.can('create', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['copy'], true, true);
              }
              if (this.can('update', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['sort', 'cut', 'edit'], true, true);
                this.$refs.treeViewMenu.enableItems(
                  [
                    'maintenanceMenu',
                    'replaceAsset',
                    'sendToRepair',
                    'maintenanceMenuBis',
                    'sendAssetIntoTreeview',
                    'replaceAssetBis',
                  ],
                  true,
                  true,
                );
                r.asset_not_in_treeview
                  ? this.$refs.treeViewMenu.showItems(['maintenanceMenuBis'], true)
                  : this.$refs.treeViewMenu.showItems(['maintenanceMenu'], true);
              }
              if (this.can('delete', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['delete'], true, true);
              }
              if (this.cutCopyNode !== null && (this.can('create', 'nodes') || this.can('update', 'nodes'))) {
                this.$refs.treeViewMenu.enableItems(['paste'], true, true);
              }
              if (this.can('update', 'carts')) {
                this.$refs.treeViewMenu.enableItems(['addToCart'], true, true);
              }
              if (this.can('create', 'tasks') && this.can('show', 'events')) {
                this.$refs.treeViewMenu.enableItems(['add', 'addTask'], true, true);
              }
              if (this.can('create', 'events')) {
                this.$refs.treeViewMenu.enableItems(['add', 'addEvent'], true, true);
              }
              this.$refs.treeViewMenu.enableItems(['extendSelfAndAllChild'], true, true);
            }
            break;
          case 'locations':
            {
              this.$refs.treeViewMenu.enableItems(['goto'], false, true);
              if (this.can('create', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['addNode', 'copy'], true, true);
              }
              if (this.can('update', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['sort', 'cut', 'edit'], true, true);
              }
              if (this.can('delete', 'nodes')) {
                this.$refs.treeViewMenu.enableItems(['delete'], true, true);
              }
              if (this.cutCopyNode !== null && (this.can('create', 'nodes') || this.can('update', 'nodes'))) {
                this.$refs.treeViewMenu.enableItems(['paste'], true, true);
              }
              if (this.can('create', 'tasks') && this.can('show', 'events')) {
                this.$refs.treeViewMenu.enableItems(['add', 'addTask'], true, true);
              }
              if (this.can('create', 'events')) {
                this.$refs.treeViewMenu.enableItems(['add', 'addEvent'], true, true);
              }
              this.$refs.treeViewMenu.enableItems(['extendSelfAndAllChild'], true, true);
            }
            break;
        }
    },
    disableEveryItem() {
      this.$refs.treeViewMenu.enableItems(
        [
          'sort',
          'extendSelfAndAllChild',
          'edit',
          'cut',
          'copy',
          'paste',
          'pasteStructure',
          'delete',
          'addNode',
          'addTreeview',
          'maintenanceMenu',
          'replaceAsset',
          'sendToRepair',
          'maintenanceMenuBis',
          'sendAssetIntoTreeview',
          'goto',
          'placeholderGoTo',
          'add',
          'addEvent',
          'addTask',
          'addToCart',
          'show',
          'showEventsUnder',
          'showDocumentationUnder',
          'showTasksUnder',
        ],
        false,
        true,
      );
      this.$refs.treeViewMenu.hideItems(['maintenanceMenu', 'maintenanceMenuBis'], true);
    },
    beforeOpenMenu(t) {
      if (!this.hasNodeRightClicked && !t.parentItem) {
        t.cancel = true;
        return;
      }
      let e = this.getTreeInstance();
      let r = e.selectedNodes;
      if (this.cutCopyNode != null) {
        r = this.cutCopyNode;
      }
      let n = this.selectedNode;
      n = n.map(Number);
      r.length == null ? (r = [r.id]) : (r = r.map(Number));
      if (!r.includes(n[0])) {
        e.selectedNodes = [n[0]];
        r = [n[0]];
      }
      this.hasNodeRightClicked = 0;
      if (!this.checkMultiProject()) {
        t.cancel = true;
        this.showCenterToast(
          this.trans.get('__JSON__.model.action.delete'),
          'e-toast-danger',
          this.trans.get('__JSON__.treeView.toast.error.multiProject'),
        );
        return;
      }
      let o = this.getTreeviewData().find((s) => s.id == n);
      if (o == null) {
        t.cancel = true;
        return;
      }
      this.clickNode = o;
      if (
        !t.parentItem &&
        ((this.menuItem = JSON.parse(JSON.stringify(this.backup))),
        this.manageItems(t, r, o),
        (o.nodable_type == 'tags' || o.nodable_type == 'locations') && r.length <= 1)
      ) {
        for (let c = 0; c < t.items.length; c++)
          if (t.items[c].id === 'goto') {
            t.items[c].items = [
              {
                text: this.trans.get('__JSON__.treeView.action.placeholderGoTo'),
                id: 'placeholderGoTo',
              },
            ];
          }
        if (this.axiosCanceler) {
          this.axiosCanceler();
          this.axiosCanceler = null;
        }
        let s = this;
        axios
          .get('api/' + o.nodable_type + '/' + o.nodable_id + '/showableFilesOrDocsheetLinked', {
            cancelToken: new Js.CancelToken(function (l) {
              s.axiosCanceler = l;
            }),
          })
          .then((c) => {
            this.axiosCanceler = null;
            let l = c.data;
            let f = [];
            if (l.length) {
              l.forEach((u) => {
                f.push({
                  id: 'id' + UUID.generate(),
                  text: u.text,
                  iconCss: u.css,
                  codeTag: u.tag,
                  hotSpotPanoId: u.hotSpotPanoId,
                  idFile: u.idFile,
                  locationId: u.locationId,
                });
              });
              for (let u = 0; u < t.items.length; u++)
                if (t.items[u].id === 'goto') {
                  t.items[u].items = f;
                }
              this.$refs.treeViewMenu.enableItems(['goto'], true, true);
            } else this.$refs.treeViewMenu.enableItems(['goto'], false, true);
            this.$nextTick(() => {
              this.$refs.treeViewMenu.hideItems(['goto'], true);
              this.$nextTick(() => {
                this.$refs.treeViewMenu.showItems(['goto'], true);
              });
            });
          })
          .catch((c) => {
            if (c && c.codeTag !== 'ERR_CANCELED') {
              this.$refs.treeViewMenu.enableItems(['goto'], false, true);
            }
          });
      }
    },
    cancelClick() {
      try {
        this.dialogElement.hide();
      } catch {}
    },
    confirmeDelete(t) {
      let r = this.getTreeInstance().selectedNodes;
      let n = this.trans.get('__JSON__.treeView.content.confirmationDelete');
      this.deleteNode = t;
      if (this.getTreeInstance().selectedNodes.length > 1) {
        n = this.trans.get('__JSON__.treeView.content.confirmationDeleteSize', {
          number: this.getTreeInstance().selectedNodes.length,
        });
        this.deleteNode = this.getTreeInstance().selectedNodes;
      }
      this.dialogElement = zt.confirm({
        title: this.trans.get('__JSON__.main.content.confirmation'),
        content: n,
        okButton: {
          text: this.trans.get('__JSON__.main.modal.button.yes'),
          click: this.delete,
        },
        cancelButton: {
          text: this.trans.get('__JSON__.main.modal.button.no'),
          click: this.cancelClick,
        },
        showCloseIcon: true,
        closeOnEscape: true,
        animationSettings: { effect: 'Zoom' },
      });
    },
    testMulti(t) {
      let e = [];
      let r = [];
      let n = this;
      t = t.map(Number);
      t.forEach(function (i) {
        if (!isNaN(i)) {
          let a = n.getTreeviewData().find((o) => o.id == i);
          if (!e.includes(a.pid) && !t.includes(a.pid)) {
            e.push(a.pid);
          }
        }
      });
      e = e.map(Number);
      if (e.length == 1) {
        t.forEach(function (a) {
          let o = parseInt(a);
          if (!isNaN(o)) {
            if (n.getTreeviewData().find((c) => c.id == a).pid == e[0]) {
              r.push(a);
            }
          }
        });
        let i = this.getTreeInstance();
        i.selectedNodes = r;
        return r;
      } else {
        this.showCenterToast(this.trans.get('__JSON__.treeView.toast.error.multipleParentObject'), 'e-toast-danger');
        return false;
      }
    },
    cutNode(t = true) {
      let r = this.getTreeInstance().selectedNodes;
      if (this.getTreeInstance().selectedNodes.length > 1) {
        let n = this.testMulti(this.getTreeInstance().selectedNodes);
        if (n) {
          this.isCut = t;
          this.cutCopyNode = n;
        }
      } else {
        this.isCut = t;
        this.cutCopyNode = this.clickNode;
      }
    },
    delete() {
      this.deleteNode.length > 0
        ? this.axiosMassDeleteNodes(this.deleteNode)
        : this.axiosDeleteNodes(this.deleteNode.id);
    },
    axiosDeleteNodes(t) {
      if (this.cutCopyNode && this.cutCopyNode.id == t) {
        this.cutcopyNode = null;
      }
      axios
        .delete('api/nodes/' + t)
        .then((e) => {
          this.showCenterToast(
            this.trans.get('__JSON__.model.action.delete'),
            'e-toast-success',
            this.trans.get('__JSON__.treeView.toast.success.delete'),
          );
          if (this.dialogElement) {
            this.dialogElement.hide();
          }
          let r = this.$refs.treeviews.ej2Instances.expandedNodes;
          r.splice(r.indexOf(t), 1);
          this.$refs.treeviews.ej2Instances.expandedNodes = r;
          let n = this.getTreeviewData().find((i) => i.id == t);
          if (n) {
            this.refreshTreeview([n.pid]);
          }
          b.$emit('refreshNodeGrid');
          b.$emit('checkDeletePanel', {
            typeObject: 'nodes',
            refObject: t,
          });
        })
        .catch((e) => {
          console.error(e);
          this.showCenterToast(this.trans.get('__JSON__.treeView.toast.error.delete'), 'e-toast-danger');
        });
    },
    axiosMassDeleteNodes(t) {
      if (this.cutCopyNode && t.includes(this.cutCopyNode.id)) {
        this.cutcopyNode = null;
      }
      axios({
        method: 'delete',
        url: 'api/nodes/mass_delete',
        data: { ids: t },
      })
        .then((e) => {
          this.showCenterToast(
            this.trans.get('__JSON__.model.action.delete'),
            'e-toast-success',
            this.trans.get('__JSON__.treeView.toast.success.massDelete'),
          );
          try {
            this.dialogElement.hide();
          } catch {}
          let r = this.getTreeviewData()
            .filter((n) => t.includes(n.id))
            .map((n) => n.pid.toString());
          this.refreshTreeview(r);
          b.$emit('refreshNodeGrid');
          b.$emit('checkDeletePanelMass', {
            typeObject: 'nodes',
            refObject: t,
          });
        })
        .catch((e) => {
          console.error(e);
          this.showCenterToast(this.trans.get('__JSON__.treeView.toast.error.massDelete'), 'e-toast-danger');
        });
    },
    axiosMassRestoreNodes(t) {
      Pt(document.getElementById('spinnerApp'));
      axios
        .put('api/nodes/mass_restore', { ids: t })
        .then((e) => {
          Pe(document.getElementById('spinnerApp'));
          b.$emit('refreshNodeGrid');
          this.refreshTreeview();
        })
        .catch((e) => {
          Pe(document.getElementById('spinnerApp'));
        });
    },
    getFilterItems: function (t, e) {
      let r = [];
      r.push(t.id);
      let n = new Ws().where('id', 'equal', t.pid, false);
      let i = new $s(e).executeLocal(n);
      if (i.length !== 0) {
        let a = this.getFilterItems(i[0], e);
        for (let o = 0; o < a.length; o++)
          if (r.indexOf(a[o]) === -1 && a[o] != null) {
            r.push(a[o]);
          }
        return r;
      }
      return r;
    },
    isDestinationNodeOk(t, e = null) {
      return !t || !e ? false : (this.allowedParents[t.isTree ? 'treeviews' : t.nodable_type][e.api_prefix] ?? false);
    },
    isNodeDraggable(t) {
      t.cancel = true;
      let e = t.draggedNodeData;
      e = this.getTreeviewData().find((n) => n.id == e.id);
      let r = true;
      if (e.nodable_type === 'projects') {
        r = false;
      }
      if (e.isDocsheetFile != null && e.isDocsheetFile == true) {
        r = false;
      }
      if (r) {
        t.cancel = false;
      }
    },
    moveTree(t) {
      t.cancel = true;
      let e = t.dropIndicator === 'e-drop-in';
      let r = false;
      if (t.event.offsetY <= 5) {
        r = true;
      }
      let n = t.draggedNodeData;
      let i = t.droppedNodeData;
      if (!n) return;
      let a = this.$refs.treeviews.ej2Instances.selectedNodes;
      this.$refs.treeviews.ej2Instances.selectedNodes.includes(n.id)
        ? (n = this.getTreeviewData().filter((l) =>
            this.$refs.treeviews.ej2Instances.selectedNodes.includes(l.id.toString()),
          ))
        : (n = this.getTreeviewData().find((l) => l.id == n.id));
      if (!i) {
        let l = null;
        if (Array.isArray(n) && n.length) {
          l = n[0];
        }
        if (n && !Array.isArray(n)) {
          l = n;
        }
        if (l && l.nodable_type && l.nodable_id && l.nodable_type !== 'node_infos') {
          b.$emit('dropFromTreeview', {
            target: t.target,
            type: l.nodable_type,
            id: l.nodable_id,
          });
        }
        return;
      }
      if (Array.isArray(n)) {
        if (n.filter((l) => l.id === i.id).length) return;
      } else if (i.id == n.id) return;
      i = this.getTreeviewData().find((l) => l.id == i.id);
      let o = null;
      e || i.isTree ? (o = i) : (o = this.getTreeviewData().find((l) => l.id == i.pid));
      if (!o) return;
      let s = [];
      Array.isArray(n) ? ((s = n), (n = n.map((l) => l.id.toString()))) : (s = [n]);
      if (!s.length || this.unavailableDropobject.includes(o.nodable_type)) return;
      let c = true;
      s.forEach((l) => {
        if (l.project !== o.project) {
          c = false;
        }
        if (i.isTree && !e && !l.isTree) {
          c = false;
        }
        if (l.isTree && e) {
          c = false;
        }
        if (l.isTree && !i.isTree) {
          c = false;
        }
        if (o.nodable_type === 'users' && l.nodable_type === 'tags') {
          c = false;
        }
        if (o.nodable_type === 'assets' && l.nodable_type !== 'assets') {
          c = false;
        }
        if (l.nodable_type === 'assets' && !(o.nodable_type === 'tags' || o.nodable_type === 'assets')) {
          c = false;
        }
      });
      if (c) {
        this.updateTree(n, i, true, e, r);
      }
    },
    checkMultiProject() {
      let e = this.getTreeInstance().selectedNodes;
      e = e.map(Number);
      let r = true;
      let n = 0;
      for (let i = 0; i < e.length; i++) {
        let a = this.getTreeviewData().find((o) => o.id == e[i]);
        if (a != null && (a.id < 0 && n++, n > 1)) {
          r = false;
          break;
        }
      }
      return r;
    },
    nodeclicked(t) {
      let e = this;
      switch (
        (clearTimeout(this.rightClickTimeout),
        clearTimeout(this.leftClickTimeout),
        (this.hasShiftKey = !!t.event.shiftKey),
        (this.hasCtrlKey = !!t.event.ctrlKey),
        t.event.which)
      ) {
        case 3:
          {
            this.hasNodeRightClicked++;
            this.hasNodeLeftClicked = 0;
            this.selectedNode = [t.node.getAttribute('data-uid')];
            this.rightClickTimeout = setTimeout(function () {
              e.hasNodeRightClicked = 0;
            }, 300);
          }
          break;
        case 1:
          {
            this.selectedNode = [t.node.getAttribute('data-uid')];
            this.hasNodeRightClicked = 0;
            this.hasNodeLeftClicked++;
            this.leftClickTimeout = setTimeout(function () {
              e.hasNodeLeftClicked = 0;
            }, 300);
          }
          break;
      }
    },
    onEdit(t) {
      let e = this;
      t.cancel = true;
      this.preventClick = true;
      clearTimeout(this.simpleClickTimeOut);
      setTimeout(function () {
        if (e.hasNodeLeftClicked === 2) {
          let r = e.getTreeviewData().find((n) => n.id == t.nodeData.id);
          if (r.nodable_type == 'node_infos') {
            let n = {
              panelDroite: true,
              typeObject: 'nodes',
              refObjet: r.id,
            };
            b.$emit('showPanel', n);
          } else {
            let n = {
              panelDroite: true,
              typeObject: r.nodable_type,
              refObjet: r.nodable_id,
            };
            b.$emit('showPanel', n);
          }
        }
      }, 100);
    },
    orderBy(t, e, r) {
      axios
        .put('api/nodes/' + e.id + '/order', {
          sens: t,
          fullTreeview: r,
        })
        .then((n) => {
          this.clickNode = null;
        })
        .catch((n) => {
          console.error(n);
        });
    },
    pasteNode() {
      if (this.cutCopyNode == null)
        this.dialogElement = zt.confirm({
          title: this.trans.get('__JSON__.main.content.confirmation'),
          content: this.trans.get('__JSON__.treeView.content.beforePaste'),
          okButton: {
            text: this.trans.get('__JSON__.main.button.ok'),
            click: this.cancelClick,
          },
          showCloseIcon: true,
          closeOnEscape: true,
          animationSettings: { effect: 'Zoom' },
        });
      else {
        let t = this.cutCopyNode;
        if (this.cutCopyNode.length != null) {
          t = this.getTreeviewData().find((e) => e.id == this.cutCopyNode[0]);
        }
        this.clickNode.project != t.project
          ? this.showCenterToast(this.trans.get('__JSON__.treeView.toast.error.differentProject'), 'e-toast-danger')
          : this.updateTree(this.cutCopyNode, this.clickNode, this.isCut, true);
      }
    },
    pasteStructure() {
      if (this.cutCopyNode && this.clickNode.id) {
        let t = Array.isArray(this.cutCopyNode) ? this.cutCopyNode : [this.cutCopyNode.id];
        axios
          .post('api/nodes/structure', {
            parentId: this.clickNode.id,
            copiedIds: t,
          })
          .then((e) => {
            this.isCut = false;
            this.cutCopyNode = null;
            this.refreshTreeview(e.data.parent_ids);
          })
          .catch((e) => {
            console.error(e);
          });
      }
    },
    selectMenu(t) {
      switch (t.item.id) {
        case 'desc':
          this.orderBy('desc', this.clickNode, false);
          break;
        case 'asc':
          this.orderBy('asc', this.clickNode, false);
          break;
        case 'descFull':
          this.orderBy('desc', this.clickNode, true);
          break;
        case 'ascFull':
          this.orderBy('asc', this.clickNode, true);
          break;
        case 'cut':
          this.cutNode(true);
          break;
        case 'copy':
          this.cutNode(false);
          break;
        case 'extendSelfAndAllChild':
          this.openAllSubNodes(this.clickNode.id);
          break;
        case 'addNode':
          {
            this.type = 'rep';
            this.idParent = this.clickNode.id;
            this.titleModal = this.trans.get('__JSON__.treeView.content.addStructuralNode');
            this.showDialog = true;
          }
          break;
        case 'addTreeview':
          {
            this.type = this.clickNode.model;
            this.idParent = this.clickNode.id;
            this.titleModal = this.trans.get('__JSON__.treeView.content.newTreeView');
            this.showDialog = true;
          }
          break;
        case 'replaceAsset':
        case 'replaceAssetBis':
          {
            this.nodeAction = 'replaceAsset';
            this.typeStock = 'replaceAsset';
            this.replaceAsset();
          }
          break;
        case 'sendToRepair':
          {
            this.nodeAction = 'sendAssetToRepair';
            this.typeStock = 'repair';
            this.dialogElement = zt.confirm({
              title: this.trans.get('__JSON__.treeView.content.sendToRepairTitle'),
              content: this.trans.get('__JSON__.treeView.content.sendToRepairContent'),
              okButton: {
                text: this.trans.get('__JSON__.treeView.content.replaceAsset'),
                click: this.replaceAsset,
                cssClass: 'e-info',
              },
              cancelButton: {
                text: this.trans.get('__JSON__.treeView.content.sendToRepair'),
                click: this.sendAssetToRepair,
              },
              showCloseIcon: true,
              closeOnEscape: true,
              animationSettings: { effect: 'Zoom' },
            });
          }
          break;
        case 'sendAssetIntoTreeview':
          axios
            .post('api/nodes/sendAssetIntoTreeview', { assetNodeId: this.clickNode.id })
            .then((r) => {
              this.refreshTreeview([this.clickNode.pid]);
            })
            .catch((r) => {
              console.error(r);
            });
          break;
        case 'delete':
          this.confirmeDelete(this.clickNode);
          break;
        case 'paste':
          this.pasteNode();
          break;
        case 'pasteStructure':
          this.pasteStructure();
          break;
        case 'addEvent':
          this.addEvent();
          break;
        case 'addTask':
          this.addTask();
          break;
        case 'addToCart':
          this.addToCart();
          break;
        case 'showEventsUnder':
          this.centralPanelsStore.addingCentralPanels({
            centralPanelType: 'workPanel',
            centralPanelData: {
              objectType: 'dynamicGrid',
              workPanelData: { gridUrl: 'api/dynamicRequests/nodeInformations/' + this.clickNode.id + '/events' },
            },
          });
          break;
        case 'showDocumentationUnder':
          this.centralPanelsStore.addingCentralPanels({
            centralPanelType: 'workPanel',
            centralPanelData: {
              objectType: 'dynamicGrid',
              workPanelData: {
                gridUrl: 'api/dynamicRequests/nodeInformations/' + this.clickNode.id + '/documentation',
              },
            },
          });
          break;
        case 'showTasksUnder':
          this.centralPanelsStore.addingCentralPanels({
            centralPanelType: 'workPanel',
            centralPanelData: {
              objectType: 'dynamicGrid',
              workPanelData: { gridUrl: 'api/dynamicRequests/nodeInformations/' + this.clickNode.id + '/tasks' },
            },
          });
          break;
        default:
          if (t.item.idFile) {
            this.centralPanelsStore.addingCentralPanels({
              centralPanelType: 'fileViewer',
              centralPanelData: {
                fileId: t.item.idFile,
                getOnlyFile: false,
                tag: t.item.codeTag,
                hotSpotPanoId: t.item.hotSpotPanoId,
                locationId: t.item.locationId,
              },
            });
          }
      }
    },
    replaceAsset() {
      this.cancelClick();
      this.assetNodeToReplace = this.clickNode;
      Pt(document.getElementById('spinnerModalSelectAsset'));
      axios
        .get('api/assets/' + this.assetNodeToReplace.nodable_id + '/countForTreeviewReplace')
        .then((t) => {
          Pe(document.getElementById('spinnerModalSelectAsset'));
          t.data > 0
            ? (this.showModalSelectAsset = true)
            : this.showCenterToast(this.trans.get('__JSON__.treeView.toast.error.noAssetAvailable'), 'e-toast-danger');
        })
        .catch((t) => {
          Pe(document.getElementById('spinnerModalSelectAsset'));
          console.error(t);
        });
    },
    sendAssetToRepair() {
      this.cancelClick();
      this.assetNodeToReplace = this.clickNode;
      this.showSelectStock = true;
    },
    addToCart() {
      if (this.clickNode) {
        b.$emit('showCartSelector', [
          {
            object_id: this.clickNode.nodable_id,
            object_type: 'assets',
          },
        ]);
      }
    },
    selectNode(t) {
      let e = this;
      let r = document.getElementsByClassName('e-node-focus');
      for (let n of r) n.classList.remove('e-node-focus');
      if (t.isInteracted) {
        this.simpleClickTimeOut = setTimeout(function () {
          if (!e.preventClick && !e.hasCtrlKey && !e.hasShiftKey) {
            let n = e.getTreeviewData().find((i) => i.id == t.nodeData.id);
            switch ((b.$emit('selectNodeToBatche', n), n.nodable_type)) {
              case 'docsheets':
                axios
                  .get('api/interactive_file/docsheet/' + n.nodable_id + '/first_interactive_file')
                  .then((i) => {
                    if (!i.data.error) {
                      i.data.is_viewable
                        ? e.centralPanelsStore.addingCentralPanels({
                            centralPanelType: 'fileViewer',
                            centralPanelData: {
                              fileId: i.data.id,
                              getOnlyFile: false,
                            },
                          })
                        : e.centralPanelsStore.addingCentralPanels({
                            centralPanelType: 'workPanel',
                            centralPanelData: {
                              objectType: 'downloadUnviewable',
                              workPanelData: i.data.id,
                            },
                          });
                    }
                  })
                  .catch((i) => {
                    console.error(i);
                  });
                break;
              case 'files':
                switch (true) {
                  case [
                    'JPG',
                    'JPEG',
                    'PNG',
                    'TIF',
                    'TIFF',
                    'GIF',
                    'HEIC',
                    'HEIF',
                    'MP4',
                    'M4V',
                    'MOV',
                    'OGV',
                    'WEBM',
                    'GLB',
                    'GLTF',
                    'PDF',
                    'DAWE',
                    'DOCMOD',
                    'PANO',
                    'DOC',
                    'DOCX',
                    'DOCM',
                    'PPT',
                    'PPTX',
                    'HTML',
                    'HTM',
                  ].includes(n.extension):
                    e.centralPanelsStore.addingCentralPanels({
                      centralPanelType: 'fileViewer',
                      centralPanelData: {
                        fileId: n.nodable_id,
                        getOnlyFile: false,
                      },
                    });
                    break;
                  case ['XML'].includes(n.extension):
                    if (e.can('show', 'xml')) {
                      e.centralPanelsStore.addingCentralPanels({
                        centralPanelType: 'fileViewer',
                        centralPanelData: {
                          fileId: n.nodable_id,
                          getOnlyFile: false,
                        },
                      });
                    }
                    break;
                  default:
                    e.centralPanelsStore.addingCentralPanels({
                      centralPanelType: 'workPanel',
                      centralPanelData: {
                        objectType: 'downloadUnviewable',
                        workPanelData: n.nodable_id,
                      },
                    });
                    break;
                }
            }
          }
          e.preventClick = false;
        }, 300);
      }
    },
    updateTree(t, e, r = false, n = false, i = false) {
      let a = null;
      t.length == null
        ? ((a = {
            dropId: t.id,
            isNeighbor: n,
            isCut: r,
            parentId: e.id,
            before: i,
          }),
          axios
            .put('api/nodes/' + t.id, a)
            .then((o) => {
              this.cutCopyNode = null;
              this.isCut = false;
            })
            .catch((o) => {
              console.error('error : ', o);
            }))
        : ((a = {
            dropId: t,
            isNeighbor: n,
            isCut: r,
            parentId: e.id,
            before: i,
          }),
          axios
            .put('api/nodes/multi', a)
            .then((o) => {
              this.cutCopyNode = null;
              this.isCut = false;
            })
            .catch((o) => {
              console.error('error : ', o);
            }));
    },
    addEvent() {
      let t = this.clickNode;
      switch (((this.eventProject_id = this.clickNode.project), this.clickNode.nodable_type)) {
        case 'docsheets':
          {
            this.eventModel_type = 'Quickbrain\\Models\\Docsheet';
            this.eventModel_id = this.clickNode.nodable_id;
            this.eventModel_name = this.trans.get('__JSON__.menu.docsheets') + ' - ' + this.clickNode.name;
            this.showModalAddEvent = true;
          }
          break;
        case 'tags':
          {
            this.eventModel_type = 'Quickbrain\\Models\\Tag';
            this.eventModel_id = this.clickNode.nodable_id;
            this.eventModel_name = this.trans.get('__JSON__.menu.tags') + ' - ' + this.clickNode.name;
            this.showModalAddEvent = true;
          }
          break;
        case 'assets':
          {
            this.eventModel_type = 'Quickbrain\\Models\\Asset';
            this.eventModel_id = this.clickNode.nodable_id;
            this.eventModel_name = this.trans.get('__JSON__.menu.assets') + ' - ' + this.clickNode.name;
            this.showModalAddEvent = true;
          }
          break;
      }
    },
    addTask() {
      let t = this.clickNode;
      switch (this.clickNode.nodable_type) {
        case 'docsheets':
          {
            this.objectForAddTask = {
              name: this.clickNode.name,
              api_prefix: this.clickNode.nodable_type,
              id: this.clickNode.nodable_id,
              node_icon: this.clickNode.icon,
              model: 'Quickbrain\\Models\\Docsheet',
            };
            this.showModalCreateTask = true;
          }
          break;
        case 'tags':
          {
            this.objectForAddTask = {
              name: this.clickNode.name,
              api_prefix: this.clickNode.nodable_type,
              id: this.clickNode.nodable_id,
              node_icon: this.clickNode.icon,
              model: 'Quickbrain\\Models\\Tag',
              project: this.clickNode.project,
            };
            this.showModalCreateTask = true;
          }
          break;
        case 'assets':
          {
            this.objectForAddTask = {
              name: this.clickNode.name,
              api_prefix: this.clickNode.nodable_type,
              id: this.clickNode.nodable_id,
              node_icon: this.clickNode.icon,
              model: 'Quickbrain\\Models\\Asset',
            };
            this.showModalCreateTask = true;
          }
          break;
      }
    },
  },
  beforeUnmount() {
    b.$off('refreshTree', this.refreshTreeview);
    b.$off('refreshTreeview', this.refreshTreeviewButton);
    b.$off('updateNodeTreeview', this.updateNodeTreeview);
    b.$off('deleteNodeFromUseCase', this.deleteNodeFromUseCase);
    b.$off('deleteNodesFromUseCase', this.deleteNodesFromUseCase);
    b.$off('restoreNodesFromUseCase', this.restoreNodesFromUseCase);
    b.$off('updateNodeTreeviewFromPanel', this.updateNodeTreeviewFromPanel);
    b.$off('searchNodeById', this.searchNodeById);
    b.$off('dropGridFromTree', this.dropGridFromTreeEvent);
  },
};
const Op = {
  id: 'sticky',
  class: 'pt-0 pb-3',
};
const Dp = { class: 'e-float-input e-input-group e-float-icon-left ps-2 pe-2' };
const Rp = { class: 'e-input-in-wrap' };
const Pp = { class: 'e-float-text text-white' };
const Mp = {
  style: {
    width: '15px',
    height: '15px',
  },
};
function kp(t, e, r, n, i, a) {
  const o = L('ejs-tooltip');
  const s = L('ejs-switch');
  const c = L('ejs-contextmenu');
  const l = L('ejs-treeview');
  const f = L('app-dialogNode');
  const u = L('modalAddEvent');
  const h = L('modal-add-task');
  const d = L('modal-dynamic-grid');
  const p = L('select-stock');
  P();
  return G('div', null, [
    A('div', Op, [
      A('div', Dp, [
        A('div', Rp, [
          B(
            o,
            {
              ref: 'tooltipSearch',
              position: 'TopCenter',
              animation: t.default_SF_Props.animationTooltip,
              content: t.trans.get('__JSON__.treeView.content.searchTooltip'),
            },
            {
              default: W(() => [
                Ue(
                  A(
                    'input',
                    {
                      required: '',
                      type: 'text',
                      class: 'text-white',
                      'onUpdate:modelValue': e[0] || (e[0] = (v) => (i.searchText = v)),
                      onChange: e[1] || (e[1] = (...v) => a.searchInTreeview && a.searchInTreeview(...v)),
                    },
                    null,
                    544,
                  ),
                  [[vi, i.searchText]],
                ),
                e[11] || (e[11] = A('span', { class: 'e-float-line' }, null, -1)),
                A('label', Pp, q(t.trans.get('__JSON__.treeView.content.search')), 1),
              ]),
              _: 1,
            },
            8,
            ['animation', 'content'],
          ),
        ]),
        B(
          o,
          {
            style: { 'margin-right': '10px' },
            ref: 'tooltipCollpase',
            position: i.tipPosition,
            animation: t.default_SF_Props.animationTooltip,
            content: t.trans.get('__JSON__.treeView.content.treeview_lcn'),
          },
          {
            default: W(() => [
              B(
                s,
                {
                  ref: 'toggleSwitch',
                  modelValue: i.treeview_lcn,
                  'onUpdate:modelValue': e[2] || (e[2] = (v) => (i.treeview_lcn = v)),
                },
                null,
                8,
                ['modelValue'],
              ),
            ]),
            _: 1,
          },
          8,
          ['position', 'animation', 'content'],
        ),
        B(
          o,
          {
            style: { 'margin-right': '10px' },
            ref: 'tooltipCollpase',
            position: i.tipPosition,
            animation: t.default_SF_Props.animationTooltip,
            content: t.trans.get('__JSON__.treeView.content.collapse'),
          },
          {
            default: W(() => [
              A('div', Mp, [
                A('span', {
                  class: 'text-white sf-icon-full-screen-collapse',
                  style: {
                    width: '15px',
                    height: '15px',
                  },
                  onClick: e[3] || (e[3] = (...v) => a.closeAllTreeview && a.closeAllTreeview(...v)),
                  id: 'closeAllTreeview',
                }),
              ]),
            ]),
            _: 1,
          },
          8,
          ['position', 'animation', 'content'],
        ),
        B(
          o,
          {
            ref: 'tooltipRefresh',
            position: i.tipPosition,
            animation: t.default_SF_Props.animationTooltip,
            content: t.trans.get('__JSON__.main.grid.toolbar.refresh'),
          },
          {
            default: W(() => [
              A(
                'div',
                {
                  class: ir({ rotateIcon: i.isLoadingTree || i.hasBackgroundAction }),
                  style: {
                    width: '15px',
                    height: '15px',
                  },
                },
                [
                  A(
                    'span',
                    {
                      class: ir(['text-white sf-icon-sync---02', { 'is-loading': i.isLoadingTree }]),
                      style: {
                        width: '15px',
                        height: '15px',
                        display: 'block',
                      },
                      onClick: e[4] || (e[4] = (...v) => a.refreshTreeviewButton && a.refreshTreeviewButton(...v)),
                    },
                    null,
                    2,
                  ),
                ],
                2,
              ),
            ]),
            _: 1,
          },
          8,
          ['position', 'animation', 'content'],
        ),
      ]),
    ]),
    B(
      l,
      {
        id: 'treeview',
        class: 'treeviewNode',
        ref: 'treeviews',
        allowDragAndDrop: t.can('update', 'treeview'),
        allowEditing: true,
        allowMultiSelection: true,
        enablePersistence: false,
        fields: i.fields,
        nodeClicked: a.nodeclicked,
        nodeDragStart: a.isNodeDraggable,
        nodeDragStop: a.moveTree,
        nodeEditing: a.onEdit,
        nodeSelected: a.selectNode,
        nodeExpanding: a.expandNode,
        nodeCollapsing: a.collapseNode,
      },
      {
        default: W(() => [
          B(
            c,
            {
              ref: 'treeViewMenu',
              target: '#treeview',
              beforeOpen: a.beforeOpenMenu,
              items: i.menuItems,
              select: a.selectMenu,
            },
            null,
            8,
            ['beforeOpen', 'items', 'select'],
          ),
        ]),
        _: 1,
      },
      8,
      [
        'allowDragAndDrop',
        'fields',
        'nodeClicked',
        'nodeDragStart',
        'nodeDragStop',
        'nodeEditing',
        'nodeSelected',
        'nodeExpanding',
        'nodeCollapsing',
      ],
    ),
    i.showDialog
      ? (P(),
        ge(
          f,
          {
            key: 0,
            idParent: i.idParent,
            type: i.type,
            title: i.titleModal,
            onClose: e[5] || (e[5] = (v) => (i.showDialog = false)),
          },
          null,
          8,
          ['idParent', 'type', 'title'],
        ))
      : j('', true),
    i.showModalAddEvent && t.can('create', 'events')
      ? (P(),
        ge(
          u,
          {
            key: 1,
            onClose: e[6] || (e[6] = (v) => (i.showModalAddEvent = false)),
            project_id: i.eventProject_id,
            model_type: i.eventModel_type,
            model_id: i.eventModel_id,
            model_name: i.eventModel_name,
          },
          null,
          8,
          ['project_id', 'model_type', 'model_id', 'model_name'],
        ))
      : j('', true),
    i.showModalCreateTask
      ? (P(),
        ge(
          h,
          {
            key: 2,
            onClose: e[7] || (e[7] = (v) => (i.showModalCreateTask = false)),
            object: i.objectForAddTask,
            onTaskAdded: e[8] || (e[8] = (v) => (i.showModalCreateTask = false)),
          },
          null,
          8,
          ['object'],
        ))
      : j('', true),
    i.showModalSelectAsset
      ? (P(),
        ge(
          d,
          {
            key: 3,
            onClose: e[9] || (e[9] = (v) => (i.showModalSelectAsset = false)),
            onSelectData: a.assetSelected,
            gridUrl: 'api/dynamicRequests/assets/label/modal',
            supplementaryParamsUrl: { assetIdToReplace: this.assetNodeToReplace.nodable_id },
            numberMax: 1,
            header: t.trans.get('__JSON__.docsheet.content.selectAsset'),
            promptWidth: '1000px',
          },
          null,
          8,
          ['onSelectData', 'supplementaryParamsUrl', 'header'],
        ))
      : j('', true),
    i.showSelectStock
      ? (P(),
        ge(
          p,
          {
            key: 4,
            'type-stock': i.typeStock,
            onClose: e[10] || (e[10] = (v) => (i.showSelectStock = false)),
            onStockSelected: a.stockSelected,
          },
          null,
          8,
          ['type-stock', 'onStockSelected'],
        ))
      : j('', true),
  ]);
}
const Bp = rt(Np, [
  ['render', kp],
  ['__scopeId', 'data-v-2e444d76'],
]);
const Lp = {
  mixins: [gi],
  components: {
    Treeviews: Bp,
    mainRoute: W0,
    SideBarRight: bp,
    ModalShowObjectGrid: q0,
    MainCarousel: rc,
    panelRight: gf,
    componentHeader: H0,
    VueResizable: ps,
    UploadFile: lo,
  },
  data: function () {
    return {
      counter: 0,
      placeholder: this.trans.get('__JSON__.menu.search'),
      searchMenuHeight: '700px',
      showMenu: true,
      refObjet: '',
      typeObject: '',
      panelDroite: false,
      showUpload: false,
      allowed: '',
      width: '220px',
      mediaQuery: '(min-width: 1000px)',
      target: '.main-content',
      dockSize: '52px',
      enableDock: true,
      menuFields: {
        text: ['text'],
        children: ['items'],
      },
      position: {
        X: 'Center',
        Y: 'Top',
      },
      toastType: 'e-toast-danger',
      fields: {
        dataSource: this.menuItems,
        iconCss: 'iconCss',
        value: 'to',
        text: 'text',
        child: 'items',
        to: 'to',
      },
      objectDatas: [],
      showObjectGrid: false,
    };
  },
  watch: {
    menuItems: {
      immediate: true,
      handler(t) {
        if (this.$refs.mainmenubar) {
          this.$refs.mainmenubar.close();
        }
        this.fields = {
          dataSource: this.menuItems,
          iconCss: 'iconCss',
          value: 'to',
          text: 'text',
          child: 'items',
          to: 'to',
        };
      },
    },
    panelLogsIndex(t) {
      this.openPanel(t);
    },
  },
  computed: {
    menuItems() {
      let t = [];
      if (this.can('show', 'analytics')) {
        t.push({
          text: this.trans.get('__JSON__.menu.dashboard'),
          iconCss: 'centerMainMenuIcon sf-icon-chart---04 icon',
          to: 'dashboard',
        });
      }
      let e = [];
      if (this.can('show', 'projects')) {
        e.push({
          text: this.trans.get('__JSON__.menu.projects'),
          iconCss: 'sf-icon-custom-project',
          to: 'projectGrid',
        });
      }
      if (this.can('show', 'nodes')) {
        e.push({
          text: this.trans.get('__JSON__.menu.nodes'),
          iconCss: 'sf-icon-graph-diagram',
          to: 'nodeGrid',
        });
      }
      if (this.can('show', 'pce')) {
        e.push({
          text: this.trans.get('__JSON__.menu.pce'),
          iconCss: 'sf-icon-web-page-',
          to: 'pceGrid',
        });
      }
      if (this.can('show', 'pcp')) {
        e.push({
          text: this.trans.get('__JSON__.menu.pcp'),
          iconCss: 'sf-icon-graph-diagram',
          to: 'pcpGrid',
        });
      }
      if (this.can('show', 'exports')) {
        e.push({
          text: this.trans.get('__JSON__.menu.exports'),
          iconCss: 'sf-icon-document-download',
          to: 'exportGrid',
        });
      }
      if (e.length) {
        t.push({
          text: this.trans.get('__JSON__.menu.projects'),
          iconCss: 'centerMainMenuIcon sf-icon-custom-project',
          to: 'Project',
          items: e,
        });
      }
      let r = [];
      if (this.can('show', 'events')) {
        r.push({
          text: this.trans.get('__JSON__.menu.events'),
          iconCss: 'sf-icon-thunder-wf',
          to: 'maintenanceEventsGrid',
        });
      }
      if (this.can('show', 'tasks')) {
        r.push({
          text: this.trans.get('__JSON__.menu.tasks'),
          iconCss: 'sf-icon-tasks',
          to: 'maintenanceTasksGrid',
        });
      }
      if (this.can('show', 'pois')) {
        r.push({
          text: this.trans.get('__JSON__.menu.pois'),
          iconCss: 'sf-icon-calendar-favorite-wf',
          to: 'poisGrid',
        });
      }
      if (this.can('show', 'instructions')) {
        r.push({
          text: this.trans.get('__JSON__.menu.instructions'),
          iconCss: 'sf-icon-clipboard1-wf',
          to: 'instructionsGrid',
        });
      }
      if (this.can('show', 'maintenancePlans')) {
        r.push({
          text: this.trans.get('__JSON__.menu.maintenancePlans'),
          iconCss: 'sf-icon-check-list-wf',
          to: 'maintenancePlansGrid',
        });
      }
      if (this.can('show', 'plannings')) {
        r.push({
          text: this.trans.get('__JSON__.menu.plannings'),
          iconCss: 'sf-icon-table',
          to: 'planningsGrid',
        });
      }
      if (this.can('show gantt', 'plannings')) {
        r.push({
          text: this.trans.get('__JSON__.menu.gantt'),
          iconCss: 'sf-icon-gantt-wf',
          to: 'planningsGantt',
        });
      }
      if (this.can('show', 'signals')) {
        r.push({
          text: this.trans.get('__JSON__.menu.signals'),
          iconCss: 'sf-icon-cable-02-wf',
          to: 'signalsGrid',
        });
      }
      if (r.length) {
        t.push({
          text: this.trans.get('__JSON__.menu.maintenance'),
          iconCss: 'centerMainMenuIcon sf-icon-wrench-wf',
          to: 'Maintenance',
          items: r,
        });
      }
      let n = [];
      if (this.can('show', 'events')) {
        n.push({
          text: this.trans.get('__JSON__.menu.events'),
          iconCss: 'sf-icon-thunder-wf',
          to: 'documentationEventsGrid',
        });
      }
      if (this.can('show', 'tasks')) {
        n.push({
          text: this.trans.get('__JSON__.menu.tasks'),
          iconCss: 'sf-icon-tasks',
          to: 'documentationTasksGrid',
        });
      }
      if (this.can('show', 'docsheets')) {
        n.push({
          text: this.trans.get('__JSON__.menu.docsheets'),
          iconCss: 'sf-icon-layer-13-wf',
          to: 'docsheetGrid',
        });
      }
      if (this.can('show', 'files')) {
        n.push({
          text: this.trans.get('__JSON__.menu.files'),
          iconCss: 'sf-icon-document-wf',
          to: 'fileGrid',
        });
      }
      if (this.can('show', 'patterns')) {
        n.push({
          text: this.trans.get('__JSON__.menu.patterns'),
          iconCss: 'sf-icon-source-code-wf',
          to: 'patternGridDoc',
        });
      }
      if (this.can('show', 'docreviews')) {
        n.push({
          text: this.trans.get('__JSON__.menu.docreviews'),
          iconCss: 'sf-icon-book-02',
          to: 'docreviewsGrid',
        });
      }
      if (n.length) {
        t.push({
          text: this.trans.get('__JSON__.menu.documentation'),
          iconCss: 'centerMainMenuIcon sf-icon-documents',
          to: 'Documentation',
          items: n,
        });
      }
      let i = [];
      if (this.can('show', 'tags')) {
        i.push({
          text: this.trans.get('__JSON__.menu.tags'),
          iconCss: 'sf-icon-box---01',
          to: 'tagGrid',
        });
      }
      if (this.can('show', 'locations')) {
        i.push({
          text: this.trans.get('__JSON__.menu.locations'),
          iconCss: 'sf-icon-globe-wf-2',
          to: 'locationGrid',
        });
      }
      if (this.can('show', 'assets')) {
        i.push({
          text: this.trans.get('__JSON__.menu.assets'),
          iconCss: 'sf-icon-gear-01-wf',
          to: 'assetGrid',
        });
      }
      if (this.can('show', 'patterns')) {
        i.push({
          text: this.trans.get('__JSON__.menu.patterns'),
          iconCss: 'sf-icon-source-code-wf',
          to: 'patternGridEquip',
        });
      }
      if (i.length) {
        t.push({
          text: this.trans.get('__JSON__.menu.equipements'),
          iconCss: 'centerMainMenuIcon sf-icon-settings-01',
          to: 'Equipements',
          items: i,
        });
      }
      let a = [];
      if (this.can('show', 'items')) {
        a.push({
          text: this.trans.get('__JSON__.menu.items'),
          iconCss: 'sf-icon-gear',
          to: 'itemGrid',
        });
      }
      if (this.can('show', 'stocks')) {
        a.push({
          text: this.trans.get('__JSON__.menu.stocks'),
          iconCss: 'sf-icon-database-wf',
          to: 'stockGrid',
        });
      }
      if (this.can('show', 'movements')) {
        a.push({
          text: this.trans.get('__JSON__.menu.movements'),
          iconCss: 'sf-icon-skew-wf',
          to: 'movementGrid',
        });
      }
      if (this.can('show', 'inventory')) {
        a.push({
          text: this.trans.get('__JSON__.menu.inventories'),
          iconCss: 'sf-icon-cupboard',
          to: 'inventoryGrid',
        });
      }
      if (this.can('show', 'purchaseRequests')) {
        a.push({
          text: this.trans.get('__JSON__.menu.purchaseRequests'),
          iconCss: 'sf-icon-voucher1-wf',
          to: 'purchaseRequestGrid',
        });
      }
      if (this.can('reception', 'purchaseRequests')) {
        a.push({
          text: this.trans.get('__JSON__.menu.receptions'),
          iconCss: 'sf-icon-parcel-wf',
          to: 'receptionGrid',
        });
      }
      if (this.can('show', 'reservations')) {
        a.push({
          text: this.trans.get('__JSON__.menu.reservations'),
          iconCss: 'sf-icon-login-01',
          to: 'reservationGrid',
        });
      }
      if (this.can('show', 'patterns')) {
        a.push({
          text: this.trans.get('__JSON__.menu.patterns'),
          iconCss: 'sf-icon-source-code-wf',
          to: 'patternGridStock',
        });
      }
      if (a.length) {
        t.push({
          text: this.trans.get('__JSON__.menu.stock'),
          iconCss: 'centerMainMenuIcon sf-icon-database-wf',
          to: 'Stock',
          items: a,
        });
      }
      let o = [];
      if (this.can('show', 'patterns')) {
        o.push({
          text: this.trans.get('__JSON__.menu.patterns'),
          iconCss: 'sf-icon-source-code-wf',
          to: 'patternGridAdmin',
        });
      }
      if (this.can('show', 'addresses')) {
        o.push({
          text: this.trans.get('__JSON__.menu.addresses'),
          iconCss: 'sf-icon-maps--04',
          to: 'addressGrid',
        });
      }
      if (this.can('show', 'batches')) {
        o.push({
          text: this.trans.get('__JSON__.menu.batches'),
          iconCss: 'sf-icon-cube-wf',
          to: 'batchGrid',
        });
      }
      if (this.can('show', 'companies')) {
        o.push({
          text: this.trans.get('__JSON__.menu.companies'),
          iconCss: 'sf-icon-building',
          to: 'companyGrid',
        });
      }
      if (this.can('show', 'services')) {
        o.push({
          text: this.trans.get('__JSON__.menu.sections'),
          iconCss: 'sf-icon-office',
          to: 'sectionGrid',
        });
      }
      if (this.can('show', 'users')) {
        o.push({
          text: this.trans.get('__JSON__.menu.users'),
          iconCss: 'sf-icon-users-wf',
          to: 'userGrid',
        });
      }
      if (this.can('show', 'roles')) {
        o.push({
          text: this.trans.get('__JSON__.menu.roles'),
          iconCss: 'sf-icon-login-01',
          to: 'roleGrid',
        });
      }
      if (this.can('show', 'sharedRequests')) {
        o.push({
          text: this.trans.get('__JSON__.menu.sharedRequests'),
          iconCss: 'sf-icon-chart---04',
          to: 'sharedRequestGrid',
        });
      }
      if (this.can('show', 'publicHoliday')) {
        o.push({
          text: this.trans.get('__JSON__.menu.calendar'),
          iconCss: 'sf-icon-calendar--01',
          to: 'calendarPublicHoliday',
        });
      }
      let s = [];
      if (this.can('show', 'values')) {
        s.push({
          text: this.trans.get('__JSON__.menu.valueLists'),
          iconCss: 'sf-icon-black-list-wf',
          to: 'valueListGrid',
        });
      }
      if (this.can('show', 'languages')) {
        s.push({
          text: this.trans.get('__JSON__.menu.languages'),
          iconCss: 'sf-icon-globe-wf',
          to: 'languageGridTranslation',
        });
      }
      if (this.can('show', 'logs')) {
        s.push({
          text: this.trans.get('__JSON__.menu.logs'),
          iconCss: 'sf-icon-document-wf',
          to: 'logGrid',
        });
      }
      if (this.can('show', 'environments')) {
        s.push({
          text: this.trans.get('__JSON__.menu.environments'),
          iconCss: 'sf-icon-ms-system-setting2-wf',
          to: 'environmentService',
        });
      }
      if (this.can('update', 'terms')) {
        s.push({
          text: this.trans.get('__JSON__.menu.terms'),
          iconCss: 'sf-icon-information-wf',
          to: 'termsOfUse',
        });
      }
      if (this.can('show', 'modules')) {
        s.push({
          text: this.trans.get('__JSON__.menu.modules'),
          iconCss: 'sf-icon-bullets---02',
          to: 'moduleGrid',
        });
      }
      if (this.mainStore.mixConfig.SHOW_APIS && this.can('show', 'environments')) {
        s.push({
          text: this.trans.get('__JSON__.menu.api_documentation'),
          iconCss: 'sf-icon-bullets---02',
          to: 'api_documentation',
        });
      }
      if (s.length) {
        o.push({
          text: this.trans.get('__JSON__.menu.settings'),
          iconCss: 'sf-icon-settings-01',
          to: 'Settings',
          items: s,
        });
      }
      if (o.length) {
        t.push({
          text: this.trans.get('__JSON__.menu.administration'),
          iconCss: 'centerMainMenuIcon sf-icon-ms-system-setting2-wf',
          to: 'Administration',
          items: o,
        });
      }
      return t;
    },
    quickAppsItems() {
      let t = [];
      this.can('show', 'quickdoc')
        ? t.push({
            text: this.trans.get('__JSON__.menu.quickdoc'),
            iconCss: 'centerMainMenuIcon sf-icon-quickdoc',
            to: 'quickdoc',
          })
        : this.can('show', 'quickdoc') ||
          t.push({
            text: this.trans.get('__JSON__.menu.quickdoc'),
            iconCss: 'centerMainMenuIcon sf-icon-quickdoc filter-gray',
            to: 'quickdocPresentation',
          });
      this.can('show', 'quickmaint')
        ? t.push({
            text: this.trans.get('__JSON__.menu.quickmaint'),
            iconCss: 'centerMainMenuIcon sf-icon-quickmaint',
            to: 'quickmaint',
          })
        : this.can('show', 'quickmaint') ||
          t.push({
            text: this.trans.get('__JSON__.menu.quickmaint'),
            iconCss: 'centerMainMenuIcon sf-icon-quickmaint filter-gray',
            to: 'quickmaintPresentation',
          });
      this.can('show', 'quickevent')
        ? t.push({
            text: this.trans.get('__JSON__.menu.quickevent'),
            iconCss: 'centerMainMenuIcon sf-icon-quickevent',
            to: 'quickevent',
          })
        : this.can('show', 'quickevent') ||
          t.push({
            text: this.trans.get('__JSON__.menu.quickevent'),
            iconCss: 'centerMainMenuIcon sf-icon-quickevent filter-gray',
            to: 'quickeventPresentation',
          });
      this.can('show', 'quickstock')
        ? t.push({
            text: this.trans.get('__JSON__.menu.quickstock'),
            iconCss: 'centerMainMenuIcon sf-icon-quickstock',
            to: 'quickstock',
          })
        : this.can('show', 'quickstock') ||
          t.push({
            text: this.trans.get('__JSON__.menu.quickstock'),
            iconCss: 'centerMainMenuIcon sf-icon-quickstock filter-gray',
            to: 'quickstockPresentation',
          });
      this.can('show', 'quicksurvey')
        ? t.push({
            text: this.trans.get('__JSON__.menu.quicksurvey'),
            iconCss: 'centerMainMenuIcon sf-icon-quicksurvey',
            to: 'quicksurvey',
          })
        : this.can('show', 'quicksurvey') ||
          t.push({
            text: this.trans.get('__JSON__.menu.quicksurvey'),
            iconCss: 'centerMainMenuIcon sf-icon-quicksurvey filter-gray',
            to: 'quicksurveyPresentation',
          });
      return t;
    },
    panelLogsIndex() {
      return this.actionLogsStore.panelLogsIndex;
    },
  },
  mounted() {
    let t = this;
    this.$router.afterEach((e, r, n) => {
      this.closePanel();
    });
    b.$on('showPanel', this.saveNewPanel);
    b.$on('closeCentralRightPanel', this.closeCentralRightPanel);
    b.$on('showUpload', this.showUploadPanel);
    b.$on('refreshUploader', this.refreshUploader);
    b.$on('openLastPanel', this.openLastPanel);
    $('#parentDropDownTreeLeftMenu > .e-input-group > .e-input-group-icon.e-ddt-icon.e-icons')
      .removeClass()
      .addClass('sf-icon-search-wf');
    $('#splitter > .e-split-bar.e-split-bar-horizontal').dblclick((e) => {
      t.$refs.splitterObj.expand(0);
    });
    b.$on('checkDeletePanel', this.checkDeletePanel);
    b.$on('checkDeletePanelMass', this.checkDeletePanelMass);
    b.$on('showModalObjectGrid', this.showModalObjectGrid);
    b.$on('goToViewer', this.goToViewer);
  },
  methods: {
    goToViewer(t) {
      this.fileGoToViewer(t);
    },
    showModalObjectGrid(t) {
      if (Array.isArray(t) && t.length) {
        this.objectDatas = t;
        this.showObjectGrid = true;
      }
    },
    closeModalObjectGrid() {
      this.showObjectGrid = false;
    },
    openPanel(t) {
      if (this.actionLogsStore.panelLogs.length > t) {
        let e = this.actionLogsStore.panelLogs[t];
        this.closePanel().then((r) => {
          b.$emit('hideSidebar');
          this.panelDroite = this.actionLogsStore.panelLogs[t].panelDroite;
          this.refObjet = this.actionLogsStore.panelLogs[t].refObjet;
          this.typeObject = this.actionLogsStore.panelLogs[t].typeObject;
          this.allowed = this.actionLogsStore.panelLogs[t].allowed;
        });
      }
    },
    saveNewPanel(t) {
      t.panelDroite ? this.actionLogsStore.changePanelLogs(t) : this.closePanel(t.directClose);
    },
    showUploadPanel(t) {
      this.showUpload = t;
    },
    refreshUploader() {
      this.counter += 1;
    },
    openLastPanel() {
      if (this.actionLogsStore.panelLogs.length) {
        let t = this.actionLogsStore.panelLogs[this.actionLogsStore.panelLogs.length - 1];
        this.closePanel().then((e) => {
          b.$emit('hideSidebar');
          this.actionLogsStore.panelLogs.length !== this.actionLogsStore.panelLogsIndex + 1
            ? this.actionLogsStore.updatePanelLogsIndex(this.actionLogsStore.panelLogs.length - 1)
            : ((this.panelDroite =
                this.actionLogsStore.panelLogs[this.actionLogsStore.panelLogs.length - 1].panelDroite),
              (this.refObjet = this.actionLogsStore.panelLogs[this.actionLogsStore.panelLogs.length - 1].refObjet),
              (this.typeObject = this.actionLogsStore.panelLogs[this.actionLogsStore.panelLogs.length - 1].typeObject),
              (this.allowed = this.actionLogsStore.panelLogs[this.actionLogsStore.panelLogs.length - 1].allowed));
        });
      }
    },
    checkDeletePanelMass(t) {
      if (this.panelDroite && t.typeObject == this.typeObject && t.refObject.includes(this.refObjet)) {
        this.closePanel();
      }
    },
    closePanel(t = false) {
      let e = this;
      if (!this.mainStore.isDoingQuickUpload)
        return new Promise(function (r, n) {
          e.panelDroite
            ? t
              ? ((e.panelDroite = false),
                e.$nextTick(() => {
                  r(true);
                }))
              : (b.$once('finishCloseRightPanel', (i) => {
                  if (!i) {
                    e.panelDroite = false;
                    e.$nextTick(() => {
                      r(true);
                    });
                  }
                }),
                b.$emit('beforeClosingRightPanel'))
            : r(true);
        });
    },
    closeCentralRightPanel(t) {
      t.type === 'rightPanelViewer'
        ? (b.$once('finishCloseCentralPanel', (e) => {
            if (t.uuid === e) {
              this.centralPanelsStore.removeCentralPanel(t.uuid);
            }
          }),
          b.$emit('beforeClosingRightPanel', t.uuid))
        : this.centralPanelsStore.removeCentralPanel(t.uuid);
    },
    checkDeletePanel(t) {
      if (this.panelDroite && t.typeObject == this.typeObject && t.refObject == this.refObjet) {
        this.closePanel();
      }
    },
    onchange(t) {
      if (t.value && t.value.length) {
        this.$refs.dropDownTreeLeftMenu.clear();
        let e = t.value[0];
        if (
          !['Administration', 'Equipements', 'Documentation', 'Settings', 'Project', 'Stock', 'Maintenance'].includes(
            t.value[0],
          )
        ) {
          let r = { name: t.value[0] };
          this.actionLogsStore.changeGridLogs(r);
          this.$router.push(r);
        }
      }
    },
    onResizeStop() {
      b.$emit('needResizing');
    },
    onChangeSize() {
      b.$emit('needResizing');
    },
    toggleClick: function () {
      this.$refs.sidebarInstance.toggle();
      this.showMenu = !this.showMenu;
    },
    newTabClick(t) {
      let e = t.item.to;
      switch (true) {
        case ['quickdoc'].includes(t.item.to):
          window.open(this.mainStore.mixConfig.MIX_APP_URL + '/quickdoc/');
          return;
        case ['quickmaint'].includes(t.item.to):
          window.open(this.mainStore.mixConfig.MIX_APP_URL + '/quickmaint/');
          return;
        case ['quicksurvey'].includes(t.item.to):
          window.open(this.mainStore.mixConfig.MIX_APP_URL + '/quicksurvey/');
          return;
        case ['quickevent'].includes(t.item.to):
          return;
        case ['quickstock'].includes(t.item.to):
          return;
        case ['quickdocPresentation'].includes(t.item.to):
          zt.alert({
            title: this.trans.get('__JSON__.main.content.infoQuickDocTitle'),
            content: this.trans.get('__JSON__.main.content.infoQuickDoc'),
            okButton: {
              text: this.trans.get('__JSON__.main.modal.button.ok'),
              click: this.okClick,
              cssClass: 'e-info',
            },
            closeOnEscape: true,
            animationSettings: { effect: 'Zoom' },
          });
          return;
        case ['quickmaintPresentation'].includes(t.item.to):
          return;
        case ['quickeventPresentation'].includes(t.item.to):
          return;
        case ['quickstockPresentation'].includes(t.item.to):
          return;
        case ['quicksurveyPresentation'].includes(t.item.to):
          return;
        case ['api_documentation'].includes(t.item.to):
          window.open(this.mainStore.mixConfig.MIX_APP_URL + '/api_documentation');
          return;
      }
      if (
        !['Administration', 'Equipements', 'Documentation', 'Settings', 'Project', 'Stock', 'Maintenance'].includes(
          t.item.to,
        )
      ) {
        this.cartStore.removeCartData();
        let r = { name: t.item.to };
        this.actionLogsStore.changeGridLogs(r);
        this.$router.push(r);
      }
    },
  },
  beforeUnmount() {
    b.$off('showPanel', this.saveNewPanel);
    b.$off('closeCentralRightPanel', this.closeCentralRightPanel);
    b.$off('showUpload', this.showUploadPanel);
    b.$off('refreshUploader', this.refreshUploader);
    b.$off('openLastPanel', this.openLastPanel);
    b.$off('checkDeletePanel', this.checkDeletePanel);
    b.$off('checkDeletePanelMass', this.checkDeletePanelMass);
    b.$off('showModalObjectGrid', this.showModalObjectGrid);
    b.$off('goToViewer', this.goToViewer);
  },
  unmounted() {
    if (this.$children) {
      this.$children.forEach((t) => {
        t.$children.forEach((e) => {
          e.$destroy();
        });
      });
    }
  },
};
const Fp = { class: 'control-section' };
const Up = { id: 'wrapper' };
const Vp = {
  id: 'mainComponentContent',
  class: 'col-lg-12 col-sm-12 col-md-12 p-0 position-fixed',
};
const Gp = { class: 'col-lg-12 col-sm-12 col-md-12 p-0' };
const Hp = {
  id: 'sideMenuContainer',
  class: 'container',
};
const Xp = { class: 'row mb-2 ms-2 me-2' };
const zp = {
  id: 'parentDropDownTreeLeftMenu',
  class: 'col-12 mt-2',
};
const jp = { class: 'row mb-2 me-1' };
const Wp = {
  class: 'foot text-white pt-1',
  style: {
    position: 'fixed',
    'z-index': '1',
    bottom: '65px',
  },
};
const $p = { key: 0 };
const Jp = {
  class: 'main-content',
  id: 'maintext',
};
const qp = { class: 'content' };
const Yp = {
  class: 'page-wrapper',
  style: { 'margin-left': '-1px' },
};
const Kp = { class: 'row row-wrapper' };
const Zp = { class: 'col control-section default-splitter' };
function Qp(t, e, r, n, i, a) {
  const o = L('ejs-toast');
  const s = L('modal-show-object-grid');
  const c = L('componentHeader');
  const l = L('ejs-dropdowntree');
  const f = L('ejs-menu');
  const u = L('ejs-sidebar');
  const h = L('UploadFile');
  const d = L('e-pane');
  const p = L('e-panes');
  const v = L('ejs-splitter');
  const g = L('treeviews');
  const _ = L('main-route');
  const y = L('panelRight');
  const x = L('ejs-tooltip');
  const w = L('side-bar-right');
  P();
  return G('div', Fp, [
    B(
      o,
      {
        ref: 'notif_toast',
        id: 'notif_toast',
        title: 'Error',
        position: t.position,
        cssClass: t.toastType,
      },
      null,
      8,
      ['position', 'cssClass'],
    ),
    t.showObjectGrid
      ? (P(),
        ge(
          s,
          {
            key: 0,
            contentDataGrid: t.objectDatas,
            onClose: a.closeModalObjectGrid,
          },
          null,
          8,
          ['contentDataGrid', 'onClose'],
        ))
      : j('', true),
    A('div', Up, [
      A('div', Vp, [
        A('div', Gp, [
          B(c),
          B(
            u,
            {
              id: 'sidebar-menu',
              width: t.width,
              mediaQuery: t.mediaQuery,
              target: t.target,
              dockSize: t.dockSize,
              enableDock: t.enableDock,
              enableGestures: false,
              ref: 'sidebarInstance',
              onChange: a.onChangeSize,
            },
            {
              default: W(() => [
                A(
                  'div',
                  {
                    id: 'sideMenuClickAble',
                    class: 'main-menu mt-0',
                    onDblclick: e[2] || (e[2] = (...C) => a.toggleClick && a.toggleClick(...C)),
                  },
                  [
                    A('div', Hp, [
                      A('div', Xp, [
                        A('div', zp, [
                          B(
                            l,
                            {
                              id: 'dropDownTreeLeftMenu',
                              ref: 'dropDownTreeLeftMenu',
                              fields: t.fields,
                              changeOnBlur: false,
                              onChange: a.onchange,
                              allowFiltering: true,
                              filterType: 'Contains',
                              mode: 'Delimiter',
                              placeholder: t.placeholder,
                              popupHeight: t.searchMenuHeight,
                              popupWidth: 'fit-content',
                              class: 'border-white',
                            },
                            null,
                            8,
                            ['fields', 'onChange', 'placeholder', 'popupHeight'],
                          ),
                        ]),
                      ]),
                      A('div', jp, [
                        B(
                          f,
                          {
                            id: 'main-menubar',
                            items: a.menuItems,
                            fields: t.menuFields,
                            ref: 'mainmenubar',
                            orientation: 'Vertical',
                            select: a.newTabClick,
                            enableScrolling: false,
                          },
                          null,
                          8,
                          ['items', 'fields', 'select'],
                        ),
                      ]),
                    ]),
                    A('div', Wp, [
                      a.quickAppsItems.length
                        ? (P(),
                          G('div', $p, [
                            B(
                              f,
                              {
                                id: 'quickapps-menubar',
                                items: a.quickAppsItems,
                                fields: t.menuFields,
                                ref: 'quickappsmenubar',
                                orientation: 'Vertical',
                                select: a.newTabClick,
                                enableScrolling: false,
                              },
                              null,
                              8,
                              ['items', 'fields', 'select'],
                            ),
                          ]))
                        : j('', true),
                      t.showMenu
                        ? j('', true)
                        : (P(),
                          G('div', {
                            key: 1,
                            id: 'arrowRight',
                            style: { 'font-size': '15px' },
                            class: 'icon-menu sf-icon-arrowhead-right-01 icon list mt-3',
                            onClick: e[0] || (e[0] = (...C) => a.toggleClick && a.toggleClick(...C)),
                          })),
                      t.showMenu
                        ? (P(),
                          G('div', {
                            key: 2,
                            id: 'arrowLeft',
                            style: { 'font-size': '15px' },
                            class: 'sf-icon-arrowhead-left-01 icon-menu icon list mt-3',
                            onClick: e[1] || (e[1] = (...C) => a.toggleClick && a.toggleClick(...C)),
                          }))
                        : j('', true),
                    ]),
                    e[4] || (e[4] = A('br', { class: 'text-white' }, null, -1)),
                  ],
                  32,
                ),
              ]),
              _: 1,
            },
            8,
            ['width', 'mediaQuery', 'target', 'dockSize', 'enableDock', 'onChange'],
          ),
          A('div', Jp, [
            A('div', qp, [
              A('div', Yp, [
                A('div', Kp, [
                  A('div', Zp, [
                    (P(),
                    G('div', { key: t.counter }, [
                      (P(), ge(qs, null, [Ue(B(h, null, null, 512), [[at, t.showUpload]])], 1024)),
                    ])),
                    Ue(
                      B(
                        v,
                        {
                          id: 'splitter',
                          ref: 'splitterObj',
                          class: 'splitter',
                          separatorSize: '6',
                          onResizeStop: a.onResizeStop,
                        },
                        {
                          default: W(() => [
                            B(
                              p,
                              { class: 'p-0' },
                              {
                                default: W(() => [
                                  t.can('show', 'nodes')
                                    ? (P(),
                                      ge(d, {
                                        key: 0,
                                        collapsible: true,
                                        content: '#treeviewSlot',
                                        size: '15%',
                                        max: '60%',
                                      }))
                                    : j('', true),
                                  B(d, {
                                    size: '85%',
                                    content: '#mainRouteSlot',
                                    cssClass: 'panelResizer',
                                  }),
                                ]),
                                _: 1,
                              },
                            ),
                          ]),
                          _: 1,
                        },
                        8,
                        ['onResizeStop'],
                      ),
                      [[at, !t.showUpload]],
                    ),
                    t.can('show', 'nodes')
                      ? (P(),
                        ge(g, {
                          key: 0,
                          id: 'treeviewSlot',
                        }))
                      : j('', true),
                    B(_, { id: 'mainRouteSlot' }),
                  ]),
                ]),
              ]),
            ]),
            t.panelDroite
              ? (P(),
                ge(
                  y,
                  {
                    key: 0,
                    refObjet: t.refObjet,
                    typeObject: t.typeObject,
                    allowed: t.allowed,
                  },
                  null,
                  8,
                  ['refObjet', 'typeObject', 'allowed'],
                ))
              : j('', true),
            this.actionLogsStore.panelLogs.length > 0 && !t.panelDroite
              ? (P(),
                ge(
                  x,
                  {
                    key: 1,
                    class: 'panelReopen',
                    animation: t.default_SF_Props.animationTooltip,
                    content: t.trans.get('__JSON__.main.modal.button.reopenPanel'),
                  },
                  {
                    default: W(() => [
                      A('button', {
                        onClick: e[3] || (e[3] = (...C) => a.openLastPanel && a.openLastPanel(...C)),
                        class: 'panelReopen buttonHover buttonArrowLeft sf-icon-arrow-left---01',
                      }),
                    ]),
                    _: 1,
                  },
                  8,
                  ['animation', 'content'],
                ))
              : j('', true),
          ]),
          B(w),
        ]),
      ]),
    ]),
  ]);
}
const Ag = rt(Lp, [['render', Qp]]);
export { Ag as default };
